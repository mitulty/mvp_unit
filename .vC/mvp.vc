// Virtual circuit produced from Aa description by Aa2VC 
// $pipe  in_data : $uint<32>  $depth 3 
// can point into 
// in scope  top-level
$pipe [in_data] 32 $depth 3 
// $pipe  out_data : $uint<32>  $depth 3 
// can point into 
// in scope  top-level
$pipe [out_data] 32 $depth 3 
// load store constants for object A_MEM
$constant $W[A_MEM_base_address] : $int<8> := _b00000000
// load store constants for object B_MEM
$constant $W[B_MEM_base_address] : $int<8> := _b00000000
// load store constants for object C_MEM
$constant $W[C_MEM_base_address] : $int<8> := _b00000000
// load store constants for object D_MEM
$constant $W[D_MEM_base_address] : $int<8> := _b00000000
$constant $W[ONE_2] : $int<2> := _b01// 1
$constant $W[THREE_2] : $int<2> := _b11// 3
$constant $W[TWO_2] : $int<2> := _b10// 2
$constant $W[ZERO_2] : $int<2> := _b00// 0
// load store constants for object x0
$constant $W[x0_base_address] : $int<3> := _b000
// load store constants for object x1
$constant $W[x1_base_address] : $int<3> := _b000
// load store constants for object x2
$constant $W[x2_base_address] : $int<3> := _b000
// load store constants for object x3
$constant $W[x3_base_address] : $int<3> := _b000
$memoryspace [memory_space_0] 
{
  $capacity 256
  $datawidth 32
  $addrwidth 8
  $maxaccesswidth 32
  // $storage  A_MEM : $array[32][8] $of $uint<32> // memory space index = 0  base address = 0  word size = 32
  // can point into 
  // in scope  top-level
  $object [A_MEM] : $array[256] $of $int<32>
}
$memoryspace [memory_space_1] 
{
  $capacity 256
  $datawidth 32
  $addrwidth 8
  $maxaccesswidth 32
  // $storage  B_MEM : $array[32][8] $of $uint<32> // memory space index = 1  base address = 0  word size = 32
  // can point into 
  // in scope  top-level
  $object [B_MEM] : $array[256] $of $int<32>
}
$memoryspace [memory_space_2] 
{
  $capacity 256
  $datawidth 32
  $addrwidth 8
  $maxaccesswidth 32
  // $storage  C_MEM : $array[32][8] $of $uint<32> // memory space index = 2  base address = 0  word size = 32
  // can point into 
  // in scope  top-level
  $object [C_MEM] : $array[256] $of $int<32>
}
$memoryspace [memory_space_3] 
{
  $capacity 256
  $datawidth 32
  $addrwidth 8
  $maxaccesswidth 32
  // $storage  D_MEM : $array[32][8] $of $uint<32> // memory space index = 3  base address = 0  word size = 32
  // can point into 
  // in scope  top-level
  $object [D_MEM] : $array[256] $of $int<32>
}
$memoryspace [memory_space_4] 
{
  $capacity 8
  $datawidth 32
  $addrwidth 3
  $maxaccesswidth 32
  // $storage  x0 : $array[8] $of $uint<32> // memory space index = 4  base address = 0  word size = 32
  // can point into 
  // in scope  top-level
  $object [x0] : $array[8] $of $int<32>
}
$memoryspace [memory_space_5] 
{
  $capacity 8
  $datawidth 32
  $addrwidth 3
  $maxaccesswidth 32
  // $storage  x1 : $array[8] $of $uint<32> // memory space index = 5  base address = 0  word size = 32
  // can point into 
  // in scope  top-level
  $object [x1] : $array[8] $of $int<32>
}
$memoryspace [memory_space_6] 
{
  $capacity 8
  $datawidth 32
  $addrwidth 3
  $maxaccesswidth 32
  // $storage  x2 : $array[8] $of $uint<32> // memory space index = 6  base address = 0  word size = 32
  // can point into 
  // in scope  top-level
  $object [x2] : $array[8] $of $int<32>
}
$memoryspace [memory_space_7] 
{
  $capacity 8
  $datawidth 32
  $addrwidth 3
  $maxaccesswidth 32
  // $storage  x3 : $array[8] $of $uint<32> // memory space index = 7  base address = 0  word size = 32
  // can point into 
  // in scope  top-level
  $object [x3] : $array[8] $of $int<32>
}
$module [DOTP] 
{
  $in R:$int<8>
  // can point into  foreign( $void )
  $out result:$int<32>
  // can point into  foreign( $void )
  // pipe-declarations for block %DOTP
  //  file .Aa/mvp.opt.aa, line 25
  // pipe-declarations for block %DOTP%mmloop
  //  file .Aa/mvp.opt.aa, line 30
  // memory-space 7 is read from.
  // memory-space 6 is read from.
  // memory-space 5 is read from.
  // memory-space 4 is read from.
  // memory-space 3 is read from.
  // memory-space 2 is read from.
  // memory-space 1 is read from.
  // memory-space 0 is read from.
  // there are no memory spaces local to this module.
  $CP 
  {
    // begin control-path 
    <>[branch_block_stmt_30] // Branch Block  file .Aa/mvp.opt.aa, line 30
    {
      $P [branch_block_stmt_30__entry__]
      branch_block_stmt_30__entry__ <-| ($entry)
      $P [branch_block_stmt_30__exit__]
      branch_block_stmt_30__exit__ |-> ($exit)
      $P [do_while_stmt_31__entry__] 
      $P [do_while_stmt_31__exit__] 
      // do-while-statement  
      //  file .Aa/mvp.opt.aa, line 32
      <o> [do_while_stmt_31]  $depth 15 $buffering 1 
      {
        $P[do_while_stmt_31__entry__] 
        $P[do_while_stmt_31__exit__] 
        $P[loop_back] 
        $P[condition_done] 
        $P[loop_body_done] 
        $pipeline [do_while_stmt_31_loop_body] 
        {
          // Pipelined!
          $T[back_edge_to_loop_body] 
          $T[first_time_through_loop_body] 
          $T[loop_body_start] 
          $T[condition_evaluated] 
          $transitionmerge [entry_tmerge] (back_edge_to_loop_body first_time_through_loop_body) (loop_body_start)
          $entry <-& (loop_body_start)
          $T[aggregated_phi_sample_req] 
          $T[aggregated_phi_sample_ack] 
          $T[aggregated_phi_update_req] 
          $T[aggregated_phi_update_ack] 
          // do not loop-back unless all phi's have used up their triggering tokens.
          condition_evaluated <-& (aggregated_phi_update_ack)
          aggregated_phi_sample_req o<-& (aggregated_phi_update_ack 0)
          // start:  PHI statement phi_stmt_33
          // 			$phi C := 			  ($bitcast ($uint<8>) 0  ) $on   $entry 			  nC $on   $loopback 
          // type of target is $uint<8>
          $T[phi_stmt_33_sample_start_] 
          $T[phi_stmt_33_sample_completed_] 
          $T[phi_stmt_33_update_start_] 
          $T[phi_stmt_33_update_completed_] 
          $T[phi_stmt_33_sample_start__ps] 
          phi_stmt_33_sample_start__ps <-& (aggregated_phi_sample_req)
          $T[phi_stmt_33_sample_completed__ps] 
          phi_stmt_33_sample_completed__ps &-> (aggregated_phi_sample_ack)
          $T[phi_stmt_33_update_start__ps] 
          phi_stmt_33_update_start__ps <-& (aggregated_phi_update_req)
          $T[phi_stmt_33_update_completed__ps] 
          phi_stmt_33_update_completed_ <-& (phi_stmt_33_update_completed__ps)
          aggregated_phi_sample_req <-& (phi_stmt_33_sample_start_)
          aggregated_phi_sample_ack &-> (phi_stmt_33_sample_completed_)
          aggregated_phi_update_req <-& (phi_stmt_33_update_start_)
          $T[phi_stmt_33_loopback_trigger] 
          phi_stmt_33_loopback_trigger <-& (back_edge_to_loop_body)
          $T[phi_stmt_33_loopback_sample_req] 
          $T[phi_stmt_33_loopback_sample_req_ps] 
          phi_stmt_33_loopback_sample_req <-& (phi_stmt_33_loopback_sample_req_ps)
          phi_stmt_33_loopback_sample_req &-> ($null)
          $T[phi_stmt_33_entry_trigger] 
          phi_stmt_33_entry_trigger <-& (first_time_through_loop_body)
          $T[phi_stmt_33_entry_sample_req] 
          $T[phi_stmt_33_entry_sample_req_ps] 
          phi_stmt_33_entry_sample_req <-& (phi_stmt_33_entry_sample_req_ps)
          phi_stmt_33_entry_sample_req &-> ($null)
          phi_stmt_33_update_start_ o<-& (phi_stmt_33_update_completed_ 0)
          phi_stmt_33_sample_start_ o<-& (phi_stmt_33_sample_completed_ 1)
          $T[phi_stmt_33_merged_reqs] 
          $T[phi_stmt_33_phi_mux_ack] 
          $T[phi_stmt_33_phi_mux_ack_ps] 
          phi_stmt_33_phi_mux_ack_ps <-& (phi_stmt_33_phi_mux_ack)
          aggregated_phi_update_ack <-& (phi_stmt_33_update_completed_)
          $T[type_cast_36_sample_start__ps] 
          $T[type_cast_36_sample_completed__ps] 
          $T[type_cast_36_update_start__ps] 
          $T[type_cast_36_update_completed__ps] 
          // dummies for constant expression source for phi
          $T[type_cast_36_sample_start_] 
          $T[type_cast_36_sample_completed_] 
          type_cast_36_sample_completed_ <-& (type_cast_36_sample_start_)
          $T[type_cast_36_update_start_] 
          $T [type_cast_36_update_completed_] $delay 
          type_cast_36_update_completed_ <-& (type_cast_36_update_start_)
          // Phi start dependency for implicit/constant alternative.
          type_cast_36_sample_start_ <-& (type_cast_36_sample_start__ps)
          type_cast_36_update_start_ <-& (type_cast_36_update_start__ps)
          // Phi complete dependency.
          type_cast_36_sample_completed__ps <-& (type_cast_36_sample_completed_)
          type_cast_36_update_completed__ps <-& (type_cast_36_update_completed_)
          $T[R_nC_37_sample_start__ps] 
          $T[R_nC_37_sample_completed__ps] 
          $T[R_nC_37_update_start__ps] 
          $T[R_nC_37_update_completed__ps] 
          // interlock for implicit-variable-ref/signal-read in Phi alternative 1
          $T[R_nC_37_sample_start_] 
          $T[R_nC_37_sample_completed_] 
          $T[R_nC_37_update_start_] 
          $T[R_nC_37_update_completed_] 
          ;;[R_nC_37_Sample] 
          {
            $T [req] $T [ack] // interlock-sample.
          }
          R_nC_37_sample_start_ &-> (R_nC_37_Sample)
          R_nC_37_sample_completed_ <-& (R_nC_37_Sample)
          ;;[R_nC_37_Update] 
          {
            $T [req] $T [ack] // interlock-update.
          }
          R_nC_37_update_start_ &-> (R_nC_37_Update)
          R_nC_37_update_completed_ <-& (R_nC_37_Update)
          // RAW reenables for nC
          // Phi start dependency for implicit/constant alternative.
          R_nC_37_sample_start_ <-& (R_nC_37_sample_start__ps)
          R_nC_37_update_start_ <-& (R_nC_37_update_start__ps)
          // Phi complete dependency.
          R_nC_37_sample_completed__ps <-& (R_nC_37_sample_completed_)
          R_nC_37_update_completed__ps <-& (R_nC_37_update_completed_)
          $phisequencer [ phi_stmt_33_phi_seq] : 
          phi_stmt_33_entry_trigger type_cast_36_sample_start__ps type_cast_36_sample_completed__ps type_cast_36_update_start__ps type_cast_36_update_completed__ps phi_stmt_33_loopback_trigger R_nC_37_sample_start__ps R_nC_37_sample_completed__ps R_nC_37_update_start__ps R_nC_37_update_completed__ps :
          phi_stmt_33_sample_start__ps phi_stmt_33_sample_completed__ps phi_stmt_33_update_start__ps phi_stmt_33_update_completed__ps :
          phi_stmt_33_entry_sample_req_ps phi_stmt_33_loopback_sample_req_ps : 
          phi_stmt_33_phi_mux_ack_ps
          // done: PHI Statement phi_stmt_33
          // start:  PHI statement phi_stmt_38
          // 			$phi Index := 			  ($bitcast ($uint<3>) 0  ) $on   $entry 			  nIndex $on   $loopback 
          // type of target is $uint<3>
          $T[phi_stmt_38_sample_start_] 
          $T[phi_stmt_38_sample_completed_] 
          $T[phi_stmt_38_update_start_] 
          $T[phi_stmt_38_update_completed_] 
          $T[phi_stmt_38_sample_start__ps] 
          phi_stmt_38_sample_start__ps <-& (aggregated_phi_sample_req)
          $T[phi_stmt_38_sample_completed__ps] 
          phi_stmt_38_sample_completed__ps &-> (aggregated_phi_sample_ack)
          $T[phi_stmt_38_update_start__ps] 
          phi_stmt_38_update_start__ps <-& (aggregated_phi_update_req)
          $T[phi_stmt_38_update_completed__ps] 
          phi_stmt_38_update_completed_ <-& (phi_stmt_38_update_completed__ps)
          aggregated_phi_sample_req <-& (phi_stmt_38_sample_start_)
          aggregated_phi_sample_ack &-> (phi_stmt_38_sample_completed_)
          aggregated_phi_update_req <-& (phi_stmt_38_update_start_)
          $T[phi_stmt_38_loopback_trigger] 
          phi_stmt_38_loopback_trigger <-& (back_edge_to_loop_body)
          $T[phi_stmt_38_loopback_sample_req] 
          $T[phi_stmt_38_loopback_sample_req_ps] 
          phi_stmt_38_loopback_sample_req <-& (phi_stmt_38_loopback_sample_req_ps)
          phi_stmt_38_loopback_sample_req &-> ($null)
          $T[phi_stmt_38_entry_trigger] 
          phi_stmt_38_entry_trigger <-& (first_time_through_loop_body)
          $T[phi_stmt_38_entry_sample_req] 
          $T[phi_stmt_38_entry_sample_req_ps] 
          phi_stmt_38_entry_sample_req <-& (phi_stmt_38_entry_sample_req_ps)
          phi_stmt_38_entry_sample_req &-> ($null)
          phi_stmt_38_update_start_ o<-& (phi_stmt_38_update_completed_ 0)
          phi_stmt_38_sample_start_ o<-& (phi_stmt_38_sample_completed_ 1)
          $T[phi_stmt_38_merged_reqs] 
          $T[phi_stmt_38_phi_mux_ack] 
          $T[phi_stmt_38_phi_mux_ack_ps] 
          phi_stmt_38_phi_mux_ack_ps <-& (phi_stmt_38_phi_mux_ack)
          aggregated_phi_update_ack <-& (phi_stmt_38_update_completed_)
          $T[type_cast_42_sample_start__ps] 
          $T[type_cast_42_sample_completed__ps] 
          $T[type_cast_42_update_start__ps] 
          $T[type_cast_42_update_completed__ps] 
          // dummies for constant expression source for phi
          $T[type_cast_42_sample_start_] 
          $T[type_cast_42_sample_completed_] 
          type_cast_42_sample_completed_ <-& (type_cast_42_sample_start_)
          $T[type_cast_42_update_start_] 
          $T [type_cast_42_update_completed_] $delay 
          type_cast_42_update_completed_ <-& (type_cast_42_update_start_)
          // Phi start dependency for implicit/constant alternative.
          type_cast_42_sample_start_ <-& (type_cast_42_sample_start__ps)
          type_cast_42_update_start_ <-& (type_cast_42_update_start__ps)
          // Phi complete dependency.
          type_cast_42_sample_completed__ps <-& (type_cast_42_sample_completed_)
          type_cast_42_update_completed__ps <-& (type_cast_42_update_completed_)
          $T[R_nIndex_43_sample_start__ps] 
          $T[R_nIndex_43_sample_completed__ps] 
          $T[R_nIndex_43_update_start__ps] 
          $T[R_nIndex_43_update_completed__ps] 
          // interlock for implicit-variable-ref/signal-read in Phi alternative 1
          $T[R_nIndex_43_sample_start_] 
          $T[R_nIndex_43_sample_completed_] 
          $T[R_nIndex_43_update_start_] 
          $T[R_nIndex_43_update_completed_] 
          ;;[R_nIndex_43_Sample] 
          {
            $T [req] $T [ack] // interlock-sample.
          }
          R_nIndex_43_sample_start_ &-> (R_nIndex_43_Sample)
          R_nIndex_43_sample_completed_ <-& (R_nIndex_43_Sample)
          ;;[R_nIndex_43_Update] 
          {
            $T [req] $T [ack] // interlock-update.
          }
          R_nIndex_43_update_start_ &-> (R_nIndex_43_Update)
          R_nIndex_43_update_completed_ <-& (R_nIndex_43_Update)
          // RAW reenables for nIndex
          // Phi start dependency for implicit/constant alternative.
          R_nIndex_43_sample_start_ <-& (R_nIndex_43_sample_start__ps)
          R_nIndex_43_update_start_ <-& (R_nIndex_43_update_start__ps)
          // Phi complete dependency.
          R_nIndex_43_sample_completed__ps <-& (R_nIndex_43_sample_completed_)
          R_nIndex_43_update_completed__ps <-& (R_nIndex_43_update_completed_)
          $phisequencer [ phi_stmt_38_phi_seq] : 
          phi_stmt_38_entry_trigger type_cast_42_sample_start__ps type_cast_42_sample_completed__ps type_cast_42_update_start__ps type_cast_42_update_completed__ps phi_stmt_38_loopback_trigger R_nIndex_43_sample_start__ps R_nIndex_43_sample_completed__ps R_nIndex_43_update_start__ps R_nIndex_43_update_completed__ps :
          phi_stmt_38_sample_start__ps phi_stmt_38_sample_completed__ps phi_stmt_38_update_start__ps phi_stmt_38_update_completed__ps :
          phi_stmt_38_entry_sample_req_ps phi_stmt_38_loopback_sample_req_ps : 
          phi_stmt_38_phi_mux_ack_ps
          // done: PHI Statement phi_stmt_38
          // start:  PHI statement phi_stmt_44
          // 			$phi val_0 := 			  ($bitcast ($uint<32>) 0  ) $on   $entry 			  nval_0 $on   $loopback 
          // type of target is $uint<32>
          $T[phi_stmt_44_sample_start_] 
          $T[phi_stmt_44_sample_completed_] 
          $T[phi_stmt_44_update_start_] 
          $T[phi_stmt_44_update_completed_] 
          $T[phi_stmt_44_sample_start__ps] 
          phi_stmt_44_sample_start__ps <-& (aggregated_phi_sample_req)
          $T[phi_stmt_44_sample_completed__ps] 
          phi_stmt_44_sample_completed__ps &-> (aggregated_phi_sample_ack)
          $T[phi_stmt_44_update_start__ps] 
          phi_stmt_44_update_start__ps <-& (aggregated_phi_update_req)
          $T[phi_stmt_44_update_completed__ps] 
          phi_stmt_44_update_completed_ <-& (phi_stmt_44_update_completed__ps)
          aggregated_phi_sample_req <-& (phi_stmt_44_sample_start_)
          aggregated_phi_sample_ack &-> (phi_stmt_44_sample_completed_)
          aggregated_phi_update_req <-& (phi_stmt_44_update_start_)
          $T[phi_stmt_44_loopback_trigger] 
          phi_stmt_44_loopback_trigger <-& (back_edge_to_loop_body)
          $T[phi_stmt_44_loopback_sample_req] 
          $T[phi_stmt_44_loopback_sample_req_ps] 
          phi_stmt_44_loopback_sample_req <-& (phi_stmt_44_loopback_sample_req_ps)
          phi_stmt_44_loopback_sample_req &-> ($null)
          $T[phi_stmt_44_entry_trigger] 
          phi_stmt_44_entry_trigger <-& (first_time_through_loop_body)
          $T[phi_stmt_44_entry_sample_req] 
          $T[phi_stmt_44_entry_sample_req_ps] 
          phi_stmt_44_entry_sample_req <-& (phi_stmt_44_entry_sample_req_ps)
          phi_stmt_44_entry_sample_req &-> ($null)
          phi_stmt_44_update_start_ o<-& (phi_stmt_44_update_completed_ 0)
          phi_stmt_44_sample_start_ o<-& (phi_stmt_44_sample_completed_ 1)
          $T[phi_stmt_44_merged_reqs] 
          $T[phi_stmt_44_phi_mux_ack] 
          $T[phi_stmt_44_phi_mux_ack_ps] 
          phi_stmt_44_phi_mux_ack_ps <-& (phi_stmt_44_phi_mux_ack)
          aggregated_phi_update_ack <-& (phi_stmt_44_update_completed_)
          $T[type_cast_47_sample_start__ps] 
          $T[type_cast_47_sample_completed__ps] 
          $T[type_cast_47_update_start__ps] 
          $T[type_cast_47_update_completed__ps] 
          // dummies for constant expression source for phi
          $T[type_cast_47_sample_start_] 
          $T[type_cast_47_sample_completed_] 
          type_cast_47_sample_completed_ <-& (type_cast_47_sample_start_)
          $T[type_cast_47_update_start_] 
          $T [type_cast_47_update_completed_] $delay 
          type_cast_47_update_completed_ <-& (type_cast_47_update_start_)
          // Phi start dependency for implicit/constant alternative.
          type_cast_47_sample_start_ <-& (type_cast_47_sample_start__ps)
          type_cast_47_update_start_ <-& (type_cast_47_update_start__ps)
          // Phi complete dependency.
          type_cast_47_sample_completed__ps <-& (type_cast_47_sample_completed_)
          type_cast_47_update_completed__ps <-& (type_cast_47_update_completed_)
          $T[R_nval_0_48_sample_start__ps] 
          $T[R_nval_0_48_sample_completed__ps] 
          $T[R_nval_0_48_update_start__ps] 
          $T[R_nval_0_48_update_completed__ps] 
          // interlock for implicit-variable-ref/signal-read in Phi alternative 1
          $T[R_nval_0_48_sample_start_] 
          $T[R_nval_0_48_sample_completed_] 
          $T[R_nval_0_48_update_start_] 
          $T[R_nval_0_48_update_completed_] 
          ;;[R_nval_0_48_Sample] 
          {
            $T [req] $T [ack] // interlock-sample.
          }
          R_nval_0_48_sample_start_ &-> (R_nval_0_48_Sample)
          R_nval_0_48_sample_completed_ <-& (R_nval_0_48_Sample)
          ;;[R_nval_0_48_Update] 
          {
            $T [req] $T [ack] // interlock-update.
          }
          R_nval_0_48_update_start_ &-> (R_nval_0_48_Update)
          R_nval_0_48_update_completed_ <-& (R_nval_0_48_Update)
          // RAW reenables for nval_0
          // Phi start dependency for implicit/constant alternative.
          R_nval_0_48_sample_start_ <-& (R_nval_0_48_sample_start__ps)
          R_nval_0_48_update_start_ <-& (R_nval_0_48_update_start__ps)
          // Phi complete dependency.
          R_nval_0_48_sample_completed__ps <-& (R_nval_0_48_sample_completed_)
          R_nval_0_48_update_completed__ps <-& (R_nval_0_48_update_completed_)
          $phisequencer [ phi_stmt_44_phi_seq] : 
          phi_stmt_44_entry_trigger type_cast_47_sample_start__ps type_cast_47_sample_completed__ps type_cast_47_update_start__ps type_cast_47_update_completed__ps phi_stmt_44_loopback_trigger R_nval_0_48_sample_start__ps R_nval_0_48_sample_completed__ps R_nval_0_48_update_start__ps R_nval_0_48_update_completed__ps :
          phi_stmt_44_sample_start__ps phi_stmt_44_sample_completed__ps phi_stmt_44_update_start__ps phi_stmt_44_update_completed__ps :
          phi_stmt_44_entry_sample_req_ps phi_stmt_44_loopback_sample_req_ps : 
          phi_stmt_44_phi_mux_ack_ps
          // done: PHI Statement phi_stmt_44
          // start:  PHI statement phi_stmt_49
          // 			$phi val_1 := 			  nval_1 $on   $loopback 			  ($bitcast ($uint<32>) 0  ) $on   $entry 
          // type of target is $uint<32>
          $T[phi_stmt_49_sample_start_] 
          $T[phi_stmt_49_sample_completed_] 
          $T[phi_stmt_49_update_start_] 
          $T[phi_stmt_49_update_completed_] 
          $T[phi_stmt_49_sample_start__ps] 
          phi_stmt_49_sample_start__ps <-& (aggregated_phi_sample_req)
          $T[phi_stmt_49_sample_completed__ps] 
          phi_stmt_49_sample_completed__ps &-> (aggregated_phi_sample_ack)
          $T[phi_stmt_49_update_start__ps] 
          phi_stmt_49_update_start__ps <-& (aggregated_phi_update_req)
          $T[phi_stmt_49_update_completed__ps] 
          phi_stmt_49_update_completed_ <-& (phi_stmt_49_update_completed__ps)
          aggregated_phi_sample_req <-& (phi_stmt_49_sample_start_)
          aggregated_phi_sample_ack &-> (phi_stmt_49_sample_completed_)
          aggregated_phi_update_req <-& (phi_stmt_49_update_start_)
          $T[phi_stmt_49_loopback_trigger] 
          phi_stmt_49_loopback_trigger <-& (back_edge_to_loop_body)
          $T[phi_stmt_49_loopback_sample_req] 
          $T[phi_stmt_49_loopback_sample_req_ps] 
          phi_stmt_49_loopback_sample_req <-& (phi_stmt_49_loopback_sample_req_ps)
          phi_stmt_49_loopback_sample_req &-> ($null)
          $T[phi_stmt_49_entry_trigger] 
          phi_stmt_49_entry_trigger <-& (first_time_through_loop_body)
          $T[phi_stmt_49_entry_sample_req] 
          $T[phi_stmt_49_entry_sample_req_ps] 
          phi_stmt_49_entry_sample_req <-& (phi_stmt_49_entry_sample_req_ps)
          phi_stmt_49_entry_sample_req &-> ($null)
          phi_stmt_49_update_start_ o<-& (phi_stmt_49_update_completed_ 0)
          phi_stmt_49_sample_start_ o<-& (phi_stmt_49_sample_completed_ 1)
          $T[phi_stmt_49_merged_reqs] 
          $T[phi_stmt_49_phi_mux_ack] 
          $T[phi_stmt_49_phi_mux_ack_ps] 
          phi_stmt_49_phi_mux_ack_ps <-& (phi_stmt_49_phi_mux_ack)
          aggregated_phi_update_ack <-& (phi_stmt_49_update_completed_)
          $T[R_nval_1_51_sample_start__ps] 
          $T[R_nval_1_51_sample_completed__ps] 
          $T[R_nval_1_51_update_start__ps] 
          $T[R_nval_1_51_update_completed__ps] 
          // interlock for implicit-variable-ref/signal-read in Phi alternative 0
          $T[R_nval_1_51_sample_start_] 
          $T[R_nval_1_51_sample_completed_] 
          $T[R_nval_1_51_update_start_] 
          $T[R_nval_1_51_update_completed_] 
          ;;[R_nval_1_51_Sample] 
          {
            $T [req] $T [ack] // interlock-sample.
          }
          R_nval_1_51_sample_start_ &-> (R_nval_1_51_Sample)
          R_nval_1_51_sample_completed_ <-& (R_nval_1_51_Sample)
          ;;[R_nval_1_51_Update] 
          {
            $T [req] $T [ack] // interlock-update.
          }
          R_nval_1_51_update_start_ &-> (R_nval_1_51_Update)
          R_nval_1_51_update_completed_ <-& (R_nval_1_51_Update)
          // RAW reenables for nval_1
          // Phi start dependency for implicit/constant alternative.
          R_nval_1_51_sample_start_ <-& (R_nval_1_51_sample_start__ps)
          R_nval_1_51_update_start_ <-& (R_nval_1_51_update_start__ps)
          // Phi complete dependency.
          R_nval_1_51_sample_completed__ps <-& (R_nval_1_51_sample_completed_)
          R_nval_1_51_update_completed__ps <-& (R_nval_1_51_update_completed_)
          $T[type_cast_53_sample_start__ps] 
          $T[type_cast_53_sample_completed__ps] 
          $T[type_cast_53_update_start__ps] 
          $T[type_cast_53_update_completed__ps] 
          // dummies for constant expression source for phi
          $T[type_cast_53_sample_start_] 
          $T[type_cast_53_sample_completed_] 
          type_cast_53_sample_completed_ <-& (type_cast_53_sample_start_)
          $T[type_cast_53_update_start_] 
          $T [type_cast_53_update_completed_] $delay 
          type_cast_53_update_completed_ <-& (type_cast_53_update_start_)
          // Phi start dependency for implicit/constant alternative.
          type_cast_53_sample_start_ <-& (type_cast_53_sample_start__ps)
          type_cast_53_update_start_ <-& (type_cast_53_update_start__ps)
          // Phi complete dependency.
          type_cast_53_sample_completed__ps <-& (type_cast_53_sample_completed_)
          type_cast_53_update_completed__ps <-& (type_cast_53_update_completed_)
          $phisequencer [ phi_stmt_49_phi_seq] : 
          phi_stmt_49_loopback_trigger R_nval_1_51_sample_start__ps R_nval_1_51_sample_completed__ps R_nval_1_51_update_start__ps R_nval_1_51_update_completed__ps phi_stmt_49_entry_trigger type_cast_53_sample_start__ps type_cast_53_sample_completed__ps type_cast_53_update_start__ps type_cast_53_update_completed__ps :
          phi_stmt_49_sample_start__ps phi_stmt_49_sample_completed__ps phi_stmt_49_update_start__ps phi_stmt_49_update_completed__ps :
          phi_stmt_49_loopback_sample_req_ps phi_stmt_49_entry_sample_req_ps : 
          phi_stmt_49_phi_mux_ack_ps
          // done: PHI Statement phi_stmt_49
          // start:  PHI statement phi_stmt_54
          // 			$phi val_2 := 			  ($bitcast ($uint<32>) 0  ) $on   $entry 			  nval_2 $on   $loopback 
          // type of target is $uint<32>
          $T[phi_stmt_54_sample_start_] 
          $T[phi_stmt_54_sample_completed_] 
          $T[phi_stmt_54_update_start_] 
          $T[phi_stmt_54_update_completed_] 
          $T[phi_stmt_54_sample_start__ps] 
          phi_stmt_54_sample_start__ps <-& (aggregated_phi_sample_req)
          $T[phi_stmt_54_sample_completed__ps] 
          phi_stmt_54_sample_completed__ps &-> (aggregated_phi_sample_ack)
          $T[phi_stmt_54_update_start__ps] 
          phi_stmt_54_update_start__ps <-& (aggregated_phi_update_req)
          $T[phi_stmt_54_update_completed__ps] 
          phi_stmt_54_update_completed_ <-& (phi_stmt_54_update_completed__ps)
          aggregated_phi_sample_req <-& (phi_stmt_54_sample_start_)
          aggregated_phi_sample_ack &-> (phi_stmt_54_sample_completed_)
          aggregated_phi_update_req <-& (phi_stmt_54_update_start_)
          $T[phi_stmt_54_loopback_trigger] 
          phi_stmt_54_loopback_trigger <-& (back_edge_to_loop_body)
          $T[phi_stmt_54_loopback_sample_req] 
          $T[phi_stmt_54_loopback_sample_req_ps] 
          phi_stmt_54_loopback_sample_req <-& (phi_stmt_54_loopback_sample_req_ps)
          phi_stmt_54_loopback_sample_req &-> ($null)
          $T[phi_stmt_54_entry_trigger] 
          phi_stmt_54_entry_trigger <-& (first_time_through_loop_body)
          $T[phi_stmt_54_entry_sample_req] 
          $T[phi_stmt_54_entry_sample_req_ps] 
          phi_stmt_54_entry_sample_req <-& (phi_stmt_54_entry_sample_req_ps)
          phi_stmt_54_entry_sample_req &-> ($null)
          phi_stmt_54_update_start_ o<-& (phi_stmt_54_update_completed_ 0)
          phi_stmt_54_sample_start_ o<-& (phi_stmt_54_sample_completed_ 1)
          $T[phi_stmt_54_merged_reqs] 
          $T[phi_stmt_54_phi_mux_ack] 
          $T[phi_stmt_54_phi_mux_ack_ps] 
          phi_stmt_54_phi_mux_ack_ps <-& (phi_stmt_54_phi_mux_ack)
          aggregated_phi_update_ack <-& (phi_stmt_54_update_completed_)
          $T[type_cast_57_sample_start__ps] 
          $T[type_cast_57_sample_completed__ps] 
          $T[type_cast_57_update_start__ps] 
          $T[type_cast_57_update_completed__ps] 
          // dummies for constant expression source for phi
          $T[type_cast_57_sample_start_] 
          $T[type_cast_57_sample_completed_] 
          type_cast_57_sample_completed_ <-& (type_cast_57_sample_start_)
          $T[type_cast_57_update_start_] 
          $T [type_cast_57_update_completed_] $delay 
          type_cast_57_update_completed_ <-& (type_cast_57_update_start_)
          // Phi start dependency for implicit/constant alternative.
          type_cast_57_sample_start_ <-& (type_cast_57_sample_start__ps)
          type_cast_57_update_start_ <-& (type_cast_57_update_start__ps)
          // Phi complete dependency.
          type_cast_57_sample_completed__ps <-& (type_cast_57_sample_completed_)
          type_cast_57_update_completed__ps <-& (type_cast_57_update_completed_)
          $T[R_nval_2_58_sample_start__ps] 
          $T[R_nval_2_58_sample_completed__ps] 
          $T[R_nval_2_58_update_start__ps] 
          $T[R_nval_2_58_update_completed__ps] 
          // interlock for implicit-variable-ref/signal-read in Phi alternative 1
          $T[R_nval_2_58_sample_start_] 
          $T[R_nval_2_58_sample_completed_] 
          $T[R_nval_2_58_update_start_] 
          $T[R_nval_2_58_update_completed_] 
          ;;[R_nval_2_58_Sample] 
          {
            $T [req] $T [ack] // interlock-sample.
          }
          R_nval_2_58_sample_start_ &-> (R_nval_2_58_Sample)
          R_nval_2_58_sample_completed_ <-& (R_nval_2_58_Sample)
          ;;[R_nval_2_58_Update] 
          {
            $T [req] $T [ack] // interlock-update.
          }
          R_nval_2_58_update_start_ &-> (R_nval_2_58_Update)
          R_nval_2_58_update_completed_ <-& (R_nval_2_58_Update)
          // RAW reenables for nval_2
          // Phi start dependency for implicit/constant alternative.
          R_nval_2_58_sample_start_ <-& (R_nval_2_58_sample_start__ps)
          R_nval_2_58_update_start_ <-& (R_nval_2_58_update_start__ps)
          // Phi complete dependency.
          R_nval_2_58_sample_completed__ps <-& (R_nval_2_58_sample_completed_)
          R_nval_2_58_update_completed__ps <-& (R_nval_2_58_update_completed_)
          $phisequencer [ phi_stmt_54_phi_seq] : 
          phi_stmt_54_entry_trigger type_cast_57_sample_start__ps type_cast_57_sample_completed__ps type_cast_57_update_start__ps type_cast_57_update_completed__ps phi_stmt_54_loopback_trigger R_nval_2_58_sample_start__ps R_nval_2_58_sample_completed__ps R_nval_2_58_update_start__ps R_nval_2_58_update_completed__ps :
          phi_stmt_54_sample_start__ps phi_stmt_54_sample_completed__ps phi_stmt_54_update_start__ps phi_stmt_54_update_completed__ps :
          phi_stmt_54_entry_sample_req_ps phi_stmt_54_loopback_sample_req_ps : 
          phi_stmt_54_phi_mux_ack_ps
          // done: PHI Statement phi_stmt_54
          // start:  PHI statement phi_stmt_59
          // 			$phi val_3 := 			  ($bitcast ($uint<32>) 0  ) $on   $entry 			  nval_3 $on   $loopback 
          // type of target is $uint<32>
          $T[phi_stmt_59_sample_start_] 
          $T[phi_stmt_59_sample_completed_] 
          $T[phi_stmt_59_update_start_] 
          $T[phi_stmt_59_update_completed_] 
          $T[phi_stmt_59_sample_start__ps] 
          phi_stmt_59_sample_start__ps <-& (aggregated_phi_sample_req)
          $T[phi_stmt_59_sample_completed__ps] 
          phi_stmt_59_sample_completed__ps &-> (aggregated_phi_sample_ack)
          $T[phi_stmt_59_update_start__ps] 
          phi_stmt_59_update_start__ps <-& (aggregated_phi_update_req)
          $T[phi_stmt_59_update_completed__ps] 
          phi_stmt_59_update_completed_ <-& (phi_stmt_59_update_completed__ps)
          aggregated_phi_sample_req <-& (phi_stmt_59_sample_start_)
          aggregated_phi_sample_ack &-> (phi_stmt_59_sample_completed_)
          aggregated_phi_update_req <-& (phi_stmt_59_update_start_)
          $T[phi_stmt_59_loopback_trigger] 
          phi_stmt_59_loopback_trigger <-& (back_edge_to_loop_body)
          $T[phi_stmt_59_loopback_sample_req] 
          $T[phi_stmt_59_loopback_sample_req_ps] 
          phi_stmt_59_loopback_sample_req <-& (phi_stmt_59_loopback_sample_req_ps)
          phi_stmt_59_loopback_sample_req &-> ($null)
          $T[phi_stmt_59_entry_trigger] 
          phi_stmt_59_entry_trigger <-& (first_time_through_loop_body)
          $T[phi_stmt_59_entry_sample_req] 
          $T[phi_stmt_59_entry_sample_req_ps] 
          phi_stmt_59_entry_sample_req <-& (phi_stmt_59_entry_sample_req_ps)
          phi_stmt_59_entry_sample_req &-> ($null)
          phi_stmt_59_update_start_ o<-& (phi_stmt_59_update_completed_ 0)
          phi_stmt_59_sample_start_ o<-& (phi_stmt_59_sample_completed_ 1)
          $T[phi_stmt_59_merged_reqs] 
          $T[phi_stmt_59_phi_mux_ack] 
          $T[phi_stmt_59_phi_mux_ack_ps] 
          phi_stmt_59_phi_mux_ack_ps <-& (phi_stmt_59_phi_mux_ack)
          aggregated_phi_update_ack <-& (phi_stmt_59_update_completed_)
          $T[type_cast_62_sample_start__ps] 
          $T[type_cast_62_sample_completed__ps] 
          $T[type_cast_62_update_start__ps] 
          $T[type_cast_62_update_completed__ps] 
          // dummies for constant expression source for phi
          $T[type_cast_62_sample_start_] 
          $T[type_cast_62_sample_completed_] 
          type_cast_62_sample_completed_ <-& (type_cast_62_sample_start_)
          $T[type_cast_62_update_start_] 
          $T [type_cast_62_update_completed_] $delay 
          type_cast_62_update_completed_ <-& (type_cast_62_update_start_)
          // Phi start dependency for implicit/constant alternative.
          type_cast_62_sample_start_ <-& (type_cast_62_sample_start__ps)
          type_cast_62_update_start_ <-& (type_cast_62_update_start__ps)
          // Phi complete dependency.
          type_cast_62_sample_completed__ps <-& (type_cast_62_sample_completed_)
          type_cast_62_update_completed__ps <-& (type_cast_62_update_completed_)
          $T[R_nval_3_63_sample_start__ps] 
          $T[R_nval_3_63_sample_completed__ps] 
          $T[R_nval_3_63_update_start__ps] 
          $T[R_nval_3_63_update_completed__ps] 
          // interlock for implicit-variable-ref/signal-read in Phi alternative 1
          $T[R_nval_3_63_sample_start_] 
          $T[R_nval_3_63_sample_completed_] 
          $T[R_nval_3_63_update_start_] 
          $T[R_nval_3_63_update_completed_] 
          ;;[R_nval_3_63_Sample] 
          {
            $T [req] $T [ack] // interlock-sample.
          }
          R_nval_3_63_sample_start_ &-> (R_nval_3_63_Sample)
          R_nval_3_63_sample_completed_ <-& (R_nval_3_63_Sample)
          ;;[R_nval_3_63_Update] 
          {
            $T [req] $T [ack] // interlock-update.
          }
          R_nval_3_63_update_start_ &-> (R_nval_3_63_Update)
          R_nval_3_63_update_completed_ <-& (R_nval_3_63_Update)
          // RAW reenables for nval_3
          // Phi start dependency for implicit/constant alternative.
          R_nval_3_63_sample_start_ <-& (R_nval_3_63_sample_start__ps)
          R_nval_3_63_update_start_ <-& (R_nval_3_63_update_start__ps)
          // Phi complete dependency.
          R_nval_3_63_sample_completed__ps <-& (R_nval_3_63_sample_completed_)
          R_nval_3_63_update_completed__ps <-& (R_nval_3_63_update_completed_)
          $phisequencer [ phi_stmt_59_phi_seq] : 
          phi_stmt_59_entry_trigger type_cast_62_sample_start__ps type_cast_62_sample_completed__ps type_cast_62_update_start__ps type_cast_62_update_completed__ps phi_stmt_59_loopback_trigger R_nval_3_63_sample_start__ps R_nval_3_63_sample_completed__ps R_nval_3_63_update_start__ps R_nval_3_63_update_completed__ps :
          phi_stmt_59_sample_start__ps phi_stmt_59_sample_completed__ps phi_stmt_59_update_start__ps phi_stmt_59_update_completed__ps :
          phi_stmt_59_entry_sample_req_ps phi_stmt_59_loopback_sample_req_ps : 
          phi_stmt_59_phi_mux_ack_ps
          // done: PHI Statement phi_stmt_59
          // start:  			a_rc_0 := A_MEM[R][Index] $buffering 1// bits of buffering = 32. 
          //  file .Aa/mvp.opt.aa, line 48
          // Source expression
          // A_MEM[R][Index]
          $T[array_obj_ref_68_base_address_calculated] 
          $T[array_obj_ref_68_sample_start_] 
          $T[array_obj_ref_68_sample_completed_] 
          $T[array_obj_ref_68_update_start_] 
          $T[array_obj_ref_68_update_completed_] 
          $T[array_obj_ref_68_word_address_calculated] 
          $T[array_obj_ref_68_root_address_calculated] 
          $T[array_obj_ref_68_offset_calculated] 
          $T[array_obj_ref_68_index_resized_0] 
          $T[array_obj_ref_68_index_scaled_0] 
          $T[array_obj_ref_68_index_computed_0] 
          // R
          // start: Forward dependencies from R to transition array_obj_ref_68_index_computed_0
          // done: Forward dependencies from R to transition array_obj_ref_68_index_computed_0
          ;;[array_obj_ref_68_index_resize_0] 
          {
            $T [index_resize_req] $T [index_resize_ack] // resize index to address-width
          }
          array_obj_ref_68_index_computed_0 &-> (array_obj_ref_68_index_resize_0)
          array_obj_ref_68_index_resized_0 <-& (array_obj_ref_68_index_resize_0)
          $T[array_obj_ref_68_index_scale_0_sample_start] 
          $T[array_obj_ref_68_index_scale_0_sample_complete] 
          $T[array_obj_ref_68_index_scale_0_update_start] 
          $T[array_obj_ref_68_index_scale_0_update_complete] 
          ;;[array_obj_ref_68_index_scale_0_Sample] 
          {
            $T [rr] $T [ra] 
          }
          ;;[array_obj_ref_68_index_scale_0_Update] 
          {
            $T [cr] $T [ca] 
          }
          array_obj_ref_68_index_resized_0 &-> (array_obj_ref_68_index_scale_0_sample_start)
          array_obj_ref_68_index_scale_0_sample_start &-> (array_obj_ref_68_index_scale_0_Sample)
          array_obj_ref_68_index_scale_0_sample_complete <-& (array_obj_ref_68_index_scale_0_Sample)
          array_obj_ref_68_index_scale_0_update_start &-> (array_obj_ref_68_index_scale_0_Update)
          array_obj_ref_68_index_scale_0_update_complete <-& (array_obj_ref_68_index_scale_0_Update)
          array_obj_ref_68_index_scaled_0 <-& (array_obj_ref_68_index_scale_0_update_complete)
          array_obj_ref_68_index_scale_0_sample_start o<-& (array_obj_ref_68_index_scale_0_sample_complete 1)
          array_obj_ref_68_index_scale_0_update_start o<-& (array_obj_ref_68_index_scale_0_update_complete 0)
          $T[array_obj_ref_68_index_resized_1] 
          $T[array_obj_ref_68_index_scaled_1] 
          $T[array_obj_ref_68_index_computed_1] 
          // Index
          // start: Forward dependencies from Index to transition array_obj_ref_68_index_computed_1
          array_obj_ref_68_index_computed_1 <-& (phi_stmt_38_update_completed_)
          // done: Forward dependencies from Index to transition array_obj_ref_68_index_computed_1
          ;;[array_obj_ref_68_index_resize_1] 
          {
            $T [index_resize_req] $T [index_resize_ack] // resize index to address-width
          }
          array_obj_ref_68_index_computed_1 &-> (array_obj_ref_68_index_resize_1)
          array_obj_ref_68_index_resized_1 <-& (array_obj_ref_68_index_resize_1)
          ;;[array_obj_ref_68_index_scale_1] 
          {
            $T [scale_rename_req] $T [scale_rename_ack] // rename 
          }
          array_obj_ref_68_index_resized_1 &-> (array_obj_ref_68_index_scale_1)
          array_obj_ref_68_index_scaled_1 <-& (array_obj_ref_68_index_scale_1)
          $T[array_obj_ref_68_partial_sum_1_sample_start] 
          $T[array_obj_ref_68_partial_sum_1_sample_complete] 
          $T[array_obj_ref_68_partial_sum_1_update_start] 
          $T[array_obj_ref_68_partial_sum_1_update_complete] 
          ;;[array_obj_ref_68_partial_sum_1_Sample] 
          {
            $T [rr] $T [ra] 
          }
          ;;[array_obj_ref_68_partial_sum_1_Update] 
          {
            $T [cr] $T [ca] 
          }
          array_obj_ref_68_partial_sum_1_sample_start &-> (array_obj_ref_68_partial_sum_1_Sample)
          array_obj_ref_68_partial_sum_1_sample_complete <-& (array_obj_ref_68_partial_sum_1_Sample)
          array_obj_ref_68_partial_sum_1_update_start &-> (array_obj_ref_68_partial_sum_1_Update)
          array_obj_ref_68_partial_sum_1_update_complete <-& (array_obj_ref_68_partial_sum_1_Update)
          array_obj_ref_68_partial_sum_1_sample_start o<-& (array_obj_ref_68_partial_sum_1_sample_complete 1)
          array_obj_ref_68_partial_sum_1_update_start o<-& (array_obj_ref_68_partial_sum_1_update_complete 0)
          array_obj_ref_68_partial_sum_1_sample_start <-& (array_obj_ref_68_index_scaled_0)
          array_obj_ref_68_partial_sum_1_sample_start <-& (array_obj_ref_68_index_scaled_1)
          array_obj_ref_68_index_scaled_0 o<-& (array_obj_ref_68_partial_sum_1_sample_complete 1)
          phi_stmt_38_update_start_ o<-& (array_obj_ref_68_partial_sum_1_sample_complete 1)
          array_obj_ref_68_offset_calculated <-& (array_obj_ref_68_partial_sum_1_update_complete)
          ;;[array_obj_ref_68_final_index_sum_regn] 
          {
            $T [req] $T [ack] // rename
          }
          array_obj_ref_68_partial_sum_1_update_complete &-> (array_obj_ref_68_final_index_sum_regn)
          array_obj_ref_68_offset_calculated <-& (array_obj_ref_68_final_index_sum_regn)
          ;;[array_obj_ref_68_base_plus_offset] 
          {
            $T [sum_rename_req] $T [sum_rename_ack] // one gets through 
          }
          array_obj_ref_68_offset_calculated &-> (array_obj_ref_68_base_plus_offset)
          array_obj_ref_68_root_address_calculated <-& (array_obj_ref_68_base_plus_offset)
          ;;[array_obj_ref_68_word_addrgen] 
          {
            $T [root_register_req] $T [root_register_ack]
          }
          array_obj_ref_68_root_address_calculated &-> (array_obj_ref_68_word_addrgen)
          array_obj_ref_68_word_address_calculated <-& (array_obj_ref_68_word_addrgen)
          ;;[array_obj_ref_68_Sample] 
          {
            ||[word_access_start] 
            {
              ;;[word_0] 
              {
                $T [rr] $T [ra] 
              }
            }
          }
          ;;[array_obj_ref_68_Update] 
          {
            ||[word_access_complete] 
            {
              ;;[word_0] 
              {
                $T [cr] $T [ca] 
              }
            }
            ;;[array_obj_ref_68_Merge] 
            {
              $T [merge_req] $T [merge_ack]
            }
          }
          array_obj_ref_68_sample_start_ <-& (array_obj_ref_68_word_address_calculated)
          // reenable-joins
          array_obj_ref_68_partial_sum_1_update_start o<-& (array_obj_ref_68_sample_completed_ 0)
          array_obj_ref_68_sample_start_ &-> (array_obj_ref_68_Sample)
          array_obj_ref_68_sample_completed_ <-& (array_obj_ref_68_Sample)
          array_obj_ref_68_sample_completed_ &-> ($null)
          array_obj_ref_68_update_start_ &-> (array_obj_ref_68_Update)
          array_obj_ref_68_update_completed_ <-& (array_obj_ref_68_Update)
          // self-release: 
          array_obj_ref_68_sample_start_ o<-& (array_obj_ref_68_sample_completed_ 1)
          $null &-> (array_obj_ref_68_update_start_)
          array_obj_ref_68_update_start_ o<-& (array_obj_ref_68_update_completed_ 0)
          // Target expression
          // (as target) a_rc_0
          // start: WAR dependencies for a_rc_0
          // done: WAR dependencies for a_rc_0
          // end:  			a_rc_0 := A_MEM[R][Index] $buffering 1// bits of buffering = 32. 
          // start:  			a_rc_1 := B_MEM[R][Index] $buffering 1// bits of buffering = 32. 
          //  file .Aa/mvp.opt.aa, line 49
          // Source expression
          // B_MEM[R][Index]
          $T[array_obj_ref_73_base_address_calculated] 
          $T[array_obj_ref_73_sample_start_] 
          $T[array_obj_ref_73_sample_completed_] 
          $T[array_obj_ref_73_update_start_] 
          $T[array_obj_ref_73_update_completed_] 
          $T[array_obj_ref_73_word_address_calculated] 
          $T[array_obj_ref_73_root_address_calculated] 
          $T[array_obj_ref_73_offset_calculated] 
          $T[array_obj_ref_73_index_resized_0] 
          $T[array_obj_ref_73_index_scaled_0] 
          $T[array_obj_ref_73_index_computed_0] 
          // R
          // start: Forward dependencies from R to transition array_obj_ref_73_index_computed_0
          // done: Forward dependencies from R to transition array_obj_ref_73_index_computed_0
          ;;[array_obj_ref_73_index_resize_0] 
          {
            $T [index_resize_req] $T [index_resize_ack] // resize index to address-width
          }
          array_obj_ref_73_index_computed_0 &-> (array_obj_ref_73_index_resize_0)
          array_obj_ref_73_index_resized_0 <-& (array_obj_ref_73_index_resize_0)
          $T[array_obj_ref_73_index_scale_0_sample_start] 
          $T[array_obj_ref_73_index_scale_0_sample_complete] 
          $T[array_obj_ref_73_index_scale_0_update_start] 
          $T[array_obj_ref_73_index_scale_0_update_complete] 
          ;;[array_obj_ref_73_index_scale_0_Sample] 
          {
            $T [rr] $T [ra] 
          }
          ;;[array_obj_ref_73_index_scale_0_Update] 
          {
            $T [cr] $T [ca] 
          }
          array_obj_ref_73_index_resized_0 &-> (array_obj_ref_73_index_scale_0_sample_start)
          array_obj_ref_73_index_scale_0_sample_start &-> (array_obj_ref_73_index_scale_0_Sample)
          array_obj_ref_73_index_scale_0_sample_complete <-& (array_obj_ref_73_index_scale_0_Sample)
          array_obj_ref_73_index_scale_0_update_start &-> (array_obj_ref_73_index_scale_0_Update)
          array_obj_ref_73_index_scale_0_update_complete <-& (array_obj_ref_73_index_scale_0_Update)
          array_obj_ref_73_index_scaled_0 <-& (array_obj_ref_73_index_scale_0_update_complete)
          array_obj_ref_73_index_scale_0_sample_start o<-& (array_obj_ref_73_index_scale_0_sample_complete 1)
          array_obj_ref_73_index_scale_0_update_start o<-& (array_obj_ref_73_index_scale_0_update_complete 0)
          $T[array_obj_ref_73_index_resized_1] 
          $T[array_obj_ref_73_index_scaled_1] 
          $T[array_obj_ref_73_index_computed_1] 
          // Index
          // start: Forward dependencies from Index to transition array_obj_ref_73_index_computed_1
          array_obj_ref_73_index_computed_1 <-& (phi_stmt_38_update_completed_)
          // done: Forward dependencies from Index to transition array_obj_ref_73_index_computed_1
          ;;[array_obj_ref_73_index_resize_1] 
          {
            $T [index_resize_req] $T [index_resize_ack] // resize index to address-width
          }
          array_obj_ref_73_index_computed_1 &-> (array_obj_ref_73_index_resize_1)
          array_obj_ref_73_index_resized_1 <-& (array_obj_ref_73_index_resize_1)
          ;;[array_obj_ref_73_index_scale_1] 
          {
            $T [scale_rename_req] $T [scale_rename_ack] // rename 
          }
          array_obj_ref_73_index_resized_1 &-> (array_obj_ref_73_index_scale_1)
          array_obj_ref_73_index_scaled_1 <-& (array_obj_ref_73_index_scale_1)
          $T[array_obj_ref_73_partial_sum_1_sample_start] 
          $T[array_obj_ref_73_partial_sum_1_sample_complete] 
          $T[array_obj_ref_73_partial_sum_1_update_start] 
          $T[array_obj_ref_73_partial_sum_1_update_complete] 
          ;;[array_obj_ref_73_partial_sum_1_Sample] 
          {
            $T [rr] $T [ra] 
          }
          ;;[array_obj_ref_73_partial_sum_1_Update] 
          {
            $T [cr] $T [ca] 
          }
          array_obj_ref_73_partial_sum_1_sample_start &-> (array_obj_ref_73_partial_sum_1_Sample)
          array_obj_ref_73_partial_sum_1_sample_complete <-& (array_obj_ref_73_partial_sum_1_Sample)
          array_obj_ref_73_partial_sum_1_update_start &-> (array_obj_ref_73_partial_sum_1_Update)
          array_obj_ref_73_partial_sum_1_update_complete <-& (array_obj_ref_73_partial_sum_1_Update)
          array_obj_ref_73_partial_sum_1_sample_start o<-& (array_obj_ref_73_partial_sum_1_sample_complete 1)
          array_obj_ref_73_partial_sum_1_update_start o<-& (array_obj_ref_73_partial_sum_1_update_complete 0)
          array_obj_ref_73_partial_sum_1_sample_start <-& (array_obj_ref_73_index_scaled_0)
          array_obj_ref_73_partial_sum_1_sample_start <-& (array_obj_ref_73_index_scaled_1)
          array_obj_ref_73_index_scaled_0 o<-& (array_obj_ref_73_partial_sum_1_sample_complete 1)
          phi_stmt_38_update_start_ o<-& (array_obj_ref_73_partial_sum_1_sample_complete 1)
          array_obj_ref_73_offset_calculated <-& (array_obj_ref_73_partial_sum_1_update_complete)
          ;;[array_obj_ref_73_final_index_sum_regn] 
          {
            $T [req] $T [ack] // rename
          }
          array_obj_ref_73_partial_sum_1_update_complete &-> (array_obj_ref_73_final_index_sum_regn)
          array_obj_ref_73_offset_calculated <-& (array_obj_ref_73_final_index_sum_regn)
          ;;[array_obj_ref_73_base_plus_offset] 
          {
            $T [sum_rename_req] $T [sum_rename_ack] // one gets through 
          }
          array_obj_ref_73_offset_calculated &-> (array_obj_ref_73_base_plus_offset)
          array_obj_ref_73_root_address_calculated <-& (array_obj_ref_73_base_plus_offset)
          ;;[array_obj_ref_73_word_addrgen] 
          {
            $T [root_register_req] $T [root_register_ack]
          }
          array_obj_ref_73_root_address_calculated &-> (array_obj_ref_73_word_addrgen)
          array_obj_ref_73_word_address_calculated <-& (array_obj_ref_73_word_addrgen)
          ;;[array_obj_ref_73_Sample] 
          {
            ||[word_access_start] 
            {
              ;;[word_0] 
              {
                $T [rr] $T [ra] 
              }
            }
          }
          ;;[array_obj_ref_73_Update] 
          {
            ||[word_access_complete] 
            {
              ;;[word_0] 
              {
                $T [cr] $T [ca] 
              }
            }
            ;;[array_obj_ref_73_Merge] 
            {
              $T [merge_req] $T [merge_ack]
            }
          }
          array_obj_ref_73_sample_start_ <-& (array_obj_ref_73_word_address_calculated)
          // reenable-joins
          array_obj_ref_73_partial_sum_1_update_start o<-& (array_obj_ref_73_sample_completed_ 0)
          array_obj_ref_73_sample_start_ &-> (array_obj_ref_73_Sample)
          array_obj_ref_73_sample_completed_ <-& (array_obj_ref_73_Sample)
          array_obj_ref_73_sample_completed_ &-> ($null)
          array_obj_ref_73_update_start_ &-> (array_obj_ref_73_Update)
          array_obj_ref_73_update_completed_ <-& (array_obj_ref_73_Update)
          // self-release: 
          array_obj_ref_73_sample_start_ o<-& (array_obj_ref_73_sample_completed_ 1)
          $null &-> (array_obj_ref_73_update_start_)
          array_obj_ref_73_update_start_ o<-& (array_obj_ref_73_update_completed_ 0)
          // Target expression
          // (as target) a_rc_1
          // start: WAR dependencies for a_rc_1
          // done: WAR dependencies for a_rc_1
          // end:  			a_rc_1 := B_MEM[R][Index] $buffering 1// bits of buffering = 32. 
          // start:  			a_rc_2 := C_MEM[R][Index] $buffering 1// bits of buffering = 32. 
          //  file .Aa/mvp.opt.aa, line 50
          // Source expression
          // C_MEM[R][Index]
          $T[array_obj_ref_78_base_address_calculated] 
          $T[array_obj_ref_78_sample_start_] 
          $T[array_obj_ref_78_sample_completed_] 
          $T[array_obj_ref_78_update_start_] 
          $T[array_obj_ref_78_update_completed_] 
          $T[array_obj_ref_78_word_address_calculated] 
          $T[array_obj_ref_78_root_address_calculated] 
          $T[array_obj_ref_78_offset_calculated] 
          $T[array_obj_ref_78_index_resized_0] 
          $T[array_obj_ref_78_index_scaled_0] 
          $T[array_obj_ref_78_index_computed_0] 
          // R
          // start: Forward dependencies from R to transition array_obj_ref_78_index_computed_0
          // done: Forward dependencies from R to transition array_obj_ref_78_index_computed_0
          ;;[array_obj_ref_78_index_resize_0] 
          {
            $T [index_resize_req] $T [index_resize_ack] // resize index to address-width
          }
          array_obj_ref_78_index_computed_0 &-> (array_obj_ref_78_index_resize_0)
          array_obj_ref_78_index_resized_0 <-& (array_obj_ref_78_index_resize_0)
          $T[array_obj_ref_78_index_scale_0_sample_start] 
          $T[array_obj_ref_78_index_scale_0_sample_complete] 
          $T[array_obj_ref_78_index_scale_0_update_start] 
          $T[array_obj_ref_78_index_scale_0_update_complete] 
          ;;[array_obj_ref_78_index_scale_0_Sample] 
          {
            $T [rr] $T [ra] 
          }
          ;;[array_obj_ref_78_index_scale_0_Update] 
          {
            $T [cr] $T [ca] 
          }
          array_obj_ref_78_index_resized_0 &-> (array_obj_ref_78_index_scale_0_sample_start)
          array_obj_ref_78_index_scale_0_sample_start &-> (array_obj_ref_78_index_scale_0_Sample)
          array_obj_ref_78_index_scale_0_sample_complete <-& (array_obj_ref_78_index_scale_0_Sample)
          array_obj_ref_78_index_scale_0_update_start &-> (array_obj_ref_78_index_scale_0_Update)
          array_obj_ref_78_index_scale_0_update_complete <-& (array_obj_ref_78_index_scale_0_Update)
          array_obj_ref_78_index_scaled_0 <-& (array_obj_ref_78_index_scale_0_update_complete)
          array_obj_ref_78_index_scale_0_sample_start o<-& (array_obj_ref_78_index_scale_0_sample_complete 1)
          array_obj_ref_78_index_scale_0_update_start o<-& (array_obj_ref_78_index_scale_0_update_complete 0)
          $T[array_obj_ref_78_index_resized_1] 
          $T[array_obj_ref_78_index_scaled_1] 
          $T[array_obj_ref_78_index_computed_1] 
          // Index
          // start: Forward dependencies from Index to transition array_obj_ref_78_index_computed_1
          array_obj_ref_78_index_computed_1 <-& (phi_stmt_38_update_completed_)
          // done: Forward dependencies from Index to transition array_obj_ref_78_index_computed_1
          ;;[array_obj_ref_78_index_resize_1] 
          {
            $T [index_resize_req] $T [index_resize_ack] // resize index to address-width
          }
          array_obj_ref_78_index_computed_1 &-> (array_obj_ref_78_index_resize_1)
          array_obj_ref_78_index_resized_1 <-& (array_obj_ref_78_index_resize_1)
          ;;[array_obj_ref_78_index_scale_1] 
          {
            $T [scale_rename_req] $T [scale_rename_ack] // rename 
          }
          array_obj_ref_78_index_resized_1 &-> (array_obj_ref_78_index_scale_1)
          array_obj_ref_78_index_scaled_1 <-& (array_obj_ref_78_index_scale_1)
          $T[array_obj_ref_78_partial_sum_1_sample_start] 
          $T[array_obj_ref_78_partial_sum_1_sample_complete] 
          $T[array_obj_ref_78_partial_sum_1_update_start] 
          $T[array_obj_ref_78_partial_sum_1_update_complete] 
          ;;[array_obj_ref_78_partial_sum_1_Sample] 
          {
            $T [rr] $T [ra] 
          }
          ;;[array_obj_ref_78_partial_sum_1_Update] 
          {
            $T [cr] $T [ca] 
          }
          array_obj_ref_78_partial_sum_1_sample_start &-> (array_obj_ref_78_partial_sum_1_Sample)
          array_obj_ref_78_partial_sum_1_sample_complete <-& (array_obj_ref_78_partial_sum_1_Sample)
          array_obj_ref_78_partial_sum_1_update_start &-> (array_obj_ref_78_partial_sum_1_Update)
          array_obj_ref_78_partial_sum_1_update_complete <-& (array_obj_ref_78_partial_sum_1_Update)
          array_obj_ref_78_partial_sum_1_sample_start o<-& (array_obj_ref_78_partial_sum_1_sample_complete 1)
          array_obj_ref_78_partial_sum_1_update_start o<-& (array_obj_ref_78_partial_sum_1_update_complete 0)
          array_obj_ref_78_partial_sum_1_sample_start <-& (array_obj_ref_78_index_scaled_0)
          array_obj_ref_78_partial_sum_1_sample_start <-& (array_obj_ref_78_index_scaled_1)
          array_obj_ref_78_index_scaled_0 o<-& (array_obj_ref_78_partial_sum_1_sample_complete 1)
          phi_stmt_38_update_start_ o<-& (array_obj_ref_78_partial_sum_1_sample_complete 1)
          array_obj_ref_78_offset_calculated <-& (array_obj_ref_78_partial_sum_1_update_complete)
          ;;[array_obj_ref_78_final_index_sum_regn] 
          {
            $T [req] $T [ack] // rename
          }
          array_obj_ref_78_partial_sum_1_update_complete &-> (array_obj_ref_78_final_index_sum_regn)
          array_obj_ref_78_offset_calculated <-& (array_obj_ref_78_final_index_sum_regn)
          ;;[array_obj_ref_78_base_plus_offset] 
          {
            $T [sum_rename_req] $T [sum_rename_ack] // one gets through 
          }
          array_obj_ref_78_offset_calculated &-> (array_obj_ref_78_base_plus_offset)
          array_obj_ref_78_root_address_calculated <-& (array_obj_ref_78_base_plus_offset)
          ;;[array_obj_ref_78_word_addrgen] 
          {
            $T [root_register_req] $T [root_register_ack]
          }
          array_obj_ref_78_root_address_calculated &-> (array_obj_ref_78_word_addrgen)
          array_obj_ref_78_word_address_calculated <-& (array_obj_ref_78_word_addrgen)
          ;;[array_obj_ref_78_Sample] 
          {
            ||[word_access_start] 
            {
              ;;[word_0] 
              {
                $T [rr] $T [ra] 
              }
            }
          }
          ;;[array_obj_ref_78_Update] 
          {
            ||[word_access_complete] 
            {
              ;;[word_0] 
              {
                $T [cr] $T [ca] 
              }
            }
            ;;[array_obj_ref_78_Merge] 
            {
              $T [merge_req] $T [merge_ack]
            }
          }
          array_obj_ref_78_sample_start_ <-& (array_obj_ref_78_word_address_calculated)
          // reenable-joins
          array_obj_ref_78_partial_sum_1_update_start o<-& (array_obj_ref_78_sample_completed_ 0)
          array_obj_ref_78_sample_start_ &-> (array_obj_ref_78_Sample)
          array_obj_ref_78_sample_completed_ <-& (array_obj_ref_78_Sample)
          array_obj_ref_78_sample_completed_ &-> ($null)
          array_obj_ref_78_update_start_ &-> (array_obj_ref_78_Update)
          array_obj_ref_78_update_completed_ <-& (array_obj_ref_78_Update)
          // self-release: 
          array_obj_ref_78_sample_start_ o<-& (array_obj_ref_78_sample_completed_ 1)
          $null &-> (array_obj_ref_78_update_start_)
          array_obj_ref_78_update_start_ o<-& (array_obj_ref_78_update_completed_ 0)
          // Target expression
          // (as target) a_rc_2
          // start: WAR dependencies for a_rc_2
          // done: WAR dependencies for a_rc_2
          // end:  			a_rc_2 := C_MEM[R][Index] $buffering 1// bits of buffering = 32. 
          // start:  			a_rc_3 := D_MEM[R][Index] $buffering 1// bits of buffering = 32. 
          //  file .Aa/mvp.opt.aa, line 51
          // Source expression
          // D_MEM[R][Index]
          $T[array_obj_ref_83_base_address_calculated] 
          $T[array_obj_ref_83_sample_start_] 
          $T[array_obj_ref_83_sample_completed_] 
          $T[array_obj_ref_83_update_start_] 
          $T[array_obj_ref_83_update_completed_] 
          $T[array_obj_ref_83_word_address_calculated] 
          $T[array_obj_ref_83_root_address_calculated] 
          $T[array_obj_ref_83_offset_calculated] 
          $T[array_obj_ref_83_index_resized_0] 
          $T[array_obj_ref_83_index_scaled_0] 
          $T[array_obj_ref_83_index_computed_0] 
          // R
          // start: Forward dependencies from R to transition array_obj_ref_83_index_computed_0
          // done: Forward dependencies from R to transition array_obj_ref_83_index_computed_0
          ;;[array_obj_ref_83_index_resize_0] 
          {
            $T [index_resize_req] $T [index_resize_ack] // resize index to address-width
          }
          array_obj_ref_83_index_computed_0 &-> (array_obj_ref_83_index_resize_0)
          array_obj_ref_83_index_resized_0 <-& (array_obj_ref_83_index_resize_0)
          $T[array_obj_ref_83_index_scale_0_sample_start] 
          $T[array_obj_ref_83_index_scale_0_sample_complete] 
          $T[array_obj_ref_83_index_scale_0_update_start] 
          $T[array_obj_ref_83_index_scale_0_update_complete] 
          ;;[array_obj_ref_83_index_scale_0_Sample] 
          {
            $T [rr] $T [ra] 
          }
          ;;[array_obj_ref_83_index_scale_0_Update] 
          {
            $T [cr] $T [ca] 
          }
          array_obj_ref_83_index_resized_0 &-> (array_obj_ref_83_index_scale_0_sample_start)
          array_obj_ref_83_index_scale_0_sample_start &-> (array_obj_ref_83_index_scale_0_Sample)
          array_obj_ref_83_index_scale_0_sample_complete <-& (array_obj_ref_83_index_scale_0_Sample)
          array_obj_ref_83_index_scale_0_update_start &-> (array_obj_ref_83_index_scale_0_Update)
          array_obj_ref_83_index_scale_0_update_complete <-& (array_obj_ref_83_index_scale_0_Update)
          array_obj_ref_83_index_scaled_0 <-& (array_obj_ref_83_index_scale_0_update_complete)
          array_obj_ref_83_index_scale_0_sample_start o<-& (array_obj_ref_83_index_scale_0_sample_complete 1)
          array_obj_ref_83_index_scale_0_update_start o<-& (array_obj_ref_83_index_scale_0_update_complete 0)
          $T[array_obj_ref_83_index_resized_1] 
          $T[array_obj_ref_83_index_scaled_1] 
          $T[array_obj_ref_83_index_computed_1] 
          // Index
          // start: Forward dependencies from Index to transition array_obj_ref_83_index_computed_1
          array_obj_ref_83_index_computed_1 <-& (phi_stmt_38_update_completed_)
          // done: Forward dependencies from Index to transition array_obj_ref_83_index_computed_1
          ;;[array_obj_ref_83_index_resize_1] 
          {
            $T [index_resize_req] $T [index_resize_ack] // resize index to address-width
          }
          array_obj_ref_83_index_computed_1 &-> (array_obj_ref_83_index_resize_1)
          array_obj_ref_83_index_resized_1 <-& (array_obj_ref_83_index_resize_1)
          ;;[array_obj_ref_83_index_scale_1] 
          {
            $T [scale_rename_req] $T [scale_rename_ack] // rename 
          }
          array_obj_ref_83_index_resized_1 &-> (array_obj_ref_83_index_scale_1)
          array_obj_ref_83_index_scaled_1 <-& (array_obj_ref_83_index_scale_1)
          $T[array_obj_ref_83_partial_sum_1_sample_start] 
          $T[array_obj_ref_83_partial_sum_1_sample_complete] 
          $T[array_obj_ref_83_partial_sum_1_update_start] 
          $T[array_obj_ref_83_partial_sum_1_update_complete] 
          ;;[array_obj_ref_83_partial_sum_1_Sample] 
          {
            $T [rr] $T [ra] 
          }
          ;;[array_obj_ref_83_partial_sum_1_Update] 
          {
            $T [cr] $T [ca] 
          }
          array_obj_ref_83_partial_sum_1_sample_start &-> (array_obj_ref_83_partial_sum_1_Sample)
          array_obj_ref_83_partial_sum_1_sample_complete <-& (array_obj_ref_83_partial_sum_1_Sample)
          array_obj_ref_83_partial_sum_1_update_start &-> (array_obj_ref_83_partial_sum_1_Update)
          array_obj_ref_83_partial_sum_1_update_complete <-& (array_obj_ref_83_partial_sum_1_Update)
          array_obj_ref_83_partial_sum_1_sample_start o<-& (array_obj_ref_83_partial_sum_1_sample_complete 1)
          array_obj_ref_83_partial_sum_1_update_start o<-& (array_obj_ref_83_partial_sum_1_update_complete 0)
          array_obj_ref_83_partial_sum_1_sample_start <-& (array_obj_ref_83_index_scaled_0)
          array_obj_ref_83_partial_sum_1_sample_start <-& (array_obj_ref_83_index_scaled_1)
          array_obj_ref_83_index_scaled_0 o<-& (array_obj_ref_83_partial_sum_1_sample_complete 1)
          phi_stmt_38_update_start_ o<-& (array_obj_ref_83_partial_sum_1_sample_complete 1)
          array_obj_ref_83_offset_calculated <-& (array_obj_ref_83_partial_sum_1_update_complete)
          ;;[array_obj_ref_83_final_index_sum_regn] 
          {
            $T [req] $T [ack] // rename
          }
          array_obj_ref_83_partial_sum_1_update_complete &-> (array_obj_ref_83_final_index_sum_regn)
          array_obj_ref_83_offset_calculated <-& (array_obj_ref_83_final_index_sum_regn)
          ;;[array_obj_ref_83_base_plus_offset] 
          {
            $T [sum_rename_req] $T [sum_rename_ack] // one gets through 
          }
          array_obj_ref_83_offset_calculated &-> (array_obj_ref_83_base_plus_offset)
          array_obj_ref_83_root_address_calculated <-& (array_obj_ref_83_base_plus_offset)
          ;;[array_obj_ref_83_word_addrgen] 
          {
            $T [root_register_req] $T [root_register_ack]
          }
          array_obj_ref_83_root_address_calculated &-> (array_obj_ref_83_word_addrgen)
          array_obj_ref_83_word_address_calculated <-& (array_obj_ref_83_word_addrgen)
          ;;[array_obj_ref_83_Sample] 
          {
            ||[word_access_start] 
            {
              ;;[word_0] 
              {
                $T [rr] $T [ra] 
              }
            }
          }
          ;;[array_obj_ref_83_Update] 
          {
            ||[word_access_complete] 
            {
              ;;[word_0] 
              {
                $T [cr] $T [ca] 
              }
            }
            ;;[array_obj_ref_83_Merge] 
            {
              $T [merge_req] $T [merge_ack]
            }
          }
          array_obj_ref_83_sample_start_ <-& (array_obj_ref_83_word_address_calculated)
          // reenable-joins
          array_obj_ref_83_partial_sum_1_update_start o<-& (array_obj_ref_83_sample_completed_ 0)
          array_obj_ref_83_sample_start_ &-> (array_obj_ref_83_Sample)
          array_obj_ref_83_sample_completed_ <-& (array_obj_ref_83_Sample)
          array_obj_ref_83_sample_completed_ &-> ($null)
          array_obj_ref_83_update_start_ &-> (array_obj_ref_83_Update)
          array_obj_ref_83_update_completed_ <-& (array_obj_ref_83_Update)
          // self-release: 
          array_obj_ref_83_sample_start_ o<-& (array_obj_ref_83_sample_completed_ 1)
          $null &-> (array_obj_ref_83_update_start_)
          array_obj_ref_83_update_start_ o<-& (array_obj_ref_83_update_completed_ 0)
          // Target expression
          // (as target) a_rc_3
          // start: WAR dependencies for a_rc_3
          // done: WAR dependencies for a_rc_3
          // end:  			a_rc_3 := D_MEM[R][Index] $buffering 1// bits of buffering = 32. 
          // start:  			xval_0 := x0[Index] $buffering 1// bits of buffering = 32. 
          //  file .Aa/mvp.opt.aa, line 53
          // Source expression
          // x0[Index]
          $T[array_obj_ref_93_base_address_calculated] 
          $T[array_obj_ref_93_sample_start_] 
          $T[array_obj_ref_93_sample_completed_] 
          $T[array_obj_ref_93_update_start_] 
          $T[array_obj_ref_93_update_completed_] 
          $T[array_obj_ref_93_word_address_calculated] 
          $T[array_obj_ref_93_root_address_calculated] 
          $T[array_obj_ref_93_offset_calculated] 
          $T[array_obj_ref_93_index_resized_0] 
          $T[array_obj_ref_93_index_scaled_0] 
          $T[array_obj_ref_93_index_computed_0] 
          // Index
          // start: Forward dependencies from Index to transition array_obj_ref_93_index_computed_0
          array_obj_ref_93_index_computed_0 <-& (phi_stmt_38_update_completed_)
          // done: Forward dependencies from Index to transition array_obj_ref_93_index_computed_0
          ;;[array_obj_ref_93_index_resize_0] 
          {
            $T [index_resize_req] $T [index_resize_ack] // resize index to address-width
          }
          array_obj_ref_93_index_computed_0 &-> (array_obj_ref_93_index_resize_0)
          array_obj_ref_93_index_resized_0 <-& (array_obj_ref_93_index_resize_0)
          ;;[array_obj_ref_93_index_scale_0] 
          {
            $T [scale_rename_req] $T [scale_rename_ack] // rename 
          }
          array_obj_ref_93_index_resized_0 &-> (array_obj_ref_93_index_scale_0)
          array_obj_ref_93_index_scaled_0 <-& (array_obj_ref_93_index_scale_0)
          ;;[array_obj_ref_93_final_index_sum_regn] 
          {
            $T [req] $T [ack] // rename
          }
          array_obj_ref_93_index_scaled_0 &-> (array_obj_ref_93_final_index_sum_regn)
          array_obj_ref_93_offset_calculated <-& (array_obj_ref_93_final_index_sum_regn)
          ;;[array_obj_ref_93_base_plus_offset] 
          {
            $T [sum_rename_req] $T [sum_rename_ack] // one gets through 
          }
          array_obj_ref_93_offset_calculated &-> (array_obj_ref_93_base_plus_offset)
          array_obj_ref_93_root_address_calculated <-& (array_obj_ref_93_base_plus_offset)
          ;;[array_obj_ref_93_word_addrgen] 
          {
            $T [root_register_req] $T [root_register_ack]
          }
          array_obj_ref_93_root_address_calculated &-> (array_obj_ref_93_word_addrgen)
          array_obj_ref_93_word_address_calculated <-& (array_obj_ref_93_word_addrgen)
          ;;[array_obj_ref_93_Sample] 
          {
            ||[word_access_start] 
            {
              ;;[word_0] 
              {
                $T [rr] $T [ra] 
              }
            }
          }
          ;;[array_obj_ref_93_Update] 
          {
            ||[word_access_complete] 
            {
              ;;[word_0] 
              {
                $T [cr] $T [ca] 
              }
            }
            ;;[array_obj_ref_93_Merge] 
            {
              $T [merge_req] $T [merge_ack]
            }
          }
          array_obj_ref_93_sample_start_ <-& (array_obj_ref_93_word_address_calculated)
          // reenable-joins
          phi_stmt_38_update_start_ o<-& (array_obj_ref_93_sample_completed_ 0)
          array_obj_ref_93_sample_start_ &-> (array_obj_ref_93_Sample)
          array_obj_ref_93_sample_completed_ <-& (array_obj_ref_93_Sample)
          array_obj_ref_93_sample_completed_ &-> ($null)
          array_obj_ref_93_update_start_ &-> (array_obj_ref_93_Update)
          array_obj_ref_93_update_completed_ <-& (array_obj_ref_93_Update)
          // self-release: 
          array_obj_ref_93_sample_start_ o<-& (array_obj_ref_93_sample_completed_ 1)
          $null &-> (array_obj_ref_93_update_start_)
          array_obj_ref_93_update_start_ o<-& (array_obj_ref_93_update_completed_ 0)
          // Target expression
          // (as target) xval_0
          // start: WAR dependencies for xval_0
          // done: WAR dependencies for xval_0
          // end:  			xval_0 := x0[Index] $buffering 1// bits of buffering = 32. 
          // start:  			xval_1 := x1[Index] $buffering 1// bits of buffering = 32. 
          //  file .Aa/mvp.opt.aa, line 54
          // Source expression
          // x1[Index]
          $T[array_obj_ref_97_base_address_calculated] 
          $T[array_obj_ref_97_sample_start_] 
          $T[array_obj_ref_97_sample_completed_] 
          $T[array_obj_ref_97_update_start_] 
          $T[array_obj_ref_97_update_completed_] 
          $T[array_obj_ref_97_word_address_calculated] 
          $T[array_obj_ref_97_root_address_calculated] 
          $T[array_obj_ref_97_offset_calculated] 
          $T[array_obj_ref_97_index_resized_0] 
          $T[array_obj_ref_97_index_scaled_0] 
          $T[array_obj_ref_97_index_computed_0] 
          // Index
          // start: Forward dependencies from Index to transition array_obj_ref_97_index_computed_0
          array_obj_ref_97_index_computed_0 <-& (phi_stmt_38_update_completed_)
          // done: Forward dependencies from Index to transition array_obj_ref_97_index_computed_0
          ;;[array_obj_ref_97_index_resize_0] 
          {
            $T [index_resize_req] $T [index_resize_ack] // resize index to address-width
          }
          array_obj_ref_97_index_computed_0 &-> (array_obj_ref_97_index_resize_0)
          array_obj_ref_97_index_resized_0 <-& (array_obj_ref_97_index_resize_0)
          ;;[array_obj_ref_97_index_scale_0] 
          {
            $T [scale_rename_req] $T [scale_rename_ack] // rename 
          }
          array_obj_ref_97_index_resized_0 &-> (array_obj_ref_97_index_scale_0)
          array_obj_ref_97_index_scaled_0 <-& (array_obj_ref_97_index_scale_0)
          ;;[array_obj_ref_97_final_index_sum_regn] 
          {
            $T [req] $T [ack] // rename
          }
          array_obj_ref_97_index_scaled_0 &-> (array_obj_ref_97_final_index_sum_regn)
          array_obj_ref_97_offset_calculated <-& (array_obj_ref_97_final_index_sum_regn)
          ;;[array_obj_ref_97_base_plus_offset] 
          {
            $T [sum_rename_req] $T [sum_rename_ack] // one gets through 
          }
          array_obj_ref_97_offset_calculated &-> (array_obj_ref_97_base_plus_offset)
          array_obj_ref_97_root_address_calculated <-& (array_obj_ref_97_base_plus_offset)
          ;;[array_obj_ref_97_word_addrgen] 
          {
            $T [root_register_req] $T [root_register_ack]
          }
          array_obj_ref_97_root_address_calculated &-> (array_obj_ref_97_word_addrgen)
          array_obj_ref_97_word_address_calculated <-& (array_obj_ref_97_word_addrgen)
          ;;[array_obj_ref_97_Sample] 
          {
            ||[word_access_start] 
            {
              ;;[word_0] 
              {
                $T [rr] $T [ra] 
              }
            }
          }
          ;;[array_obj_ref_97_Update] 
          {
            ||[word_access_complete] 
            {
              ;;[word_0] 
              {
                $T [cr] $T [ca] 
              }
            }
            ;;[array_obj_ref_97_Merge] 
            {
              $T [merge_req] $T [merge_ack]
            }
          }
          array_obj_ref_97_sample_start_ <-& (array_obj_ref_97_word_address_calculated)
          // reenable-joins
          phi_stmt_38_update_start_ o<-& (array_obj_ref_97_sample_completed_ 0)
          array_obj_ref_97_sample_start_ &-> (array_obj_ref_97_Sample)
          array_obj_ref_97_sample_completed_ <-& (array_obj_ref_97_Sample)
          array_obj_ref_97_sample_completed_ &-> ($null)
          array_obj_ref_97_update_start_ &-> (array_obj_ref_97_Update)
          array_obj_ref_97_update_completed_ <-& (array_obj_ref_97_Update)
          // self-release: 
          array_obj_ref_97_sample_start_ o<-& (array_obj_ref_97_sample_completed_ 1)
          $null &-> (array_obj_ref_97_update_start_)
          array_obj_ref_97_update_start_ o<-& (array_obj_ref_97_update_completed_ 0)
          // Target expression
          // (as target) xval_1
          // start: WAR dependencies for xval_1
          // done: WAR dependencies for xval_1
          // end:  			xval_1 := x1[Index] $buffering 1// bits of buffering = 32. 
          // start:  			xval_2 := x2[Index] $buffering 1// bits of buffering = 32. 
          //  file .Aa/mvp.opt.aa, line 55
          // Source expression
          // x2[Index]
          $T[array_obj_ref_101_base_address_calculated] 
          $T[array_obj_ref_101_sample_start_] 
          $T[array_obj_ref_101_sample_completed_] 
          $T[array_obj_ref_101_update_start_] 
          $T[array_obj_ref_101_update_completed_] 
          $T[array_obj_ref_101_word_address_calculated] 
          $T[array_obj_ref_101_root_address_calculated] 
          $T[array_obj_ref_101_offset_calculated] 
          $T[array_obj_ref_101_index_resized_0] 
          $T[array_obj_ref_101_index_scaled_0] 
          $T[array_obj_ref_101_index_computed_0] 
          // Index
          // start: Forward dependencies from Index to transition array_obj_ref_101_index_computed_0
          array_obj_ref_101_index_computed_0 <-& (phi_stmt_38_update_completed_)
          // done: Forward dependencies from Index to transition array_obj_ref_101_index_computed_0
          ;;[array_obj_ref_101_index_resize_0] 
          {
            $T [index_resize_req] $T [index_resize_ack] // resize index to address-width
          }
          array_obj_ref_101_index_computed_0 &-> (array_obj_ref_101_index_resize_0)
          array_obj_ref_101_index_resized_0 <-& (array_obj_ref_101_index_resize_0)
          ;;[array_obj_ref_101_index_scale_0] 
          {
            $T [scale_rename_req] $T [scale_rename_ack] // rename 
          }
          array_obj_ref_101_index_resized_0 &-> (array_obj_ref_101_index_scale_0)
          array_obj_ref_101_index_scaled_0 <-& (array_obj_ref_101_index_scale_0)
          ;;[array_obj_ref_101_final_index_sum_regn] 
          {
            $T [req] $T [ack] // rename
          }
          array_obj_ref_101_index_scaled_0 &-> (array_obj_ref_101_final_index_sum_regn)
          array_obj_ref_101_offset_calculated <-& (array_obj_ref_101_final_index_sum_regn)
          ;;[array_obj_ref_101_base_plus_offset] 
          {
            $T [sum_rename_req] $T [sum_rename_ack] // one gets through 
          }
          array_obj_ref_101_offset_calculated &-> (array_obj_ref_101_base_plus_offset)
          array_obj_ref_101_root_address_calculated <-& (array_obj_ref_101_base_plus_offset)
          ;;[array_obj_ref_101_word_addrgen] 
          {
            $T [root_register_req] $T [root_register_ack]
          }
          array_obj_ref_101_root_address_calculated &-> (array_obj_ref_101_word_addrgen)
          array_obj_ref_101_word_address_calculated <-& (array_obj_ref_101_word_addrgen)
          ;;[array_obj_ref_101_Sample] 
          {
            ||[word_access_start] 
            {
              ;;[word_0] 
              {
                $T [rr] $T [ra] 
              }
            }
          }
          ;;[array_obj_ref_101_Update] 
          {
            ||[word_access_complete] 
            {
              ;;[word_0] 
              {
                $T [cr] $T [ca] 
              }
            }
            ;;[array_obj_ref_101_Merge] 
            {
              $T [merge_req] $T [merge_ack]
            }
          }
          array_obj_ref_101_sample_start_ <-& (array_obj_ref_101_word_address_calculated)
          // reenable-joins
          phi_stmt_38_update_start_ o<-& (array_obj_ref_101_sample_completed_ 0)
          array_obj_ref_101_sample_start_ &-> (array_obj_ref_101_Sample)
          array_obj_ref_101_sample_completed_ <-& (array_obj_ref_101_Sample)
          array_obj_ref_101_sample_completed_ &-> ($null)
          array_obj_ref_101_update_start_ &-> (array_obj_ref_101_Update)
          array_obj_ref_101_update_completed_ <-& (array_obj_ref_101_Update)
          // self-release: 
          array_obj_ref_101_sample_start_ o<-& (array_obj_ref_101_sample_completed_ 1)
          $null &-> (array_obj_ref_101_update_start_)
          array_obj_ref_101_update_start_ o<-& (array_obj_ref_101_update_completed_ 0)
          // Target expression
          // (as target) xval_2
          // start: WAR dependencies for xval_2
          // done: WAR dependencies for xval_2
          // end:  			xval_2 := x2[Index] $buffering 1// bits of buffering = 32. 
          // start:  			xval_3 := x3[Index] $buffering 1// bits of buffering = 32. 
          //  file .Aa/mvp.opt.aa, line 56
          // Source expression
          // x3[Index]
          $T[array_obj_ref_105_base_address_calculated] 
          $T[array_obj_ref_105_sample_start_] 
          $T[array_obj_ref_105_sample_completed_] 
          $T[array_obj_ref_105_update_start_] 
          $T[array_obj_ref_105_update_completed_] 
          $T[array_obj_ref_105_word_address_calculated] 
          $T[array_obj_ref_105_root_address_calculated] 
          $T[array_obj_ref_105_offset_calculated] 
          $T[array_obj_ref_105_index_resized_0] 
          $T[array_obj_ref_105_index_scaled_0] 
          $T[array_obj_ref_105_index_computed_0] 
          // Index
          // start: Forward dependencies from Index to transition array_obj_ref_105_index_computed_0
          array_obj_ref_105_index_computed_0 <-& (phi_stmt_38_update_completed_)
          // done: Forward dependencies from Index to transition array_obj_ref_105_index_computed_0
          ;;[array_obj_ref_105_index_resize_0] 
          {
            $T [index_resize_req] $T [index_resize_ack] // resize index to address-width
          }
          array_obj_ref_105_index_computed_0 &-> (array_obj_ref_105_index_resize_0)
          array_obj_ref_105_index_resized_0 <-& (array_obj_ref_105_index_resize_0)
          ;;[array_obj_ref_105_index_scale_0] 
          {
            $T [scale_rename_req] $T [scale_rename_ack] // rename 
          }
          array_obj_ref_105_index_resized_0 &-> (array_obj_ref_105_index_scale_0)
          array_obj_ref_105_index_scaled_0 <-& (array_obj_ref_105_index_scale_0)
          ;;[array_obj_ref_105_final_index_sum_regn] 
          {
            $T [req] $T [ack] // rename
          }
          array_obj_ref_105_index_scaled_0 &-> (array_obj_ref_105_final_index_sum_regn)
          array_obj_ref_105_offset_calculated <-& (array_obj_ref_105_final_index_sum_regn)
          ;;[array_obj_ref_105_base_plus_offset] 
          {
            $T [sum_rename_req] $T [sum_rename_ack] // one gets through 
          }
          array_obj_ref_105_offset_calculated &-> (array_obj_ref_105_base_plus_offset)
          array_obj_ref_105_root_address_calculated <-& (array_obj_ref_105_base_plus_offset)
          ;;[array_obj_ref_105_word_addrgen] 
          {
            $T [root_register_req] $T [root_register_ack]
          }
          array_obj_ref_105_root_address_calculated &-> (array_obj_ref_105_word_addrgen)
          array_obj_ref_105_word_address_calculated <-& (array_obj_ref_105_word_addrgen)
          ;;[array_obj_ref_105_Sample] 
          {
            ||[word_access_start] 
            {
              ;;[word_0] 
              {
                $T [rr] $T [ra] 
              }
            }
          }
          ;;[array_obj_ref_105_Update] 
          {
            ||[word_access_complete] 
            {
              ;;[word_0] 
              {
                $T [cr] $T [ca] 
              }
            }
            ;;[array_obj_ref_105_Merge] 
            {
              $T [merge_req] $T [merge_ack]
            }
          }
          array_obj_ref_105_sample_start_ <-& (array_obj_ref_105_word_address_calculated)
          // reenable-joins
          phi_stmt_38_update_start_ o<-& (array_obj_ref_105_sample_completed_ 0)
          array_obj_ref_105_sample_start_ &-> (array_obj_ref_105_Sample)
          array_obj_ref_105_sample_completed_ <-& (array_obj_ref_105_Sample)
          array_obj_ref_105_sample_completed_ &-> ($null)
          array_obj_ref_105_update_start_ &-> (array_obj_ref_105_Update)
          array_obj_ref_105_update_completed_ <-& (array_obj_ref_105_Update)
          // self-release: 
          array_obj_ref_105_sample_start_ o<-& (array_obj_ref_105_sample_completed_ 1)
          $null &-> (array_obj_ref_105_update_start_)
          array_obj_ref_105_update_start_ o<-& (array_obj_ref_105_update_completed_ 0)
          // Target expression
          // (as target) xval_3
          // start: WAR dependencies for xval_3
          // done: WAR dependencies for xval_3
          // end:  			xval_3 := x3[Index] $buffering 1// bits of buffering = 32. 
          // start:  			val_0_114_delayed_5_0 := val_0 $buffering 5 $cut_through // bits of buffering = 160. 
          //  file .Aa/mvp.opt.aa, line 58
          $T[assign_stmt_115_sample_start_] 
          $T[assign_stmt_115_sample_completed_] 
          $T[assign_stmt_115_update_start_] 
          $T[assign_stmt_115_update_completed_] 
          // Source expression
          // val_0
          // Target expression
          // (as target) val_0_114_delayed_5_0
          // both source and target are implicit: use interlock 
          // Interlock 
          ;;[assign_stmt_115_Sample] 
          {
            $T [req] $T [ack] // interlock-sample.
          }
          ;;[assign_stmt_115_Update] 
          {
            $T [req] $T [ack] // interlock-update.
          }
          assign_stmt_115_sample_start_ &-> (assign_stmt_115_Sample)
          assign_stmt_115_sample_completed_ <-& (assign_stmt_115_Sample)
          assign_stmt_115_sample_completed_ &-> ($null)
          assign_stmt_115_update_start_ &-> (assign_stmt_115_Update)
          assign_stmt_115_update_completed_ <-& (assign_stmt_115_Update)
          // start: Forward dependencies from val_0 to transition assign_stmt_115_sample_start_
          assign_stmt_115_sample_start_ <-& (phi_stmt_44_update_completed_)
          // done: Forward dependencies from val_0 to transition assign_stmt_115_sample_start_
          // RAW reenables for val_0
          phi_stmt_44_update_start_ o<-& (assign_stmt_115_sample_completed_ 0)
          // self-release: 
          assign_stmt_115_sample_start_ o<-& (assign_stmt_115_sample_completed_ 1)
          $null &-> (assign_stmt_115_update_start_)
          assign_stmt_115_update_start_ o<-& (assign_stmt_115_update_completed_ 0)
          // start: WAR dependencies for val_0_114_delayed_5_0
          // done: WAR dependencies for val_0_114_delayed_5_0
          // end:  			val_0_114_delayed_5_0 := val_0 $buffering 5 $cut_through // bits of buffering = 160. 
          // start: WAR dependencies for nval_0
          // WAR dependency: Read: nval_0 before Write: 			$volatile nval_0 := (val_0_114_delayed_5_0 + (a_rc_0 * xval_0)) $buffering 1
          array_obj_ref_68_update_start_ <-& (phi_stmt_44_sample_completed_)
          phi_stmt_44_sample_start_ o<-& (array_obj_ref_68_update_completed_ 0)
          // WAR dependency: release  Read: nval_0 with Write: 			a_rc_0 := A_MEM[R][Index] $buffering 1// bits of buffering = 32. 
          array_obj_ref_93_update_start_ <-& (phi_stmt_44_sample_completed_)
          phi_stmt_44_sample_start_ o<-& (array_obj_ref_93_update_completed_ 0)
          // WAR dependency: release  Read: nval_0 with Write: 			xval_0 := x0[Index] $buffering 1// bits of buffering = 32. 
          assign_stmt_115_update_start_ <-& (phi_stmt_44_sample_completed_)
          phi_stmt_44_sample_start_ o<-& (assign_stmt_115_update_completed_ 0)
          // WAR dependency: release  Read: nval_0 with Write: 			val_0_114_delayed_5_0 := val_0 $buffering 5 $cut_through // bits of buffering = 160. 
          // done: WAR dependencies for nval_0
          // start:  			$volatile nval_0 := (val_0_114_delayed_5_0 + (a_rc_0 * xval_0)) $buffering 1
          //  file .Aa/mvp.opt.aa, line 59
          // volatile! 
          // Source expression
          // (val_0_114_delayed_5_0 + (a_rc_0 * xval_0))
          // val_0_114_delayed_5_0
          // (a_rc_0 * xval_0)
          // a_rc_0
          // xval_0
          // Target expression
          // (as target) nval_0
          // start: WAR dependencies for nval_0
          // WAR dependency: Read: nval_0 before Write: 			$volatile nval_0 := (val_0_114_delayed_5_0 + (a_rc_0 * xval_0)) $buffering 1
          array_obj_ref_68_update_start_ <-& (phi_stmt_44_sample_completed_)
          phi_stmt_44_sample_start_ o<-& (array_obj_ref_68_update_completed_ 0)
          // WAR dependency: release  Read: nval_0 with Write: 			a_rc_0 := A_MEM[R][Index] $buffering 2// bits of buffering = 64. 
          array_obj_ref_93_update_start_ <-& (phi_stmt_44_sample_completed_)
          phi_stmt_44_sample_start_ o<-& (array_obj_ref_93_update_completed_ 0)
          // WAR dependency: release  Read: nval_0 with Write: 			xval_0 := x0[Index] $buffering 2// bits of buffering = 64. 
          assign_stmt_115_update_start_ <-& (phi_stmt_44_sample_completed_)
          phi_stmt_44_sample_start_ o<-& (assign_stmt_115_update_completed_ 0)
          // WAR dependency: release  Read: nval_0 with Write: 			val_0_114_delayed_5_0 := val_0 $buffering 5 $cut_through // bits of buffering = 160. 
          // done: WAR dependencies for nval_0
          // end:  			$volatile nval_0 := (val_0_114_delayed_5_0 + (a_rc_0 * xval_0)) $buffering 1
          // start:  			val_1_121_delayed_5_0 := val_1 $buffering 5 $cut_through // bits of buffering = 160. 
          //  file .Aa/mvp.opt.aa, line 60
          $T[assign_stmt_125_sample_start_] 
          $T[assign_stmt_125_sample_completed_] 
          $T[assign_stmt_125_update_start_] 
          $T[assign_stmt_125_update_completed_] 
          // Source expression
          // val_1
          // Target expression
          // (as target) val_1_121_delayed_5_0
          // both source and target are implicit: use interlock 
          // Interlock 
          ;;[assign_stmt_125_Sample] 
          {
            $T [req] $T [ack] // interlock-sample.
          }
          ;;[assign_stmt_125_Update] 
          {
            $T [req] $T [ack] // interlock-update.
          }
          assign_stmt_125_sample_start_ &-> (assign_stmt_125_Sample)
          assign_stmt_125_sample_completed_ <-& (assign_stmt_125_Sample)
          assign_stmt_125_sample_completed_ &-> ($null)
          assign_stmt_125_update_start_ &-> (assign_stmt_125_Update)
          assign_stmt_125_update_completed_ <-& (assign_stmt_125_Update)
          // start: Forward dependencies from val_1 to transition assign_stmt_125_sample_start_
          assign_stmt_125_sample_start_ <-& (phi_stmt_49_update_completed_)
          // done: Forward dependencies from val_1 to transition assign_stmt_125_sample_start_
          // RAW reenables for val_1
          phi_stmt_49_update_start_ o<-& (assign_stmt_125_sample_completed_ 0)
          // self-release: 
          assign_stmt_125_sample_start_ o<-& (assign_stmt_125_sample_completed_ 1)
          $null &-> (assign_stmt_125_update_start_)
          assign_stmt_125_update_start_ o<-& (assign_stmt_125_update_completed_ 0)
          // start: WAR dependencies for val_1_121_delayed_5_0
          // done: WAR dependencies for val_1_121_delayed_5_0
          // end:  			val_1_121_delayed_5_0 := val_1 $buffering 5 $cut_through // bits of buffering = 160. 
          // start: WAR dependencies for nval_1
          // WAR dependency: Read: nval_1 before Write: 			$volatile nval_1 := (val_1_121_delayed_5_0 + (a_rc_1 * xval_1)) $buffering 1
          array_obj_ref_73_update_start_ <-& (phi_stmt_49_sample_completed_)
          phi_stmt_49_sample_start_ o<-& (array_obj_ref_73_update_completed_ 0)
          // WAR dependency: release  Read: nval_1 with Write: 			a_rc_1 := B_MEM[R][Index] $buffering 1// bits of buffering = 32. 
          array_obj_ref_97_update_start_ <-& (phi_stmt_49_sample_completed_)
          phi_stmt_49_sample_start_ o<-& (array_obj_ref_97_update_completed_ 0)
          // WAR dependency: release  Read: nval_1 with Write: 			xval_1 := x1[Index] $buffering 1// bits of buffering = 32. 
          assign_stmt_125_update_start_ <-& (phi_stmt_49_sample_completed_)
          phi_stmt_49_sample_start_ o<-& (assign_stmt_125_update_completed_ 0)
          // WAR dependency: release  Read: nval_1 with Write: 			val_1_121_delayed_5_0 := val_1 $buffering 5 $cut_through // bits of buffering = 160. 
          // done: WAR dependencies for nval_1
          // start:  			$volatile nval_1 := (val_1_121_delayed_5_0 + (a_rc_1 * xval_1)) $buffering 1
          //  file .Aa/mvp.opt.aa, line 61
          // volatile! 
          // Source expression
          // (val_1_121_delayed_5_0 + (a_rc_1 * xval_1))
          // val_1_121_delayed_5_0
          // (a_rc_1 * xval_1)
          // a_rc_1
          // xval_1
          // Target expression
          // (as target) nval_1
          // start: WAR dependencies for nval_1
          // WAR dependency: Read: nval_1 before Write: 			$volatile nval_1 := (val_1_121_delayed_5_0 + (a_rc_1 * xval_1)) $buffering 1
          array_obj_ref_73_update_start_ <-& (phi_stmt_49_sample_completed_)
          phi_stmt_49_sample_start_ o<-& (array_obj_ref_73_update_completed_ 0)
          // WAR dependency: release  Read: nval_1 with Write: 			a_rc_1 := B_MEM[R][Index] $buffering 2// bits of buffering = 64. 
          array_obj_ref_97_update_start_ <-& (phi_stmt_49_sample_completed_)
          phi_stmt_49_sample_start_ o<-& (array_obj_ref_97_update_completed_ 0)
          // WAR dependency: release  Read: nval_1 with Write: 			xval_1 := x1[Index] $buffering 2// bits of buffering = 64. 
          assign_stmt_125_update_start_ <-& (phi_stmt_49_sample_completed_)
          phi_stmt_49_sample_start_ o<-& (assign_stmt_125_update_completed_ 0)
          // WAR dependency: release  Read: nval_1 with Write: 			val_1_121_delayed_5_0 := val_1 $buffering 5 $cut_through // bits of buffering = 160. 
          // done: WAR dependencies for nval_1
          // end:  			$volatile nval_1 := (val_1_121_delayed_5_0 + (a_rc_1 * xval_1)) $buffering 1
          // start:  			val_2_128_delayed_5_0 := val_2 $buffering 5 $cut_through // bits of buffering = 160. 
          //  file .Aa/mvp.opt.aa, line 62
          $T[assign_stmt_135_sample_start_] 
          $T[assign_stmt_135_sample_completed_] 
          $T[assign_stmt_135_update_start_] 
          $T[assign_stmt_135_update_completed_] 
          // Source expression
          // val_2
          // Target expression
          // (as target) val_2_128_delayed_5_0
          // both source and target are implicit: use interlock 
          // Interlock 
          ;;[assign_stmt_135_Sample] 
          {
            $T [req] $T [ack] // interlock-sample.
          }
          ;;[assign_stmt_135_Update] 
          {
            $T [req] $T [ack] // interlock-update.
          }
          assign_stmt_135_sample_start_ &-> (assign_stmt_135_Sample)
          assign_stmt_135_sample_completed_ <-& (assign_stmt_135_Sample)
          assign_stmt_135_sample_completed_ &-> ($null)
          assign_stmt_135_update_start_ &-> (assign_stmt_135_Update)
          assign_stmt_135_update_completed_ <-& (assign_stmt_135_Update)
          // start: Forward dependencies from val_2 to transition assign_stmt_135_sample_start_
          assign_stmt_135_sample_start_ <-& (phi_stmt_54_update_completed_)
          // done: Forward dependencies from val_2 to transition assign_stmt_135_sample_start_
          // RAW reenables for val_2
          phi_stmt_54_update_start_ o<-& (assign_stmt_135_sample_completed_ 0)
          // self-release: 
          assign_stmt_135_sample_start_ o<-& (assign_stmt_135_sample_completed_ 1)
          $null &-> (assign_stmt_135_update_start_)
          assign_stmt_135_update_start_ o<-& (assign_stmt_135_update_completed_ 0)
          // start: WAR dependencies for val_2_128_delayed_5_0
          // done: WAR dependencies for val_2_128_delayed_5_0
          // end:  			val_2_128_delayed_5_0 := val_2 $buffering 5 $cut_through // bits of buffering = 160. 
          // start: WAR dependencies for nval_2
          // WAR dependency: Read: nval_2 before Write: 			$volatile nval_2 := (val_2_128_delayed_5_0 + (a_rc_2 * xval_2)) $buffering 1
          array_obj_ref_78_update_start_ <-& (phi_stmt_54_sample_completed_)
          phi_stmt_54_sample_start_ o<-& (array_obj_ref_78_update_completed_ 0)
          // WAR dependency: release  Read: nval_2 with Write: 			a_rc_2 := C_MEM[R][Index] $buffering 1// bits of buffering = 32. 
          array_obj_ref_101_update_start_ <-& (phi_stmt_54_sample_completed_)
          phi_stmt_54_sample_start_ o<-& (array_obj_ref_101_update_completed_ 0)
          // WAR dependency: release  Read: nval_2 with Write: 			xval_2 := x2[Index] $buffering 1// bits of buffering = 32. 
          assign_stmt_135_update_start_ <-& (phi_stmt_54_sample_completed_)
          phi_stmt_54_sample_start_ o<-& (assign_stmt_135_update_completed_ 0)
          // WAR dependency: release  Read: nval_2 with Write: 			val_2_128_delayed_5_0 := val_2 $buffering 5 $cut_through // bits of buffering = 160. 
          // done: WAR dependencies for nval_2
          // start:  			$volatile nval_2 := (val_2_128_delayed_5_0 + (a_rc_2 * xval_2)) $buffering 1
          //  file .Aa/mvp.opt.aa, line 63
          // volatile! 
          // Source expression
          // (val_2_128_delayed_5_0 + (a_rc_2 * xval_2))
          // val_2_128_delayed_5_0
          // (a_rc_2 * xval_2)
          // a_rc_2
          // xval_2
          // Target expression
          // (as target) nval_2
          // start: WAR dependencies for nval_2
          // WAR dependency: Read: nval_2 before Write: 			$volatile nval_2 := (val_2_128_delayed_5_0 + (a_rc_2 * xval_2)) $buffering 1
          array_obj_ref_78_update_start_ <-& (phi_stmt_54_sample_completed_)
          phi_stmt_54_sample_start_ o<-& (array_obj_ref_78_update_completed_ 0)
          // WAR dependency: release  Read: nval_2 with Write: 			a_rc_2 := C_MEM[R][Index] $buffering 2// bits of buffering = 64. 
          array_obj_ref_101_update_start_ <-& (phi_stmt_54_sample_completed_)
          phi_stmt_54_sample_start_ o<-& (array_obj_ref_101_update_completed_ 0)
          // WAR dependency: release  Read: nval_2 with Write: 			xval_2 := x2[Index] $buffering 2// bits of buffering = 64. 
          assign_stmt_135_update_start_ <-& (phi_stmt_54_sample_completed_)
          phi_stmt_54_sample_start_ o<-& (assign_stmt_135_update_completed_ 0)
          // WAR dependency: release  Read: nval_2 with Write: 			val_2_128_delayed_5_0 := val_2 $buffering 5 $cut_through // bits of buffering = 160. 
          // done: WAR dependencies for nval_2
          // end:  			$volatile nval_2 := (val_2_128_delayed_5_0 + (a_rc_2 * xval_2)) $buffering 1
          // start:  			val_3_135_delayed_5_0 := val_3 $buffering 5 $cut_through // bits of buffering = 160. 
          //  file .Aa/mvp.opt.aa, line 64
          $T[assign_stmt_145_sample_start_] 
          $T[assign_stmt_145_sample_completed_] 
          $T[assign_stmt_145_update_start_] 
          $T[assign_stmt_145_update_completed_] 
          // Source expression
          // val_3
          // Target expression
          // (as target) val_3_135_delayed_5_0
          // both source and target are implicit: use interlock 
          // Interlock 
          ;;[assign_stmt_145_Sample] 
          {
            $T [req] $T [ack] // interlock-sample.
          }
          ;;[assign_stmt_145_Update] 
          {
            $T [req] $T [ack] // interlock-update.
          }
          assign_stmt_145_sample_start_ &-> (assign_stmt_145_Sample)
          assign_stmt_145_sample_completed_ <-& (assign_stmt_145_Sample)
          assign_stmt_145_sample_completed_ &-> ($null)
          assign_stmt_145_update_start_ &-> (assign_stmt_145_Update)
          assign_stmt_145_update_completed_ <-& (assign_stmt_145_Update)
          // start: Forward dependencies from val_3 to transition assign_stmt_145_sample_start_
          assign_stmt_145_sample_start_ <-& (phi_stmt_59_update_completed_)
          // done: Forward dependencies from val_3 to transition assign_stmt_145_sample_start_
          // RAW reenables for val_3
          phi_stmt_59_update_start_ o<-& (assign_stmt_145_sample_completed_ 0)
          // self-release: 
          assign_stmt_145_sample_start_ o<-& (assign_stmt_145_sample_completed_ 1)
          $null &-> (assign_stmt_145_update_start_)
          assign_stmt_145_update_start_ o<-& (assign_stmt_145_update_completed_ 0)
          // start: WAR dependencies for val_3_135_delayed_5_0
          // done: WAR dependencies for val_3_135_delayed_5_0
          // end:  			val_3_135_delayed_5_0 := val_3 $buffering 5 $cut_through // bits of buffering = 160. 
          // start: WAR dependencies for nval_3
          // WAR dependency: Read: nval_3 before Write: 			$volatile nval_3 := (val_3_135_delayed_5_0 + (a_rc_3 * xval_3)) $buffering 1
          array_obj_ref_83_update_start_ <-& (phi_stmt_59_sample_completed_)
          phi_stmt_59_sample_start_ o<-& (array_obj_ref_83_update_completed_ 0)
          // WAR dependency: release  Read: nval_3 with Write: 			a_rc_3 := D_MEM[R][Index] $buffering 1// bits of buffering = 32. 
          array_obj_ref_105_update_start_ <-& (phi_stmt_59_sample_completed_)
          phi_stmt_59_sample_start_ o<-& (array_obj_ref_105_update_completed_ 0)
          // WAR dependency: release  Read: nval_3 with Write: 			xval_3 := x3[Index] $buffering 1// bits of buffering = 32. 
          assign_stmt_145_update_start_ <-& (phi_stmt_59_sample_completed_)
          phi_stmt_59_sample_start_ o<-& (assign_stmt_145_update_completed_ 0)
          // WAR dependency: release  Read: nval_3 with Write: 			val_3_135_delayed_5_0 := val_3 $buffering 5 $cut_through // bits of buffering = 160. 
          // done: WAR dependencies for nval_3
          // start:  			$volatile nval_3 := (val_3_135_delayed_5_0 + (a_rc_3 * xval_3)) $buffering 1
          //  file .Aa/mvp.opt.aa, line 65
          // volatile! 
          // Source expression
          // (val_3_135_delayed_5_0 + (a_rc_3 * xval_3))
          // val_3_135_delayed_5_0
          // (a_rc_3 * xval_3)
          // a_rc_3
          // xval_3
          // Target expression
          // (as target) nval_3
          // start: WAR dependencies for nval_3
          // WAR dependency: Read: nval_3 before Write: 			$volatile nval_3 := (val_3_135_delayed_5_0 + (a_rc_3 * xval_3)) $buffering 1
          array_obj_ref_83_update_start_ <-& (phi_stmt_59_sample_completed_)
          phi_stmt_59_sample_start_ o<-& (array_obj_ref_83_update_completed_ 0)
          // WAR dependency: release  Read: nval_3 with Write: 			a_rc_3 := D_MEM[R][Index] $buffering 2// bits of buffering = 64. 
          array_obj_ref_105_update_start_ <-& (phi_stmt_59_sample_completed_)
          phi_stmt_59_sample_start_ o<-& (array_obj_ref_105_update_completed_ 0)
          // WAR dependency: release  Read: nval_3 with Write: 			xval_3 := x3[Index] $buffering 2// bits of buffering = 64. 
          assign_stmt_145_update_start_ <-& (phi_stmt_59_sample_completed_)
          phi_stmt_59_sample_start_ o<-& (assign_stmt_145_update_completed_ 0)
          // WAR dependency: release  Read: nval_3 with Write: 			val_3_135_delayed_5_0 := val_3 $buffering 5 $cut_through // bits of buffering = 160. 
          // done: WAR dependencies for nval_3
          // end:  			$volatile nval_3 := (val_3_135_delayed_5_0 + (a_rc_3 * xval_3)) $buffering 1
          // start:  			nC := (C + 4 ) $buffering 1// bits of buffering = 8. 
          //  file .Aa/mvp.opt.aa, line 67
          // Source expression
          // (C + 4 )
          $T[ADD_u8_u8_161_sample_start_] 
          $T[ADD_u8_u8_161_sample_completed_] 
          $T[ADD_u8_u8_161_update_start_] 
          $T[ADD_u8_u8_161_update_completed_] 
          // C
          // start: Forward dependencies from C to transition ADD_u8_u8_161_sample_start_
          ADD_u8_u8_161_sample_start_ <-& (phi_stmt_33_update_completed_)
          // done: Forward dependencies from C to transition ADD_u8_u8_161_sample_start_
          ;;[ADD_u8_u8_161_Sample] 
          {
            // binary expression 
            $T [rr] $T [ra]  // (split) binary operation 
          }
          ;;[ADD_u8_u8_161_Update] 
          {
            // binary expression 
            $T [cr] $T [ca] // (split) binary operation 
          }
          ADD_u8_u8_161_sample_start_ &-> (ADD_u8_u8_161_Sample)
          ADD_u8_u8_161_sample_completed_ <-& (ADD_u8_u8_161_Sample)
          ADD_u8_u8_161_sample_completed_ &-> ($null)
          ADD_u8_u8_161_update_start_ &-> (ADD_u8_u8_161_Update)
          ADD_u8_u8_161_update_completed_ <-& (ADD_u8_u8_161_Update)
          // RAW reenables for C
          phi_stmt_33_update_start_ o<-& (ADD_u8_u8_161_sample_completed_ 0)
          // self-release: 
          ADD_u8_u8_161_sample_start_ o<-& (ADD_u8_u8_161_sample_completed_ 1)
          $null &-> (ADD_u8_u8_161_update_start_)
          ADD_u8_u8_161_update_start_ o<-& (ADD_u8_u8_161_update_completed_ 0)
          // Target expression
          // (as target) nC
          // start: WAR dependencies for nC
          // WAR dependency: Read: nC before Write: 			nC := (C + 4 ) $buffering 1// bits of buffering = 8. 
          ADD_u8_u8_161_update_start_ <-& (phi_stmt_33_sample_completed_)
          phi_stmt_33_sample_start_ o<-& (ADD_u8_u8_161_update_completed_ 0)
          // WAR dependency: release  Read: nC with Write: 			nC := (C + 4 ) $buffering 1// bits of buffering = 8. 
          // done: WAR dependencies for nC
          // end:  			nC := (C + 4 ) $buffering 2// bits of buffering = 16. 
          // start:  			nIndex := (Index + 1 ) $buffering 1// bits of buffering = 3. 
          //  file .Aa/mvp.opt.aa, line 68
          // Source expression
          // (Index + 1 )
          $T[ADD_u3_u3_166_sample_start_] 
          $T[ADD_u3_u3_166_sample_completed_] 
          $T[ADD_u3_u3_166_update_start_] 
          $T[ADD_u3_u3_166_update_completed_] 
          // Index
          // start: Forward dependencies from Index to transition ADD_u3_u3_166_sample_start_
          ADD_u3_u3_166_sample_start_ <-& (phi_stmt_38_update_completed_)
          // done: Forward dependencies from Index to transition ADD_u3_u3_166_sample_start_
          ;;[ADD_u3_u3_166_Sample] 
          {
            // binary expression 
            $T [rr] $T [ra]  // (split) binary operation 
          }
          ;;[ADD_u3_u3_166_Update] 
          {
            // binary expression 
            $T [cr] $T [ca] // (split) binary operation 
          }
          ADD_u3_u3_166_sample_start_ &-> (ADD_u3_u3_166_Sample)
          ADD_u3_u3_166_sample_completed_ <-& (ADD_u3_u3_166_Sample)
          ADD_u3_u3_166_sample_completed_ &-> ($null)
          ADD_u3_u3_166_update_start_ &-> (ADD_u3_u3_166_Update)
          ADD_u3_u3_166_update_completed_ <-& (ADD_u3_u3_166_Update)
          // RAW reenables for Index
          phi_stmt_38_update_start_ o<-& (ADD_u3_u3_166_sample_completed_ 0)
          // self-release: 
          ADD_u3_u3_166_sample_start_ o<-& (ADD_u3_u3_166_sample_completed_ 1)
          $null &-> (ADD_u3_u3_166_update_start_)
          ADD_u3_u3_166_update_start_ o<-& (ADD_u3_u3_166_update_completed_ 0)
          // Target expression
          // (as target) nIndex
          // start: WAR dependencies for nIndex
          // WAR dependency: Read: nIndex before Write: 			nIndex := (Index + 1 ) $buffering 1// bits of buffering = 3. 
          ADD_u3_u3_166_update_start_ <-& (phi_stmt_38_sample_completed_)
          phi_stmt_38_sample_start_ o<-& (ADD_u3_u3_166_update_completed_ 0)
          // WAR dependency: release  Read: nIndex with Write: 			nIndex := (Index + 1 ) $buffering 1// bits of buffering = 3. 
          // done: WAR dependencies for nIndex
          // end:  			nIndex := (Index + 1 ) $buffering 2// bits of buffering = 6. 
          // (nC < 32 )
          // nC
          $T [loop_body_delay_to_condition_start] $delay
          loop_body_start &-> (loop_body_delay_to_condition_start)
          loop_body_delay_to_condition_start &-> (condition_evaluated)
          // start: Forward dependencies from (nC < 32 ) to transition condition_evaluated
          condition_evaluated <-& (ADD_u8_u8_161_update_completed_)
          // done: Forward dependencies from (nC < 32 ) to transition condition_evaluated
          condition_evaluated &-> ($null)
          // load-store dependencies..
          // memory-space  memory_space_7
          //  array_obj_ref_105 load
          // reenable across ring for memory space memory_space_7
          // leading and trailing sets are the same... no ring dependency
          // memory-space  memory_space_6
          //  array_obj_ref_101 load
          // reenable across ring for memory space memory_space_6
          // leading and trailing sets are the same... no ring dependency
          // memory-space  memory_space_5
          //  array_obj_ref_97 load
          // reenable across ring for memory space memory_space_5
          // leading and trailing sets are the same... no ring dependency
          // memory-space  memory_space_4
          //  array_obj_ref_93 load
          // reenable across ring for memory space memory_space_4
          // leading and trailing sets are the same... no ring dependency
          // memory-space  memory_space_3
          //  array_obj_ref_83 load
          // reenable across ring for memory space memory_space_3
          // leading and trailing sets are the same... no ring dependency
          // memory-space  memory_space_2
          //  array_obj_ref_78 load
          // reenable across ring for memory space memory_space_2
          // leading and trailing sets are the same... no ring dependency
          // memory-space  memory_space_1
          //  array_obj_ref_73 load
          // reenable across ring for memory space memory_space_1
          // leading and trailing sets are the same... no ring dependency
          // memory-space  memory_space_0
          //  array_obj_ref_68 load
          // reenable across ring for memory space memory_space_0
          // leading and trailing sets are the same... no ring dependency
        }
        ( first_time_through_loop_body  back_edge_to_loop_body) 
        ( condition_evaluated )
        ;; [loop_exit] 
        {
          $T [ack] 
        }
        ;; [loop_taken] 
        {
          $T [ack] 
        }
        do_while_stmt_31__entry__ <-| ($entry)
        loop_body_done <-| ( do_while_stmt_31_loop_body ) 
        condition_done |-> (loop_exit loop_taken)
        do_while_stmt_31__exit__ |-> ($exit)
        $bind condition_done <= do_while_stmt_31_loop_body : condition_evaluated
        $bind do_while_stmt_31__entry__  => do_while_stmt_31_loop_body : first_time_through_loop_body 
        $bind loop_back  => do_while_stmt_31_loop_body : back_edge_to_loop_body 
        $terminate (loop_exit loop_taken loop_body_done) (loop_back do_while_stmt_31__exit__)
      }
      do_while_stmt_31__entry__ |-> (do_while_stmt_31)
      do_while_stmt_31__exit__ <-| (do_while_stmt_31)
      do_while_stmt_31__entry__ <-| (branch_block_stmt_30__entry__)
      do_while_stmt_31__exit__ |-> (branch_block_stmt_30__exit__)
    }
    ::[assign_stmt_182] 
    {
      // start:  	result := (nval_0 + (nval_1 + (nval_2 + nval_3))) $buffering 1// bits of buffering = 32. 
      //  file .Aa/mvp.opt.aa, line 72
      // Source expression
      // (nval_0 + (nval_1 + (nval_2 + nval_3)))
      $T[ADD_u32_u32_181_sample_start_] 
      $T[ADD_u32_u32_181_sample_completed_] 
      $T[ADD_u32_u32_181_update_start_] 
      $T[ADD_u32_u32_181_update_completed_] 
      // nval_0
      // (nval_1 + (nval_2 + nval_3))
      // nval_1
      // (nval_2 + nval_3)
      // nval_2
      // nval_3
      // start: Forward dependencies from nval_0 to transition ADD_u32_u32_181_sample_start_
      // done: Forward dependencies from nval_0 to transition ADD_u32_u32_181_sample_start_
      // start: Forward dependencies from (nval_1 + (nval_2 + nval_3)) to transition ADD_u32_u32_181_sample_start_
      // done: Forward dependencies from (nval_1 + (nval_2 + nval_3)) to transition ADD_u32_u32_181_sample_start_
      ;;[ADD_u32_u32_181_Sample] 
      {
        // binary expression 
        $T [rr] $T [ra]  // (split) binary operation 
      }
      ;;[ADD_u32_u32_181_Update] 
      {
        // binary expression 
        $T [cr] $T [ca] // (split) binary operation 
      }
      ADD_u32_u32_181_sample_start_ &-> (ADD_u32_u32_181_Sample)
      ADD_u32_u32_181_sample_completed_ <-& (ADD_u32_u32_181_Sample)
      ADD_u32_u32_181_sample_completed_ &-> ($null)
      ADD_u32_u32_181_update_start_ &-> (ADD_u32_u32_181_Update)
      ADD_u32_u32_181_update_completed_ <-& (ADD_u32_u32_181_Update)
      // Target expression
      // (as target) result
      // result
      // write to interface object
      // start: WAR dependencies for result
      // done: WAR dependencies for result
      // result
      // write to interface object
      // end:  	result := (nval_0 + (nval_1 + (nval_2 + nval_3))) $buffering 1// bits of buffering = 32. 
      // load-store dependencies..
    }
  }
  // end control-path
  $DP 
  {
    // begin data-path 
    // constant-object-declarations for block %DOTP%mmloop%
    //  file .Aa/mvp.opt.aa, line 34
    // constant-object-declarations for block %DOTP%mmloop
    //  file .Aa/mvp.opt.aa, line 30
    // constant-object-declarations for block %DOTP
    //  file .Aa/mvp.opt.aa, line 25
    // constant-declarations for block %DOTP%mmloop
    //  file .Aa/mvp.opt.aa, line 30
    // do-while statement  
    //  file .Aa/mvp.opt.aa, line 32
    // 32 
    $constant $W[konst_170_wire_constant] : $int<8> := _b00100000// 32
    // constant-declarations for block %DOTP%mmloop%
    //  file .Aa/mvp.opt.aa, line 34
    // constant-declarations for phi:  			$phi C := 			  ($bitcast ($uint<8>) 0  ) $on   $entry 			  nC $on   $loopback 
    // type of target is $uint<8>
    //  file .Aa/mvp.opt.aa, line 35
    // ($bitcast ($uint<8>) 0  )
    $constant $W[type_cast_36_wire_constant] : $int<8> := _b00000000// 0
    // constant-declarations for phi:  			$phi Index := 			  ($bitcast ($uint<3>) 0  ) $on   $entry 			  nIndex $on   $loopback 
    // type of target is $uint<3>
    //  file .Aa/mvp.opt.aa, line 37
    // ($bitcast ($uint<3>) 0  )
    $constant $W[type_cast_42_wire_constant] : $int<3> := _b000// 0
    // constant-declarations for phi:  			$phi val_0 := 			  ($bitcast ($uint<32>) 0  ) $on   $entry 			  nval_0 $on   $loopback 
    // type of target is $uint<32>
    //  file .Aa/mvp.opt.aa, line 39
    // ($bitcast ($uint<32>) 0  )
    $constant $W[type_cast_47_wire_constant] : $int<32> := _b00000000000000000000000000000000// 0
    // constant-declarations for phi:  			$phi val_1 := 			  nval_1 $on   $loopback 			  ($bitcast ($uint<32>) 0  ) $on   $entry 
    // type of target is $uint<32>
    //  file .Aa/mvp.opt.aa, line 41
    // ($bitcast ($uint<32>) 0  )
    $constant $W[type_cast_53_wire_constant] : $int<32> := _b00000000000000000000000000000000// 0
    // constant-declarations for phi:  			$phi val_2 := 			  ($bitcast ($uint<32>) 0  ) $on   $entry 			  nval_2 $on   $loopback 
    // type of target is $uint<32>
    //  file .Aa/mvp.opt.aa, line 43
    // ($bitcast ($uint<32>) 0  )
    $constant $W[type_cast_57_wire_constant] : $int<32> := _b00000000000000000000000000000000// 0
    // constant-declarations for phi:  			$phi val_3 := 			  ($bitcast ($uint<32>) 0  ) $on   $entry 			  nval_3 $on   $loopback 
    // type of target is $uint<32>
    //  file .Aa/mvp.opt.aa, line 45
    // ($bitcast ($uint<32>) 0  )
    $constant $W[type_cast_62_wire_constant] : $int<32> := _b00000000000000000000000000000000// 0
    // A_MEM[R][Index]
    $constant $W[array_obj_ref_68_resized_base_address] : $int<8> := _b00000000// 0
    $constant $W[array_obj_ref_68_offset_scale_factor_0] : $int<8> := _b00001000// 8
    $constant $W[array_obj_ref_68_offset_scale_factor_1] : $int<8> := _b00000001// 1
    $constant $W[array_obj_ref_68_word_offset_0] : $int<8> := _b00000000// 0
    // B_MEM[R][Index]
    $constant $W[array_obj_ref_73_resized_base_address] : $int<8> := _b00000000// 0
    $constant $W[array_obj_ref_73_offset_scale_factor_0] : $int<8> := _b00001000// 8
    $constant $W[array_obj_ref_73_offset_scale_factor_1] : $int<8> := _b00000001// 1
    $constant $W[array_obj_ref_73_word_offset_0] : $int<8> := _b00000000// 0
    // C_MEM[R][Index]
    $constant $W[array_obj_ref_78_resized_base_address] : $int<8> := _b00000000// 0
    $constant $W[array_obj_ref_78_offset_scale_factor_0] : $int<8> := _b00001000// 8
    $constant $W[array_obj_ref_78_offset_scale_factor_1] : $int<8> := _b00000001// 1
    $constant $W[array_obj_ref_78_word_offset_0] : $int<8> := _b00000000// 0
    // D_MEM[R][Index]
    $constant $W[array_obj_ref_83_resized_base_address] : $int<8> := _b00000000// 0
    $constant $W[array_obj_ref_83_offset_scale_factor_0] : $int<8> := _b00001000// 8
    $constant $W[array_obj_ref_83_offset_scale_factor_1] : $int<8> := _b00000001// 1
    $constant $W[array_obj_ref_83_word_offset_0] : $int<8> := _b00000000// 0
    // x0[Index]
    $constant $W[array_obj_ref_93_resized_base_address] : $int<3> := _b000// 0
    $constant $W[array_obj_ref_93_offset_scale_factor_0] : $int<3> := _b001// 1
    $constant $W[array_obj_ref_93_word_offset_0] : $int<3> := _b000// 0
    // x1[Index]
    $constant $W[array_obj_ref_97_resized_base_address] : $int<3> := _b000// 0
    $constant $W[array_obj_ref_97_offset_scale_factor_0] : $int<3> := _b001// 1
    $constant $W[array_obj_ref_97_word_offset_0] : $int<3> := _b000// 0
    // x2[Index]
    $constant $W[array_obj_ref_101_resized_base_address] : $int<3> := _b000// 0
    $constant $W[array_obj_ref_101_offset_scale_factor_0] : $int<3> := _b001// 1
    $constant $W[array_obj_ref_101_word_offset_0] : $int<3> := _b000// 0
    // x3[Index]
    $constant $W[array_obj_ref_105_resized_base_address] : $int<3> := _b000// 0
    $constant $W[array_obj_ref_105_offset_scale_factor_0] : $int<3> := _b001// 1
    $constant $W[array_obj_ref_105_word_offset_0] : $int<3> := _b000// 0
    // 4 
    $constant $W[konst_160_wire_constant] : $int<8> := _b00000100// 4
    // 1 
    $constant $W[konst_165_wire_constant] : $int<3> := _b001// 1
    // block %DOTP%mmloop
    //  file .Aa/mvp.opt.aa, line 30
    // do-while statement  
    //  file .Aa/mvp.opt.aa, line 32
    // (nC < 32 )
    $intermediate $W[ULT_u8_u1_171_wire] : $int<1>
    // merge-statement  
    //  file .Aa/mvp.opt.aa, line 34
    // 			$phi C := 			  ($bitcast ($uint<8>) 0  ) $on   $entry 			  nC $on   $loopback 
    // type of target is $uint<8>
    //  file .Aa/mvp.opt.aa, line 35
    $W[nC_162_37_buffered] : $int<8>
    // C
    $W[C_33] : $int<8>
    // 			$phi Index := 			  ($bitcast ($uint<3>) 0  ) $on   $entry 			  nIndex $on   $loopback 
    // type of target is $uint<3>
    //  file .Aa/mvp.opt.aa, line 37
    $W[nIndex_167_43_buffered] : $int<3>
    // Index
    $W[Index_38] : $int<3>
    // 			$phi val_0 := 			  ($bitcast ($uint<32>) 0  ) $on   $entry 			  nval_0 $on   $loopback 
    // type of target is $uint<32>
    //  file .Aa/mvp.opt.aa, line 39
    $W[nval_0_122_48_buffered] : $int<32>
    // val_0
    $W[val_0_44] : $int<32>
    // 			$phi val_1 := 			  nval_1 $on   $loopback 			  ($bitcast ($uint<32>) 0  ) $on   $entry 
    // type of target is $uint<32>
    //  file .Aa/mvp.opt.aa, line 41
    $W[nval_1_132_51_buffered] : $int<32>
    // val_1
    $W[val_1_49] : $int<32>
    // 			$phi val_2 := 			  ($bitcast ($uint<32>) 0  ) $on   $entry 			  nval_2 $on   $loopback 
    // type of target is $uint<32>
    //  file .Aa/mvp.opt.aa, line 43
    $W[nval_2_142_58_buffered] : $int<32>
    // val_2
    $W[val_2_54] : $int<32>
    // 			$phi val_3 := 			  ($bitcast ($uint<32>) 0  ) $on   $entry 			  nval_3 $on   $loopback 
    // type of target is $uint<32>
    //  file .Aa/mvp.opt.aa, line 45
    $W[nval_3_152_63_buffered] : $int<32>
    // val_3
    $W[val_3_59] : $int<32>
    // 			a_rc_0 := A_MEM[R][Index] $buffering 2// bits of buffering = 64. 
    //  file .Aa/mvp.opt.aa, line 48
    // A_MEM[R][Index]
    $intermediate $W[R_R_66_resized] : $int<8>
    $intermediate $W[R_R_66_scaled] : $int<8>
    $intermediate $W[R_Index_67_resized] : $int<8>
    $intermediate $W[R_Index_67_scaled] : $int<8>
    $intermediate $W[array_obj_ref_68_index_partial_sum_1] : $int<8>
    $intermediate $W[array_obj_ref_68_final_offset] : $int<8>
    $intermediate $W[array_obj_ref_68_root_address] : $int<8>
    $W[array_obj_ref_68_word_address_0] : $pointer<memory_space_0>
    $W[array_obj_ref_68_data_0] : $int<32>
    // a_rc_0
    $W[a_rc_0_69] : $int<32>
    // 			a_rc_1 := B_MEM[R][Index] $buffering 2// bits of buffering = 64. 
    //  file .Aa/mvp.opt.aa, line 49
    // B_MEM[R][Index]
    $intermediate $W[R_R_71_resized] : $int<8>
    $intermediate $W[R_R_71_scaled] : $int<8>
    $intermediate $W[R_Index_72_resized] : $int<8>
    $intermediate $W[R_Index_72_scaled] : $int<8>
    $intermediate $W[array_obj_ref_73_index_partial_sum_1] : $int<8>
    $intermediate $W[array_obj_ref_73_final_offset] : $int<8>
    $intermediate $W[array_obj_ref_73_root_address] : $int<8>
    $W[array_obj_ref_73_word_address_0] : $pointer<memory_space_1>
    $W[array_obj_ref_73_data_0] : $int<32>
    // a_rc_1
    $W[a_rc_1_74] : $int<32>
    // 			a_rc_2 := C_MEM[R][Index] $buffering 2// bits of buffering = 64. 
    //  file .Aa/mvp.opt.aa, line 50
    // C_MEM[R][Index]
    $intermediate $W[R_R_76_resized] : $int<8>
    $intermediate $W[R_R_76_scaled] : $int<8>
    $intermediate $W[R_Index_77_resized] : $int<8>
    $intermediate $W[R_Index_77_scaled] : $int<8>
    $intermediate $W[array_obj_ref_78_index_partial_sum_1] : $int<8>
    $intermediate $W[array_obj_ref_78_final_offset] : $int<8>
    $intermediate $W[array_obj_ref_78_root_address] : $int<8>
    $W[array_obj_ref_78_word_address_0] : $pointer<memory_space_2>
    $W[array_obj_ref_78_data_0] : $int<32>
    // a_rc_2
    $W[a_rc_2_79] : $int<32>
    // 			a_rc_3 := D_MEM[R][Index] $buffering 2// bits of buffering = 64. 
    //  file .Aa/mvp.opt.aa, line 51
    // D_MEM[R][Index]
    $intermediate $W[R_R_81_resized] : $int<8>
    $intermediate $W[R_R_81_scaled] : $int<8>
    $intermediate $W[R_Index_82_resized] : $int<8>
    $intermediate $W[R_Index_82_scaled] : $int<8>
    $intermediate $W[array_obj_ref_83_index_partial_sum_1] : $int<8>
    $intermediate $W[array_obj_ref_83_final_offset] : $int<8>
    $intermediate $W[array_obj_ref_83_root_address] : $int<8>
    $W[array_obj_ref_83_word_address_0] : $pointer<memory_space_3>
    $W[array_obj_ref_83_data_0] : $int<32>
    // a_rc_3
    $W[a_rc_3_84] : $int<32>
    // 			xval_0 := x0[Index] $buffering 2// bits of buffering = 64. 
    //  file .Aa/mvp.opt.aa, line 53
    // x0[Index]
    $intermediate $W[R_Index_92_resized] : $int<3>
    $intermediate $W[R_Index_92_scaled] : $int<3>
    $intermediate $W[array_obj_ref_93_final_offset] : $int<3>
    $intermediate $W[array_obj_ref_93_root_address] : $int<3>
    $W[array_obj_ref_93_word_address_0] : $pointer<memory_space_4>
    $W[array_obj_ref_93_data_0] : $int<32>
    // xval_0
    $W[xval_0_94] : $int<32>
    // 			xval_1 := x1[Index] $buffering 2// bits of buffering = 64. 
    //  file .Aa/mvp.opt.aa, line 54
    // x1[Index]
    $intermediate $W[R_Index_96_resized] : $int<3>
    $intermediate $W[R_Index_96_scaled] : $int<3>
    $intermediate $W[array_obj_ref_97_final_offset] : $int<3>
    $intermediate $W[array_obj_ref_97_root_address] : $int<3>
    $W[array_obj_ref_97_word_address_0] : $pointer<memory_space_5>
    $W[array_obj_ref_97_data_0] : $int<32>
    // xval_1
    $W[xval_1_98] : $int<32>
    // 			xval_2 := x2[Index] $buffering 2// bits of buffering = 64. 
    //  file .Aa/mvp.opt.aa, line 55
    // x2[Index]
    $intermediate $W[R_Index_100_resized] : $int<3>
    $intermediate $W[R_Index_100_scaled] : $int<3>
    $intermediate $W[array_obj_ref_101_final_offset] : $int<3>
    $intermediate $W[array_obj_ref_101_root_address] : $int<3>
    $W[array_obj_ref_101_word_address_0] : $pointer<memory_space_6>
    $W[array_obj_ref_101_data_0] : $int<32>
    // xval_2
    $W[xval_2_102] : $int<32>
    // 			xval_3 := x3[Index] $buffering 2// bits of buffering = 64. 
    //  file .Aa/mvp.opt.aa, line 56
    // x3[Index]
    $intermediate $W[R_Index_104_resized] : $int<3>
    $intermediate $W[R_Index_104_scaled] : $int<3>
    $intermediate $W[array_obj_ref_105_final_offset] : $int<3>
    $intermediate $W[array_obj_ref_105_root_address] : $int<3>
    $W[array_obj_ref_105_word_address_0] : $pointer<memory_space_7>
    $W[array_obj_ref_105_data_0] : $int<32>
    // xval_3
    $W[xval_3_106] : $int<32>
    // 			val_0_114_delayed_5_0 := val_0 $buffering 5 $cut_through // bits of buffering = 160. 
    //  file .Aa/mvp.opt.aa, line 58
    // val_0_114_delayed_5_0
    $W[val_0_114_delayed_5_0_115] : $int<32>
    // 			$volatile nval_0 := (val_0_114_delayed_5_0 + (a_rc_0 * xval_0)) $buffering 1
    //  file .Aa/mvp.opt.aa, line 59
    // (a_rc_0 * xval_0)
    $intermediate $W[MUL_u32_u32_120_wire] : $int<32>
    // nval_0
    $W[nval_0_122] : $int<32>
    // 			val_1_121_delayed_5_0 := val_1 $buffering 5 $cut_through // bits of buffering = 160. 
    //  file .Aa/mvp.opt.aa, line 60
    // val_1_121_delayed_5_0
    $W[val_1_121_delayed_5_0_125] : $int<32>
    // 			$volatile nval_1 := (val_1_121_delayed_5_0 + (a_rc_1 * xval_1)) $buffering 1
    //  file .Aa/mvp.opt.aa, line 61
    // (a_rc_1 * xval_1)
    $intermediate $W[MUL_u32_u32_130_wire] : $int<32>
    // nval_1
    $W[nval_1_132] : $int<32>
    // 			val_2_128_delayed_5_0 := val_2 $buffering 5 $cut_through // bits of buffering = 160. 
    //  file .Aa/mvp.opt.aa, line 62
    // val_2_128_delayed_5_0
    $W[val_2_128_delayed_5_0_135] : $int<32>
    // 			$volatile nval_2 := (val_2_128_delayed_5_0 + (a_rc_2 * xval_2)) $buffering 1
    //  file .Aa/mvp.opt.aa, line 63
    // (a_rc_2 * xval_2)
    $intermediate $W[MUL_u32_u32_140_wire] : $int<32>
    // nval_2
    $W[nval_2_142] : $int<32>
    // 			val_3_135_delayed_5_0 := val_3 $buffering 5 $cut_through // bits of buffering = 160. 
    //  file .Aa/mvp.opt.aa, line 64
    // val_3_135_delayed_5_0
    $W[val_3_135_delayed_5_0_145] : $int<32>
    // 			$volatile nval_3 := (val_3_135_delayed_5_0 + (a_rc_3 * xval_3)) $buffering 1
    //  file .Aa/mvp.opt.aa, line 65
    // (a_rc_3 * xval_3)
    $intermediate $W[MUL_u32_u32_150_wire] : $int<32>
    // nval_3
    $W[nval_3_152] : $int<32>
    // 			nC := (C + 4 ) $buffering 2// bits of buffering = 16. 
    //  file .Aa/mvp.opt.aa, line 67
    // nC
    $W[nC_162] : $int<8>
    // 			nIndex := (Index + 1 ) $buffering 2// bits of buffering = 6. 
    //  file .Aa/mvp.opt.aa, line 68
    // nIndex
    $W[nIndex_167] : $int<3>
    // 	result := (nval_0 + (nval_1 + (nval_2 + nval_3))) $buffering 1// bits of buffering = 32. 
    //  file .Aa/mvp.opt.aa, line 72
    // (nval_2 + nval_3)
    $intermediate $W[ADD_u32_u32_179_wire] : $int<32>
    // (nval_1 + (nval_2 + nval_3))
    $intermediate $W[ADD_u32_u32_180_wire] : $int<32>
    // result
    // datapath-instances for block %DOTP%mmloop
    //  file .Aa/mvp.opt.aa, line 30
    // datapath-instances for do-while  
    //  file .Aa/mvp.opt.aa, line 32
    // (nC < 32 )
    <[ULT_u8_u1_171_inst] (nC_162 konst_170_wire_constant) (ULT_u8_u1_171_wire)   $flowthrough 
    $delay ULT_u8_u1_171_inst 0
    ==0? [do_while_stmt_31_branch] (ULT_u8_u1_171_wire)
    $flowthrough
    // data-path instances for merge  
    //  file .Aa/mvp.opt.aa, line 34
    // 			$phi C := 			  ($bitcast ($uint<8>) 0  ) $on   $entry 			  nC $on   $loopback 
    // type of target is $uint<8>
    //  file .Aa/mvp.opt.aa, line 35
    # := [nC_162_37_buf] (nC_162) (nC_162_37_buffered)     $fullrate
    $buffering $out nC_162_37_buf nC_162_37_buffered  1
    # $phi [phi_stmt_33] (type_cast_36_wire_constant nC_162_37_buffered) ( C_33 ) $fullrate
    // $buffering  $out phi_stmt_33 C_33 2
    // 			$phi Index := 			  ($bitcast ($uint<3>) 0  ) $on   $entry 			  nIndex $on   $loopback 
    // type of target is $uint<3>
    //  file .Aa/mvp.opt.aa, line 37
    # := [nIndex_167_43_buf] (nIndex_167) (nIndex_167_43_buffered)     $fullrate
    $buffering $out nIndex_167_43_buf nIndex_167_43_buffered  1
    # $phi [phi_stmt_38] (type_cast_42_wire_constant nIndex_167_43_buffered) ( Index_38 ) $fullrate
    // $buffering  $out phi_stmt_38 Index_38 2
    // 			$phi val_0 := 			  ($bitcast ($uint<32>) 0  ) $on   $entry 			  nval_0 $on   $loopback 
    // type of target is $uint<32>
    //  file .Aa/mvp.opt.aa, line 39
    # := [nval_0_122_48_buf] (nval_0_122) (nval_0_122_48_buffered)     $fullrate
    $buffering $out nval_0_122_48_buf nval_0_122_48_buffered  1
    # $phi [phi_stmt_44] (type_cast_47_wire_constant nval_0_122_48_buffered) ( val_0_44 ) $fullrate
    // $buffering  $out phi_stmt_44 val_0_44 2
    // 			$phi val_1 := 			  nval_1 $on   $loopback 			  ($bitcast ($uint<32>) 0  ) $on   $entry 
    // type of target is $uint<32>
    //  file .Aa/mvp.opt.aa, line 41
    # := [nval_1_132_51_buf] (nval_1_132) (nval_1_132_51_buffered)     $fullrate
    $buffering $out nval_1_132_51_buf nval_1_132_51_buffered  1
    # $phi [phi_stmt_49] (nval_1_132_51_buffered type_cast_53_wire_constant) ( val_1_49 ) $fullrate
    // $buffering  $out phi_stmt_49 val_1_49 2
    // 			$phi val_2 := 			  ($bitcast ($uint<32>) 0  ) $on   $entry 			  nval_2 $on   $loopback 
    // type of target is $uint<32>
    //  file .Aa/mvp.opt.aa, line 43
    # := [nval_2_142_58_buf] (nval_2_142) (nval_2_142_58_buffered)     $fullrate
    $buffering $out nval_2_142_58_buf nval_2_142_58_buffered  1
    # $phi [phi_stmt_54] (type_cast_57_wire_constant nval_2_142_58_buffered) ( val_2_54 ) $fullrate
    // $buffering  $out phi_stmt_54 val_2_54 2
    // 			$phi val_3 := 			  ($bitcast ($uint<32>) 0  ) $on   $entry 			  nval_3 $on   $loopback 
    // type of target is $uint<32>
    //  file .Aa/mvp.opt.aa, line 45
    # := [nval_3_152_63_buf] (nval_3_152) (nval_3_152_63_buffered)     $fullrate
    $buffering $out nval_3_152_63_buf nval_3_152_63_buffered  1
    # $phi [phi_stmt_59] (type_cast_62_wire_constant nval_3_152_63_buffered) ( val_3_59 ) $fullrate
    // $buffering  $out phi_stmt_59 val_3_59 2
    // 			a_rc_0 := A_MEM[R][Index] $buffering 2// bits of buffering = 64. 
    //  file .Aa/mvp.opt.aa, line 48
    // A_MEM[R][Index]
    &/ [array_obj_ref_68_index_0_resize] (R) (R_R_66_resized) 
    $flowthrough 
    *[array_obj_ref_68_index_0_scale] (R_R_66_resized array_obj_ref_68_offset_scale_factor_0) (R_R_66_scaled)    $fullrate
    $buffering  $in array_obj_ref_68_index_0_scale R_R_66_resized 2
    $buffering  $in array_obj_ref_68_index_0_scale array_obj_ref_68_offset_scale_factor_0 2
    $buffering  $out array_obj_ref_68_index_0_scale R_R_66_scaled 2
    $delay array_obj_ref_68_index_0_scale 2
    &/ [array_obj_ref_68_index_1_resize] (Index_38) (R_Index_67_resized) 
    $flowthrough 
    &/ [array_obj_ref_68_index_1_rename] (R_Index_67_resized) (R_Index_67_scaled) 
    $flowthrough 
    +[array_obj_ref_68_index_sum_1] (R_Index_67_scaled R_R_66_scaled) (array_obj_ref_68_index_partial_sum_1)    $fullrate
    $buffering  $in array_obj_ref_68_index_sum_1 R_Index_67_scaled 2
    $buffering  $in array_obj_ref_68_index_sum_1 R_R_66_scaled 2
    $buffering  $out array_obj_ref_68_index_sum_1 array_obj_ref_68_index_partial_sum_1 2
    $delay array_obj_ref_68_index_sum_1 2
    &/ [array_obj_ref_68_index_offset] (array_obj_ref_68_index_partial_sum_1) (array_obj_ref_68_final_offset) 
    $flowthrough 
    &/ [array_obj_ref_68_root_address_inst] (array_obj_ref_68_final_offset) (array_obj_ref_68_root_address) 
    $flowthrough 
    &/ [array_obj_ref_68_addr_0] (array_obj_ref_68_root_address) (array_obj_ref_68_word_address_0) 
    $flowthrough 
    $load [array_obj_ref_68_load_0] $from memory_space_0 (array_obj_ref_68_word_address_0) (array_obj_ref_68_data_0) 
    $buffering  $in array_obj_ref_68_load_0 array_obj_ref_68_word_address_0 2
    $buffering  $out array_obj_ref_68_load_0 array_obj_ref_68_data_0 2
    $delay array_obj_ref_68_load_0 5
    &/ [array_obj_ref_68_gather_scatter] (array_obj_ref_68_data_0) (a_rc_0_69) 
    $flowthrough 
    // 			a_rc_1 := B_MEM[R][Index] $buffering 2// bits of buffering = 64. 
    //  file .Aa/mvp.opt.aa, line 49
    // B_MEM[R][Index]
    &/ [array_obj_ref_73_index_0_resize] (R) (R_R_71_resized) 
    $flowthrough 
    *[array_obj_ref_73_index_0_scale] (R_R_71_resized array_obj_ref_73_offset_scale_factor_0) (R_R_71_scaled)    $fullrate
    $buffering  $in array_obj_ref_73_index_0_scale R_R_71_resized 2
    $buffering  $in array_obj_ref_73_index_0_scale array_obj_ref_73_offset_scale_factor_0 2
    $buffering  $out array_obj_ref_73_index_0_scale R_R_71_scaled 2
    $delay array_obj_ref_73_index_0_scale 2
    &/ [array_obj_ref_73_index_1_resize] (Index_38) (R_Index_72_resized) 
    $flowthrough 
    &/ [array_obj_ref_73_index_1_rename] (R_Index_72_resized) (R_Index_72_scaled) 
    $flowthrough 
    +[array_obj_ref_73_index_sum_1] (R_Index_72_scaled R_R_71_scaled) (array_obj_ref_73_index_partial_sum_1)    $fullrate
    $buffering  $in array_obj_ref_73_index_sum_1 R_Index_72_scaled 2
    $buffering  $in array_obj_ref_73_index_sum_1 R_R_71_scaled 2
    $buffering  $out array_obj_ref_73_index_sum_1 array_obj_ref_73_index_partial_sum_1 2
    $delay array_obj_ref_73_index_sum_1 2
    &/ [array_obj_ref_73_index_offset] (array_obj_ref_73_index_partial_sum_1) (array_obj_ref_73_final_offset) 
    $flowthrough 
    &/ [array_obj_ref_73_root_address_inst] (array_obj_ref_73_final_offset) (array_obj_ref_73_root_address) 
    $flowthrough 
    &/ [array_obj_ref_73_addr_0] (array_obj_ref_73_root_address) (array_obj_ref_73_word_address_0) 
    $flowthrough 
    $load [array_obj_ref_73_load_0] $from memory_space_1 (array_obj_ref_73_word_address_0) (array_obj_ref_73_data_0) 
    $buffering  $in array_obj_ref_73_load_0 array_obj_ref_73_word_address_0 2
    $buffering  $out array_obj_ref_73_load_0 array_obj_ref_73_data_0 2
    $delay array_obj_ref_73_load_0 5
    &/ [array_obj_ref_73_gather_scatter] (array_obj_ref_73_data_0) (a_rc_1_74) 
    $flowthrough 
    // 			a_rc_2 := C_MEM[R][Index] $buffering 2// bits of buffering = 64. 
    //  file .Aa/mvp.opt.aa, line 50
    // C_MEM[R][Index]
    &/ [array_obj_ref_78_index_0_resize] (R) (R_R_76_resized) 
    $flowthrough 
    *[array_obj_ref_78_index_0_scale] (R_R_76_resized array_obj_ref_78_offset_scale_factor_0) (R_R_76_scaled)    $fullrate
    $buffering  $in array_obj_ref_78_index_0_scale R_R_76_resized 2
    $buffering  $in array_obj_ref_78_index_0_scale array_obj_ref_78_offset_scale_factor_0 2
    $buffering  $out array_obj_ref_78_index_0_scale R_R_76_scaled 2
    $delay array_obj_ref_78_index_0_scale 2
    &/ [array_obj_ref_78_index_1_resize] (Index_38) (R_Index_77_resized) 
    $flowthrough 
    &/ [array_obj_ref_78_index_1_rename] (R_Index_77_resized) (R_Index_77_scaled) 
    $flowthrough 
    +[array_obj_ref_78_index_sum_1] (R_Index_77_scaled R_R_76_scaled) (array_obj_ref_78_index_partial_sum_1)    $fullrate
    $buffering  $in array_obj_ref_78_index_sum_1 R_Index_77_scaled 2
    $buffering  $in array_obj_ref_78_index_sum_1 R_R_76_scaled 2
    $buffering  $out array_obj_ref_78_index_sum_1 array_obj_ref_78_index_partial_sum_1 2
    $delay array_obj_ref_78_index_sum_1 2
    &/ [array_obj_ref_78_index_offset] (array_obj_ref_78_index_partial_sum_1) (array_obj_ref_78_final_offset) 
    $flowthrough 
    &/ [array_obj_ref_78_root_address_inst] (array_obj_ref_78_final_offset) (array_obj_ref_78_root_address) 
    $flowthrough 
    &/ [array_obj_ref_78_addr_0] (array_obj_ref_78_root_address) (array_obj_ref_78_word_address_0) 
    $flowthrough 
    $load [array_obj_ref_78_load_0] $from memory_space_2 (array_obj_ref_78_word_address_0) (array_obj_ref_78_data_0) 
    $buffering  $in array_obj_ref_78_load_0 array_obj_ref_78_word_address_0 2
    $buffering  $out array_obj_ref_78_load_0 array_obj_ref_78_data_0 2
    $delay array_obj_ref_78_load_0 5
    &/ [array_obj_ref_78_gather_scatter] (array_obj_ref_78_data_0) (a_rc_2_79) 
    $flowthrough 
    // 			a_rc_3 := D_MEM[R][Index] $buffering 2// bits of buffering = 64. 
    //  file .Aa/mvp.opt.aa, line 51
    // D_MEM[R][Index]
    &/ [array_obj_ref_83_index_0_resize] (R) (R_R_81_resized) 
    $flowthrough 
    *[array_obj_ref_83_index_0_scale] (R_R_81_resized array_obj_ref_83_offset_scale_factor_0) (R_R_81_scaled)    $fullrate
    $buffering  $in array_obj_ref_83_index_0_scale R_R_81_resized 2
    $buffering  $in array_obj_ref_83_index_0_scale array_obj_ref_83_offset_scale_factor_0 2
    $buffering  $out array_obj_ref_83_index_0_scale R_R_81_scaled 2
    $delay array_obj_ref_83_index_0_scale 2
    &/ [array_obj_ref_83_index_1_resize] (Index_38) (R_Index_82_resized) 
    $flowthrough 
    &/ [array_obj_ref_83_index_1_rename] (R_Index_82_resized) (R_Index_82_scaled) 
    $flowthrough 
    +[array_obj_ref_83_index_sum_1] (R_Index_82_scaled R_R_81_scaled) (array_obj_ref_83_index_partial_sum_1)    $fullrate
    $buffering  $in array_obj_ref_83_index_sum_1 R_Index_82_scaled 2
    $buffering  $in array_obj_ref_83_index_sum_1 R_R_81_scaled 2
    $buffering  $out array_obj_ref_83_index_sum_1 array_obj_ref_83_index_partial_sum_1 2
    $delay array_obj_ref_83_index_sum_1 2
    &/ [array_obj_ref_83_index_offset] (array_obj_ref_83_index_partial_sum_1) (array_obj_ref_83_final_offset) 
    $flowthrough 
    &/ [array_obj_ref_83_root_address_inst] (array_obj_ref_83_final_offset) (array_obj_ref_83_root_address) 
    $flowthrough 
    &/ [array_obj_ref_83_addr_0] (array_obj_ref_83_root_address) (array_obj_ref_83_word_address_0) 
    $flowthrough 
    $load [array_obj_ref_83_load_0] $from memory_space_3 (array_obj_ref_83_word_address_0) (array_obj_ref_83_data_0) 
    $buffering  $in array_obj_ref_83_load_0 array_obj_ref_83_word_address_0 2
    $buffering  $out array_obj_ref_83_load_0 array_obj_ref_83_data_0 2
    $delay array_obj_ref_83_load_0 5
    &/ [array_obj_ref_83_gather_scatter] (array_obj_ref_83_data_0) (a_rc_3_84) 
    $flowthrough 
    // 			xval_0 := x0[Index] $buffering 2// bits of buffering = 64. 
    //  file .Aa/mvp.opt.aa, line 53
    // x0[Index]
    &/ [array_obj_ref_93_index_0_resize] (Index_38) (R_Index_92_resized) 
    $flowthrough 
    &/ [array_obj_ref_93_index_0_rename] (R_Index_92_resized) (R_Index_92_scaled) 
    $flowthrough 
    &/ [array_obj_ref_93_index_offset] (R_Index_92_scaled) (array_obj_ref_93_final_offset) 
    $flowthrough 
    &/ [array_obj_ref_93_root_address_inst] (array_obj_ref_93_final_offset) (array_obj_ref_93_root_address) 
    $flowthrough 
    &/ [array_obj_ref_93_addr_0] (array_obj_ref_93_root_address) (array_obj_ref_93_word_address_0) 
    $flowthrough 
    $load [array_obj_ref_93_load_0] $from memory_space_4 (array_obj_ref_93_word_address_0) (array_obj_ref_93_data_0) 
    $buffering  $in array_obj_ref_93_load_0 array_obj_ref_93_word_address_0 2
    $buffering  $out array_obj_ref_93_load_0 array_obj_ref_93_data_0 2
    $delay array_obj_ref_93_load_0 5
    &/ [array_obj_ref_93_gather_scatter] (array_obj_ref_93_data_0) (xval_0_94) 
    $flowthrough 
    // 			xval_1 := x1[Index] $buffering 2// bits of buffering = 64. 
    //  file .Aa/mvp.opt.aa, line 54
    // x1[Index]
    &/ [array_obj_ref_97_index_0_resize] (Index_38) (R_Index_96_resized) 
    $flowthrough 
    &/ [array_obj_ref_97_index_0_rename] (R_Index_96_resized) (R_Index_96_scaled) 
    $flowthrough 
    &/ [array_obj_ref_97_index_offset] (R_Index_96_scaled) (array_obj_ref_97_final_offset) 
    $flowthrough 
    &/ [array_obj_ref_97_root_address_inst] (array_obj_ref_97_final_offset) (array_obj_ref_97_root_address) 
    $flowthrough 
    &/ [array_obj_ref_97_addr_0] (array_obj_ref_97_root_address) (array_obj_ref_97_word_address_0) 
    $flowthrough 
    $load [array_obj_ref_97_load_0] $from memory_space_5 (array_obj_ref_97_word_address_0) (array_obj_ref_97_data_0) 
    $buffering  $in array_obj_ref_97_load_0 array_obj_ref_97_word_address_0 2
    $buffering  $out array_obj_ref_97_load_0 array_obj_ref_97_data_0 2
    $delay array_obj_ref_97_load_0 5
    &/ [array_obj_ref_97_gather_scatter] (array_obj_ref_97_data_0) (xval_1_98) 
    $flowthrough 
    // 			xval_2 := x2[Index] $buffering 2// bits of buffering = 64. 
    //  file .Aa/mvp.opt.aa, line 55
    // x2[Index]
    &/ [array_obj_ref_101_index_0_resize] (Index_38) (R_Index_100_resized) 
    $flowthrough 
    &/ [array_obj_ref_101_index_0_rename] (R_Index_100_resized) (R_Index_100_scaled) 
    $flowthrough 
    &/ [array_obj_ref_101_index_offset] (R_Index_100_scaled) (array_obj_ref_101_final_offset) 
    $flowthrough 
    &/ [array_obj_ref_101_root_address_inst] (array_obj_ref_101_final_offset) (array_obj_ref_101_root_address) 
    $flowthrough 
    &/ [array_obj_ref_101_addr_0] (array_obj_ref_101_root_address) (array_obj_ref_101_word_address_0) 
    $flowthrough 
    $load [array_obj_ref_101_load_0] $from memory_space_6 (array_obj_ref_101_word_address_0) (array_obj_ref_101_data_0) 
    $buffering  $in array_obj_ref_101_load_0 array_obj_ref_101_word_address_0 2
    $buffering  $out array_obj_ref_101_load_0 array_obj_ref_101_data_0 2
    $delay array_obj_ref_101_load_0 5
    &/ [array_obj_ref_101_gather_scatter] (array_obj_ref_101_data_0) (xval_2_102) 
    $flowthrough 
    // 			xval_3 := x3[Index] $buffering 2// bits of buffering = 64. 
    //  file .Aa/mvp.opt.aa, line 56
    // x3[Index]
    &/ [array_obj_ref_105_index_0_resize] (Index_38) (R_Index_104_resized) 
    $flowthrough 
    &/ [array_obj_ref_105_index_0_rename] (R_Index_104_resized) (R_Index_104_scaled) 
    $flowthrough 
    &/ [array_obj_ref_105_index_offset] (R_Index_104_scaled) (array_obj_ref_105_final_offset) 
    $flowthrough 
    &/ [array_obj_ref_105_root_address_inst] (array_obj_ref_105_final_offset) (array_obj_ref_105_root_address) 
    $flowthrough 
    &/ [array_obj_ref_105_addr_0] (array_obj_ref_105_root_address) (array_obj_ref_105_word_address_0) 
    $flowthrough 
    $load [array_obj_ref_105_load_0] $from memory_space_7 (array_obj_ref_105_word_address_0) (array_obj_ref_105_data_0) 
    $buffering  $in array_obj_ref_105_load_0 array_obj_ref_105_word_address_0 2
    $buffering  $out array_obj_ref_105_load_0 array_obj_ref_105_data_0 2
    $delay array_obj_ref_105_load_0 5
    &/ [array_obj_ref_105_gather_scatter] (array_obj_ref_105_data_0) (xval_3_106) 
    $flowthrough 
    // 			val_0_114_delayed_5_0 := val_0 $buffering 5 $cut_through // bits of buffering = 160. 
    //  file .Aa/mvp.opt.aa, line 58
    # := [W_val_0_114_delayed_5_0_113_inst] (val_0_44) (val_0_114_delayed_5_0_115)  $cut_through    $fullrate
    $buffering  $out W_val_0_114_delayed_5_0_113_inst val_0_114_delayed_5_0_115 5
    // 			$volatile nval_0 := (val_0_114_delayed_5_0 + (a_rc_0 * xval_0)) $buffering 1
    //  file .Aa/mvp.opt.aa, line 59
    // (a_rc_0 * xval_0)
    *[MUL_u32_u32_120_inst] (a_rc_0_69 xval_0_94) (MUL_u32_u32_120_wire)   $flowthrough 
    $delay MUL_u32_u32_120_inst 0
    // (val_0_114_delayed_5_0 + (a_rc_0 * xval_0))
    +[ADD_u32_u32_121_inst] (val_0_114_delayed_5_0_115 MUL_u32_u32_120_wire) (nval_0_122)   $flowthrough 
    $delay ADD_u32_u32_121_inst 0
    // 			val_1_121_delayed_5_0 := val_1 $buffering 5 $cut_through // bits of buffering = 160. 
    //  file .Aa/mvp.opt.aa, line 60
    # := [W_val_1_121_delayed_5_0_123_inst] (val_1_49) (val_1_121_delayed_5_0_125)  $cut_through    $fullrate
    $buffering  $out W_val_1_121_delayed_5_0_123_inst val_1_121_delayed_5_0_125 5
    // 			$volatile nval_1 := (val_1_121_delayed_5_0 + (a_rc_1 * xval_1)) $buffering 1
    //  file .Aa/mvp.opt.aa, line 61
    // (a_rc_1 * xval_1)
    *[MUL_u32_u32_130_inst] (a_rc_1_74 xval_1_98) (MUL_u32_u32_130_wire)   $flowthrough 
    $delay MUL_u32_u32_130_inst 0
    // (val_1_121_delayed_5_0 + (a_rc_1 * xval_1))
    +[ADD_u32_u32_131_inst] (val_1_121_delayed_5_0_125 MUL_u32_u32_130_wire) (nval_1_132)   $flowthrough 
    $delay ADD_u32_u32_131_inst 0
    // 			val_2_128_delayed_5_0 := val_2 $buffering 5 $cut_through // bits of buffering = 160. 
    //  file .Aa/mvp.opt.aa, line 62
    # := [W_val_2_128_delayed_5_0_133_inst] (val_2_54) (val_2_128_delayed_5_0_135)  $cut_through    $fullrate
    $buffering  $out W_val_2_128_delayed_5_0_133_inst val_2_128_delayed_5_0_135 5
    // 			$volatile nval_2 := (val_2_128_delayed_5_0 + (a_rc_2 * xval_2)) $buffering 1
    //  file .Aa/mvp.opt.aa, line 63
    // (a_rc_2 * xval_2)
    *[MUL_u32_u32_140_inst] (a_rc_2_79 xval_2_102) (MUL_u32_u32_140_wire)   $flowthrough 
    $delay MUL_u32_u32_140_inst 0
    // (val_2_128_delayed_5_0 + (a_rc_2 * xval_2))
    +[ADD_u32_u32_141_inst] (val_2_128_delayed_5_0_135 MUL_u32_u32_140_wire) (nval_2_142)   $flowthrough 
    $delay ADD_u32_u32_141_inst 0
    // 			val_3_135_delayed_5_0 := val_3 $buffering 5 $cut_through // bits of buffering = 160. 
    //  file .Aa/mvp.opt.aa, line 64
    # := [W_val_3_135_delayed_5_0_143_inst] (val_3_59) (val_3_135_delayed_5_0_145)  $cut_through    $fullrate
    $buffering  $out W_val_3_135_delayed_5_0_143_inst val_3_135_delayed_5_0_145 5
    // 			$volatile nval_3 := (val_3_135_delayed_5_0 + (a_rc_3 * xval_3)) $buffering 1
    //  file .Aa/mvp.opt.aa, line 65
    // (a_rc_3 * xval_3)
    *[MUL_u32_u32_150_inst] (a_rc_3_84 xval_3_106) (MUL_u32_u32_150_wire)   $flowthrough 
    $delay MUL_u32_u32_150_inst 0
    // (val_3_135_delayed_5_0 + (a_rc_3 * xval_3))
    +[ADD_u32_u32_151_inst] (val_3_135_delayed_5_0_145 MUL_u32_u32_150_wire) (nval_3_152)   $flowthrough 
    $delay ADD_u32_u32_151_inst 0
    // 			nC := (C + 4 ) $buffering 2// bits of buffering = 16. 
    //  file .Aa/mvp.opt.aa, line 67
    // (C + 4 )
    +[ADD_u8_u8_161_inst] (C_33 konst_160_wire_constant) (nC_162)    $fullrate
    $buffering  $out ADD_u8_u8_161_inst nC_162 2
    $delay ADD_u8_u8_161_inst 1
    // 			nIndex := (Index + 1 ) $buffering 2// bits of buffering = 6. 
    //  file .Aa/mvp.opt.aa, line 68
    // (Index + 1 )
    +[ADD_u3_u3_166_inst] (Index_38 konst_165_wire_constant) (nIndex_167)    $fullrate
    $buffering  $out ADD_u3_u3_166_inst nIndex_167 2
    $delay ADD_u3_u3_166_inst 1
    // 	result := (nval_0 + (nval_1 + (nval_2 + nval_3))) $buffering 1// bits of buffering = 32. 
    //  file .Aa/mvp.opt.aa, line 72
    // (nval_2 + nval_3)
    +[ADD_u32_u32_179_inst] (nval_2_142 nval_3_152) (ADD_u32_u32_179_wire)   $flowthrough 
    $delay ADD_u32_u32_179_inst 0
    // (nval_1 + (nval_2 + nval_3))
    +[ADD_u32_u32_180_inst] (nval_1_132 ADD_u32_u32_179_wire) (ADD_u32_u32_180_wire)   $flowthrough 
    $delay ADD_u32_u32_180_inst 0
    // (nval_0 + (nval_1 + (nval_2 + nval_3)))
    +[ADD_u32_u32_181_inst] (nval_0_122 ADD_u32_u32_180_wire) (result)   
    $buffering  $out ADD_u32_u32_181_inst result 1
    $delay ADD_u32_u32_181_inst 1
  }
  // end data-path
  // CP-DP links for do-while  do_while_stmt_31
  //  file .Aa/mvp.opt.aa, line 32
  phi_stmt_33 <=> (branch_block_stmt_30/do_while_stmt_31/do_while_stmt_31_loop_body/phi_stmt_33_entry_sample_req branch_block_stmt_30/do_while_stmt_31/do_while_stmt_31_loop_body/phi_stmt_33_loopback_sample_req) (branch_block_stmt_30/do_while_stmt_31/do_while_stmt_31_loop_body/phi_stmt_33_phi_mux_ack)
  nC_162_37_buf <=> (branch_block_stmt_30/do_while_stmt_31/do_while_stmt_31_loop_body/R_nC_37_Sample/req branch_block_stmt_30/do_while_stmt_31/do_while_stmt_31_loop_body/R_nC_37_Update/req) (branch_block_stmt_30/do_while_stmt_31/do_while_stmt_31_loop_body/R_nC_37_Sample/ack branch_block_stmt_30/do_while_stmt_31/do_while_stmt_31_loop_body/R_nC_37_Update/ack)
  phi_stmt_38 <=> (branch_block_stmt_30/do_while_stmt_31/do_while_stmt_31_loop_body/phi_stmt_38_entry_sample_req branch_block_stmt_30/do_while_stmt_31/do_while_stmt_31_loop_body/phi_stmt_38_loopback_sample_req) (branch_block_stmt_30/do_while_stmt_31/do_while_stmt_31_loop_body/phi_stmt_38_phi_mux_ack)
  nIndex_167_43_buf <=> (branch_block_stmt_30/do_while_stmt_31/do_while_stmt_31_loop_body/R_nIndex_43_Sample/req branch_block_stmt_30/do_while_stmt_31/do_while_stmt_31_loop_body/R_nIndex_43_Update/req) (branch_block_stmt_30/do_while_stmt_31/do_while_stmt_31_loop_body/R_nIndex_43_Sample/ack branch_block_stmt_30/do_while_stmt_31/do_while_stmt_31_loop_body/R_nIndex_43_Update/ack)
  phi_stmt_44 <=> (branch_block_stmt_30/do_while_stmt_31/do_while_stmt_31_loop_body/phi_stmt_44_entry_sample_req branch_block_stmt_30/do_while_stmt_31/do_while_stmt_31_loop_body/phi_stmt_44_loopback_sample_req) (branch_block_stmt_30/do_while_stmt_31/do_while_stmt_31_loop_body/phi_stmt_44_phi_mux_ack)
  nval_0_122_48_buf <=> (branch_block_stmt_30/do_while_stmt_31/do_while_stmt_31_loop_body/R_nval_0_48_Sample/req branch_block_stmt_30/do_while_stmt_31/do_while_stmt_31_loop_body/R_nval_0_48_Update/req) (branch_block_stmt_30/do_while_stmt_31/do_while_stmt_31_loop_body/R_nval_0_48_Sample/ack branch_block_stmt_30/do_while_stmt_31/do_while_stmt_31_loop_body/R_nval_0_48_Update/ack)
  phi_stmt_49 <=> (branch_block_stmt_30/do_while_stmt_31/do_while_stmt_31_loop_body/phi_stmt_49_loopback_sample_req branch_block_stmt_30/do_while_stmt_31/do_while_stmt_31_loop_body/phi_stmt_49_entry_sample_req) (branch_block_stmt_30/do_while_stmt_31/do_while_stmt_31_loop_body/phi_stmt_49_phi_mux_ack)
  nval_1_132_51_buf <=> (branch_block_stmt_30/do_while_stmt_31/do_while_stmt_31_loop_body/R_nval_1_51_Sample/req branch_block_stmt_30/do_while_stmt_31/do_while_stmt_31_loop_body/R_nval_1_51_Update/req) (branch_block_stmt_30/do_while_stmt_31/do_while_stmt_31_loop_body/R_nval_1_51_Sample/ack branch_block_stmt_30/do_while_stmt_31/do_while_stmt_31_loop_body/R_nval_1_51_Update/ack)
  phi_stmt_54 <=> (branch_block_stmt_30/do_while_stmt_31/do_while_stmt_31_loop_body/phi_stmt_54_entry_sample_req branch_block_stmt_30/do_while_stmt_31/do_while_stmt_31_loop_body/phi_stmt_54_loopback_sample_req) (branch_block_stmt_30/do_while_stmt_31/do_while_stmt_31_loop_body/phi_stmt_54_phi_mux_ack)
  nval_2_142_58_buf <=> (branch_block_stmt_30/do_while_stmt_31/do_while_stmt_31_loop_body/R_nval_2_58_Sample/req branch_block_stmt_30/do_while_stmt_31/do_while_stmt_31_loop_body/R_nval_2_58_Update/req) (branch_block_stmt_30/do_while_stmt_31/do_while_stmt_31_loop_body/R_nval_2_58_Sample/ack branch_block_stmt_30/do_while_stmt_31/do_while_stmt_31_loop_body/R_nval_2_58_Update/ack)
  phi_stmt_59 <=> (branch_block_stmt_30/do_while_stmt_31/do_while_stmt_31_loop_body/phi_stmt_59_entry_sample_req branch_block_stmt_30/do_while_stmt_31/do_while_stmt_31_loop_body/phi_stmt_59_loopback_sample_req) (branch_block_stmt_30/do_while_stmt_31/do_while_stmt_31_loop_body/phi_stmt_59_phi_mux_ack)
  nval_3_152_63_buf <=> (branch_block_stmt_30/do_while_stmt_31/do_while_stmt_31_loop_body/R_nval_3_63_Sample/req branch_block_stmt_30/do_while_stmt_31/do_while_stmt_31_loop_body/R_nval_3_63_Update/req) (branch_block_stmt_30/do_while_stmt_31/do_while_stmt_31_loop_body/R_nval_3_63_Sample/ack branch_block_stmt_30/do_while_stmt_31/do_while_stmt_31_loop_body/R_nval_3_63_Update/ack)
  // 			a_rc_0 := A_MEM[R][Index] $buffering 2// bits of buffering = 64. 
  //  file .Aa/mvp.opt.aa, line 48
  // A_MEM[R][Index]
  // R
  array_obj_ref_68_index_0_resize <=> (branch_block_stmt_30/do_while_stmt_31/do_while_stmt_31_loop_body/array_obj_ref_68_index_resize_0/index_resize_req) (branch_block_stmt_30/do_while_stmt_31/do_while_stmt_31_loop_body/array_obj_ref_68_index_resize_0/index_resize_ack)
  array_obj_ref_68_index_0_scale <=> (branch_block_stmt_30/do_while_stmt_31/do_while_stmt_31_loop_body/array_obj_ref_68_index_scale_0_Sample/rr branch_block_stmt_30/do_while_stmt_31/do_while_stmt_31_loop_body/array_obj_ref_68_index_scale_0_Update/cr) (branch_block_stmt_30/do_while_stmt_31/do_while_stmt_31_loop_body/array_obj_ref_68_index_scale_0_Sample/ra branch_block_stmt_30/do_while_stmt_31/do_while_stmt_31_loop_body/array_obj_ref_68_index_scale_0_Update/ca)
  // Index
  array_obj_ref_68_index_1_resize <=> (branch_block_stmt_30/do_while_stmt_31/do_while_stmt_31_loop_body/array_obj_ref_68_index_resize_1/index_resize_req) (branch_block_stmt_30/do_while_stmt_31/do_while_stmt_31_loop_body/array_obj_ref_68_index_resize_1/index_resize_ack)
  array_obj_ref_68_index_1_rename <=> (branch_block_stmt_30/do_while_stmt_31/do_while_stmt_31_loop_body/array_obj_ref_68_index_scale_1/scale_rename_req) (branch_block_stmt_30/do_while_stmt_31/do_while_stmt_31_loop_body/array_obj_ref_68_index_scale_1/scale_rename_ack)
  array_obj_ref_68_index_sum_1 <=> (branch_block_stmt_30/do_while_stmt_31/do_while_stmt_31_loop_body/array_obj_ref_68_partial_sum_1_Sample/rr branch_block_stmt_30/do_while_stmt_31/do_while_stmt_31_loop_body/array_obj_ref_68_partial_sum_1_Update/cr) (branch_block_stmt_30/do_while_stmt_31/do_while_stmt_31_loop_body/array_obj_ref_68_partial_sum_1_Sample/ra branch_block_stmt_30/do_while_stmt_31/do_while_stmt_31_loop_body/array_obj_ref_68_partial_sum_1_Update/ca)
  array_obj_ref_68_index_offset <=> (branch_block_stmt_30/do_while_stmt_31/do_while_stmt_31_loop_body/array_obj_ref_68_final_index_sum_regn/req) (branch_block_stmt_30/do_while_stmt_31/do_while_stmt_31_loop_body/array_obj_ref_68_final_index_sum_regn/ack)
  array_obj_ref_68_root_address_inst <=> (branch_block_stmt_30/do_while_stmt_31/do_while_stmt_31_loop_body/array_obj_ref_68_base_plus_offset/sum_rename_req) (branch_block_stmt_30/do_while_stmt_31/do_while_stmt_31_loop_body/array_obj_ref_68_base_plus_offset/sum_rename_ack)
  array_obj_ref_68_addr_0 <=> (branch_block_stmt_30/do_while_stmt_31/do_while_stmt_31_loop_body/array_obj_ref_68_word_addrgen/root_register_req) (branch_block_stmt_30/do_while_stmt_31/do_while_stmt_31_loop_body/array_obj_ref_68_word_addrgen/root_register_ack)
  array_obj_ref_68_gather_scatter <=> (branch_block_stmt_30/do_while_stmt_31/do_while_stmt_31_loop_body/array_obj_ref_68_Update/array_obj_ref_68_Merge/merge_req) (branch_block_stmt_30/do_while_stmt_31/do_while_stmt_31_loop_body/array_obj_ref_68_Update/array_obj_ref_68_Merge/merge_ack)
  array_obj_ref_68_load_0 <=> (branch_block_stmt_30/do_while_stmt_31/do_while_stmt_31_loop_body/array_obj_ref_68_Sample/word_access_start/word_0/rr branch_block_stmt_30/do_while_stmt_31/do_while_stmt_31_loop_body/array_obj_ref_68_Update/word_access_complete/word_0/cr) (branch_block_stmt_30/do_while_stmt_31/do_while_stmt_31_loop_body/array_obj_ref_68_Sample/word_access_start/word_0/ra branch_block_stmt_30/do_while_stmt_31/do_while_stmt_31_loop_body/array_obj_ref_68_Update/word_access_complete/word_0/ca)
  // 			a_rc_1 := B_MEM[R][Index] $buffering 2// bits of buffering = 64. 
  //  file .Aa/mvp.opt.aa, line 49
  // B_MEM[R][Index]
  // R
  array_obj_ref_73_index_0_resize <=> (branch_block_stmt_30/do_while_stmt_31/do_while_stmt_31_loop_body/array_obj_ref_73_index_resize_0/index_resize_req) (branch_block_stmt_30/do_while_stmt_31/do_while_stmt_31_loop_body/array_obj_ref_73_index_resize_0/index_resize_ack)
  array_obj_ref_73_index_0_scale <=> (branch_block_stmt_30/do_while_stmt_31/do_while_stmt_31_loop_body/array_obj_ref_73_index_scale_0_Sample/rr branch_block_stmt_30/do_while_stmt_31/do_while_stmt_31_loop_body/array_obj_ref_73_index_scale_0_Update/cr) (branch_block_stmt_30/do_while_stmt_31/do_while_stmt_31_loop_body/array_obj_ref_73_index_scale_0_Sample/ra branch_block_stmt_30/do_while_stmt_31/do_while_stmt_31_loop_body/array_obj_ref_73_index_scale_0_Update/ca)
  // Index
  array_obj_ref_73_index_1_resize <=> (branch_block_stmt_30/do_while_stmt_31/do_while_stmt_31_loop_body/array_obj_ref_73_index_resize_1/index_resize_req) (branch_block_stmt_30/do_while_stmt_31/do_while_stmt_31_loop_body/array_obj_ref_73_index_resize_1/index_resize_ack)
  array_obj_ref_73_index_1_rename <=> (branch_block_stmt_30/do_while_stmt_31/do_while_stmt_31_loop_body/array_obj_ref_73_index_scale_1/scale_rename_req) (branch_block_stmt_30/do_while_stmt_31/do_while_stmt_31_loop_body/array_obj_ref_73_index_scale_1/scale_rename_ack)
  array_obj_ref_73_index_sum_1 <=> (branch_block_stmt_30/do_while_stmt_31/do_while_stmt_31_loop_body/array_obj_ref_73_partial_sum_1_Sample/rr branch_block_stmt_30/do_while_stmt_31/do_while_stmt_31_loop_body/array_obj_ref_73_partial_sum_1_Update/cr) (branch_block_stmt_30/do_while_stmt_31/do_while_stmt_31_loop_body/array_obj_ref_73_partial_sum_1_Sample/ra branch_block_stmt_30/do_while_stmt_31/do_while_stmt_31_loop_body/array_obj_ref_73_partial_sum_1_Update/ca)
  array_obj_ref_73_index_offset <=> (branch_block_stmt_30/do_while_stmt_31/do_while_stmt_31_loop_body/array_obj_ref_73_final_index_sum_regn/req) (branch_block_stmt_30/do_while_stmt_31/do_while_stmt_31_loop_body/array_obj_ref_73_final_index_sum_regn/ack)
  array_obj_ref_73_root_address_inst <=> (branch_block_stmt_30/do_while_stmt_31/do_while_stmt_31_loop_body/array_obj_ref_73_base_plus_offset/sum_rename_req) (branch_block_stmt_30/do_while_stmt_31/do_while_stmt_31_loop_body/array_obj_ref_73_base_plus_offset/sum_rename_ack)
  array_obj_ref_73_addr_0 <=> (branch_block_stmt_30/do_while_stmt_31/do_while_stmt_31_loop_body/array_obj_ref_73_word_addrgen/root_register_req) (branch_block_stmt_30/do_while_stmt_31/do_while_stmt_31_loop_body/array_obj_ref_73_word_addrgen/root_register_ack)
  array_obj_ref_73_gather_scatter <=> (branch_block_stmt_30/do_while_stmt_31/do_while_stmt_31_loop_body/array_obj_ref_73_Update/array_obj_ref_73_Merge/merge_req) (branch_block_stmt_30/do_while_stmt_31/do_while_stmt_31_loop_body/array_obj_ref_73_Update/array_obj_ref_73_Merge/merge_ack)
  array_obj_ref_73_load_0 <=> (branch_block_stmt_30/do_while_stmt_31/do_while_stmt_31_loop_body/array_obj_ref_73_Sample/word_access_start/word_0/rr branch_block_stmt_30/do_while_stmt_31/do_while_stmt_31_loop_body/array_obj_ref_73_Update/word_access_complete/word_0/cr) (branch_block_stmt_30/do_while_stmt_31/do_while_stmt_31_loop_body/array_obj_ref_73_Sample/word_access_start/word_0/ra branch_block_stmt_30/do_while_stmt_31/do_while_stmt_31_loop_body/array_obj_ref_73_Update/word_access_complete/word_0/ca)
  // 			a_rc_2 := C_MEM[R][Index] $buffering 2// bits of buffering = 64. 
  //  file .Aa/mvp.opt.aa, line 50
  // C_MEM[R][Index]
  // R
  array_obj_ref_78_index_0_resize <=> (branch_block_stmt_30/do_while_stmt_31/do_while_stmt_31_loop_body/array_obj_ref_78_index_resize_0/index_resize_req) (branch_block_stmt_30/do_while_stmt_31/do_while_stmt_31_loop_body/array_obj_ref_78_index_resize_0/index_resize_ack)
  array_obj_ref_78_index_0_scale <=> (branch_block_stmt_30/do_while_stmt_31/do_while_stmt_31_loop_body/array_obj_ref_78_index_scale_0_Sample/rr branch_block_stmt_30/do_while_stmt_31/do_while_stmt_31_loop_body/array_obj_ref_78_index_scale_0_Update/cr) (branch_block_stmt_30/do_while_stmt_31/do_while_stmt_31_loop_body/array_obj_ref_78_index_scale_0_Sample/ra branch_block_stmt_30/do_while_stmt_31/do_while_stmt_31_loop_body/array_obj_ref_78_index_scale_0_Update/ca)
  // Index
  array_obj_ref_78_index_1_resize <=> (branch_block_stmt_30/do_while_stmt_31/do_while_stmt_31_loop_body/array_obj_ref_78_index_resize_1/index_resize_req) (branch_block_stmt_30/do_while_stmt_31/do_while_stmt_31_loop_body/array_obj_ref_78_index_resize_1/index_resize_ack)
  array_obj_ref_78_index_1_rename <=> (branch_block_stmt_30/do_while_stmt_31/do_while_stmt_31_loop_body/array_obj_ref_78_index_scale_1/scale_rename_req) (branch_block_stmt_30/do_while_stmt_31/do_while_stmt_31_loop_body/array_obj_ref_78_index_scale_1/scale_rename_ack)
  array_obj_ref_78_index_sum_1 <=> (branch_block_stmt_30/do_while_stmt_31/do_while_stmt_31_loop_body/array_obj_ref_78_partial_sum_1_Sample/rr branch_block_stmt_30/do_while_stmt_31/do_while_stmt_31_loop_body/array_obj_ref_78_partial_sum_1_Update/cr) (branch_block_stmt_30/do_while_stmt_31/do_while_stmt_31_loop_body/array_obj_ref_78_partial_sum_1_Sample/ra branch_block_stmt_30/do_while_stmt_31/do_while_stmt_31_loop_body/array_obj_ref_78_partial_sum_1_Update/ca)
  array_obj_ref_78_index_offset <=> (branch_block_stmt_30/do_while_stmt_31/do_while_stmt_31_loop_body/array_obj_ref_78_final_index_sum_regn/req) (branch_block_stmt_30/do_while_stmt_31/do_while_stmt_31_loop_body/array_obj_ref_78_final_index_sum_regn/ack)
  array_obj_ref_78_root_address_inst <=> (branch_block_stmt_30/do_while_stmt_31/do_while_stmt_31_loop_body/array_obj_ref_78_base_plus_offset/sum_rename_req) (branch_block_stmt_30/do_while_stmt_31/do_while_stmt_31_loop_body/array_obj_ref_78_base_plus_offset/sum_rename_ack)
  array_obj_ref_78_addr_0 <=> (branch_block_stmt_30/do_while_stmt_31/do_while_stmt_31_loop_body/array_obj_ref_78_word_addrgen/root_register_req) (branch_block_stmt_30/do_while_stmt_31/do_while_stmt_31_loop_body/array_obj_ref_78_word_addrgen/root_register_ack)
  array_obj_ref_78_gather_scatter <=> (branch_block_stmt_30/do_while_stmt_31/do_while_stmt_31_loop_body/array_obj_ref_78_Update/array_obj_ref_78_Merge/merge_req) (branch_block_stmt_30/do_while_stmt_31/do_while_stmt_31_loop_body/array_obj_ref_78_Update/array_obj_ref_78_Merge/merge_ack)
  array_obj_ref_78_load_0 <=> (branch_block_stmt_30/do_while_stmt_31/do_while_stmt_31_loop_body/array_obj_ref_78_Sample/word_access_start/word_0/rr branch_block_stmt_30/do_while_stmt_31/do_while_stmt_31_loop_body/array_obj_ref_78_Update/word_access_complete/word_0/cr) (branch_block_stmt_30/do_while_stmt_31/do_while_stmt_31_loop_body/array_obj_ref_78_Sample/word_access_start/word_0/ra branch_block_stmt_30/do_while_stmt_31/do_while_stmt_31_loop_body/array_obj_ref_78_Update/word_access_complete/word_0/ca)
  // 			a_rc_3 := D_MEM[R][Index] $buffering 2// bits of buffering = 64. 
  //  file .Aa/mvp.opt.aa, line 51
  // D_MEM[R][Index]
  // R
  array_obj_ref_83_index_0_resize <=> (branch_block_stmt_30/do_while_stmt_31/do_while_stmt_31_loop_body/array_obj_ref_83_index_resize_0/index_resize_req) (branch_block_stmt_30/do_while_stmt_31/do_while_stmt_31_loop_body/array_obj_ref_83_index_resize_0/index_resize_ack)
  array_obj_ref_83_index_0_scale <=> (branch_block_stmt_30/do_while_stmt_31/do_while_stmt_31_loop_body/array_obj_ref_83_index_scale_0_Sample/rr branch_block_stmt_30/do_while_stmt_31/do_while_stmt_31_loop_body/array_obj_ref_83_index_scale_0_Update/cr) (branch_block_stmt_30/do_while_stmt_31/do_while_stmt_31_loop_body/array_obj_ref_83_index_scale_0_Sample/ra branch_block_stmt_30/do_while_stmt_31/do_while_stmt_31_loop_body/array_obj_ref_83_index_scale_0_Update/ca)
  // Index
  array_obj_ref_83_index_1_resize <=> (branch_block_stmt_30/do_while_stmt_31/do_while_stmt_31_loop_body/array_obj_ref_83_index_resize_1/index_resize_req) (branch_block_stmt_30/do_while_stmt_31/do_while_stmt_31_loop_body/array_obj_ref_83_index_resize_1/index_resize_ack)
  array_obj_ref_83_index_1_rename <=> (branch_block_stmt_30/do_while_stmt_31/do_while_stmt_31_loop_body/array_obj_ref_83_index_scale_1/scale_rename_req) (branch_block_stmt_30/do_while_stmt_31/do_while_stmt_31_loop_body/array_obj_ref_83_index_scale_1/scale_rename_ack)
  array_obj_ref_83_index_sum_1 <=> (branch_block_stmt_30/do_while_stmt_31/do_while_stmt_31_loop_body/array_obj_ref_83_partial_sum_1_Sample/rr branch_block_stmt_30/do_while_stmt_31/do_while_stmt_31_loop_body/array_obj_ref_83_partial_sum_1_Update/cr) (branch_block_stmt_30/do_while_stmt_31/do_while_stmt_31_loop_body/array_obj_ref_83_partial_sum_1_Sample/ra branch_block_stmt_30/do_while_stmt_31/do_while_stmt_31_loop_body/array_obj_ref_83_partial_sum_1_Update/ca)
  array_obj_ref_83_index_offset <=> (branch_block_stmt_30/do_while_stmt_31/do_while_stmt_31_loop_body/array_obj_ref_83_final_index_sum_regn/req) (branch_block_stmt_30/do_while_stmt_31/do_while_stmt_31_loop_body/array_obj_ref_83_final_index_sum_regn/ack)
  array_obj_ref_83_root_address_inst <=> (branch_block_stmt_30/do_while_stmt_31/do_while_stmt_31_loop_body/array_obj_ref_83_base_plus_offset/sum_rename_req) (branch_block_stmt_30/do_while_stmt_31/do_while_stmt_31_loop_body/array_obj_ref_83_base_plus_offset/sum_rename_ack)
  array_obj_ref_83_addr_0 <=> (branch_block_stmt_30/do_while_stmt_31/do_while_stmt_31_loop_body/array_obj_ref_83_word_addrgen/root_register_req) (branch_block_stmt_30/do_while_stmt_31/do_while_stmt_31_loop_body/array_obj_ref_83_word_addrgen/root_register_ack)
  array_obj_ref_83_gather_scatter <=> (branch_block_stmt_30/do_while_stmt_31/do_while_stmt_31_loop_body/array_obj_ref_83_Update/array_obj_ref_83_Merge/merge_req) (branch_block_stmt_30/do_while_stmt_31/do_while_stmt_31_loop_body/array_obj_ref_83_Update/array_obj_ref_83_Merge/merge_ack)
  array_obj_ref_83_load_0 <=> (branch_block_stmt_30/do_while_stmt_31/do_while_stmt_31_loop_body/array_obj_ref_83_Sample/word_access_start/word_0/rr branch_block_stmt_30/do_while_stmt_31/do_while_stmt_31_loop_body/array_obj_ref_83_Update/word_access_complete/word_0/cr) (branch_block_stmt_30/do_while_stmt_31/do_while_stmt_31_loop_body/array_obj_ref_83_Sample/word_access_start/word_0/ra branch_block_stmt_30/do_while_stmt_31/do_while_stmt_31_loop_body/array_obj_ref_83_Update/word_access_complete/word_0/ca)
  // 			xval_0 := x0[Index] $buffering 2// bits of buffering = 64. 
  //  file .Aa/mvp.opt.aa, line 53
  // x0[Index]
  // Index
  array_obj_ref_93_index_0_resize <=> (branch_block_stmt_30/do_while_stmt_31/do_while_stmt_31_loop_body/array_obj_ref_93_index_resize_0/index_resize_req) (branch_block_stmt_30/do_while_stmt_31/do_while_stmt_31_loop_body/array_obj_ref_93_index_resize_0/index_resize_ack)
  array_obj_ref_93_index_0_rename <=> (branch_block_stmt_30/do_while_stmt_31/do_while_stmt_31_loop_body/array_obj_ref_93_index_scale_0/scale_rename_req) (branch_block_stmt_30/do_while_stmt_31/do_while_stmt_31_loop_body/array_obj_ref_93_index_scale_0/scale_rename_ack)
  array_obj_ref_93_index_offset <=> (branch_block_stmt_30/do_while_stmt_31/do_while_stmt_31_loop_body/array_obj_ref_93_final_index_sum_regn/req) (branch_block_stmt_30/do_while_stmt_31/do_while_stmt_31_loop_body/array_obj_ref_93_final_index_sum_regn/ack)
  array_obj_ref_93_root_address_inst <=> (branch_block_stmt_30/do_while_stmt_31/do_while_stmt_31_loop_body/array_obj_ref_93_base_plus_offset/sum_rename_req) (branch_block_stmt_30/do_while_stmt_31/do_while_stmt_31_loop_body/array_obj_ref_93_base_plus_offset/sum_rename_ack)
  array_obj_ref_93_addr_0 <=> (branch_block_stmt_30/do_while_stmt_31/do_while_stmt_31_loop_body/array_obj_ref_93_word_addrgen/root_register_req) (branch_block_stmt_30/do_while_stmt_31/do_while_stmt_31_loop_body/array_obj_ref_93_word_addrgen/root_register_ack)
  array_obj_ref_93_gather_scatter <=> (branch_block_stmt_30/do_while_stmt_31/do_while_stmt_31_loop_body/array_obj_ref_93_Update/array_obj_ref_93_Merge/merge_req) (branch_block_stmt_30/do_while_stmt_31/do_while_stmt_31_loop_body/array_obj_ref_93_Update/array_obj_ref_93_Merge/merge_ack)
  array_obj_ref_93_load_0 <=> (branch_block_stmt_30/do_while_stmt_31/do_while_stmt_31_loop_body/array_obj_ref_93_Sample/word_access_start/word_0/rr branch_block_stmt_30/do_while_stmt_31/do_while_stmt_31_loop_body/array_obj_ref_93_Update/word_access_complete/word_0/cr) (branch_block_stmt_30/do_while_stmt_31/do_while_stmt_31_loop_body/array_obj_ref_93_Sample/word_access_start/word_0/ra branch_block_stmt_30/do_while_stmt_31/do_while_stmt_31_loop_body/array_obj_ref_93_Update/word_access_complete/word_0/ca)
  // 			xval_1 := x1[Index] $buffering 2// bits of buffering = 64. 
  //  file .Aa/mvp.opt.aa, line 54
  // x1[Index]
  // Index
  array_obj_ref_97_index_0_resize <=> (branch_block_stmt_30/do_while_stmt_31/do_while_stmt_31_loop_body/array_obj_ref_97_index_resize_0/index_resize_req) (branch_block_stmt_30/do_while_stmt_31/do_while_stmt_31_loop_body/array_obj_ref_97_index_resize_0/index_resize_ack)
  array_obj_ref_97_index_0_rename <=> (branch_block_stmt_30/do_while_stmt_31/do_while_stmt_31_loop_body/array_obj_ref_97_index_scale_0/scale_rename_req) (branch_block_stmt_30/do_while_stmt_31/do_while_stmt_31_loop_body/array_obj_ref_97_index_scale_0/scale_rename_ack)
  array_obj_ref_97_index_offset <=> (branch_block_stmt_30/do_while_stmt_31/do_while_stmt_31_loop_body/array_obj_ref_97_final_index_sum_regn/req) (branch_block_stmt_30/do_while_stmt_31/do_while_stmt_31_loop_body/array_obj_ref_97_final_index_sum_regn/ack)
  array_obj_ref_97_root_address_inst <=> (branch_block_stmt_30/do_while_stmt_31/do_while_stmt_31_loop_body/array_obj_ref_97_base_plus_offset/sum_rename_req) (branch_block_stmt_30/do_while_stmt_31/do_while_stmt_31_loop_body/array_obj_ref_97_base_plus_offset/sum_rename_ack)
  array_obj_ref_97_addr_0 <=> (branch_block_stmt_30/do_while_stmt_31/do_while_stmt_31_loop_body/array_obj_ref_97_word_addrgen/root_register_req) (branch_block_stmt_30/do_while_stmt_31/do_while_stmt_31_loop_body/array_obj_ref_97_word_addrgen/root_register_ack)
  array_obj_ref_97_gather_scatter <=> (branch_block_stmt_30/do_while_stmt_31/do_while_stmt_31_loop_body/array_obj_ref_97_Update/array_obj_ref_97_Merge/merge_req) (branch_block_stmt_30/do_while_stmt_31/do_while_stmt_31_loop_body/array_obj_ref_97_Update/array_obj_ref_97_Merge/merge_ack)
  array_obj_ref_97_load_0 <=> (branch_block_stmt_30/do_while_stmt_31/do_while_stmt_31_loop_body/array_obj_ref_97_Sample/word_access_start/word_0/rr branch_block_stmt_30/do_while_stmt_31/do_while_stmt_31_loop_body/array_obj_ref_97_Update/word_access_complete/word_0/cr) (branch_block_stmt_30/do_while_stmt_31/do_while_stmt_31_loop_body/array_obj_ref_97_Sample/word_access_start/word_0/ra branch_block_stmt_30/do_while_stmt_31/do_while_stmt_31_loop_body/array_obj_ref_97_Update/word_access_complete/word_0/ca)
  // 			xval_2 := x2[Index] $buffering 2// bits of buffering = 64. 
  //  file .Aa/mvp.opt.aa, line 55
  // x2[Index]
  // Index
  array_obj_ref_101_index_0_resize <=> (branch_block_stmt_30/do_while_stmt_31/do_while_stmt_31_loop_body/array_obj_ref_101_index_resize_0/index_resize_req) (branch_block_stmt_30/do_while_stmt_31/do_while_stmt_31_loop_body/array_obj_ref_101_index_resize_0/index_resize_ack)
  array_obj_ref_101_index_0_rename <=> (branch_block_stmt_30/do_while_stmt_31/do_while_stmt_31_loop_body/array_obj_ref_101_index_scale_0/scale_rename_req) (branch_block_stmt_30/do_while_stmt_31/do_while_stmt_31_loop_body/array_obj_ref_101_index_scale_0/scale_rename_ack)
  array_obj_ref_101_index_offset <=> (branch_block_stmt_30/do_while_stmt_31/do_while_stmt_31_loop_body/array_obj_ref_101_final_index_sum_regn/req) (branch_block_stmt_30/do_while_stmt_31/do_while_stmt_31_loop_body/array_obj_ref_101_final_index_sum_regn/ack)
  array_obj_ref_101_root_address_inst <=> (branch_block_stmt_30/do_while_stmt_31/do_while_stmt_31_loop_body/array_obj_ref_101_base_plus_offset/sum_rename_req) (branch_block_stmt_30/do_while_stmt_31/do_while_stmt_31_loop_body/array_obj_ref_101_base_plus_offset/sum_rename_ack)
  array_obj_ref_101_addr_0 <=> (branch_block_stmt_30/do_while_stmt_31/do_while_stmt_31_loop_body/array_obj_ref_101_word_addrgen/root_register_req) (branch_block_stmt_30/do_while_stmt_31/do_while_stmt_31_loop_body/array_obj_ref_101_word_addrgen/root_register_ack)
  array_obj_ref_101_gather_scatter <=> (branch_block_stmt_30/do_while_stmt_31/do_while_stmt_31_loop_body/array_obj_ref_101_Update/array_obj_ref_101_Merge/merge_req) (branch_block_stmt_30/do_while_stmt_31/do_while_stmt_31_loop_body/array_obj_ref_101_Update/array_obj_ref_101_Merge/merge_ack)
  array_obj_ref_101_load_0 <=> (branch_block_stmt_30/do_while_stmt_31/do_while_stmt_31_loop_body/array_obj_ref_101_Sample/word_access_start/word_0/rr branch_block_stmt_30/do_while_stmt_31/do_while_stmt_31_loop_body/array_obj_ref_101_Update/word_access_complete/word_0/cr) (branch_block_stmt_30/do_while_stmt_31/do_while_stmt_31_loop_body/array_obj_ref_101_Sample/word_access_start/word_0/ra branch_block_stmt_30/do_while_stmt_31/do_while_stmt_31_loop_body/array_obj_ref_101_Update/word_access_complete/word_0/ca)
  // 			xval_3 := x3[Index] $buffering 2// bits of buffering = 64. 
  //  file .Aa/mvp.opt.aa, line 56
  // x3[Index]
  // Index
  array_obj_ref_105_index_0_resize <=> (branch_block_stmt_30/do_while_stmt_31/do_while_stmt_31_loop_body/array_obj_ref_105_index_resize_0/index_resize_req) (branch_block_stmt_30/do_while_stmt_31/do_while_stmt_31_loop_body/array_obj_ref_105_index_resize_0/index_resize_ack)
  array_obj_ref_105_index_0_rename <=> (branch_block_stmt_30/do_while_stmt_31/do_while_stmt_31_loop_body/array_obj_ref_105_index_scale_0/scale_rename_req) (branch_block_stmt_30/do_while_stmt_31/do_while_stmt_31_loop_body/array_obj_ref_105_index_scale_0/scale_rename_ack)
  array_obj_ref_105_index_offset <=> (branch_block_stmt_30/do_while_stmt_31/do_while_stmt_31_loop_body/array_obj_ref_105_final_index_sum_regn/req) (branch_block_stmt_30/do_while_stmt_31/do_while_stmt_31_loop_body/array_obj_ref_105_final_index_sum_regn/ack)
  array_obj_ref_105_root_address_inst <=> (branch_block_stmt_30/do_while_stmt_31/do_while_stmt_31_loop_body/array_obj_ref_105_base_plus_offset/sum_rename_req) (branch_block_stmt_30/do_while_stmt_31/do_while_stmt_31_loop_body/array_obj_ref_105_base_plus_offset/sum_rename_ack)
  array_obj_ref_105_addr_0 <=> (branch_block_stmt_30/do_while_stmt_31/do_while_stmt_31_loop_body/array_obj_ref_105_word_addrgen/root_register_req) (branch_block_stmt_30/do_while_stmt_31/do_while_stmt_31_loop_body/array_obj_ref_105_word_addrgen/root_register_ack)
  array_obj_ref_105_gather_scatter <=> (branch_block_stmt_30/do_while_stmt_31/do_while_stmt_31_loop_body/array_obj_ref_105_Update/array_obj_ref_105_Merge/merge_req) (branch_block_stmt_30/do_while_stmt_31/do_while_stmt_31_loop_body/array_obj_ref_105_Update/array_obj_ref_105_Merge/merge_ack)
  array_obj_ref_105_load_0 <=> (branch_block_stmt_30/do_while_stmt_31/do_while_stmt_31_loop_body/array_obj_ref_105_Sample/word_access_start/word_0/rr branch_block_stmt_30/do_while_stmt_31/do_while_stmt_31_loop_body/array_obj_ref_105_Update/word_access_complete/word_0/cr) (branch_block_stmt_30/do_while_stmt_31/do_while_stmt_31_loop_body/array_obj_ref_105_Sample/word_access_start/word_0/ra branch_block_stmt_30/do_while_stmt_31/do_while_stmt_31_loop_body/array_obj_ref_105_Update/word_access_complete/word_0/ca)
  // 			val_0_114_delayed_5_0 := val_0 $buffering 5 $cut_through // bits of buffering = 160. 
  //  file .Aa/mvp.opt.aa, line 58
  // val_0
  W_val_0_114_delayed_5_0_113_inst <=> (branch_block_stmt_30/do_while_stmt_31/do_while_stmt_31_loop_body/assign_stmt_115_Sample/req branch_block_stmt_30/do_while_stmt_31/do_while_stmt_31_loop_body/assign_stmt_115_Update/req) (branch_block_stmt_30/do_while_stmt_31/do_while_stmt_31_loop_body/assign_stmt_115_Sample/ack branch_block_stmt_30/do_while_stmt_31/do_while_stmt_31_loop_body/assign_stmt_115_Update/ack)
  // 			$volatile nval_0 := (val_0_114_delayed_5_0 + (a_rc_0 * xval_0)) $buffering 1
  //  file .Aa/mvp.opt.aa, line 59
  // (val_0_114_delayed_5_0 + (a_rc_0 * xval_0))
  // val_0_114_delayed_5_0
  // (a_rc_0 * xval_0)
  // a_rc_0
  // xval_0
  // 			val_1_121_delayed_5_0 := val_1 $buffering 5 $cut_through // bits of buffering = 160. 
  //  file .Aa/mvp.opt.aa, line 60
  // val_1
  W_val_1_121_delayed_5_0_123_inst <=> (branch_block_stmt_30/do_while_stmt_31/do_while_stmt_31_loop_body/assign_stmt_125_Sample/req branch_block_stmt_30/do_while_stmt_31/do_while_stmt_31_loop_body/assign_stmt_125_Update/req) (branch_block_stmt_30/do_while_stmt_31/do_while_stmt_31_loop_body/assign_stmt_125_Sample/ack branch_block_stmt_30/do_while_stmt_31/do_while_stmt_31_loop_body/assign_stmt_125_Update/ack)
  // 			$volatile nval_1 := (val_1_121_delayed_5_0 + (a_rc_1 * xval_1)) $buffering 1
  //  file .Aa/mvp.opt.aa, line 61
  // (val_1_121_delayed_5_0 + (a_rc_1 * xval_1))
  // val_1_121_delayed_5_0
  // (a_rc_1 * xval_1)
  // a_rc_1
  // xval_1
  // 			val_2_128_delayed_5_0 := val_2 $buffering 5 $cut_through // bits of buffering = 160. 
  //  file .Aa/mvp.opt.aa, line 62
  // val_2
  W_val_2_128_delayed_5_0_133_inst <=> (branch_block_stmt_30/do_while_stmt_31/do_while_stmt_31_loop_body/assign_stmt_135_Sample/req branch_block_stmt_30/do_while_stmt_31/do_while_stmt_31_loop_body/assign_stmt_135_Update/req) (branch_block_stmt_30/do_while_stmt_31/do_while_stmt_31_loop_body/assign_stmt_135_Sample/ack branch_block_stmt_30/do_while_stmt_31/do_while_stmt_31_loop_body/assign_stmt_135_Update/ack)
  // 			$volatile nval_2 := (val_2_128_delayed_5_0 + (a_rc_2 * xval_2)) $buffering 1
  //  file .Aa/mvp.opt.aa, line 63
  // (val_2_128_delayed_5_0 + (a_rc_2 * xval_2))
  // val_2_128_delayed_5_0
  // (a_rc_2 * xval_2)
  // a_rc_2
  // xval_2
  // 			val_3_135_delayed_5_0 := val_3 $buffering 5 $cut_through // bits of buffering = 160. 
  //  file .Aa/mvp.opt.aa, line 64
  // val_3
  W_val_3_135_delayed_5_0_143_inst <=> (branch_block_stmt_30/do_while_stmt_31/do_while_stmt_31_loop_body/assign_stmt_145_Sample/req branch_block_stmt_30/do_while_stmt_31/do_while_stmt_31_loop_body/assign_stmt_145_Update/req) (branch_block_stmt_30/do_while_stmt_31/do_while_stmt_31_loop_body/assign_stmt_145_Sample/ack branch_block_stmt_30/do_while_stmt_31/do_while_stmt_31_loop_body/assign_stmt_145_Update/ack)
  // 			$volatile nval_3 := (val_3_135_delayed_5_0 + (a_rc_3 * xval_3)) $buffering 1
  //  file .Aa/mvp.opt.aa, line 65
  // (val_3_135_delayed_5_0 + (a_rc_3 * xval_3))
  // val_3_135_delayed_5_0
  // (a_rc_3 * xval_3)
  // a_rc_3
  // xval_3
  // 			nC := (C + 4 ) $buffering 2// bits of buffering = 16. 
  //  file .Aa/mvp.opt.aa, line 67
  // (C + 4 )
  // C
  ADD_u8_u8_161_inst <=> (branch_block_stmt_30/do_while_stmt_31/do_while_stmt_31_loop_body/ADD_u8_u8_161_Sample/rr branch_block_stmt_30/do_while_stmt_31/do_while_stmt_31_loop_body/ADD_u8_u8_161_Update/cr) (branch_block_stmt_30/do_while_stmt_31/do_while_stmt_31_loop_body/ADD_u8_u8_161_Sample/ra branch_block_stmt_30/do_while_stmt_31/do_while_stmt_31_loop_body/ADD_u8_u8_161_Update/ca)
  // 			nIndex := (Index + 1 ) $buffering 2// bits of buffering = 6. 
  //  file .Aa/mvp.opt.aa, line 68
  // (Index + 1 )
  // Index
  ADD_u3_u3_166_inst <=> (branch_block_stmt_30/do_while_stmt_31/do_while_stmt_31_loop_body/ADD_u3_u3_166_Sample/rr branch_block_stmt_30/do_while_stmt_31/do_while_stmt_31_loop_body/ADD_u3_u3_166_Update/cr) (branch_block_stmt_30/do_while_stmt_31/do_while_stmt_31_loop_body/ADD_u3_u3_166_Sample/ra branch_block_stmt_30/do_while_stmt_31/do_while_stmt_31_loop_body/ADD_u3_u3_166_Update/ca)
  // (nC < 32 )
  // nC
  do_while_stmt_31_branch <=> (branch_block_stmt_30/do_while_stmt_31/do_while_stmt_31_loop_body/condition_evaluated) (branch_block_stmt_30/do_while_stmt_31/loop_exit/ack branch_block_stmt_30/do_while_stmt_31/loop_taken/ack)
  // 	result := (nval_0 + (nval_1 + (nval_2 + nval_3))) $buffering 1// bits of buffering = 32. 
  //  file .Aa/mvp.opt.aa, line 72
  // (nval_0 + (nval_1 + (nval_2 + nval_3)))
  // nval_0
  // (nval_1 + (nval_2 + nval_3))
  // nval_1
  // (nval_2 + nval_3)
  // nval_2
  // nval_3
  ADD_u32_u32_181_inst <=> (assign_stmt_182/ADD_u32_u32_181_Sample/rr assign_stmt_182/ADD_u32_u32_181_Update/cr) (assign_stmt_182/ADD_u32_u32_181_Sample/ra assign_stmt_182/ADD_u32_u32_181_Update/ca)
}
$module [dotP_0] 
{
  $in R:$int<8>
  // can point into 
  $out result:$int<32>
  // can point into 
  // pipe-declarations for block %dotP_0
  //  file .Aa/mvp.opt.aa, line 74
  // pipe-declarations for block %dotP_0%mmloop
  //  file .Aa/mvp.opt.aa, line 79
  // memory-space 7 is read from.
  // memory-space 6 is read from.
  // memory-space 5 is read from.
  // memory-space 4 is read from.
  // memory-space 3 is read from.
  // memory-space 2 is read from.
  // memory-space 1 is read from.
  // memory-space 0 is read from.
  // there are no memory spaces local to this module.
  $CP 
  {
    // begin control-path 
    <>[branch_block_stmt_187] // Branch Block  file .Aa/mvp.opt.aa, line 79
    {
      $P [branch_block_stmt_187__entry__]
      branch_block_stmt_187__entry__ <-| ($entry)
      $P [branch_block_stmt_187__exit__]
      branch_block_stmt_187__exit__ |-> ($exit)
      $P [do_while_stmt_188__entry__] 
      $P [do_while_stmt_188__exit__] 
      // do-while-statement  
      //  file .Aa/mvp.opt.aa, line 81
      <o> [do_while_stmt_188]  $depth 15 $buffering 1 
      {
        $P[do_while_stmt_188__entry__] 
        $P[do_while_stmt_188__exit__] 
        $P[loop_back] 
        $P[condition_done] 
        $P[loop_body_done] 
        $pipeline [do_while_stmt_188_loop_body] 
        {
          // Pipelined!
          $T[back_edge_to_loop_body] 
          $T[first_time_through_loop_body] 
          $T[loop_body_start] 
          $T[condition_evaluated] 
          $transitionmerge [entry_tmerge] (back_edge_to_loop_body first_time_through_loop_body) (loop_body_start)
          $entry <-& (loop_body_start)
          $T[aggregated_phi_sample_req] 
          $T[aggregated_phi_sample_ack] 
          $T[aggregated_phi_update_req] 
          $T[aggregated_phi_update_ack] 
          // do not loop-back unless all phi's have used up their triggering tokens.
          condition_evaluated <-& (aggregated_phi_update_ack)
          aggregated_phi_sample_req o<-& (aggregated_phi_update_ack 0)
          // start:  PHI statement phi_stmt_190
          // 			$phi C := 			  nC $on   $loopback 			  ($bitcast ($uint<8>) 0  ) $on   $entry 
          // type of target is $uint<8>
          $T[phi_stmt_190_sample_start_] 
          $T[phi_stmt_190_sample_completed_] 
          $T[phi_stmt_190_update_start_] 
          $T[phi_stmt_190_update_completed_] 
          $T[phi_stmt_190_sample_start__ps] 
          phi_stmt_190_sample_start__ps <-& (aggregated_phi_sample_req)
          $T[phi_stmt_190_sample_completed__ps] 
          phi_stmt_190_sample_completed__ps &-> (aggregated_phi_sample_ack)
          $T[phi_stmt_190_update_start__ps] 
          phi_stmt_190_update_start__ps <-& (aggregated_phi_update_req)
          $T[phi_stmt_190_update_completed__ps] 
          phi_stmt_190_update_completed_ <-& (phi_stmt_190_update_completed__ps)
          aggregated_phi_sample_req <-& (phi_stmt_190_sample_start_)
          aggregated_phi_sample_ack &-> (phi_stmt_190_sample_completed_)
          aggregated_phi_update_req <-& (phi_stmt_190_update_start_)
          $T[phi_stmt_190_loopback_trigger] 
          phi_stmt_190_loopback_trigger <-& (back_edge_to_loop_body)
          $T[phi_stmt_190_loopback_sample_req] 
          $T[phi_stmt_190_loopback_sample_req_ps] 
          phi_stmt_190_loopback_sample_req <-& (phi_stmt_190_loopback_sample_req_ps)
          phi_stmt_190_loopback_sample_req &-> ($null)
          $T[phi_stmt_190_entry_trigger] 
          phi_stmt_190_entry_trigger <-& (first_time_through_loop_body)
          $T[phi_stmt_190_entry_sample_req] 
          $T[phi_stmt_190_entry_sample_req_ps] 
          phi_stmt_190_entry_sample_req <-& (phi_stmt_190_entry_sample_req_ps)
          phi_stmt_190_entry_sample_req &-> ($null)
          phi_stmt_190_update_start_ o<-& (phi_stmt_190_update_completed_ 0)
          phi_stmt_190_sample_start_ o<-& (phi_stmt_190_sample_completed_ 1)
          $T[phi_stmt_190_merged_reqs] 
          $T[phi_stmt_190_phi_mux_ack] 
          $T[phi_stmt_190_phi_mux_ack_ps] 
          phi_stmt_190_phi_mux_ack_ps <-& (phi_stmt_190_phi_mux_ack)
          aggregated_phi_update_ack <-& (phi_stmt_190_update_completed_)
          $T[R_nC_192_sample_start__ps] 
          $T[R_nC_192_sample_completed__ps] 
          $T[R_nC_192_update_start__ps] 
          $T[R_nC_192_update_completed__ps] 
          // interlock for implicit-variable-ref/signal-read in Phi alternative 0
          $T[R_nC_192_sample_start_] 
          $T[R_nC_192_sample_completed_] 
          $T[R_nC_192_update_start_] 
          $T[R_nC_192_update_completed_] 
          ;;[R_nC_192_Sample] 
          {
            $T [req] $T [ack] // interlock-sample.
          }
          R_nC_192_sample_start_ &-> (R_nC_192_Sample)
          R_nC_192_sample_completed_ <-& (R_nC_192_Sample)
          ;;[R_nC_192_Update] 
          {
            $T [req] $T [ack] // interlock-update.
          }
          R_nC_192_update_start_ &-> (R_nC_192_Update)
          R_nC_192_update_completed_ <-& (R_nC_192_Update)
          // RAW reenables for nC
          // Phi start dependency for implicit/constant alternative.
          R_nC_192_sample_start_ <-& (R_nC_192_sample_start__ps)
          R_nC_192_update_start_ <-& (R_nC_192_update_start__ps)
          // Phi complete dependency.
          R_nC_192_sample_completed__ps <-& (R_nC_192_sample_completed_)
          R_nC_192_update_completed__ps <-& (R_nC_192_update_completed_)
          $T[type_cast_194_sample_start__ps] 
          $T[type_cast_194_sample_completed__ps] 
          $T[type_cast_194_update_start__ps] 
          $T[type_cast_194_update_completed__ps] 
          // dummies for constant expression source for phi
          $T[type_cast_194_sample_start_] 
          $T[type_cast_194_sample_completed_] 
          type_cast_194_sample_completed_ <-& (type_cast_194_sample_start_)
          $T[type_cast_194_update_start_] 
          $T [type_cast_194_update_completed_] $delay 
          type_cast_194_update_completed_ <-& (type_cast_194_update_start_)
          // Phi start dependency for implicit/constant alternative.
          type_cast_194_sample_start_ <-& (type_cast_194_sample_start__ps)
          type_cast_194_update_start_ <-& (type_cast_194_update_start__ps)
          // Phi complete dependency.
          type_cast_194_sample_completed__ps <-& (type_cast_194_sample_completed_)
          type_cast_194_update_completed__ps <-& (type_cast_194_update_completed_)
          $phisequencer [ phi_stmt_190_phi_seq] : 
          phi_stmt_190_loopback_trigger R_nC_192_sample_start__ps R_nC_192_sample_completed__ps R_nC_192_update_start__ps R_nC_192_update_completed__ps phi_stmt_190_entry_trigger type_cast_194_sample_start__ps type_cast_194_sample_completed__ps type_cast_194_update_start__ps type_cast_194_update_completed__ps :
          phi_stmt_190_sample_start__ps phi_stmt_190_sample_completed__ps phi_stmt_190_update_start__ps phi_stmt_190_update_completed__ps :
          phi_stmt_190_loopback_sample_req_ps phi_stmt_190_entry_sample_req_ps : 
          phi_stmt_190_phi_mux_ack_ps
          // done: PHI Statement phi_stmt_190
          // start:  PHI statement phi_stmt_195
          // 			$phi Index := 			  ($bitcast ($uint<3>) 0  ) $on   $entry 			  nIndex $on   $loopback 
          // type of target is $uint<3>
          $T[phi_stmt_195_sample_start_] 
          $T[phi_stmt_195_sample_completed_] 
          $T[phi_stmt_195_update_start_] 
          $T[phi_stmt_195_update_completed_] 
          $T[phi_stmt_195_sample_start__ps] 
          phi_stmt_195_sample_start__ps <-& (aggregated_phi_sample_req)
          $T[phi_stmt_195_sample_completed__ps] 
          phi_stmt_195_sample_completed__ps &-> (aggregated_phi_sample_ack)
          $T[phi_stmt_195_update_start__ps] 
          phi_stmt_195_update_start__ps <-& (aggregated_phi_update_req)
          $T[phi_stmt_195_update_completed__ps] 
          phi_stmt_195_update_completed_ <-& (phi_stmt_195_update_completed__ps)
          aggregated_phi_sample_req <-& (phi_stmt_195_sample_start_)
          aggregated_phi_sample_ack &-> (phi_stmt_195_sample_completed_)
          aggregated_phi_update_req <-& (phi_stmt_195_update_start_)
          $T[phi_stmt_195_loopback_trigger] 
          phi_stmt_195_loopback_trigger <-& (back_edge_to_loop_body)
          $T[phi_stmt_195_loopback_sample_req] 
          $T[phi_stmt_195_loopback_sample_req_ps] 
          phi_stmt_195_loopback_sample_req <-& (phi_stmt_195_loopback_sample_req_ps)
          phi_stmt_195_loopback_sample_req &-> ($null)
          $T[phi_stmt_195_entry_trigger] 
          phi_stmt_195_entry_trigger <-& (first_time_through_loop_body)
          $T[phi_stmt_195_entry_sample_req] 
          $T[phi_stmt_195_entry_sample_req_ps] 
          phi_stmt_195_entry_sample_req <-& (phi_stmt_195_entry_sample_req_ps)
          phi_stmt_195_entry_sample_req &-> ($null)
          phi_stmt_195_update_start_ o<-& (phi_stmt_195_update_completed_ 0)
          phi_stmt_195_sample_start_ o<-& (phi_stmt_195_sample_completed_ 1)
          $T[phi_stmt_195_merged_reqs] 
          $T[phi_stmt_195_phi_mux_ack] 
          $T[phi_stmt_195_phi_mux_ack_ps] 
          phi_stmt_195_phi_mux_ack_ps <-& (phi_stmt_195_phi_mux_ack)
          aggregated_phi_update_ack <-& (phi_stmt_195_update_completed_)
          $T[type_cast_198_sample_start__ps] 
          $T[type_cast_198_sample_completed__ps] 
          $T[type_cast_198_update_start__ps] 
          $T[type_cast_198_update_completed__ps] 
          // dummies for constant expression source for phi
          $T[type_cast_198_sample_start_] 
          $T[type_cast_198_sample_completed_] 
          type_cast_198_sample_completed_ <-& (type_cast_198_sample_start_)
          $T[type_cast_198_update_start_] 
          $T [type_cast_198_update_completed_] $delay 
          type_cast_198_update_completed_ <-& (type_cast_198_update_start_)
          // Phi start dependency for implicit/constant alternative.
          type_cast_198_sample_start_ <-& (type_cast_198_sample_start__ps)
          type_cast_198_update_start_ <-& (type_cast_198_update_start__ps)
          // Phi complete dependency.
          type_cast_198_sample_completed__ps <-& (type_cast_198_sample_completed_)
          type_cast_198_update_completed__ps <-& (type_cast_198_update_completed_)
          $T[R_nIndex_199_sample_start__ps] 
          $T[R_nIndex_199_sample_completed__ps] 
          $T[R_nIndex_199_update_start__ps] 
          $T[R_nIndex_199_update_completed__ps] 
          // interlock for implicit-variable-ref/signal-read in Phi alternative 1
          $T[R_nIndex_199_sample_start_] 
          $T[R_nIndex_199_sample_completed_] 
          $T[R_nIndex_199_update_start_] 
          $T[R_nIndex_199_update_completed_] 
          ;;[R_nIndex_199_Sample] 
          {
            $T [req] $T [ack] // interlock-sample.
          }
          R_nIndex_199_sample_start_ &-> (R_nIndex_199_Sample)
          R_nIndex_199_sample_completed_ <-& (R_nIndex_199_Sample)
          ;;[R_nIndex_199_Update] 
          {
            $T [req] $T [ack] // interlock-update.
          }
          R_nIndex_199_update_start_ &-> (R_nIndex_199_Update)
          R_nIndex_199_update_completed_ <-& (R_nIndex_199_Update)
          // RAW reenables for nIndex
          // Phi start dependency for implicit/constant alternative.
          R_nIndex_199_sample_start_ <-& (R_nIndex_199_sample_start__ps)
          R_nIndex_199_update_start_ <-& (R_nIndex_199_update_start__ps)
          // Phi complete dependency.
          R_nIndex_199_sample_completed__ps <-& (R_nIndex_199_sample_completed_)
          R_nIndex_199_update_completed__ps <-& (R_nIndex_199_update_completed_)
          $phisequencer [ phi_stmt_195_phi_seq] : 
          phi_stmt_195_entry_trigger type_cast_198_sample_start__ps type_cast_198_sample_completed__ps type_cast_198_update_start__ps type_cast_198_update_completed__ps phi_stmt_195_loopback_trigger R_nIndex_199_sample_start__ps R_nIndex_199_sample_completed__ps R_nIndex_199_update_start__ps R_nIndex_199_update_completed__ps :
          phi_stmt_195_sample_start__ps phi_stmt_195_sample_completed__ps phi_stmt_195_update_start__ps phi_stmt_195_update_completed__ps :
          phi_stmt_195_entry_sample_req_ps phi_stmt_195_loopback_sample_req_ps : 
          phi_stmt_195_phi_mux_ack_ps
          // done: PHI Statement phi_stmt_195
          // start:  PHI statement phi_stmt_200
          // 			$phi val_0 := 			  ($bitcast ($uint<32>) 0  ) $on   $entry 			  nval_0 $on   $loopback 
          // type of target is $uint<32>
          $T[phi_stmt_200_sample_start_] 
          $T[phi_stmt_200_sample_completed_] 
          $T[phi_stmt_200_update_start_] 
          $T[phi_stmt_200_update_completed_] 
          $T[phi_stmt_200_sample_start__ps] 
          phi_stmt_200_sample_start__ps <-& (aggregated_phi_sample_req)
          $T[phi_stmt_200_sample_completed__ps] 
          phi_stmt_200_sample_completed__ps &-> (aggregated_phi_sample_ack)
          $T[phi_stmt_200_update_start__ps] 
          phi_stmt_200_update_start__ps <-& (aggregated_phi_update_req)
          $T[phi_stmt_200_update_completed__ps] 
          phi_stmt_200_update_completed_ <-& (phi_stmt_200_update_completed__ps)
          aggregated_phi_sample_req <-& (phi_stmt_200_sample_start_)
          aggregated_phi_sample_ack &-> (phi_stmt_200_sample_completed_)
          aggregated_phi_update_req <-& (phi_stmt_200_update_start_)
          $T[phi_stmt_200_loopback_trigger] 
          phi_stmt_200_loopback_trigger <-& (back_edge_to_loop_body)
          $T[phi_stmt_200_loopback_sample_req] 
          $T[phi_stmt_200_loopback_sample_req_ps] 
          phi_stmt_200_loopback_sample_req <-& (phi_stmt_200_loopback_sample_req_ps)
          phi_stmt_200_loopback_sample_req &-> ($null)
          $T[phi_stmt_200_entry_trigger] 
          phi_stmt_200_entry_trigger <-& (first_time_through_loop_body)
          $T[phi_stmt_200_entry_sample_req] 
          $T[phi_stmt_200_entry_sample_req_ps] 
          phi_stmt_200_entry_sample_req <-& (phi_stmt_200_entry_sample_req_ps)
          phi_stmt_200_entry_sample_req &-> ($null)
          phi_stmt_200_update_start_ o<-& (phi_stmt_200_update_completed_ 0)
          phi_stmt_200_sample_start_ o<-& (phi_stmt_200_sample_completed_ 1)
          $T[phi_stmt_200_merged_reqs] 
          $T[phi_stmt_200_phi_mux_ack] 
          $T[phi_stmt_200_phi_mux_ack_ps] 
          phi_stmt_200_phi_mux_ack_ps <-& (phi_stmt_200_phi_mux_ack)
          aggregated_phi_update_ack <-& (phi_stmt_200_update_completed_)
          $T[type_cast_203_sample_start__ps] 
          $T[type_cast_203_sample_completed__ps] 
          $T[type_cast_203_update_start__ps] 
          $T[type_cast_203_update_completed__ps] 
          // dummies for constant expression source for phi
          $T[type_cast_203_sample_start_] 
          $T[type_cast_203_sample_completed_] 
          type_cast_203_sample_completed_ <-& (type_cast_203_sample_start_)
          $T[type_cast_203_update_start_] 
          $T [type_cast_203_update_completed_] $delay 
          type_cast_203_update_completed_ <-& (type_cast_203_update_start_)
          // Phi start dependency for implicit/constant alternative.
          type_cast_203_sample_start_ <-& (type_cast_203_sample_start__ps)
          type_cast_203_update_start_ <-& (type_cast_203_update_start__ps)
          // Phi complete dependency.
          type_cast_203_sample_completed__ps <-& (type_cast_203_sample_completed_)
          type_cast_203_update_completed__ps <-& (type_cast_203_update_completed_)
          $T[R_nval_0_204_sample_start__ps] 
          $T[R_nval_0_204_sample_completed__ps] 
          $T[R_nval_0_204_update_start__ps] 
          $T[R_nval_0_204_update_completed__ps] 
          // interlock for implicit-variable-ref/signal-read in Phi alternative 1
          $T[R_nval_0_204_sample_start_] 
          $T[R_nval_0_204_sample_completed_] 
          $T[R_nval_0_204_update_start_] 
          $T[R_nval_0_204_update_completed_] 
          ;;[R_nval_0_204_Sample] 
          {
            $T [req] $T [ack] // interlock-sample.
          }
          R_nval_0_204_sample_start_ &-> (R_nval_0_204_Sample)
          R_nval_0_204_sample_completed_ <-& (R_nval_0_204_Sample)
          ;;[R_nval_0_204_Update] 
          {
            $T [req] $T [ack] // interlock-update.
          }
          R_nval_0_204_update_start_ &-> (R_nval_0_204_Update)
          R_nval_0_204_update_completed_ <-& (R_nval_0_204_Update)
          // RAW reenables for nval_0
          // Phi start dependency for implicit/constant alternative.
          R_nval_0_204_sample_start_ <-& (R_nval_0_204_sample_start__ps)
          R_nval_0_204_update_start_ <-& (R_nval_0_204_update_start__ps)
          // Phi complete dependency.
          R_nval_0_204_sample_completed__ps <-& (R_nval_0_204_sample_completed_)
          R_nval_0_204_update_completed__ps <-& (R_nval_0_204_update_completed_)
          $phisequencer [ phi_stmt_200_phi_seq] : 
          phi_stmt_200_entry_trigger type_cast_203_sample_start__ps type_cast_203_sample_completed__ps type_cast_203_update_start__ps type_cast_203_update_completed__ps phi_stmt_200_loopback_trigger R_nval_0_204_sample_start__ps R_nval_0_204_sample_completed__ps R_nval_0_204_update_start__ps R_nval_0_204_update_completed__ps :
          phi_stmt_200_sample_start__ps phi_stmt_200_sample_completed__ps phi_stmt_200_update_start__ps phi_stmt_200_update_completed__ps :
          phi_stmt_200_entry_sample_req_ps phi_stmt_200_loopback_sample_req_ps : 
          phi_stmt_200_phi_mux_ack_ps
          // done: PHI Statement phi_stmt_200
          // start:  PHI statement phi_stmt_205
          // 			$phi val_1 := 			  ($bitcast ($uint<32>) 0  ) $on   $entry 			  nval_1 $on   $loopback 
          // type of target is $uint<32>
          $T[phi_stmt_205_sample_start_] 
          $T[phi_stmt_205_sample_completed_] 
          $T[phi_stmt_205_update_start_] 
          $T[phi_stmt_205_update_completed_] 
          $T[phi_stmt_205_sample_start__ps] 
          phi_stmt_205_sample_start__ps <-& (aggregated_phi_sample_req)
          $T[phi_stmt_205_sample_completed__ps] 
          phi_stmt_205_sample_completed__ps &-> (aggregated_phi_sample_ack)
          $T[phi_stmt_205_update_start__ps] 
          phi_stmt_205_update_start__ps <-& (aggregated_phi_update_req)
          $T[phi_stmt_205_update_completed__ps] 
          phi_stmt_205_update_completed_ <-& (phi_stmt_205_update_completed__ps)
          aggregated_phi_sample_req <-& (phi_stmt_205_sample_start_)
          aggregated_phi_sample_ack &-> (phi_stmt_205_sample_completed_)
          aggregated_phi_update_req <-& (phi_stmt_205_update_start_)
          $T[phi_stmt_205_loopback_trigger] 
          phi_stmt_205_loopback_trigger <-& (back_edge_to_loop_body)
          $T[phi_stmt_205_loopback_sample_req] 
          $T[phi_stmt_205_loopback_sample_req_ps] 
          phi_stmt_205_loopback_sample_req <-& (phi_stmt_205_loopback_sample_req_ps)
          phi_stmt_205_loopback_sample_req &-> ($null)
          $T[phi_stmt_205_entry_trigger] 
          phi_stmt_205_entry_trigger <-& (first_time_through_loop_body)
          $T[phi_stmt_205_entry_sample_req] 
          $T[phi_stmt_205_entry_sample_req_ps] 
          phi_stmt_205_entry_sample_req <-& (phi_stmt_205_entry_sample_req_ps)
          phi_stmt_205_entry_sample_req &-> ($null)
          phi_stmt_205_update_start_ o<-& (phi_stmt_205_update_completed_ 0)
          phi_stmt_205_sample_start_ o<-& (phi_stmt_205_sample_completed_ 1)
          $T[phi_stmt_205_merged_reqs] 
          $T[phi_stmt_205_phi_mux_ack] 
          $T[phi_stmt_205_phi_mux_ack_ps] 
          phi_stmt_205_phi_mux_ack_ps <-& (phi_stmt_205_phi_mux_ack)
          aggregated_phi_update_ack <-& (phi_stmt_205_update_completed_)
          $T[type_cast_208_sample_start__ps] 
          $T[type_cast_208_sample_completed__ps] 
          $T[type_cast_208_update_start__ps] 
          $T[type_cast_208_update_completed__ps] 
          // dummies for constant expression source for phi
          $T[type_cast_208_sample_start_] 
          $T[type_cast_208_sample_completed_] 
          type_cast_208_sample_completed_ <-& (type_cast_208_sample_start_)
          $T[type_cast_208_update_start_] 
          $T [type_cast_208_update_completed_] $delay 
          type_cast_208_update_completed_ <-& (type_cast_208_update_start_)
          // Phi start dependency for implicit/constant alternative.
          type_cast_208_sample_start_ <-& (type_cast_208_sample_start__ps)
          type_cast_208_update_start_ <-& (type_cast_208_update_start__ps)
          // Phi complete dependency.
          type_cast_208_sample_completed__ps <-& (type_cast_208_sample_completed_)
          type_cast_208_update_completed__ps <-& (type_cast_208_update_completed_)
          $T[R_nval_1_209_sample_start__ps] 
          $T[R_nval_1_209_sample_completed__ps] 
          $T[R_nval_1_209_update_start__ps] 
          $T[R_nval_1_209_update_completed__ps] 
          // interlock for implicit-variable-ref/signal-read in Phi alternative 1
          $T[R_nval_1_209_sample_start_] 
          $T[R_nval_1_209_sample_completed_] 
          $T[R_nval_1_209_update_start_] 
          $T[R_nval_1_209_update_completed_] 
          ;;[R_nval_1_209_Sample] 
          {
            $T [req] $T [ack] // interlock-sample.
          }
          R_nval_1_209_sample_start_ &-> (R_nval_1_209_Sample)
          R_nval_1_209_sample_completed_ <-& (R_nval_1_209_Sample)
          ;;[R_nval_1_209_Update] 
          {
            $T [req] $T [ack] // interlock-update.
          }
          R_nval_1_209_update_start_ &-> (R_nval_1_209_Update)
          R_nval_1_209_update_completed_ <-& (R_nval_1_209_Update)
          // RAW reenables for nval_1
          // Phi start dependency for implicit/constant alternative.
          R_nval_1_209_sample_start_ <-& (R_nval_1_209_sample_start__ps)
          R_nval_1_209_update_start_ <-& (R_nval_1_209_update_start__ps)
          // Phi complete dependency.
          R_nval_1_209_sample_completed__ps <-& (R_nval_1_209_sample_completed_)
          R_nval_1_209_update_completed__ps <-& (R_nval_1_209_update_completed_)
          $phisequencer [ phi_stmt_205_phi_seq] : 
          phi_stmt_205_entry_trigger type_cast_208_sample_start__ps type_cast_208_sample_completed__ps type_cast_208_update_start__ps type_cast_208_update_completed__ps phi_stmt_205_loopback_trigger R_nval_1_209_sample_start__ps R_nval_1_209_sample_completed__ps R_nval_1_209_update_start__ps R_nval_1_209_update_completed__ps :
          phi_stmt_205_sample_start__ps phi_stmt_205_sample_completed__ps phi_stmt_205_update_start__ps phi_stmt_205_update_completed__ps :
          phi_stmt_205_entry_sample_req_ps phi_stmt_205_loopback_sample_req_ps : 
          phi_stmt_205_phi_mux_ack_ps
          // done: PHI Statement phi_stmt_205
          // start:  PHI statement phi_stmt_210
          // 			$phi val_2 := 			  ($bitcast ($uint<32>) 0  ) $on   $entry 			  nval_2 $on   $loopback 
          // type of target is $uint<32>
          $T[phi_stmt_210_sample_start_] 
          $T[phi_stmt_210_sample_completed_] 
          $T[phi_stmt_210_update_start_] 
          $T[phi_stmt_210_update_completed_] 
          $T[phi_stmt_210_sample_start__ps] 
          phi_stmt_210_sample_start__ps <-& (aggregated_phi_sample_req)
          $T[phi_stmt_210_sample_completed__ps] 
          phi_stmt_210_sample_completed__ps &-> (aggregated_phi_sample_ack)
          $T[phi_stmt_210_update_start__ps] 
          phi_stmt_210_update_start__ps <-& (aggregated_phi_update_req)
          $T[phi_stmt_210_update_completed__ps] 
          phi_stmt_210_update_completed_ <-& (phi_stmt_210_update_completed__ps)
          aggregated_phi_sample_req <-& (phi_stmt_210_sample_start_)
          aggregated_phi_sample_ack &-> (phi_stmt_210_sample_completed_)
          aggregated_phi_update_req <-& (phi_stmt_210_update_start_)
          $T[phi_stmt_210_loopback_trigger] 
          phi_stmt_210_loopback_trigger <-& (back_edge_to_loop_body)
          $T[phi_stmt_210_loopback_sample_req] 
          $T[phi_stmt_210_loopback_sample_req_ps] 
          phi_stmt_210_loopback_sample_req <-& (phi_stmt_210_loopback_sample_req_ps)
          phi_stmt_210_loopback_sample_req &-> ($null)
          $T[phi_stmt_210_entry_trigger] 
          phi_stmt_210_entry_trigger <-& (first_time_through_loop_body)
          $T[phi_stmt_210_entry_sample_req] 
          $T[phi_stmt_210_entry_sample_req_ps] 
          phi_stmt_210_entry_sample_req <-& (phi_stmt_210_entry_sample_req_ps)
          phi_stmt_210_entry_sample_req &-> ($null)
          phi_stmt_210_update_start_ o<-& (phi_stmt_210_update_completed_ 0)
          phi_stmt_210_sample_start_ o<-& (phi_stmt_210_sample_completed_ 1)
          $T[phi_stmt_210_merged_reqs] 
          $T[phi_stmt_210_phi_mux_ack] 
          $T[phi_stmt_210_phi_mux_ack_ps] 
          phi_stmt_210_phi_mux_ack_ps <-& (phi_stmt_210_phi_mux_ack)
          aggregated_phi_update_ack <-& (phi_stmt_210_update_completed_)
          $T[type_cast_213_sample_start__ps] 
          $T[type_cast_213_sample_completed__ps] 
          $T[type_cast_213_update_start__ps] 
          $T[type_cast_213_update_completed__ps] 
          // dummies for constant expression source for phi
          $T[type_cast_213_sample_start_] 
          $T[type_cast_213_sample_completed_] 
          type_cast_213_sample_completed_ <-& (type_cast_213_sample_start_)
          $T[type_cast_213_update_start_] 
          $T [type_cast_213_update_completed_] $delay 
          type_cast_213_update_completed_ <-& (type_cast_213_update_start_)
          // Phi start dependency for implicit/constant alternative.
          type_cast_213_sample_start_ <-& (type_cast_213_sample_start__ps)
          type_cast_213_update_start_ <-& (type_cast_213_update_start__ps)
          // Phi complete dependency.
          type_cast_213_sample_completed__ps <-& (type_cast_213_sample_completed_)
          type_cast_213_update_completed__ps <-& (type_cast_213_update_completed_)
          $T[R_nval_2_214_sample_start__ps] 
          $T[R_nval_2_214_sample_completed__ps] 
          $T[R_nval_2_214_update_start__ps] 
          $T[R_nval_2_214_update_completed__ps] 
          // interlock for implicit-variable-ref/signal-read in Phi alternative 1
          $T[R_nval_2_214_sample_start_] 
          $T[R_nval_2_214_sample_completed_] 
          $T[R_nval_2_214_update_start_] 
          $T[R_nval_2_214_update_completed_] 
          ;;[R_nval_2_214_Sample] 
          {
            $T [req] $T [ack] // interlock-sample.
          }
          R_nval_2_214_sample_start_ &-> (R_nval_2_214_Sample)
          R_nval_2_214_sample_completed_ <-& (R_nval_2_214_Sample)
          ;;[R_nval_2_214_Update] 
          {
            $T [req] $T [ack] // interlock-update.
          }
          R_nval_2_214_update_start_ &-> (R_nval_2_214_Update)
          R_nval_2_214_update_completed_ <-& (R_nval_2_214_Update)
          // RAW reenables for nval_2
          // Phi start dependency for implicit/constant alternative.
          R_nval_2_214_sample_start_ <-& (R_nval_2_214_sample_start__ps)
          R_nval_2_214_update_start_ <-& (R_nval_2_214_update_start__ps)
          // Phi complete dependency.
          R_nval_2_214_sample_completed__ps <-& (R_nval_2_214_sample_completed_)
          R_nval_2_214_update_completed__ps <-& (R_nval_2_214_update_completed_)
          $phisequencer [ phi_stmt_210_phi_seq] : 
          phi_stmt_210_entry_trigger type_cast_213_sample_start__ps type_cast_213_sample_completed__ps type_cast_213_update_start__ps type_cast_213_update_completed__ps phi_stmt_210_loopback_trigger R_nval_2_214_sample_start__ps R_nval_2_214_sample_completed__ps R_nval_2_214_update_start__ps R_nval_2_214_update_completed__ps :
          phi_stmt_210_sample_start__ps phi_stmt_210_sample_completed__ps phi_stmt_210_update_start__ps phi_stmt_210_update_completed__ps :
          phi_stmt_210_entry_sample_req_ps phi_stmt_210_loopback_sample_req_ps : 
          phi_stmt_210_phi_mux_ack_ps
          // done: PHI Statement phi_stmt_210
          // start:  PHI statement phi_stmt_215
          // 			$phi val_3 := 			  nval_3 $on   $loopback 			  ($bitcast ($uint<32>) 0  ) $on   $entry 
          // type of target is $uint<32>
          $T[phi_stmt_215_sample_start_] 
          $T[phi_stmt_215_sample_completed_] 
          $T[phi_stmt_215_update_start_] 
          $T[phi_stmt_215_update_completed_] 
          $T[phi_stmt_215_sample_start__ps] 
          phi_stmt_215_sample_start__ps <-& (aggregated_phi_sample_req)
          $T[phi_stmt_215_sample_completed__ps] 
          phi_stmt_215_sample_completed__ps &-> (aggregated_phi_sample_ack)
          $T[phi_stmt_215_update_start__ps] 
          phi_stmt_215_update_start__ps <-& (aggregated_phi_update_req)
          $T[phi_stmt_215_update_completed__ps] 
          phi_stmt_215_update_completed_ <-& (phi_stmt_215_update_completed__ps)
          aggregated_phi_sample_req <-& (phi_stmt_215_sample_start_)
          aggregated_phi_sample_ack &-> (phi_stmt_215_sample_completed_)
          aggregated_phi_update_req <-& (phi_stmt_215_update_start_)
          $T[phi_stmt_215_loopback_trigger] 
          phi_stmt_215_loopback_trigger <-& (back_edge_to_loop_body)
          $T[phi_stmt_215_loopback_sample_req] 
          $T[phi_stmt_215_loopback_sample_req_ps] 
          phi_stmt_215_loopback_sample_req <-& (phi_stmt_215_loopback_sample_req_ps)
          phi_stmt_215_loopback_sample_req &-> ($null)
          $T[phi_stmt_215_entry_trigger] 
          phi_stmt_215_entry_trigger <-& (first_time_through_loop_body)
          $T[phi_stmt_215_entry_sample_req] 
          $T[phi_stmt_215_entry_sample_req_ps] 
          phi_stmt_215_entry_sample_req <-& (phi_stmt_215_entry_sample_req_ps)
          phi_stmt_215_entry_sample_req &-> ($null)
          phi_stmt_215_update_start_ o<-& (phi_stmt_215_update_completed_ 0)
          phi_stmt_215_sample_start_ o<-& (phi_stmt_215_sample_completed_ 1)
          $T[phi_stmt_215_merged_reqs] 
          $T[phi_stmt_215_phi_mux_ack] 
          $T[phi_stmt_215_phi_mux_ack_ps] 
          phi_stmt_215_phi_mux_ack_ps <-& (phi_stmt_215_phi_mux_ack)
          aggregated_phi_update_ack <-& (phi_stmt_215_update_completed_)
          $T[R_nval_3_217_sample_start__ps] 
          $T[R_nval_3_217_sample_completed__ps] 
          $T[R_nval_3_217_update_start__ps] 
          $T[R_nval_3_217_update_completed__ps] 
          // interlock for implicit-variable-ref/signal-read in Phi alternative 0
          $T[R_nval_3_217_sample_start_] 
          $T[R_nval_3_217_sample_completed_] 
          $T[R_nval_3_217_update_start_] 
          $T[R_nval_3_217_update_completed_] 
          ;;[R_nval_3_217_Sample] 
          {
            $T [req] $T [ack] // interlock-sample.
          }
          R_nval_3_217_sample_start_ &-> (R_nval_3_217_Sample)
          R_nval_3_217_sample_completed_ <-& (R_nval_3_217_Sample)
          ;;[R_nval_3_217_Update] 
          {
            $T [req] $T [ack] // interlock-update.
          }
          R_nval_3_217_update_start_ &-> (R_nval_3_217_Update)
          R_nval_3_217_update_completed_ <-& (R_nval_3_217_Update)
          // RAW reenables for nval_3
          // Phi start dependency for implicit/constant alternative.
          R_nval_3_217_sample_start_ <-& (R_nval_3_217_sample_start__ps)
          R_nval_3_217_update_start_ <-& (R_nval_3_217_update_start__ps)
          // Phi complete dependency.
          R_nval_3_217_sample_completed__ps <-& (R_nval_3_217_sample_completed_)
          R_nval_3_217_update_completed__ps <-& (R_nval_3_217_update_completed_)
          $T[type_cast_219_sample_start__ps] 
          $T[type_cast_219_sample_completed__ps] 
          $T[type_cast_219_update_start__ps] 
          $T[type_cast_219_update_completed__ps] 
          // dummies for constant expression source for phi
          $T[type_cast_219_sample_start_] 
          $T[type_cast_219_sample_completed_] 
          type_cast_219_sample_completed_ <-& (type_cast_219_sample_start_)
          $T[type_cast_219_update_start_] 
          $T [type_cast_219_update_completed_] $delay 
          type_cast_219_update_completed_ <-& (type_cast_219_update_start_)
          // Phi start dependency for implicit/constant alternative.
          type_cast_219_sample_start_ <-& (type_cast_219_sample_start__ps)
          type_cast_219_update_start_ <-& (type_cast_219_update_start__ps)
          // Phi complete dependency.
          type_cast_219_sample_completed__ps <-& (type_cast_219_sample_completed_)
          type_cast_219_update_completed__ps <-& (type_cast_219_update_completed_)
          $phisequencer [ phi_stmt_215_phi_seq] : 
          phi_stmt_215_loopback_trigger R_nval_3_217_sample_start__ps R_nval_3_217_sample_completed__ps R_nval_3_217_update_start__ps R_nval_3_217_update_completed__ps phi_stmt_215_entry_trigger type_cast_219_sample_start__ps type_cast_219_sample_completed__ps type_cast_219_update_start__ps type_cast_219_update_completed__ps :
          phi_stmt_215_sample_start__ps phi_stmt_215_sample_completed__ps phi_stmt_215_update_start__ps phi_stmt_215_update_completed__ps :
          phi_stmt_215_loopback_sample_req_ps phi_stmt_215_entry_sample_req_ps : 
          phi_stmt_215_phi_mux_ack_ps
          // done: PHI Statement phi_stmt_215
          // start:  			a_rc_0 := A_MEM[R][Index] $buffering 1// bits of buffering = 32. 
          //  file .Aa/mvp.opt.aa, line 97
          // Source expression
          // A_MEM[R][Index]
          $T[array_obj_ref_224_base_address_calculated] 
          $T[array_obj_ref_224_sample_start_] 
          $T[array_obj_ref_224_sample_completed_] 
          $T[array_obj_ref_224_update_start_] 
          $T[array_obj_ref_224_update_completed_] 
          $T[array_obj_ref_224_word_address_calculated] 
          $T[array_obj_ref_224_root_address_calculated] 
          $T[array_obj_ref_224_offset_calculated] 
          $T[array_obj_ref_224_index_resized_0] 
          $T[array_obj_ref_224_index_scaled_0] 
          $T[array_obj_ref_224_index_computed_0] 
          // R
          // start: Forward dependencies from R to transition array_obj_ref_224_index_computed_0
          // done: Forward dependencies from R to transition array_obj_ref_224_index_computed_0
          ;;[array_obj_ref_224_index_resize_0] 
          {
            $T [index_resize_req] $T [index_resize_ack] // resize index to address-width
          }
          array_obj_ref_224_index_computed_0 &-> (array_obj_ref_224_index_resize_0)
          array_obj_ref_224_index_resized_0 <-& (array_obj_ref_224_index_resize_0)
          $T[array_obj_ref_224_index_scale_0_sample_start] 
          $T[array_obj_ref_224_index_scale_0_sample_complete] 
          $T[array_obj_ref_224_index_scale_0_update_start] 
          $T[array_obj_ref_224_index_scale_0_update_complete] 
          ;;[array_obj_ref_224_index_scale_0_Sample] 
          {
            $T [rr] $T [ra] 
          }
          ;;[array_obj_ref_224_index_scale_0_Update] 
          {
            $T [cr] $T [ca] 
          }
          array_obj_ref_224_index_resized_0 &-> (array_obj_ref_224_index_scale_0_sample_start)
          array_obj_ref_224_index_scale_0_sample_start &-> (array_obj_ref_224_index_scale_0_Sample)
          array_obj_ref_224_index_scale_0_sample_complete <-& (array_obj_ref_224_index_scale_0_Sample)
          array_obj_ref_224_index_scale_0_update_start &-> (array_obj_ref_224_index_scale_0_Update)
          array_obj_ref_224_index_scale_0_update_complete <-& (array_obj_ref_224_index_scale_0_Update)
          array_obj_ref_224_index_scaled_0 <-& (array_obj_ref_224_index_scale_0_update_complete)
          array_obj_ref_224_index_scale_0_sample_start o<-& (array_obj_ref_224_index_scale_0_sample_complete 1)
          array_obj_ref_224_index_scale_0_update_start o<-& (array_obj_ref_224_index_scale_0_update_complete 0)
          $T[array_obj_ref_224_index_resized_1] 
          $T[array_obj_ref_224_index_scaled_1] 
          $T[array_obj_ref_224_index_computed_1] 
          // Index
          // start: Forward dependencies from Index to transition array_obj_ref_224_index_computed_1
          array_obj_ref_224_index_computed_1 <-& (phi_stmt_195_update_completed_)
          // done: Forward dependencies from Index to transition array_obj_ref_224_index_computed_1
          ;;[array_obj_ref_224_index_resize_1] 
          {
            $T [index_resize_req] $T [index_resize_ack] // resize index to address-width
          }
          array_obj_ref_224_index_computed_1 &-> (array_obj_ref_224_index_resize_1)
          array_obj_ref_224_index_resized_1 <-& (array_obj_ref_224_index_resize_1)
          ;;[array_obj_ref_224_index_scale_1] 
          {
            $T [scale_rename_req] $T [scale_rename_ack] // rename 
          }
          array_obj_ref_224_index_resized_1 &-> (array_obj_ref_224_index_scale_1)
          array_obj_ref_224_index_scaled_1 <-& (array_obj_ref_224_index_scale_1)
          $T[array_obj_ref_224_partial_sum_1_sample_start] 
          $T[array_obj_ref_224_partial_sum_1_sample_complete] 
          $T[array_obj_ref_224_partial_sum_1_update_start] 
          $T[array_obj_ref_224_partial_sum_1_update_complete] 
          ;;[array_obj_ref_224_partial_sum_1_Sample] 
          {
            $T [rr] $T [ra] 
          }
          ;;[array_obj_ref_224_partial_sum_1_Update] 
          {
            $T [cr] $T [ca] 
          }
          array_obj_ref_224_partial_sum_1_sample_start &-> (array_obj_ref_224_partial_sum_1_Sample)
          array_obj_ref_224_partial_sum_1_sample_complete <-& (array_obj_ref_224_partial_sum_1_Sample)
          array_obj_ref_224_partial_sum_1_update_start &-> (array_obj_ref_224_partial_sum_1_Update)
          array_obj_ref_224_partial_sum_1_update_complete <-& (array_obj_ref_224_partial_sum_1_Update)
          array_obj_ref_224_partial_sum_1_sample_start o<-& (array_obj_ref_224_partial_sum_1_sample_complete 1)
          array_obj_ref_224_partial_sum_1_update_start o<-& (array_obj_ref_224_partial_sum_1_update_complete 0)
          array_obj_ref_224_partial_sum_1_sample_start <-& (array_obj_ref_224_index_scaled_0)
          array_obj_ref_224_partial_sum_1_sample_start <-& (array_obj_ref_224_index_scaled_1)
          array_obj_ref_224_index_scaled_0 o<-& (array_obj_ref_224_partial_sum_1_sample_complete 1)
          phi_stmt_195_update_start_ o<-& (array_obj_ref_224_partial_sum_1_sample_complete 1)
          array_obj_ref_224_offset_calculated <-& (array_obj_ref_224_partial_sum_1_update_complete)
          ;;[array_obj_ref_224_final_index_sum_regn] 
          {
            $T [req] $T [ack] // rename
          }
          array_obj_ref_224_partial_sum_1_update_complete &-> (array_obj_ref_224_final_index_sum_regn)
          array_obj_ref_224_offset_calculated <-& (array_obj_ref_224_final_index_sum_regn)
          ;;[array_obj_ref_224_base_plus_offset] 
          {
            $T [sum_rename_req] $T [sum_rename_ack] // one gets through 
          }
          array_obj_ref_224_offset_calculated &-> (array_obj_ref_224_base_plus_offset)
          array_obj_ref_224_root_address_calculated <-& (array_obj_ref_224_base_plus_offset)
          ;;[array_obj_ref_224_word_addrgen] 
          {
            $T [root_register_req] $T [root_register_ack]
          }
          array_obj_ref_224_root_address_calculated &-> (array_obj_ref_224_word_addrgen)
          array_obj_ref_224_word_address_calculated <-& (array_obj_ref_224_word_addrgen)
          ;;[array_obj_ref_224_Sample] 
          {
            ||[word_access_start] 
            {
              ;;[word_0] 
              {
                $T [rr] $T [ra] 
              }
            }
          }
          ;;[array_obj_ref_224_Update] 
          {
            ||[word_access_complete] 
            {
              ;;[word_0] 
              {
                $T [cr] $T [ca] 
              }
            }
            ;;[array_obj_ref_224_Merge] 
            {
              $T [merge_req] $T [merge_ack]
            }
          }
          array_obj_ref_224_sample_start_ <-& (array_obj_ref_224_word_address_calculated)
          // reenable-joins
          array_obj_ref_224_partial_sum_1_update_start o<-& (array_obj_ref_224_sample_completed_ 0)
          array_obj_ref_224_sample_start_ &-> (array_obj_ref_224_Sample)
          array_obj_ref_224_sample_completed_ <-& (array_obj_ref_224_Sample)
          array_obj_ref_224_sample_completed_ &-> ($null)
          array_obj_ref_224_update_start_ &-> (array_obj_ref_224_Update)
          array_obj_ref_224_update_completed_ <-& (array_obj_ref_224_Update)
          // self-release: 
          array_obj_ref_224_sample_start_ o<-& (array_obj_ref_224_sample_completed_ 1)
          $null &-> (array_obj_ref_224_update_start_)
          array_obj_ref_224_update_start_ o<-& (array_obj_ref_224_update_completed_ 0)
          // Target expression
          // (as target) a_rc_0
          // start: WAR dependencies for a_rc_0
          // done: WAR dependencies for a_rc_0
          // end:  			a_rc_0 := A_MEM[R][Index] $buffering 1// bits of buffering = 32. 
          // start:  			a_rc_1 := B_MEM[R][Index] $buffering 1// bits of buffering = 32. 
          //  file .Aa/mvp.opt.aa, line 98
          // Source expression
          // B_MEM[R][Index]
          $T[array_obj_ref_229_base_address_calculated] 
          $T[array_obj_ref_229_sample_start_] 
          $T[array_obj_ref_229_sample_completed_] 
          $T[array_obj_ref_229_update_start_] 
          $T[array_obj_ref_229_update_completed_] 
          $T[array_obj_ref_229_word_address_calculated] 
          $T[array_obj_ref_229_root_address_calculated] 
          $T[array_obj_ref_229_offset_calculated] 
          $T[array_obj_ref_229_index_resized_0] 
          $T[array_obj_ref_229_index_scaled_0] 
          $T[array_obj_ref_229_index_computed_0] 
          // R
          // start: Forward dependencies from R to transition array_obj_ref_229_index_computed_0
          // done: Forward dependencies from R to transition array_obj_ref_229_index_computed_0
          ;;[array_obj_ref_229_index_resize_0] 
          {
            $T [index_resize_req] $T [index_resize_ack] // resize index to address-width
          }
          array_obj_ref_229_index_computed_0 &-> (array_obj_ref_229_index_resize_0)
          array_obj_ref_229_index_resized_0 <-& (array_obj_ref_229_index_resize_0)
          $T[array_obj_ref_229_index_scale_0_sample_start] 
          $T[array_obj_ref_229_index_scale_0_sample_complete] 
          $T[array_obj_ref_229_index_scale_0_update_start] 
          $T[array_obj_ref_229_index_scale_0_update_complete] 
          ;;[array_obj_ref_229_index_scale_0_Sample] 
          {
            $T [rr] $T [ra] 
          }
          ;;[array_obj_ref_229_index_scale_0_Update] 
          {
            $T [cr] $T [ca] 
          }
          array_obj_ref_229_index_resized_0 &-> (array_obj_ref_229_index_scale_0_sample_start)
          array_obj_ref_229_index_scale_0_sample_start &-> (array_obj_ref_229_index_scale_0_Sample)
          array_obj_ref_229_index_scale_0_sample_complete <-& (array_obj_ref_229_index_scale_0_Sample)
          array_obj_ref_229_index_scale_0_update_start &-> (array_obj_ref_229_index_scale_0_Update)
          array_obj_ref_229_index_scale_0_update_complete <-& (array_obj_ref_229_index_scale_0_Update)
          array_obj_ref_229_index_scaled_0 <-& (array_obj_ref_229_index_scale_0_update_complete)
          array_obj_ref_229_index_scale_0_sample_start o<-& (array_obj_ref_229_index_scale_0_sample_complete 1)
          array_obj_ref_229_index_scale_0_update_start o<-& (array_obj_ref_229_index_scale_0_update_complete 0)
          $T[array_obj_ref_229_index_resized_1] 
          $T[array_obj_ref_229_index_scaled_1] 
          $T[array_obj_ref_229_index_computed_1] 
          // Index
          // start: Forward dependencies from Index to transition array_obj_ref_229_index_computed_1
          array_obj_ref_229_index_computed_1 <-& (phi_stmt_195_update_completed_)
          // done: Forward dependencies from Index to transition array_obj_ref_229_index_computed_1
          ;;[array_obj_ref_229_index_resize_1] 
          {
            $T [index_resize_req] $T [index_resize_ack] // resize index to address-width
          }
          array_obj_ref_229_index_computed_1 &-> (array_obj_ref_229_index_resize_1)
          array_obj_ref_229_index_resized_1 <-& (array_obj_ref_229_index_resize_1)
          ;;[array_obj_ref_229_index_scale_1] 
          {
            $T [scale_rename_req] $T [scale_rename_ack] // rename 
          }
          array_obj_ref_229_index_resized_1 &-> (array_obj_ref_229_index_scale_1)
          array_obj_ref_229_index_scaled_1 <-& (array_obj_ref_229_index_scale_1)
          $T[array_obj_ref_229_partial_sum_1_sample_start] 
          $T[array_obj_ref_229_partial_sum_1_sample_complete] 
          $T[array_obj_ref_229_partial_sum_1_update_start] 
          $T[array_obj_ref_229_partial_sum_1_update_complete] 
          ;;[array_obj_ref_229_partial_sum_1_Sample] 
          {
            $T [rr] $T [ra] 
          }
          ;;[array_obj_ref_229_partial_sum_1_Update] 
          {
            $T [cr] $T [ca] 
          }
          array_obj_ref_229_partial_sum_1_sample_start &-> (array_obj_ref_229_partial_sum_1_Sample)
          array_obj_ref_229_partial_sum_1_sample_complete <-& (array_obj_ref_229_partial_sum_1_Sample)
          array_obj_ref_229_partial_sum_1_update_start &-> (array_obj_ref_229_partial_sum_1_Update)
          array_obj_ref_229_partial_sum_1_update_complete <-& (array_obj_ref_229_partial_sum_1_Update)
          array_obj_ref_229_partial_sum_1_sample_start o<-& (array_obj_ref_229_partial_sum_1_sample_complete 1)
          array_obj_ref_229_partial_sum_1_update_start o<-& (array_obj_ref_229_partial_sum_1_update_complete 0)
          array_obj_ref_229_partial_sum_1_sample_start <-& (array_obj_ref_229_index_scaled_0)
          array_obj_ref_229_partial_sum_1_sample_start <-& (array_obj_ref_229_index_scaled_1)
          array_obj_ref_229_index_scaled_0 o<-& (array_obj_ref_229_partial_sum_1_sample_complete 1)
          phi_stmt_195_update_start_ o<-& (array_obj_ref_229_partial_sum_1_sample_complete 1)
          array_obj_ref_229_offset_calculated <-& (array_obj_ref_229_partial_sum_1_update_complete)
          ;;[array_obj_ref_229_final_index_sum_regn] 
          {
            $T [req] $T [ack] // rename
          }
          array_obj_ref_229_partial_sum_1_update_complete &-> (array_obj_ref_229_final_index_sum_regn)
          array_obj_ref_229_offset_calculated <-& (array_obj_ref_229_final_index_sum_regn)
          ;;[array_obj_ref_229_base_plus_offset] 
          {
            $T [sum_rename_req] $T [sum_rename_ack] // one gets through 
          }
          array_obj_ref_229_offset_calculated &-> (array_obj_ref_229_base_plus_offset)
          array_obj_ref_229_root_address_calculated <-& (array_obj_ref_229_base_plus_offset)
          ;;[array_obj_ref_229_word_addrgen] 
          {
            $T [root_register_req] $T [root_register_ack]
          }
          array_obj_ref_229_root_address_calculated &-> (array_obj_ref_229_word_addrgen)
          array_obj_ref_229_word_address_calculated <-& (array_obj_ref_229_word_addrgen)
          ;;[array_obj_ref_229_Sample] 
          {
            ||[word_access_start] 
            {
              ;;[word_0] 
              {
                $T [rr] $T [ra] 
              }
            }
          }
          ;;[array_obj_ref_229_Update] 
          {
            ||[word_access_complete] 
            {
              ;;[word_0] 
              {
                $T [cr] $T [ca] 
              }
            }
            ;;[array_obj_ref_229_Merge] 
            {
              $T [merge_req] $T [merge_ack]
            }
          }
          array_obj_ref_229_sample_start_ <-& (array_obj_ref_229_word_address_calculated)
          // reenable-joins
          array_obj_ref_229_partial_sum_1_update_start o<-& (array_obj_ref_229_sample_completed_ 0)
          array_obj_ref_229_sample_start_ &-> (array_obj_ref_229_Sample)
          array_obj_ref_229_sample_completed_ <-& (array_obj_ref_229_Sample)
          array_obj_ref_229_sample_completed_ &-> ($null)
          array_obj_ref_229_update_start_ &-> (array_obj_ref_229_Update)
          array_obj_ref_229_update_completed_ <-& (array_obj_ref_229_Update)
          // self-release: 
          array_obj_ref_229_sample_start_ o<-& (array_obj_ref_229_sample_completed_ 1)
          $null &-> (array_obj_ref_229_update_start_)
          array_obj_ref_229_update_start_ o<-& (array_obj_ref_229_update_completed_ 0)
          // Target expression
          // (as target) a_rc_1
          // start: WAR dependencies for a_rc_1
          // done: WAR dependencies for a_rc_1
          // end:  			a_rc_1 := B_MEM[R][Index] $buffering 1// bits of buffering = 32. 
          // start:  			a_rc_2 := C_MEM[R][Index] $buffering 1// bits of buffering = 32. 
          //  file .Aa/mvp.opt.aa, line 99
          // Source expression
          // C_MEM[R][Index]
          $T[array_obj_ref_234_base_address_calculated] 
          $T[array_obj_ref_234_sample_start_] 
          $T[array_obj_ref_234_sample_completed_] 
          $T[array_obj_ref_234_update_start_] 
          $T[array_obj_ref_234_update_completed_] 
          $T[array_obj_ref_234_word_address_calculated] 
          $T[array_obj_ref_234_root_address_calculated] 
          $T[array_obj_ref_234_offset_calculated] 
          $T[array_obj_ref_234_index_resized_0] 
          $T[array_obj_ref_234_index_scaled_0] 
          $T[array_obj_ref_234_index_computed_0] 
          // R
          // start: Forward dependencies from R to transition array_obj_ref_234_index_computed_0
          // done: Forward dependencies from R to transition array_obj_ref_234_index_computed_0
          ;;[array_obj_ref_234_index_resize_0] 
          {
            $T [index_resize_req] $T [index_resize_ack] // resize index to address-width
          }
          array_obj_ref_234_index_computed_0 &-> (array_obj_ref_234_index_resize_0)
          array_obj_ref_234_index_resized_0 <-& (array_obj_ref_234_index_resize_0)
          $T[array_obj_ref_234_index_scale_0_sample_start] 
          $T[array_obj_ref_234_index_scale_0_sample_complete] 
          $T[array_obj_ref_234_index_scale_0_update_start] 
          $T[array_obj_ref_234_index_scale_0_update_complete] 
          ;;[array_obj_ref_234_index_scale_0_Sample] 
          {
            $T [rr] $T [ra] 
          }
          ;;[array_obj_ref_234_index_scale_0_Update] 
          {
            $T [cr] $T [ca] 
          }
          array_obj_ref_234_index_resized_0 &-> (array_obj_ref_234_index_scale_0_sample_start)
          array_obj_ref_234_index_scale_0_sample_start &-> (array_obj_ref_234_index_scale_0_Sample)
          array_obj_ref_234_index_scale_0_sample_complete <-& (array_obj_ref_234_index_scale_0_Sample)
          array_obj_ref_234_index_scale_0_update_start &-> (array_obj_ref_234_index_scale_0_Update)
          array_obj_ref_234_index_scale_0_update_complete <-& (array_obj_ref_234_index_scale_0_Update)
          array_obj_ref_234_index_scaled_0 <-& (array_obj_ref_234_index_scale_0_update_complete)
          array_obj_ref_234_index_scale_0_sample_start o<-& (array_obj_ref_234_index_scale_0_sample_complete 1)
          array_obj_ref_234_index_scale_0_update_start o<-& (array_obj_ref_234_index_scale_0_update_complete 0)
          $T[array_obj_ref_234_index_resized_1] 
          $T[array_obj_ref_234_index_scaled_1] 
          $T[array_obj_ref_234_index_computed_1] 
          // Index
          // start: Forward dependencies from Index to transition array_obj_ref_234_index_computed_1
          array_obj_ref_234_index_computed_1 <-& (phi_stmt_195_update_completed_)
          // done: Forward dependencies from Index to transition array_obj_ref_234_index_computed_1
          ;;[array_obj_ref_234_index_resize_1] 
          {
            $T [index_resize_req] $T [index_resize_ack] // resize index to address-width
          }
          array_obj_ref_234_index_computed_1 &-> (array_obj_ref_234_index_resize_1)
          array_obj_ref_234_index_resized_1 <-& (array_obj_ref_234_index_resize_1)
          ;;[array_obj_ref_234_index_scale_1] 
          {
            $T [scale_rename_req] $T [scale_rename_ack] // rename 
          }
          array_obj_ref_234_index_resized_1 &-> (array_obj_ref_234_index_scale_1)
          array_obj_ref_234_index_scaled_1 <-& (array_obj_ref_234_index_scale_1)
          $T[array_obj_ref_234_partial_sum_1_sample_start] 
          $T[array_obj_ref_234_partial_sum_1_sample_complete] 
          $T[array_obj_ref_234_partial_sum_1_update_start] 
          $T[array_obj_ref_234_partial_sum_1_update_complete] 
          ;;[array_obj_ref_234_partial_sum_1_Sample] 
          {
            $T [rr] $T [ra] 
          }
          ;;[array_obj_ref_234_partial_sum_1_Update] 
          {
            $T [cr] $T [ca] 
          }
          array_obj_ref_234_partial_sum_1_sample_start &-> (array_obj_ref_234_partial_sum_1_Sample)
          array_obj_ref_234_partial_sum_1_sample_complete <-& (array_obj_ref_234_partial_sum_1_Sample)
          array_obj_ref_234_partial_sum_1_update_start &-> (array_obj_ref_234_partial_sum_1_Update)
          array_obj_ref_234_partial_sum_1_update_complete <-& (array_obj_ref_234_partial_sum_1_Update)
          array_obj_ref_234_partial_sum_1_sample_start o<-& (array_obj_ref_234_partial_sum_1_sample_complete 1)
          array_obj_ref_234_partial_sum_1_update_start o<-& (array_obj_ref_234_partial_sum_1_update_complete 0)
          array_obj_ref_234_partial_sum_1_sample_start <-& (array_obj_ref_234_index_scaled_0)
          array_obj_ref_234_partial_sum_1_sample_start <-& (array_obj_ref_234_index_scaled_1)
          array_obj_ref_234_index_scaled_0 o<-& (array_obj_ref_234_partial_sum_1_sample_complete 1)
          phi_stmt_195_update_start_ o<-& (array_obj_ref_234_partial_sum_1_sample_complete 1)
          array_obj_ref_234_offset_calculated <-& (array_obj_ref_234_partial_sum_1_update_complete)
          ;;[array_obj_ref_234_final_index_sum_regn] 
          {
            $T [req] $T [ack] // rename
          }
          array_obj_ref_234_partial_sum_1_update_complete &-> (array_obj_ref_234_final_index_sum_regn)
          array_obj_ref_234_offset_calculated <-& (array_obj_ref_234_final_index_sum_regn)
          ;;[array_obj_ref_234_base_plus_offset] 
          {
            $T [sum_rename_req] $T [sum_rename_ack] // one gets through 
          }
          array_obj_ref_234_offset_calculated &-> (array_obj_ref_234_base_plus_offset)
          array_obj_ref_234_root_address_calculated <-& (array_obj_ref_234_base_plus_offset)
          ;;[array_obj_ref_234_word_addrgen] 
          {
            $T [root_register_req] $T [root_register_ack]
          }
          array_obj_ref_234_root_address_calculated &-> (array_obj_ref_234_word_addrgen)
          array_obj_ref_234_word_address_calculated <-& (array_obj_ref_234_word_addrgen)
          ;;[array_obj_ref_234_Sample] 
          {
            ||[word_access_start] 
            {
              ;;[word_0] 
              {
                $T [rr] $T [ra] 
              }
            }
          }
          ;;[array_obj_ref_234_Update] 
          {
            ||[word_access_complete] 
            {
              ;;[word_0] 
              {
                $T [cr] $T [ca] 
              }
            }
            ;;[array_obj_ref_234_Merge] 
            {
              $T [merge_req] $T [merge_ack]
            }
          }
          array_obj_ref_234_sample_start_ <-& (array_obj_ref_234_word_address_calculated)
          // reenable-joins
          array_obj_ref_234_partial_sum_1_update_start o<-& (array_obj_ref_234_sample_completed_ 0)
          array_obj_ref_234_sample_start_ &-> (array_obj_ref_234_Sample)
          array_obj_ref_234_sample_completed_ <-& (array_obj_ref_234_Sample)
          array_obj_ref_234_sample_completed_ &-> ($null)
          array_obj_ref_234_update_start_ &-> (array_obj_ref_234_Update)
          array_obj_ref_234_update_completed_ <-& (array_obj_ref_234_Update)
          // self-release: 
          array_obj_ref_234_sample_start_ o<-& (array_obj_ref_234_sample_completed_ 1)
          $null &-> (array_obj_ref_234_update_start_)
          array_obj_ref_234_update_start_ o<-& (array_obj_ref_234_update_completed_ 0)
          // Target expression
          // (as target) a_rc_2
          // start: WAR dependencies for a_rc_2
          // done: WAR dependencies for a_rc_2
          // end:  			a_rc_2 := C_MEM[R][Index] $buffering 1// bits of buffering = 32. 
          // start:  			a_rc_3 := D_MEM[R][Index] $buffering 1// bits of buffering = 32. 
          //  file .Aa/mvp.opt.aa, line 100
          // Source expression
          // D_MEM[R][Index]
          $T[array_obj_ref_239_base_address_calculated] 
          $T[array_obj_ref_239_sample_start_] 
          $T[array_obj_ref_239_sample_completed_] 
          $T[array_obj_ref_239_update_start_] 
          $T[array_obj_ref_239_update_completed_] 
          $T[array_obj_ref_239_word_address_calculated] 
          $T[array_obj_ref_239_root_address_calculated] 
          $T[array_obj_ref_239_offset_calculated] 
          $T[array_obj_ref_239_index_resized_0] 
          $T[array_obj_ref_239_index_scaled_0] 
          $T[array_obj_ref_239_index_computed_0] 
          // R
          // start: Forward dependencies from R to transition array_obj_ref_239_index_computed_0
          // done: Forward dependencies from R to transition array_obj_ref_239_index_computed_0
          ;;[array_obj_ref_239_index_resize_0] 
          {
            $T [index_resize_req] $T [index_resize_ack] // resize index to address-width
          }
          array_obj_ref_239_index_computed_0 &-> (array_obj_ref_239_index_resize_0)
          array_obj_ref_239_index_resized_0 <-& (array_obj_ref_239_index_resize_0)
          $T[array_obj_ref_239_index_scale_0_sample_start] 
          $T[array_obj_ref_239_index_scale_0_sample_complete] 
          $T[array_obj_ref_239_index_scale_0_update_start] 
          $T[array_obj_ref_239_index_scale_0_update_complete] 
          ;;[array_obj_ref_239_index_scale_0_Sample] 
          {
            $T [rr] $T [ra] 
          }
          ;;[array_obj_ref_239_index_scale_0_Update] 
          {
            $T [cr] $T [ca] 
          }
          array_obj_ref_239_index_resized_0 &-> (array_obj_ref_239_index_scale_0_sample_start)
          array_obj_ref_239_index_scale_0_sample_start &-> (array_obj_ref_239_index_scale_0_Sample)
          array_obj_ref_239_index_scale_0_sample_complete <-& (array_obj_ref_239_index_scale_0_Sample)
          array_obj_ref_239_index_scale_0_update_start &-> (array_obj_ref_239_index_scale_0_Update)
          array_obj_ref_239_index_scale_0_update_complete <-& (array_obj_ref_239_index_scale_0_Update)
          array_obj_ref_239_index_scaled_0 <-& (array_obj_ref_239_index_scale_0_update_complete)
          array_obj_ref_239_index_scale_0_sample_start o<-& (array_obj_ref_239_index_scale_0_sample_complete 1)
          array_obj_ref_239_index_scale_0_update_start o<-& (array_obj_ref_239_index_scale_0_update_complete 0)
          $T[array_obj_ref_239_index_resized_1] 
          $T[array_obj_ref_239_index_scaled_1] 
          $T[array_obj_ref_239_index_computed_1] 
          // Index
          // start: Forward dependencies from Index to transition array_obj_ref_239_index_computed_1
          array_obj_ref_239_index_computed_1 <-& (phi_stmt_195_update_completed_)
          // done: Forward dependencies from Index to transition array_obj_ref_239_index_computed_1
          ;;[array_obj_ref_239_index_resize_1] 
          {
            $T [index_resize_req] $T [index_resize_ack] // resize index to address-width
          }
          array_obj_ref_239_index_computed_1 &-> (array_obj_ref_239_index_resize_1)
          array_obj_ref_239_index_resized_1 <-& (array_obj_ref_239_index_resize_1)
          ;;[array_obj_ref_239_index_scale_1] 
          {
            $T [scale_rename_req] $T [scale_rename_ack] // rename 
          }
          array_obj_ref_239_index_resized_1 &-> (array_obj_ref_239_index_scale_1)
          array_obj_ref_239_index_scaled_1 <-& (array_obj_ref_239_index_scale_1)
          $T[array_obj_ref_239_partial_sum_1_sample_start] 
          $T[array_obj_ref_239_partial_sum_1_sample_complete] 
          $T[array_obj_ref_239_partial_sum_1_update_start] 
          $T[array_obj_ref_239_partial_sum_1_update_complete] 
          ;;[array_obj_ref_239_partial_sum_1_Sample] 
          {
            $T [rr] $T [ra] 
          }
          ;;[array_obj_ref_239_partial_sum_1_Update] 
          {
            $T [cr] $T [ca] 
          }
          array_obj_ref_239_partial_sum_1_sample_start &-> (array_obj_ref_239_partial_sum_1_Sample)
          array_obj_ref_239_partial_sum_1_sample_complete <-& (array_obj_ref_239_partial_sum_1_Sample)
          array_obj_ref_239_partial_sum_1_update_start &-> (array_obj_ref_239_partial_sum_1_Update)
          array_obj_ref_239_partial_sum_1_update_complete <-& (array_obj_ref_239_partial_sum_1_Update)
          array_obj_ref_239_partial_sum_1_sample_start o<-& (array_obj_ref_239_partial_sum_1_sample_complete 1)
          array_obj_ref_239_partial_sum_1_update_start o<-& (array_obj_ref_239_partial_sum_1_update_complete 0)
          array_obj_ref_239_partial_sum_1_sample_start <-& (array_obj_ref_239_index_scaled_0)
          array_obj_ref_239_partial_sum_1_sample_start <-& (array_obj_ref_239_index_scaled_1)
          array_obj_ref_239_index_scaled_0 o<-& (array_obj_ref_239_partial_sum_1_sample_complete 1)
          phi_stmt_195_update_start_ o<-& (array_obj_ref_239_partial_sum_1_sample_complete 1)
          array_obj_ref_239_offset_calculated <-& (array_obj_ref_239_partial_sum_1_update_complete)
          ;;[array_obj_ref_239_final_index_sum_regn] 
          {
            $T [req] $T [ack] // rename
          }
          array_obj_ref_239_partial_sum_1_update_complete &-> (array_obj_ref_239_final_index_sum_regn)
          array_obj_ref_239_offset_calculated <-& (array_obj_ref_239_final_index_sum_regn)
          ;;[array_obj_ref_239_base_plus_offset] 
          {
            $T [sum_rename_req] $T [sum_rename_ack] // one gets through 
          }
          array_obj_ref_239_offset_calculated &-> (array_obj_ref_239_base_plus_offset)
          array_obj_ref_239_root_address_calculated <-& (array_obj_ref_239_base_plus_offset)
          ;;[array_obj_ref_239_word_addrgen] 
          {
            $T [root_register_req] $T [root_register_ack]
          }
          array_obj_ref_239_root_address_calculated &-> (array_obj_ref_239_word_addrgen)
          array_obj_ref_239_word_address_calculated <-& (array_obj_ref_239_word_addrgen)
          ;;[array_obj_ref_239_Sample] 
          {
            ||[word_access_start] 
            {
              ;;[word_0] 
              {
                $T [rr] $T [ra] 
              }
            }
          }
          ;;[array_obj_ref_239_Update] 
          {
            ||[word_access_complete] 
            {
              ;;[word_0] 
              {
                $T [cr] $T [ca] 
              }
            }
            ;;[array_obj_ref_239_Merge] 
            {
              $T [merge_req] $T [merge_ack]
            }
          }
          array_obj_ref_239_sample_start_ <-& (array_obj_ref_239_word_address_calculated)
          // reenable-joins
          array_obj_ref_239_partial_sum_1_update_start o<-& (array_obj_ref_239_sample_completed_ 0)
          array_obj_ref_239_sample_start_ &-> (array_obj_ref_239_Sample)
          array_obj_ref_239_sample_completed_ <-& (array_obj_ref_239_Sample)
          array_obj_ref_239_sample_completed_ &-> ($null)
          array_obj_ref_239_update_start_ &-> (array_obj_ref_239_Update)
          array_obj_ref_239_update_completed_ <-& (array_obj_ref_239_Update)
          // self-release: 
          array_obj_ref_239_sample_start_ o<-& (array_obj_ref_239_sample_completed_ 1)
          $null &-> (array_obj_ref_239_update_start_)
          array_obj_ref_239_update_start_ o<-& (array_obj_ref_239_update_completed_ 0)
          // Target expression
          // (as target) a_rc_3
          // start: WAR dependencies for a_rc_3
          // done: WAR dependencies for a_rc_3
          // end:  			a_rc_3 := D_MEM[R][Index] $buffering 1// bits of buffering = 32. 
          // start:  			xval_0 := x0[Index] $buffering 1// bits of buffering = 32. 
          //  file .Aa/mvp.opt.aa, line 102
          // Source expression
          // x0[Index]
          $T[array_obj_ref_249_base_address_calculated] 
          $T[array_obj_ref_249_sample_start_] 
          $T[array_obj_ref_249_sample_completed_] 
          $T[array_obj_ref_249_update_start_] 
          $T[array_obj_ref_249_update_completed_] 
          $T[array_obj_ref_249_word_address_calculated] 
          $T[array_obj_ref_249_root_address_calculated] 
          $T[array_obj_ref_249_offset_calculated] 
          $T[array_obj_ref_249_index_resized_0] 
          $T[array_obj_ref_249_index_scaled_0] 
          $T[array_obj_ref_249_index_computed_0] 
          // Index
          // start: Forward dependencies from Index to transition array_obj_ref_249_index_computed_0
          array_obj_ref_249_index_computed_0 <-& (phi_stmt_195_update_completed_)
          // done: Forward dependencies from Index to transition array_obj_ref_249_index_computed_0
          ;;[array_obj_ref_249_index_resize_0] 
          {
            $T [index_resize_req] $T [index_resize_ack] // resize index to address-width
          }
          array_obj_ref_249_index_computed_0 &-> (array_obj_ref_249_index_resize_0)
          array_obj_ref_249_index_resized_0 <-& (array_obj_ref_249_index_resize_0)
          ;;[array_obj_ref_249_index_scale_0] 
          {
            $T [scale_rename_req] $T [scale_rename_ack] // rename 
          }
          array_obj_ref_249_index_resized_0 &-> (array_obj_ref_249_index_scale_0)
          array_obj_ref_249_index_scaled_0 <-& (array_obj_ref_249_index_scale_0)
          ;;[array_obj_ref_249_final_index_sum_regn] 
          {
            $T [req] $T [ack] // rename
          }
          array_obj_ref_249_index_scaled_0 &-> (array_obj_ref_249_final_index_sum_regn)
          array_obj_ref_249_offset_calculated <-& (array_obj_ref_249_final_index_sum_regn)
          ;;[array_obj_ref_249_base_plus_offset] 
          {
            $T [sum_rename_req] $T [sum_rename_ack] // one gets through 
          }
          array_obj_ref_249_offset_calculated &-> (array_obj_ref_249_base_plus_offset)
          array_obj_ref_249_root_address_calculated <-& (array_obj_ref_249_base_plus_offset)
          ;;[array_obj_ref_249_word_addrgen] 
          {
            $T [root_register_req] $T [root_register_ack]
          }
          array_obj_ref_249_root_address_calculated &-> (array_obj_ref_249_word_addrgen)
          array_obj_ref_249_word_address_calculated <-& (array_obj_ref_249_word_addrgen)
          ;;[array_obj_ref_249_Sample] 
          {
            ||[word_access_start] 
            {
              ;;[word_0] 
              {
                $T [rr] $T [ra] 
              }
            }
          }
          ;;[array_obj_ref_249_Update] 
          {
            ||[word_access_complete] 
            {
              ;;[word_0] 
              {
                $T [cr] $T [ca] 
              }
            }
            ;;[array_obj_ref_249_Merge] 
            {
              $T [merge_req] $T [merge_ack]
            }
          }
          array_obj_ref_249_sample_start_ <-& (array_obj_ref_249_word_address_calculated)
          // reenable-joins
          phi_stmt_195_update_start_ o<-& (array_obj_ref_249_sample_completed_ 0)
          array_obj_ref_249_sample_start_ &-> (array_obj_ref_249_Sample)
          array_obj_ref_249_sample_completed_ <-& (array_obj_ref_249_Sample)
          array_obj_ref_249_sample_completed_ &-> ($null)
          array_obj_ref_249_update_start_ &-> (array_obj_ref_249_Update)
          array_obj_ref_249_update_completed_ <-& (array_obj_ref_249_Update)
          // self-release: 
          array_obj_ref_249_sample_start_ o<-& (array_obj_ref_249_sample_completed_ 1)
          $null &-> (array_obj_ref_249_update_start_)
          array_obj_ref_249_update_start_ o<-& (array_obj_ref_249_update_completed_ 0)
          // Target expression
          // (as target) xval_0
          // start: WAR dependencies for xval_0
          // done: WAR dependencies for xval_0
          // end:  			xval_0 := x0[Index] $buffering 1// bits of buffering = 32. 
          // start:  			xval_1 := x1[Index] $buffering 1// bits of buffering = 32. 
          //  file .Aa/mvp.opt.aa, line 103
          // Source expression
          // x1[Index]
          $T[array_obj_ref_253_base_address_calculated] 
          $T[array_obj_ref_253_sample_start_] 
          $T[array_obj_ref_253_sample_completed_] 
          $T[array_obj_ref_253_update_start_] 
          $T[array_obj_ref_253_update_completed_] 
          $T[array_obj_ref_253_word_address_calculated] 
          $T[array_obj_ref_253_root_address_calculated] 
          $T[array_obj_ref_253_offset_calculated] 
          $T[array_obj_ref_253_index_resized_0] 
          $T[array_obj_ref_253_index_scaled_0] 
          $T[array_obj_ref_253_index_computed_0] 
          // Index
          // start: Forward dependencies from Index to transition array_obj_ref_253_index_computed_0
          array_obj_ref_253_index_computed_0 <-& (phi_stmt_195_update_completed_)
          // done: Forward dependencies from Index to transition array_obj_ref_253_index_computed_0
          ;;[array_obj_ref_253_index_resize_0] 
          {
            $T [index_resize_req] $T [index_resize_ack] // resize index to address-width
          }
          array_obj_ref_253_index_computed_0 &-> (array_obj_ref_253_index_resize_0)
          array_obj_ref_253_index_resized_0 <-& (array_obj_ref_253_index_resize_0)
          ;;[array_obj_ref_253_index_scale_0] 
          {
            $T [scale_rename_req] $T [scale_rename_ack] // rename 
          }
          array_obj_ref_253_index_resized_0 &-> (array_obj_ref_253_index_scale_0)
          array_obj_ref_253_index_scaled_0 <-& (array_obj_ref_253_index_scale_0)
          ;;[array_obj_ref_253_final_index_sum_regn] 
          {
            $T [req] $T [ack] // rename
          }
          array_obj_ref_253_index_scaled_0 &-> (array_obj_ref_253_final_index_sum_regn)
          array_obj_ref_253_offset_calculated <-& (array_obj_ref_253_final_index_sum_regn)
          ;;[array_obj_ref_253_base_plus_offset] 
          {
            $T [sum_rename_req] $T [sum_rename_ack] // one gets through 
          }
          array_obj_ref_253_offset_calculated &-> (array_obj_ref_253_base_plus_offset)
          array_obj_ref_253_root_address_calculated <-& (array_obj_ref_253_base_plus_offset)
          ;;[array_obj_ref_253_word_addrgen] 
          {
            $T [root_register_req] $T [root_register_ack]
          }
          array_obj_ref_253_root_address_calculated &-> (array_obj_ref_253_word_addrgen)
          array_obj_ref_253_word_address_calculated <-& (array_obj_ref_253_word_addrgen)
          ;;[array_obj_ref_253_Sample] 
          {
            ||[word_access_start] 
            {
              ;;[word_0] 
              {
                $T [rr] $T [ra] 
              }
            }
          }
          ;;[array_obj_ref_253_Update] 
          {
            ||[word_access_complete] 
            {
              ;;[word_0] 
              {
                $T [cr] $T [ca] 
              }
            }
            ;;[array_obj_ref_253_Merge] 
            {
              $T [merge_req] $T [merge_ack]
            }
          }
          array_obj_ref_253_sample_start_ <-& (array_obj_ref_253_word_address_calculated)
          // reenable-joins
          phi_stmt_195_update_start_ o<-& (array_obj_ref_253_sample_completed_ 0)
          array_obj_ref_253_sample_start_ &-> (array_obj_ref_253_Sample)
          array_obj_ref_253_sample_completed_ <-& (array_obj_ref_253_Sample)
          array_obj_ref_253_sample_completed_ &-> ($null)
          array_obj_ref_253_update_start_ &-> (array_obj_ref_253_Update)
          array_obj_ref_253_update_completed_ <-& (array_obj_ref_253_Update)
          // self-release: 
          array_obj_ref_253_sample_start_ o<-& (array_obj_ref_253_sample_completed_ 1)
          $null &-> (array_obj_ref_253_update_start_)
          array_obj_ref_253_update_start_ o<-& (array_obj_ref_253_update_completed_ 0)
          // Target expression
          // (as target) xval_1
          // start: WAR dependencies for xval_1
          // done: WAR dependencies for xval_1
          // end:  			xval_1 := x1[Index] $buffering 1// bits of buffering = 32. 
          // start:  			xval_2 := x2[Index] $buffering 1// bits of buffering = 32. 
          //  file .Aa/mvp.opt.aa, line 104
          // Source expression
          // x2[Index]
          $T[array_obj_ref_257_base_address_calculated] 
          $T[array_obj_ref_257_sample_start_] 
          $T[array_obj_ref_257_sample_completed_] 
          $T[array_obj_ref_257_update_start_] 
          $T[array_obj_ref_257_update_completed_] 
          $T[array_obj_ref_257_word_address_calculated] 
          $T[array_obj_ref_257_root_address_calculated] 
          $T[array_obj_ref_257_offset_calculated] 
          $T[array_obj_ref_257_index_resized_0] 
          $T[array_obj_ref_257_index_scaled_0] 
          $T[array_obj_ref_257_index_computed_0] 
          // Index
          // start: Forward dependencies from Index to transition array_obj_ref_257_index_computed_0
          array_obj_ref_257_index_computed_0 <-& (phi_stmt_195_update_completed_)
          // done: Forward dependencies from Index to transition array_obj_ref_257_index_computed_0
          ;;[array_obj_ref_257_index_resize_0] 
          {
            $T [index_resize_req] $T [index_resize_ack] // resize index to address-width
          }
          array_obj_ref_257_index_computed_0 &-> (array_obj_ref_257_index_resize_0)
          array_obj_ref_257_index_resized_0 <-& (array_obj_ref_257_index_resize_0)
          ;;[array_obj_ref_257_index_scale_0] 
          {
            $T [scale_rename_req] $T [scale_rename_ack] // rename 
          }
          array_obj_ref_257_index_resized_0 &-> (array_obj_ref_257_index_scale_0)
          array_obj_ref_257_index_scaled_0 <-& (array_obj_ref_257_index_scale_0)
          ;;[array_obj_ref_257_final_index_sum_regn] 
          {
            $T [req] $T [ack] // rename
          }
          array_obj_ref_257_index_scaled_0 &-> (array_obj_ref_257_final_index_sum_regn)
          array_obj_ref_257_offset_calculated <-& (array_obj_ref_257_final_index_sum_regn)
          ;;[array_obj_ref_257_base_plus_offset] 
          {
            $T [sum_rename_req] $T [sum_rename_ack] // one gets through 
          }
          array_obj_ref_257_offset_calculated &-> (array_obj_ref_257_base_plus_offset)
          array_obj_ref_257_root_address_calculated <-& (array_obj_ref_257_base_plus_offset)
          ;;[array_obj_ref_257_word_addrgen] 
          {
            $T [root_register_req] $T [root_register_ack]
          }
          array_obj_ref_257_root_address_calculated &-> (array_obj_ref_257_word_addrgen)
          array_obj_ref_257_word_address_calculated <-& (array_obj_ref_257_word_addrgen)
          ;;[array_obj_ref_257_Sample] 
          {
            ||[word_access_start] 
            {
              ;;[word_0] 
              {
                $T [rr] $T [ra] 
              }
            }
          }
          ;;[array_obj_ref_257_Update] 
          {
            ||[word_access_complete] 
            {
              ;;[word_0] 
              {
                $T [cr] $T [ca] 
              }
            }
            ;;[array_obj_ref_257_Merge] 
            {
              $T [merge_req] $T [merge_ack]
            }
          }
          array_obj_ref_257_sample_start_ <-& (array_obj_ref_257_word_address_calculated)
          // reenable-joins
          phi_stmt_195_update_start_ o<-& (array_obj_ref_257_sample_completed_ 0)
          array_obj_ref_257_sample_start_ &-> (array_obj_ref_257_Sample)
          array_obj_ref_257_sample_completed_ <-& (array_obj_ref_257_Sample)
          array_obj_ref_257_sample_completed_ &-> ($null)
          array_obj_ref_257_update_start_ &-> (array_obj_ref_257_Update)
          array_obj_ref_257_update_completed_ <-& (array_obj_ref_257_Update)
          // self-release: 
          array_obj_ref_257_sample_start_ o<-& (array_obj_ref_257_sample_completed_ 1)
          $null &-> (array_obj_ref_257_update_start_)
          array_obj_ref_257_update_start_ o<-& (array_obj_ref_257_update_completed_ 0)
          // Target expression
          // (as target) xval_2
          // start: WAR dependencies for xval_2
          // done: WAR dependencies for xval_2
          // end:  			xval_2 := x2[Index] $buffering 1// bits of buffering = 32. 
          // start:  			xval_3 := x3[Index] $buffering 1// bits of buffering = 32. 
          //  file .Aa/mvp.opt.aa, line 105
          // Source expression
          // x3[Index]
          $T[array_obj_ref_261_base_address_calculated] 
          $T[array_obj_ref_261_sample_start_] 
          $T[array_obj_ref_261_sample_completed_] 
          $T[array_obj_ref_261_update_start_] 
          $T[array_obj_ref_261_update_completed_] 
          $T[array_obj_ref_261_word_address_calculated] 
          $T[array_obj_ref_261_root_address_calculated] 
          $T[array_obj_ref_261_offset_calculated] 
          $T[array_obj_ref_261_index_resized_0] 
          $T[array_obj_ref_261_index_scaled_0] 
          $T[array_obj_ref_261_index_computed_0] 
          // Index
          // start: Forward dependencies from Index to transition array_obj_ref_261_index_computed_0
          array_obj_ref_261_index_computed_0 <-& (phi_stmt_195_update_completed_)
          // done: Forward dependencies from Index to transition array_obj_ref_261_index_computed_0
          ;;[array_obj_ref_261_index_resize_0] 
          {
            $T [index_resize_req] $T [index_resize_ack] // resize index to address-width
          }
          array_obj_ref_261_index_computed_0 &-> (array_obj_ref_261_index_resize_0)
          array_obj_ref_261_index_resized_0 <-& (array_obj_ref_261_index_resize_0)
          ;;[array_obj_ref_261_index_scale_0] 
          {
            $T [scale_rename_req] $T [scale_rename_ack] // rename 
          }
          array_obj_ref_261_index_resized_0 &-> (array_obj_ref_261_index_scale_0)
          array_obj_ref_261_index_scaled_0 <-& (array_obj_ref_261_index_scale_0)
          ;;[array_obj_ref_261_final_index_sum_regn] 
          {
            $T [req] $T [ack] // rename
          }
          array_obj_ref_261_index_scaled_0 &-> (array_obj_ref_261_final_index_sum_regn)
          array_obj_ref_261_offset_calculated <-& (array_obj_ref_261_final_index_sum_regn)
          ;;[array_obj_ref_261_base_plus_offset] 
          {
            $T [sum_rename_req] $T [sum_rename_ack] // one gets through 
          }
          array_obj_ref_261_offset_calculated &-> (array_obj_ref_261_base_plus_offset)
          array_obj_ref_261_root_address_calculated <-& (array_obj_ref_261_base_plus_offset)
          ;;[array_obj_ref_261_word_addrgen] 
          {
            $T [root_register_req] $T [root_register_ack]
          }
          array_obj_ref_261_root_address_calculated &-> (array_obj_ref_261_word_addrgen)
          array_obj_ref_261_word_address_calculated <-& (array_obj_ref_261_word_addrgen)
          ;;[array_obj_ref_261_Sample] 
          {
            ||[word_access_start] 
            {
              ;;[word_0] 
              {
                $T [rr] $T [ra] 
              }
            }
          }
          ;;[array_obj_ref_261_Update] 
          {
            ||[word_access_complete] 
            {
              ;;[word_0] 
              {
                $T [cr] $T [ca] 
              }
            }
            ;;[array_obj_ref_261_Merge] 
            {
              $T [merge_req] $T [merge_ack]
            }
          }
          array_obj_ref_261_sample_start_ <-& (array_obj_ref_261_word_address_calculated)
          // reenable-joins
          phi_stmt_195_update_start_ o<-& (array_obj_ref_261_sample_completed_ 0)
          array_obj_ref_261_sample_start_ &-> (array_obj_ref_261_Sample)
          array_obj_ref_261_sample_completed_ <-& (array_obj_ref_261_Sample)
          array_obj_ref_261_sample_completed_ &-> ($null)
          array_obj_ref_261_update_start_ &-> (array_obj_ref_261_Update)
          array_obj_ref_261_update_completed_ <-& (array_obj_ref_261_Update)
          // self-release: 
          array_obj_ref_261_sample_start_ o<-& (array_obj_ref_261_sample_completed_ 1)
          $null &-> (array_obj_ref_261_update_start_)
          array_obj_ref_261_update_start_ o<-& (array_obj_ref_261_update_completed_ 0)
          // Target expression
          // (as target) xval_3
          // start: WAR dependencies for xval_3
          // done: WAR dependencies for xval_3
          // end:  			xval_3 := x3[Index] $buffering 1// bits of buffering = 32. 
          // start:  			val_0_258_delayed_5_0 := val_0 $buffering 5 $cut_through // bits of buffering = 160. 
          //  file .Aa/mvp.opt.aa, line 107
          $T[assign_stmt_271_sample_start_] 
          $T[assign_stmt_271_sample_completed_] 
          $T[assign_stmt_271_update_start_] 
          $T[assign_stmt_271_update_completed_] 
          // Source expression
          // val_0
          // Target expression
          // (as target) val_0_258_delayed_5_0
          // both source and target are implicit: use interlock 
          // Interlock 
          ;;[assign_stmt_271_Sample] 
          {
            $T [req] $T [ack] // interlock-sample.
          }
          ;;[assign_stmt_271_Update] 
          {
            $T [req] $T [ack] // interlock-update.
          }
          assign_stmt_271_sample_start_ &-> (assign_stmt_271_Sample)
          assign_stmt_271_sample_completed_ <-& (assign_stmt_271_Sample)
          assign_stmt_271_sample_completed_ &-> ($null)
          assign_stmt_271_update_start_ &-> (assign_stmt_271_Update)
          assign_stmt_271_update_completed_ <-& (assign_stmt_271_Update)
          // start: Forward dependencies from val_0 to transition assign_stmt_271_sample_start_
          assign_stmt_271_sample_start_ <-& (phi_stmt_200_update_completed_)
          // done: Forward dependencies from val_0 to transition assign_stmt_271_sample_start_
          // RAW reenables for val_0
          phi_stmt_200_update_start_ o<-& (assign_stmt_271_sample_completed_ 0)
          // self-release: 
          assign_stmt_271_sample_start_ o<-& (assign_stmt_271_sample_completed_ 1)
          $null &-> (assign_stmt_271_update_start_)
          assign_stmt_271_update_start_ o<-& (assign_stmt_271_update_completed_ 0)
          // start: WAR dependencies for val_0_258_delayed_5_0
          // done: WAR dependencies for val_0_258_delayed_5_0
          // end:  			val_0_258_delayed_5_0 := val_0 $buffering 5 $cut_through // bits of buffering = 160. 
          // start: WAR dependencies for nval_0
          // WAR dependency: Read: nval_0 before Write: 			$volatile nval_0 := (val_0_258_delayed_5_0 + (a_rc_0 * xval_0)) $buffering 1
          array_obj_ref_224_update_start_ <-& (phi_stmt_200_sample_completed_)
          phi_stmt_200_sample_start_ o<-& (array_obj_ref_224_update_completed_ 0)
          // WAR dependency: release  Read: nval_0 with Write: 			a_rc_0 := A_MEM[R][Index] $buffering 1// bits of buffering = 32. 
          array_obj_ref_249_update_start_ <-& (phi_stmt_200_sample_completed_)
          phi_stmt_200_sample_start_ o<-& (array_obj_ref_249_update_completed_ 0)
          // WAR dependency: release  Read: nval_0 with Write: 			xval_0 := x0[Index] $buffering 1// bits of buffering = 32. 
          assign_stmt_271_update_start_ <-& (phi_stmt_200_sample_completed_)
          phi_stmt_200_sample_start_ o<-& (assign_stmt_271_update_completed_ 0)
          // WAR dependency: release  Read: nval_0 with Write: 			val_0_258_delayed_5_0 := val_0 $buffering 5 $cut_through // bits of buffering = 160. 
          // done: WAR dependencies for nval_0
          // start:  			$volatile nval_0 := (val_0_258_delayed_5_0 + (a_rc_0 * xval_0)) $buffering 1
          //  file .Aa/mvp.opt.aa, line 108
          // volatile! 
          // Source expression
          // (val_0_258_delayed_5_0 + (a_rc_0 * xval_0))
          // val_0_258_delayed_5_0
          // (a_rc_0 * xval_0)
          // a_rc_0
          // xval_0
          // Target expression
          // (as target) nval_0
          // start: WAR dependencies for nval_0
          // WAR dependency: Read: nval_0 before Write: 			$volatile nval_0 := (val_0_258_delayed_5_0 + (a_rc_0 * xval_0)) $buffering 1
          array_obj_ref_224_update_start_ <-& (phi_stmt_200_sample_completed_)
          phi_stmt_200_sample_start_ o<-& (array_obj_ref_224_update_completed_ 0)
          // WAR dependency: release  Read: nval_0 with Write: 			a_rc_0 := A_MEM[R][Index] $buffering 2// bits of buffering = 64. 
          array_obj_ref_249_update_start_ <-& (phi_stmt_200_sample_completed_)
          phi_stmt_200_sample_start_ o<-& (array_obj_ref_249_update_completed_ 0)
          // WAR dependency: release  Read: nval_0 with Write: 			xval_0 := x0[Index] $buffering 2// bits of buffering = 64. 
          assign_stmt_271_update_start_ <-& (phi_stmt_200_sample_completed_)
          phi_stmt_200_sample_start_ o<-& (assign_stmt_271_update_completed_ 0)
          // WAR dependency: release  Read: nval_0 with Write: 			val_0_258_delayed_5_0 := val_0 $buffering 5 $cut_through // bits of buffering = 160. 
          // done: WAR dependencies for nval_0
          // end:  			$volatile nval_0 := (val_0_258_delayed_5_0 + (a_rc_0 * xval_0)) $buffering 1
          // start:  			val_1_265_delayed_5_0 := val_1 $buffering 5 $cut_through // bits of buffering = 160. 
          //  file .Aa/mvp.opt.aa, line 109
          $T[assign_stmt_281_sample_start_] 
          $T[assign_stmt_281_sample_completed_] 
          $T[assign_stmt_281_update_start_] 
          $T[assign_stmt_281_update_completed_] 
          // Source expression
          // val_1
          // Target expression
          // (as target) val_1_265_delayed_5_0
          // both source and target are implicit: use interlock 
          // Interlock 
          ;;[assign_stmt_281_Sample] 
          {
            $T [req] $T [ack] // interlock-sample.
          }
          ;;[assign_stmt_281_Update] 
          {
            $T [req] $T [ack] // interlock-update.
          }
          assign_stmt_281_sample_start_ &-> (assign_stmt_281_Sample)
          assign_stmt_281_sample_completed_ <-& (assign_stmt_281_Sample)
          assign_stmt_281_sample_completed_ &-> ($null)
          assign_stmt_281_update_start_ &-> (assign_stmt_281_Update)
          assign_stmt_281_update_completed_ <-& (assign_stmt_281_Update)
          // start: Forward dependencies from val_1 to transition assign_stmt_281_sample_start_
          assign_stmt_281_sample_start_ <-& (phi_stmt_205_update_completed_)
          // done: Forward dependencies from val_1 to transition assign_stmt_281_sample_start_
          // RAW reenables for val_1
          phi_stmt_205_update_start_ o<-& (assign_stmt_281_sample_completed_ 0)
          // self-release: 
          assign_stmt_281_sample_start_ o<-& (assign_stmt_281_sample_completed_ 1)
          $null &-> (assign_stmt_281_update_start_)
          assign_stmt_281_update_start_ o<-& (assign_stmt_281_update_completed_ 0)
          // start: WAR dependencies for val_1_265_delayed_5_0
          // done: WAR dependencies for val_1_265_delayed_5_0
          // end:  			val_1_265_delayed_5_0 := val_1 $buffering 5 $cut_through // bits of buffering = 160. 
          // start: WAR dependencies for nval_1
          // WAR dependency: Read: nval_1 before Write: 			$volatile nval_1 := (val_1_265_delayed_5_0 + (a_rc_1 * xval_1)) $buffering 1
          array_obj_ref_229_update_start_ <-& (phi_stmt_205_sample_completed_)
          phi_stmt_205_sample_start_ o<-& (array_obj_ref_229_update_completed_ 0)
          // WAR dependency: release  Read: nval_1 with Write: 			a_rc_1 := B_MEM[R][Index] $buffering 1// bits of buffering = 32. 
          array_obj_ref_253_update_start_ <-& (phi_stmt_205_sample_completed_)
          phi_stmt_205_sample_start_ o<-& (array_obj_ref_253_update_completed_ 0)
          // WAR dependency: release  Read: nval_1 with Write: 			xval_1 := x1[Index] $buffering 1// bits of buffering = 32. 
          assign_stmt_281_update_start_ <-& (phi_stmt_205_sample_completed_)
          phi_stmt_205_sample_start_ o<-& (assign_stmt_281_update_completed_ 0)
          // WAR dependency: release  Read: nval_1 with Write: 			val_1_265_delayed_5_0 := val_1 $buffering 5 $cut_through // bits of buffering = 160. 
          // done: WAR dependencies for nval_1
          // start:  			$volatile nval_1 := (val_1_265_delayed_5_0 + (a_rc_1 * xval_1)) $buffering 1
          //  file .Aa/mvp.opt.aa, line 110
          // volatile! 
          // Source expression
          // (val_1_265_delayed_5_0 + (a_rc_1 * xval_1))
          // val_1_265_delayed_5_0
          // (a_rc_1 * xval_1)
          // a_rc_1
          // xval_1
          // Target expression
          // (as target) nval_1
          // start: WAR dependencies for nval_1
          // WAR dependency: Read: nval_1 before Write: 			$volatile nval_1 := (val_1_265_delayed_5_0 + (a_rc_1 * xval_1)) $buffering 1
          array_obj_ref_229_update_start_ <-& (phi_stmt_205_sample_completed_)
          phi_stmt_205_sample_start_ o<-& (array_obj_ref_229_update_completed_ 0)
          // WAR dependency: release  Read: nval_1 with Write: 			a_rc_1 := B_MEM[R][Index] $buffering 2// bits of buffering = 64. 
          array_obj_ref_253_update_start_ <-& (phi_stmt_205_sample_completed_)
          phi_stmt_205_sample_start_ o<-& (array_obj_ref_253_update_completed_ 0)
          // WAR dependency: release  Read: nval_1 with Write: 			xval_1 := x1[Index] $buffering 2// bits of buffering = 64. 
          assign_stmt_281_update_start_ <-& (phi_stmt_205_sample_completed_)
          phi_stmt_205_sample_start_ o<-& (assign_stmt_281_update_completed_ 0)
          // WAR dependency: release  Read: nval_1 with Write: 			val_1_265_delayed_5_0 := val_1 $buffering 5 $cut_through // bits of buffering = 160. 
          // done: WAR dependencies for nval_1
          // end:  			$volatile nval_1 := (val_1_265_delayed_5_0 + (a_rc_1 * xval_1)) $buffering 1
          // start:  			val_2_272_delayed_5_0 := val_2 $buffering 5 $cut_through // bits of buffering = 160. 
          //  file .Aa/mvp.opt.aa, line 111
          $T[assign_stmt_291_sample_start_] 
          $T[assign_stmt_291_sample_completed_] 
          $T[assign_stmt_291_update_start_] 
          $T[assign_stmt_291_update_completed_] 
          // Source expression
          // val_2
          // Target expression
          // (as target) val_2_272_delayed_5_0
          // both source and target are implicit: use interlock 
          // Interlock 
          ;;[assign_stmt_291_Sample] 
          {
            $T [req] $T [ack] // interlock-sample.
          }
          ;;[assign_stmt_291_Update] 
          {
            $T [req] $T [ack] // interlock-update.
          }
          assign_stmt_291_sample_start_ &-> (assign_stmt_291_Sample)
          assign_stmt_291_sample_completed_ <-& (assign_stmt_291_Sample)
          assign_stmt_291_sample_completed_ &-> ($null)
          assign_stmt_291_update_start_ &-> (assign_stmt_291_Update)
          assign_stmt_291_update_completed_ <-& (assign_stmt_291_Update)
          // start: Forward dependencies from val_2 to transition assign_stmt_291_sample_start_
          assign_stmt_291_sample_start_ <-& (phi_stmt_210_update_completed_)
          // done: Forward dependencies from val_2 to transition assign_stmt_291_sample_start_
          // RAW reenables for val_2
          phi_stmt_210_update_start_ o<-& (assign_stmt_291_sample_completed_ 0)
          // self-release: 
          assign_stmt_291_sample_start_ o<-& (assign_stmt_291_sample_completed_ 1)
          $null &-> (assign_stmt_291_update_start_)
          assign_stmt_291_update_start_ o<-& (assign_stmt_291_update_completed_ 0)
          // start: WAR dependencies for val_2_272_delayed_5_0
          // done: WAR dependencies for val_2_272_delayed_5_0
          // end:  			val_2_272_delayed_5_0 := val_2 $buffering 5 $cut_through // bits of buffering = 160. 
          // start: WAR dependencies for nval_2
          // WAR dependency: Read: nval_2 before Write: 			$volatile nval_2 := (val_2_272_delayed_5_0 + (a_rc_2 * xval_2)) $buffering 1
          array_obj_ref_234_update_start_ <-& (phi_stmt_210_sample_completed_)
          phi_stmt_210_sample_start_ o<-& (array_obj_ref_234_update_completed_ 0)
          // WAR dependency: release  Read: nval_2 with Write: 			a_rc_2 := C_MEM[R][Index] $buffering 1// bits of buffering = 32. 
          array_obj_ref_257_update_start_ <-& (phi_stmt_210_sample_completed_)
          phi_stmt_210_sample_start_ o<-& (array_obj_ref_257_update_completed_ 0)
          // WAR dependency: release  Read: nval_2 with Write: 			xval_2 := x2[Index] $buffering 1// bits of buffering = 32. 
          assign_stmt_291_update_start_ <-& (phi_stmt_210_sample_completed_)
          phi_stmt_210_sample_start_ o<-& (assign_stmt_291_update_completed_ 0)
          // WAR dependency: release  Read: nval_2 with Write: 			val_2_272_delayed_5_0 := val_2 $buffering 5 $cut_through // bits of buffering = 160. 
          // done: WAR dependencies for nval_2
          // start:  			$volatile nval_2 := (val_2_272_delayed_5_0 + (a_rc_2 * xval_2)) $buffering 1
          //  file .Aa/mvp.opt.aa, line 112
          // volatile! 
          // Source expression
          // (val_2_272_delayed_5_0 + (a_rc_2 * xval_2))
          // val_2_272_delayed_5_0
          // (a_rc_2 * xval_2)
          // a_rc_2
          // xval_2
          // Target expression
          // (as target) nval_2
          // start: WAR dependencies for nval_2
          // WAR dependency: Read: nval_2 before Write: 			$volatile nval_2 := (val_2_272_delayed_5_0 + (a_rc_2 * xval_2)) $buffering 1
          array_obj_ref_234_update_start_ <-& (phi_stmt_210_sample_completed_)
          phi_stmt_210_sample_start_ o<-& (array_obj_ref_234_update_completed_ 0)
          // WAR dependency: release  Read: nval_2 with Write: 			a_rc_2 := C_MEM[R][Index] $buffering 2// bits of buffering = 64. 
          array_obj_ref_257_update_start_ <-& (phi_stmt_210_sample_completed_)
          phi_stmt_210_sample_start_ o<-& (array_obj_ref_257_update_completed_ 0)
          // WAR dependency: release  Read: nval_2 with Write: 			xval_2 := x2[Index] $buffering 2// bits of buffering = 64. 
          assign_stmt_291_update_start_ <-& (phi_stmt_210_sample_completed_)
          phi_stmt_210_sample_start_ o<-& (assign_stmt_291_update_completed_ 0)
          // WAR dependency: release  Read: nval_2 with Write: 			val_2_272_delayed_5_0 := val_2 $buffering 5 $cut_through // bits of buffering = 160. 
          // done: WAR dependencies for nval_2
          // end:  			$volatile nval_2 := (val_2_272_delayed_5_0 + (a_rc_2 * xval_2)) $buffering 1
          // start:  			val_3_279_delayed_5_0 := val_3 $buffering 5 $cut_through // bits of buffering = 160. 
          //  file .Aa/mvp.opt.aa, line 113
          $T[assign_stmt_301_sample_start_] 
          $T[assign_stmt_301_sample_completed_] 
          $T[assign_stmt_301_update_start_] 
          $T[assign_stmt_301_update_completed_] 
          // Source expression
          // val_3
          // Target expression
          // (as target) val_3_279_delayed_5_0
          // both source and target are implicit: use interlock 
          // Interlock 
          ;;[assign_stmt_301_Sample] 
          {
            $T [req] $T [ack] // interlock-sample.
          }
          ;;[assign_stmt_301_Update] 
          {
            $T [req] $T [ack] // interlock-update.
          }
          assign_stmt_301_sample_start_ &-> (assign_stmt_301_Sample)
          assign_stmt_301_sample_completed_ <-& (assign_stmt_301_Sample)
          assign_stmt_301_sample_completed_ &-> ($null)
          assign_stmt_301_update_start_ &-> (assign_stmt_301_Update)
          assign_stmt_301_update_completed_ <-& (assign_stmt_301_Update)
          // start: Forward dependencies from val_3 to transition assign_stmt_301_sample_start_
          assign_stmt_301_sample_start_ <-& (phi_stmt_215_update_completed_)
          // done: Forward dependencies from val_3 to transition assign_stmt_301_sample_start_
          // RAW reenables for val_3
          phi_stmt_215_update_start_ o<-& (assign_stmt_301_sample_completed_ 0)
          // self-release: 
          assign_stmt_301_sample_start_ o<-& (assign_stmt_301_sample_completed_ 1)
          $null &-> (assign_stmt_301_update_start_)
          assign_stmt_301_update_start_ o<-& (assign_stmt_301_update_completed_ 0)
          // start: WAR dependencies for val_3_279_delayed_5_0
          // done: WAR dependencies for val_3_279_delayed_5_0
          // end:  			val_3_279_delayed_5_0 := val_3 $buffering 5 $cut_through // bits of buffering = 160. 
          // start: WAR dependencies for nval_3
          // WAR dependency: Read: nval_3 before Write: 			$volatile nval_3 := (val_3_279_delayed_5_0 + (a_rc_3 * xval_3)) $buffering 1
          array_obj_ref_239_update_start_ <-& (phi_stmt_215_sample_completed_)
          phi_stmt_215_sample_start_ o<-& (array_obj_ref_239_update_completed_ 0)
          // WAR dependency: release  Read: nval_3 with Write: 			a_rc_3 := D_MEM[R][Index] $buffering 1// bits of buffering = 32. 
          array_obj_ref_261_update_start_ <-& (phi_stmt_215_sample_completed_)
          phi_stmt_215_sample_start_ o<-& (array_obj_ref_261_update_completed_ 0)
          // WAR dependency: release  Read: nval_3 with Write: 			xval_3 := x3[Index] $buffering 1// bits of buffering = 32. 
          assign_stmt_301_update_start_ <-& (phi_stmt_215_sample_completed_)
          phi_stmt_215_sample_start_ o<-& (assign_stmt_301_update_completed_ 0)
          // WAR dependency: release  Read: nval_3 with Write: 			val_3_279_delayed_5_0 := val_3 $buffering 5 $cut_through // bits of buffering = 160. 
          // done: WAR dependencies for nval_3
          // start:  			$volatile nval_3 := (val_3_279_delayed_5_0 + (a_rc_3 * xval_3)) $buffering 1
          //  file .Aa/mvp.opt.aa, line 114
          // volatile! 
          // Source expression
          // (val_3_279_delayed_5_0 + (a_rc_3 * xval_3))
          // val_3_279_delayed_5_0
          // (a_rc_3 * xval_3)
          // a_rc_3
          // xval_3
          // Target expression
          // (as target) nval_3
          // start: WAR dependencies for nval_3
          // WAR dependency: Read: nval_3 before Write: 			$volatile nval_3 := (val_3_279_delayed_5_0 + (a_rc_3 * xval_3)) $buffering 1
          array_obj_ref_239_update_start_ <-& (phi_stmt_215_sample_completed_)
          phi_stmt_215_sample_start_ o<-& (array_obj_ref_239_update_completed_ 0)
          // WAR dependency: release  Read: nval_3 with Write: 			a_rc_3 := D_MEM[R][Index] $buffering 2// bits of buffering = 64. 
          array_obj_ref_261_update_start_ <-& (phi_stmt_215_sample_completed_)
          phi_stmt_215_sample_start_ o<-& (array_obj_ref_261_update_completed_ 0)
          // WAR dependency: release  Read: nval_3 with Write: 			xval_3 := x3[Index] $buffering 2// bits of buffering = 64. 
          assign_stmt_301_update_start_ <-& (phi_stmt_215_sample_completed_)
          phi_stmt_215_sample_start_ o<-& (assign_stmt_301_update_completed_ 0)
          // WAR dependency: release  Read: nval_3 with Write: 			val_3_279_delayed_5_0 := val_3 $buffering 5 $cut_through // bits of buffering = 160. 
          // done: WAR dependencies for nval_3
          // end:  			$volatile nval_3 := (val_3_279_delayed_5_0 + (a_rc_3 * xval_3)) $buffering 1
          // start:  			nC := (C + 4 ) $buffering 1// bits of buffering = 8. 
          //  file .Aa/mvp.opt.aa, line 116
          // Source expression
          // (C + 4 )
          $T[ADD_u8_u8_317_sample_start_] 
          $T[ADD_u8_u8_317_sample_completed_] 
          $T[ADD_u8_u8_317_update_start_] 
          $T[ADD_u8_u8_317_update_completed_] 
          // C
          // start: Forward dependencies from C to transition ADD_u8_u8_317_sample_start_
          ADD_u8_u8_317_sample_start_ <-& (phi_stmt_190_update_completed_)
          // done: Forward dependencies from C to transition ADD_u8_u8_317_sample_start_
          ;;[ADD_u8_u8_317_Sample] 
          {
            // binary expression 
            $T [rr] $T [ra]  // (split) binary operation 
          }
          ;;[ADD_u8_u8_317_Update] 
          {
            // binary expression 
            $T [cr] $T [ca] // (split) binary operation 
          }
          ADD_u8_u8_317_sample_start_ &-> (ADD_u8_u8_317_Sample)
          ADD_u8_u8_317_sample_completed_ <-& (ADD_u8_u8_317_Sample)
          ADD_u8_u8_317_sample_completed_ &-> ($null)
          ADD_u8_u8_317_update_start_ &-> (ADD_u8_u8_317_Update)
          ADD_u8_u8_317_update_completed_ <-& (ADD_u8_u8_317_Update)
          // RAW reenables for C
          phi_stmt_190_update_start_ o<-& (ADD_u8_u8_317_sample_completed_ 0)
          // self-release: 
          ADD_u8_u8_317_sample_start_ o<-& (ADD_u8_u8_317_sample_completed_ 1)
          $null &-> (ADD_u8_u8_317_update_start_)
          ADD_u8_u8_317_update_start_ o<-& (ADD_u8_u8_317_update_completed_ 0)
          // Target expression
          // (as target) nC
          // start: WAR dependencies for nC
          // WAR dependency: Read: nC before Write: 			nC := (C + 4 ) $buffering 1// bits of buffering = 8. 
          ADD_u8_u8_317_update_start_ <-& (phi_stmt_190_sample_completed_)
          phi_stmt_190_sample_start_ o<-& (ADD_u8_u8_317_update_completed_ 0)
          // WAR dependency: release  Read: nC with Write: 			nC := (C + 4 ) $buffering 1// bits of buffering = 8. 
          // done: WAR dependencies for nC
          // end:  			nC := (C + 4 ) $buffering 2// bits of buffering = 16. 
          // start:  			nIndex := (Index + 1 ) $buffering 1// bits of buffering = 3. 
          //  file .Aa/mvp.opt.aa, line 117
          // Source expression
          // (Index + 1 )
          $T[ADD_u3_u3_322_sample_start_] 
          $T[ADD_u3_u3_322_sample_completed_] 
          $T[ADD_u3_u3_322_update_start_] 
          $T[ADD_u3_u3_322_update_completed_] 
          // Index
          // start: Forward dependencies from Index to transition ADD_u3_u3_322_sample_start_
          ADD_u3_u3_322_sample_start_ <-& (phi_stmt_195_update_completed_)
          // done: Forward dependencies from Index to transition ADD_u3_u3_322_sample_start_
          ;;[ADD_u3_u3_322_Sample] 
          {
            // binary expression 
            $T [rr] $T [ra]  // (split) binary operation 
          }
          ;;[ADD_u3_u3_322_Update] 
          {
            // binary expression 
            $T [cr] $T [ca] // (split) binary operation 
          }
          ADD_u3_u3_322_sample_start_ &-> (ADD_u3_u3_322_Sample)
          ADD_u3_u3_322_sample_completed_ <-& (ADD_u3_u3_322_Sample)
          ADD_u3_u3_322_sample_completed_ &-> ($null)
          ADD_u3_u3_322_update_start_ &-> (ADD_u3_u3_322_Update)
          ADD_u3_u3_322_update_completed_ <-& (ADD_u3_u3_322_Update)
          // RAW reenables for Index
          phi_stmt_195_update_start_ o<-& (ADD_u3_u3_322_sample_completed_ 0)
          // self-release: 
          ADD_u3_u3_322_sample_start_ o<-& (ADD_u3_u3_322_sample_completed_ 1)
          $null &-> (ADD_u3_u3_322_update_start_)
          ADD_u3_u3_322_update_start_ o<-& (ADD_u3_u3_322_update_completed_ 0)
          // Target expression
          // (as target) nIndex
          // start: WAR dependencies for nIndex
          // WAR dependency: Read: nIndex before Write: 			nIndex := (Index + 1 ) $buffering 1// bits of buffering = 3. 
          ADD_u3_u3_322_update_start_ <-& (phi_stmt_195_sample_completed_)
          phi_stmt_195_sample_start_ o<-& (ADD_u3_u3_322_update_completed_ 0)
          // WAR dependency: release  Read: nIndex with Write: 			nIndex := (Index + 1 ) $buffering 1// bits of buffering = 3. 
          // done: WAR dependencies for nIndex
          // end:  			nIndex := (Index + 1 ) $buffering 2// bits of buffering = 6. 
          // (nC < 32 )
          // nC
          $T [loop_body_delay_to_condition_start] $delay
          loop_body_start &-> (loop_body_delay_to_condition_start)
          loop_body_delay_to_condition_start &-> (condition_evaluated)
          // start: Forward dependencies from (nC < 32 ) to transition condition_evaluated
          condition_evaluated <-& (ADD_u8_u8_317_update_completed_)
          // done: Forward dependencies from (nC < 32 ) to transition condition_evaluated
          condition_evaluated &-> ($null)
          // load-store dependencies..
          // memory-space  memory_space_7
          //  array_obj_ref_261 load
          // reenable across ring for memory space memory_space_7
          // leading and trailing sets are the same... no ring dependency
          // memory-space  memory_space_6
          //  array_obj_ref_257 load
          // reenable across ring for memory space memory_space_6
          // leading and trailing sets are the same... no ring dependency
          // memory-space  memory_space_5
          //  array_obj_ref_253 load
          // reenable across ring for memory space memory_space_5
          // leading and trailing sets are the same... no ring dependency
          // memory-space  memory_space_4
          //  array_obj_ref_249 load
          // reenable across ring for memory space memory_space_4
          // leading and trailing sets are the same... no ring dependency
          // memory-space  memory_space_3
          //  array_obj_ref_239 load
          // reenable across ring for memory space memory_space_3
          // leading and trailing sets are the same... no ring dependency
          // memory-space  memory_space_2
          //  array_obj_ref_234 load
          // reenable across ring for memory space memory_space_2
          // leading and trailing sets are the same... no ring dependency
          // memory-space  memory_space_1
          //  array_obj_ref_229 load
          // reenable across ring for memory space memory_space_1
          // leading and trailing sets are the same... no ring dependency
          // memory-space  memory_space_0
          //  array_obj_ref_224 load
          // reenable across ring for memory space memory_space_0
          // leading and trailing sets are the same... no ring dependency
        }
        ( first_time_through_loop_body  back_edge_to_loop_body) 
        ( condition_evaluated )
        ;; [loop_exit] 
        {
          $T [ack] 
        }
        ;; [loop_taken] 
        {
          $T [ack] 
        }
        do_while_stmt_188__entry__ <-| ($entry)
        loop_body_done <-| ( do_while_stmt_188_loop_body ) 
        condition_done |-> (loop_exit loop_taken)
        do_while_stmt_188__exit__ |-> ($exit)
        $bind condition_done <= do_while_stmt_188_loop_body : condition_evaluated
        $bind do_while_stmt_188__entry__  => do_while_stmt_188_loop_body : first_time_through_loop_body 
        $bind loop_back  => do_while_stmt_188_loop_body : back_edge_to_loop_body 
        $terminate (loop_exit loop_taken loop_body_done) (loop_back do_while_stmt_188__exit__)
      }
      do_while_stmt_188__entry__ |-> (do_while_stmt_188)
      do_while_stmt_188__exit__ <-| (do_while_stmt_188)
      do_while_stmt_188__entry__ <-| (branch_block_stmt_187__entry__)
      do_while_stmt_188__exit__ |-> (branch_block_stmt_187__exit__)
    }
    ::[assign_stmt_337] 
    {
      // start:  	result := (nval_0 + (nval_1 + (nval_2 + nval_3))) $buffering 1// bits of buffering = 32. 
      //  file .Aa/mvp.opt.aa, line 121
      // Source expression
      // (nval_0 + (nval_1 + (nval_2 + nval_3)))
      $T[ADD_u32_u32_336_sample_start_] 
      $T[ADD_u32_u32_336_sample_completed_] 
      $T[ADD_u32_u32_336_update_start_] 
      $T[ADD_u32_u32_336_update_completed_] 
      // nval_0
      // (nval_1 + (nval_2 + nval_3))
      // nval_1
      // (nval_2 + nval_3)
      // nval_2
      // nval_3
      // start: Forward dependencies from nval_0 to transition ADD_u32_u32_336_sample_start_
      // done: Forward dependencies from nval_0 to transition ADD_u32_u32_336_sample_start_
      // start: Forward dependencies from (nval_1 + (nval_2 + nval_3)) to transition ADD_u32_u32_336_sample_start_
      // done: Forward dependencies from (nval_1 + (nval_2 + nval_3)) to transition ADD_u32_u32_336_sample_start_
      ;;[ADD_u32_u32_336_Sample] 
      {
        // binary expression 
        $T [rr] $T [ra]  // (split) binary operation 
      }
      ;;[ADD_u32_u32_336_Update] 
      {
        // binary expression 
        $T [cr] $T [ca] // (split) binary operation 
      }
      ADD_u32_u32_336_sample_start_ &-> (ADD_u32_u32_336_Sample)
      ADD_u32_u32_336_sample_completed_ <-& (ADD_u32_u32_336_Sample)
      ADD_u32_u32_336_sample_completed_ &-> ($null)
      ADD_u32_u32_336_update_start_ &-> (ADD_u32_u32_336_Update)
      ADD_u32_u32_336_update_completed_ <-& (ADD_u32_u32_336_Update)
      // Target expression
      // (as target) result
      // result
      // write to interface object
      // start: WAR dependencies for result
      // done: WAR dependencies for result
      // result
      // write to interface object
      // end:  	result := (nval_0 + (nval_1 + (nval_2 + nval_3))) $buffering 1// bits of buffering = 32. 
      // load-store dependencies..
    }
  }
  // end control-path
  $DP 
  {
    // begin data-path 
    // constant-object-declarations for block %dotP_0%mmloop%
    //  file .Aa/mvp.opt.aa, line 83
    // constant-object-declarations for block %dotP_0%mmloop
    //  file .Aa/mvp.opt.aa, line 79
    // constant-object-declarations for block %dotP_0
    //  file .Aa/mvp.opt.aa, line 74
    // constant-declarations for block %dotP_0%mmloop
    //  file .Aa/mvp.opt.aa, line 79
    // do-while statement  
    //  file .Aa/mvp.opt.aa, line 81
    // 32 
    $constant $W[konst_326_wire_constant] : $int<8> := _b00100000// 32
    // constant-declarations for block %dotP_0%mmloop%
    //  file .Aa/mvp.opt.aa, line 83
    // constant-declarations for phi:  			$phi C := 			  nC $on   $loopback 			  ($bitcast ($uint<8>) 0  ) $on   $entry 
    // type of target is $uint<8>
    //  file .Aa/mvp.opt.aa, line 84
    // ($bitcast ($uint<8>) 0  )
    $constant $W[type_cast_194_wire_constant] : $int<8> := _b00000000// 0
    // constant-declarations for phi:  			$phi Index := 			  ($bitcast ($uint<3>) 0  ) $on   $entry 			  nIndex $on   $loopback 
    // type of target is $uint<3>
    //  file .Aa/mvp.opt.aa, line 86
    // ($bitcast ($uint<3>) 0  )
    $constant $W[type_cast_198_wire_constant] : $int<3> := _b000// 0
    // constant-declarations for phi:  			$phi val_0 := 			  ($bitcast ($uint<32>) 0  ) $on   $entry 			  nval_0 $on   $loopback 
    // type of target is $uint<32>
    //  file .Aa/mvp.opt.aa, line 88
    // ($bitcast ($uint<32>) 0  )
    $constant $W[type_cast_203_wire_constant] : $int<32> := _b00000000000000000000000000000000// 0
    // constant-declarations for phi:  			$phi val_1 := 			  ($bitcast ($uint<32>) 0  ) $on   $entry 			  nval_1 $on   $loopback 
    // type of target is $uint<32>
    //  file .Aa/mvp.opt.aa, line 90
    // ($bitcast ($uint<32>) 0  )
    $constant $W[type_cast_208_wire_constant] : $int<32> := _b00000000000000000000000000000000// 0
    // constant-declarations for phi:  			$phi val_2 := 			  ($bitcast ($uint<32>) 0  ) $on   $entry 			  nval_2 $on   $loopback 
    // type of target is $uint<32>
    //  file .Aa/mvp.opt.aa, line 92
    // ($bitcast ($uint<32>) 0  )
    $constant $W[type_cast_213_wire_constant] : $int<32> := _b00000000000000000000000000000000// 0
    // constant-declarations for phi:  			$phi val_3 := 			  nval_3 $on   $loopback 			  ($bitcast ($uint<32>) 0  ) $on   $entry 
    // type of target is $uint<32>
    //  file .Aa/mvp.opt.aa, line 94
    // ($bitcast ($uint<32>) 0  )
    $constant $W[type_cast_219_wire_constant] : $int<32> := _b00000000000000000000000000000000// 0
    // A_MEM[R][Index]
    $constant $W[array_obj_ref_224_resized_base_address] : $int<8> := _b00000000// 0
    $constant $W[array_obj_ref_224_offset_scale_factor_0] : $int<8> := _b00001000// 8
    $constant $W[array_obj_ref_224_offset_scale_factor_1] : $int<8> := _b00000001// 1
    $constant $W[array_obj_ref_224_word_offset_0] : $int<8> := _b00000000// 0
    // B_MEM[R][Index]
    $constant $W[array_obj_ref_229_resized_base_address] : $int<8> := _b00000000// 0
    $constant $W[array_obj_ref_229_offset_scale_factor_0] : $int<8> := _b00001000// 8
    $constant $W[array_obj_ref_229_offset_scale_factor_1] : $int<8> := _b00000001// 1
    $constant $W[array_obj_ref_229_word_offset_0] : $int<8> := _b00000000// 0
    // C_MEM[R][Index]
    $constant $W[array_obj_ref_234_resized_base_address] : $int<8> := _b00000000// 0
    $constant $W[array_obj_ref_234_offset_scale_factor_0] : $int<8> := _b00001000// 8
    $constant $W[array_obj_ref_234_offset_scale_factor_1] : $int<8> := _b00000001// 1
    $constant $W[array_obj_ref_234_word_offset_0] : $int<8> := _b00000000// 0
    // D_MEM[R][Index]
    $constant $W[array_obj_ref_239_resized_base_address] : $int<8> := _b00000000// 0
    $constant $W[array_obj_ref_239_offset_scale_factor_0] : $int<8> := _b00001000// 8
    $constant $W[array_obj_ref_239_offset_scale_factor_1] : $int<8> := _b00000001// 1
    $constant $W[array_obj_ref_239_word_offset_0] : $int<8> := _b00000000// 0
    // x0[Index]
    $constant $W[array_obj_ref_249_resized_base_address] : $int<3> := _b000// 0
    $constant $W[array_obj_ref_249_offset_scale_factor_0] : $int<3> := _b001// 1
    $constant $W[array_obj_ref_249_word_offset_0] : $int<3> := _b000// 0
    // x1[Index]
    $constant $W[array_obj_ref_253_resized_base_address] : $int<3> := _b000// 0
    $constant $W[array_obj_ref_253_offset_scale_factor_0] : $int<3> := _b001// 1
    $constant $W[array_obj_ref_253_word_offset_0] : $int<3> := _b000// 0
    // x2[Index]
    $constant $W[array_obj_ref_257_resized_base_address] : $int<3> := _b000// 0
    $constant $W[array_obj_ref_257_offset_scale_factor_0] : $int<3> := _b001// 1
    $constant $W[array_obj_ref_257_word_offset_0] : $int<3> := _b000// 0
    // x3[Index]
    $constant $W[array_obj_ref_261_resized_base_address] : $int<3> := _b000// 0
    $constant $W[array_obj_ref_261_offset_scale_factor_0] : $int<3> := _b001// 1
    $constant $W[array_obj_ref_261_word_offset_0] : $int<3> := _b000// 0
    // 4 
    $constant $W[konst_316_wire_constant] : $int<8> := _b00000100// 4
    // 1 
    $constant $W[konst_321_wire_constant] : $int<3> := _b001// 1
    // block %dotP_0%mmloop
    //  file .Aa/mvp.opt.aa, line 79
    // do-while statement  
    //  file .Aa/mvp.opt.aa, line 81
    // (nC < 32 )
    $intermediate $W[ULT_u8_u1_327_wire] : $int<1>
    // merge-statement  
    //  file .Aa/mvp.opt.aa, line 83
    // 			$phi C := 			  nC $on   $loopback 			  ($bitcast ($uint<8>) 0  ) $on   $entry 
    // type of target is $uint<8>
    //  file .Aa/mvp.opt.aa, line 84
    $W[nC_318_192_buffered] : $int<8>
    // C
    $W[C_190] : $int<8>
    // 			$phi Index := 			  ($bitcast ($uint<3>) 0  ) $on   $entry 			  nIndex $on   $loopback 
    // type of target is $uint<3>
    //  file .Aa/mvp.opt.aa, line 86
    $W[nIndex_323_199_buffered] : $int<3>
    // Index
    $W[Index_195] : $int<3>
    // 			$phi val_0 := 			  ($bitcast ($uint<32>) 0  ) $on   $entry 			  nval_0 $on   $loopback 
    // type of target is $uint<32>
    //  file .Aa/mvp.opt.aa, line 88
    $W[nval_0_278_204_buffered] : $int<32>
    // val_0
    $W[val_0_200] : $int<32>
    // 			$phi val_1 := 			  ($bitcast ($uint<32>) 0  ) $on   $entry 			  nval_1 $on   $loopback 
    // type of target is $uint<32>
    //  file .Aa/mvp.opt.aa, line 90
    $W[nval_1_288_209_buffered] : $int<32>
    // val_1
    $W[val_1_205] : $int<32>
    // 			$phi val_2 := 			  ($bitcast ($uint<32>) 0  ) $on   $entry 			  nval_2 $on   $loopback 
    // type of target is $uint<32>
    //  file .Aa/mvp.opt.aa, line 92
    $W[nval_2_298_214_buffered] : $int<32>
    // val_2
    $W[val_2_210] : $int<32>
    // 			$phi val_3 := 			  nval_3 $on   $loopback 			  ($bitcast ($uint<32>) 0  ) $on   $entry 
    // type of target is $uint<32>
    //  file .Aa/mvp.opt.aa, line 94
    $W[nval_3_308_217_buffered] : $int<32>
    // val_3
    $W[val_3_215] : $int<32>
    // 			a_rc_0 := A_MEM[R][Index] $buffering 2// bits of buffering = 64. 
    //  file .Aa/mvp.opt.aa, line 97
    // A_MEM[R][Index]
    $intermediate $W[R_R_222_resized] : $int<8>
    $intermediate $W[R_R_222_scaled] : $int<8>
    $intermediate $W[R_Index_223_resized] : $int<8>
    $intermediate $W[R_Index_223_scaled] : $int<8>
    $intermediate $W[array_obj_ref_224_index_partial_sum_1] : $int<8>
    $intermediate $W[array_obj_ref_224_final_offset] : $int<8>
    $intermediate $W[array_obj_ref_224_root_address] : $int<8>
    $W[array_obj_ref_224_word_address_0] : $pointer<memory_space_0>
    $W[array_obj_ref_224_data_0] : $int<32>
    // a_rc_0
    $W[a_rc_0_225] : $int<32>
    // 			a_rc_1 := B_MEM[R][Index] $buffering 2// bits of buffering = 64. 
    //  file .Aa/mvp.opt.aa, line 98
    // B_MEM[R][Index]
    $intermediate $W[R_R_227_resized] : $int<8>
    $intermediate $W[R_R_227_scaled] : $int<8>
    $intermediate $W[R_Index_228_resized] : $int<8>
    $intermediate $W[R_Index_228_scaled] : $int<8>
    $intermediate $W[array_obj_ref_229_index_partial_sum_1] : $int<8>
    $intermediate $W[array_obj_ref_229_final_offset] : $int<8>
    $intermediate $W[array_obj_ref_229_root_address] : $int<8>
    $W[array_obj_ref_229_word_address_0] : $pointer<memory_space_1>
    $W[array_obj_ref_229_data_0] : $int<32>
    // a_rc_1
    $W[a_rc_1_230] : $int<32>
    // 			a_rc_2 := C_MEM[R][Index] $buffering 2// bits of buffering = 64. 
    //  file .Aa/mvp.opt.aa, line 99
    // C_MEM[R][Index]
    $intermediate $W[R_R_232_resized] : $int<8>
    $intermediate $W[R_R_232_scaled] : $int<8>
    $intermediate $W[R_Index_233_resized] : $int<8>
    $intermediate $W[R_Index_233_scaled] : $int<8>
    $intermediate $W[array_obj_ref_234_index_partial_sum_1] : $int<8>
    $intermediate $W[array_obj_ref_234_final_offset] : $int<8>
    $intermediate $W[array_obj_ref_234_root_address] : $int<8>
    $W[array_obj_ref_234_word_address_0] : $pointer<memory_space_2>
    $W[array_obj_ref_234_data_0] : $int<32>
    // a_rc_2
    $W[a_rc_2_235] : $int<32>
    // 			a_rc_3 := D_MEM[R][Index] $buffering 2// bits of buffering = 64. 
    //  file .Aa/mvp.opt.aa, line 100
    // D_MEM[R][Index]
    $intermediate $W[R_R_237_resized] : $int<8>
    $intermediate $W[R_R_237_scaled] : $int<8>
    $intermediate $W[R_Index_238_resized] : $int<8>
    $intermediate $W[R_Index_238_scaled] : $int<8>
    $intermediate $W[array_obj_ref_239_index_partial_sum_1] : $int<8>
    $intermediate $W[array_obj_ref_239_final_offset] : $int<8>
    $intermediate $W[array_obj_ref_239_root_address] : $int<8>
    $W[array_obj_ref_239_word_address_0] : $pointer<memory_space_3>
    $W[array_obj_ref_239_data_0] : $int<32>
    // a_rc_3
    $W[a_rc_3_240] : $int<32>
    // 			xval_0 := x0[Index] $buffering 2// bits of buffering = 64. 
    //  file .Aa/mvp.opt.aa, line 102
    // x0[Index]
    $intermediate $W[R_Index_248_resized] : $int<3>
    $intermediate $W[R_Index_248_scaled] : $int<3>
    $intermediate $W[array_obj_ref_249_final_offset] : $int<3>
    $intermediate $W[array_obj_ref_249_root_address] : $int<3>
    $W[array_obj_ref_249_word_address_0] : $pointer<memory_space_4>
    $W[array_obj_ref_249_data_0] : $int<32>
    // xval_0
    $W[xval_0_250] : $int<32>
    // 			xval_1 := x1[Index] $buffering 2// bits of buffering = 64. 
    //  file .Aa/mvp.opt.aa, line 103
    // x1[Index]
    $intermediate $W[R_Index_252_resized] : $int<3>
    $intermediate $W[R_Index_252_scaled] : $int<3>
    $intermediate $W[array_obj_ref_253_final_offset] : $int<3>
    $intermediate $W[array_obj_ref_253_root_address] : $int<3>
    $W[array_obj_ref_253_word_address_0] : $pointer<memory_space_5>
    $W[array_obj_ref_253_data_0] : $int<32>
    // xval_1
    $W[xval_1_254] : $int<32>
    // 			xval_2 := x2[Index] $buffering 2// bits of buffering = 64. 
    //  file .Aa/mvp.opt.aa, line 104
    // x2[Index]
    $intermediate $W[R_Index_256_resized] : $int<3>
    $intermediate $W[R_Index_256_scaled] : $int<3>
    $intermediate $W[array_obj_ref_257_final_offset] : $int<3>
    $intermediate $W[array_obj_ref_257_root_address] : $int<3>
    $W[array_obj_ref_257_word_address_0] : $pointer<memory_space_6>
    $W[array_obj_ref_257_data_0] : $int<32>
    // xval_2
    $W[xval_2_258] : $int<32>
    // 			xval_3 := x3[Index] $buffering 2// bits of buffering = 64. 
    //  file .Aa/mvp.opt.aa, line 105
    // x3[Index]
    $intermediate $W[R_Index_260_resized] : $int<3>
    $intermediate $W[R_Index_260_scaled] : $int<3>
    $intermediate $W[array_obj_ref_261_final_offset] : $int<3>
    $intermediate $W[array_obj_ref_261_root_address] : $int<3>
    $W[array_obj_ref_261_word_address_0] : $pointer<memory_space_7>
    $W[array_obj_ref_261_data_0] : $int<32>
    // xval_3
    $W[xval_3_262] : $int<32>
    // 			val_0_258_delayed_5_0 := val_0 $buffering 5 $cut_through // bits of buffering = 160. 
    //  file .Aa/mvp.opt.aa, line 107
    // val_0_258_delayed_5_0
    $W[val_0_258_delayed_5_0_271] : $int<32>
    // 			$volatile nval_0 := (val_0_258_delayed_5_0 + (a_rc_0 * xval_0)) $buffering 1
    //  file .Aa/mvp.opt.aa, line 108
    // (a_rc_0 * xval_0)
    $intermediate $W[MUL_u32_u32_276_wire] : $int<32>
    // nval_0
    $W[nval_0_278] : $int<32>
    // 			val_1_265_delayed_5_0 := val_1 $buffering 5 $cut_through // bits of buffering = 160. 
    //  file .Aa/mvp.opt.aa, line 109
    // val_1_265_delayed_5_0
    $W[val_1_265_delayed_5_0_281] : $int<32>
    // 			$volatile nval_1 := (val_1_265_delayed_5_0 + (a_rc_1 * xval_1)) $buffering 1
    //  file .Aa/mvp.opt.aa, line 110
    // (a_rc_1 * xval_1)
    $intermediate $W[MUL_u32_u32_286_wire] : $int<32>
    // nval_1
    $W[nval_1_288] : $int<32>
    // 			val_2_272_delayed_5_0 := val_2 $buffering 5 $cut_through // bits of buffering = 160. 
    //  file .Aa/mvp.opt.aa, line 111
    // val_2_272_delayed_5_0
    $W[val_2_272_delayed_5_0_291] : $int<32>
    // 			$volatile nval_2 := (val_2_272_delayed_5_0 + (a_rc_2 * xval_2)) $buffering 1
    //  file .Aa/mvp.opt.aa, line 112
    // (a_rc_2 * xval_2)
    $intermediate $W[MUL_u32_u32_296_wire] : $int<32>
    // nval_2
    $W[nval_2_298] : $int<32>
    // 			val_3_279_delayed_5_0 := val_3 $buffering 5 $cut_through // bits of buffering = 160. 
    //  file .Aa/mvp.opt.aa, line 113
    // val_3_279_delayed_5_0
    $W[val_3_279_delayed_5_0_301] : $int<32>
    // 			$volatile nval_3 := (val_3_279_delayed_5_0 + (a_rc_3 * xval_3)) $buffering 1
    //  file .Aa/mvp.opt.aa, line 114
    // (a_rc_3 * xval_3)
    $intermediate $W[MUL_u32_u32_306_wire] : $int<32>
    // nval_3
    $W[nval_3_308] : $int<32>
    // 			nC := (C + 4 ) $buffering 2// bits of buffering = 16. 
    //  file .Aa/mvp.opt.aa, line 116
    // nC
    $W[nC_318] : $int<8>
    // 			nIndex := (Index + 1 ) $buffering 2// bits of buffering = 6. 
    //  file .Aa/mvp.opt.aa, line 117
    // nIndex
    $W[nIndex_323] : $int<3>
    // 	result := (nval_0 + (nval_1 + (nval_2 + nval_3))) $buffering 1// bits of buffering = 32. 
    //  file .Aa/mvp.opt.aa, line 121
    // (nval_2 + nval_3)
    $intermediate $W[ADD_u32_u32_334_wire] : $int<32>
    // (nval_1 + (nval_2 + nval_3))
    $intermediate $W[ADD_u32_u32_335_wire] : $int<32>
    // result
    // datapath-instances for block %dotP_0%mmloop
    //  file .Aa/mvp.opt.aa, line 79
    // datapath-instances for do-while  
    //  file .Aa/mvp.opt.aa, line 81
    // (nC < 32 )
    <[ULT_u8_u1_327_inst] (nC_318 konst_326_wire_constant) (ULT_u8_u1_327_wire)   $flowthrough 
    $delay ULT_u8_u1_327_inst 0
    ==0? [do_while_stmt_188_branch] (ULT_u8_u1_327_wire)
    $flowthrough
    // data-path instances for merge  
    //  file .Aa/mvp.opt.aa, line 83
    // 			$phi C := 			  nC $on   $loopback 			  ($bitcast ($uint<8>) 0  ) $on   $entry 
    // type of target is $uint<8>
    //  file .Aa/mvp.opt.aa, line 84
    # := [nC_318_192_buf] (nC_318) (nC_318_192_buffered)     $fullrate
    $buffering $out nC_318_192_buf nC_318_192_buffered  1
    # $phi [phi_stmt_190] (nC_318_192_buffered type_cast_194_wire_constant) ( C_190 ) $fullrate
    // $buffering  $out phi_stmt_190 C_190 2
    // 			$phi Index := 			  ($bitcast ($uint<3>) 0  ) $on   $entry 			  nIndex $on   $loopback 
    // type of target is $uint<3>
    //  file .Aa/mvp.opt.aa, line 86
    # := [nIndex_323_199_buf] (nIndex_323) (nIndex_323_199_buffered)     $fullrate
    $buffering $out nIndex_323_199_buf nIndex_323_199_buffered  1
    # $phi [phi_stmt_195] (type_cast_198_wire_constant nIndex_323_199_buffered) ( Index_195 ) $fullrate
    // $buffering  $out phi_stmt_195 Index_195 2
    // 			$phi val_0 := 			  ($bitcast ($uint<32>) 0  ) $on   $entry 			  nval_0 $on   $loopback 
    // type of target is $uint<32>
    //  file .Aa/mvp.opt.aa, line 88
    # := [nval_0_278_204_buf] (nval_0_278) (nval_0_278_204_buffered)     $fullrate
    $buffering $out nval_0_278_204_buf nval_0_278_204_buffered  1
    # $phi [phi_stmt_200] (type_cast_203_wire_constant nval_0_278_204_buffered) ( val_0_200 ) $fullrate
    // $buffering  $out phi_stmt_200 val_0_200 2
    // 			$phi val_1 := 			  ($bitcast ($uint<32>) 0  ) $on   $entry 			  nval_1 $on   $loopback 
    // type of target is $uint<32>
    //  file .Aa/mvp.opt.aa, line 90
    # := [nval_1_288_209_buf] (nval_1_288) (nval_1_288_209_buffered)     $fullrate
    $buffering $out nval_1_288_209_buf nval_1_288_209_buffered  1
    # $phi [phi_stmt_205] (type_cast_208_wire_constant nval_1_288_209_buffered) ( val_1_205 ) $fullrate
    // $buffering  $out phi_stmt_205 val_1_205 2
    // 			$phi val_2 := 			  ($bitcast ($uint<32>) 0  ) $on   $entry 			  nval_2 $on   $loopback 
    // type of target is $uint<32>
    //  file .Aa/mvp.opt.aa, line 92
    # := [nval_2_298_214_buf] (nval_2_298) (nval_2_298_214_buffered)     $fullrate
    $buffering $out nval_2_298_214_buf nval_2_298_214_buffered  1
    # $phi [phi_stmt_210] (type_cast_213_wire_constant nval_2_298_214_buffered) ( val_2_210 ) $fullrate
    // $buffering  $out phi_stmt_210 val_2_210 2
    // 			$phi val_3 := 			  nval_3 $on   $loopback 			  ($bitcast ($uint<32>) 0  ) $on   $entry 
    // type of target is $uint<32>
    //  file .Aa/mvp.opt.aa, line 94
    # := [nval_3_308_217_buf] (nval_3_308) (nval_3_308_217_buffered)     $fullrate
    $buffering $out nval_3_308_217_buf nval_3_308_217_buffered  1
    # $phi [phi_stmt_215] (nval_3_308_217_buffered type_cast_219_wire_constant) ( val_3_215 ) $fullrate
    // $buffering  $out phi_stmt_215 val_3_215 2
    // 			a_rc_0 := A_MEM[R][Index] $buffering 2// bits of buffering = 64. 
    //  file .Aa/mvp.opt.aa, line 97
    // A_MEM[R][Index]
    &/ [array_obj_ref_224_index_0_resize] (R) (R_R_222_resized) 
    $flowthrough 
    *[array_obj_ref_224_index_0_scale] (R_R_222_resized array_obj_ref_224_offset_scale_factor_0) (R_R_222_scaled)    $fullrate
    $buffering  $in array_obj_ref_224_index_0_scale R_R_222_resized 2
    $buffering  $in array_obj_ref_224_index_0_scale array_obj_ref_224_offset_scale_factor_0 2
    $buffering  $out array_obj_ref_224_index_0_scale R_R_222_scaled 2
    $delay array_obj_ref_224_index_0_scale 2
    &/ [array_obj_ref_224_index_1_resize] (Index_195) (R_Index_223_resized) 
    $flowthrough 
    &/ [array_obj_ref_224_index_1_rename] (R_Index_223_resized) (R_Index_223_scaled) 
    $flowthrough 
    +[array_obj_ref_224_index_sum_1] (R_Index_223_scaled R_R_222_scaled) (array_obj_ref_224_index_partial_sum_1)    $fullrate
    $buffering  $in array_obj_ref_224_index_sum_1 R_Index_223_scaled 2
    $buffering  $in array_obj_ref_224_index_sum_1 R_R_222_scaled 2
    $buffering  $out array_obj_ref_224_index_sum_1 array_obj_ref_224_index_partial_sum_1 2
    $delay array_obj_ref_224_index_sum_1 2
    &/ [array_obj_ref_224_index_offset] (array_obj_ref_224_index_partial_sum_1) (array_obj_ref_224_final_offset) 
    $flowthrough 
    &/ [array_obj_ref_224_root_address_inst] (array_obj_ref_224_final_offset) (array_obj_ref_224_root_address) 
    $flowthrough 
    &/ [array_obj_ref_224_addr_0] (array_obj_ref_224_root_address) (array_obj_ref_224_word_address_0) 
    $flowthrough 
    $load [array_obj_ref_224_load_0] $from memory_space_0 (array_obj_ref_224_word_address_0) (array_obj_ref_224_data_0) 
    $buffering  $in array_obj_ref_224_load_0 array_obj_ref_224_word_address_0 2
    $buffering  $out array_obj_ref_224_load_0 array_obj_ref_224_data_0 2
    $delay array_obj_ref_224_load_0 5
    &/ [array_obj_ref_224_gather_scatter] (array_obj_ref_224_data_0) (a_rc_0_225) 
    $flowthrough 
    // 			a_rc_1 := B_MEM[R][Index] $buffering 2// bits of buffering = 64. 
    //  file .Aa/mvp.opt.aa, line 98
    // B_MEM[R][Index]
    &/ [array_obj_ref_229_index_0_resize] (R) (R_R_227_resized) 
    $flowthrough 
    *[array_obj_ref_229_index_0_scale] (R_R_227_resized array_obj_ref_229_offset_scale_factor_0) (R_R_227_scaled)    $fullrate
    $buffering  $in array_obj_ref_229_index_0_scale R_R_227_resized 2
    $buffering  $in array_obj_ref_229_index_0_scale array_obj_ref_229_offset_scale_factor_0 2
    $buffering  $out array_obj_ref_229_index_0_scale R_R_227_scaled 2
    $delay array_obj_ref_229_index_0_scale 2
    &/ [array_obj_ref_229_index_1_resize] (Index_195) (R_Index_228_resized) 
    $flowthrough 
    &/ [array_obj_ref_229_index_1_rename] (R_Index_228_resized) (R_Index_228_scaled) 
    $flowthrough 
    +[array_obj_ref_229_index_sum_1] (R_Index_228_scaled R_R_227_scaled) (array_obj_ref_229_index_partial_sum_1)    $fullrate
    $buffering  $in array_obj_ref_229_index_sum_1 R_Index_228_scaled 2
    $buffering  $in array_obj_ref_229_index_sum_1 R_R_227_scaled 2
    $buffering  $out array_obj_ref_229_index_sum_1 array_obj_ref_229_index_partial_sum_1 2
    $delay array_obj_ref_229_index_sum_1 2
    &/ [array_obj_ref_229_index_offset] (array_obj_ref_229_index_partial_sum_1) (array_obj_ref_229_final_offset) 
    $flowthrough 
    &/ [array_obj_ref_229_root_address_inst] (array_obj_ref_229_final_offset) (array_obj_ref_229_root_address) 
    $flowthrough 
    &/ [array_obj_ref_229_addr_0] (array_obj_ref_229_root_address) (array_obj_ref_229_word_address_0) 
    $flowthrough 
    $load [array_obj_ref_229_load_0] $from memory_space_1 (array_obj_ref_229_word_address_0) (array_obj_ref_229_data_0) 
    $buffering  $in array_obj_ref_229_load_0 array_obj_ref_229_word_address_0 2
    $buffering  $out array_obj_ref_229_load_0 array_obj_ref_229_data_0 2
    $delay array_obj_ref_229_load_0 5
    &/ [array_obj_ref_229_gather_scatter] (array_obj_ref_229_data_0) (a_rc_1_230) 
    $flowthrough 
    // 			a_rc_2 := C_MEM[R][Index] $buffering 2// bits of buffering = 64. 
    //  file .Aa/mvp.opt.aa, line 99
    // C_MEM[R][Index]
    &/ [array_obj_ref_234_index_0_resize] (R) (R_R_232_resized) 
    $flowthrough 
    *[array_obj_ref_234_index_0_scale] (R_R_232_resized array_obj_ref_234_offset_scale_factor_0) (R_R_232_scaled)    $fullrate
    $buffering  $in array_obj_ref_234_index_0_scale R_R_232_resized 2
    $buffering  $in array_obj_ref_234_index_0_scale array_obj_ref_234_offset_scale_factor_0 2
    $buffering  $out array_obj_ref_234_index_0_scale R_R_232_scaled 2
    $delay array_obj_ref_234_index_0_scale 2
    &/ [array_obj_ref_234_index_1_resize] (Index_195) (R_Index_233_resized) 
    $flowthrough 
    &/ [array_obj_ref_234_index_1_rename] (R_Index_233_resized) (R_Index_233_scaled) 
    $flowthrough 
    +[array_obj_ref_234_index_sum_1] (R_Index_233_scaled R_R_232_scaled) (array_obj_ref_234_index_partial_sum_1)    $fullrate
    $buffering  $in array_obj_ref_234_index_sum_1 R_Index_233_scaled 2
    $buffering  $in array_obj_ref_234_index_sum_1 R_R_232_scaled 2
    $buffering  $out array_obj_ref_234_index_sum_1 array_obj_ref_234_index_partial_sum_1 2
    $delay array_obj_ref_234_index_sum_1 2
    &/ [array_obj_ref_234_index_offset] (array_obj_ref_234_index_partial_sum_1) (array_obj_ref_234_final_offset) 
    $flowthrough 
    &/ [array_obj_ref_234_root_address_inst] (array_obj_ref_234_final_offset) (array_obj_ref_234_root_address) 
    $flowthrough 
    &/ [array_obj_ref_234_addr_0] (array_obj_ref_234_root_address) (array_obj_ref_234_word_address_0) 
    $flowthrough 
    $load [array_obj_ref_234_load_0] $from memory_space_2 (array_obj_ref_234_word_address_0) (array_obj_ref_234_data_0) 
    $buffering  $in array_obj_ref_234_load_0 array_obj_ref_234_word_address_0 2
    $buffering  $out array_obj_ref_234_load_0 array_obj_ref_234_data_0 2
    $delay array_obj_ref_234_load_0 5
    &/ [array_obj_ref_234_gather_scatter] (array_obj_ref_234_data_0) (a_rc_2_235) 
    $flowthrough 
    // 			a_rc_3 := D_MEM[R][Index] $buffering 2// bits of buffering = 64. 
    //  file .Aa/mvp.opt.aa, line 100
    // D_MEM[R][Index]
    &/ [array_obj_ref_239_index_0_resize] (R) (R_R_237_resized) 
    $flowthrough 
    *[array_obj_ref_239_index_0_scale] (R_R_237_resized array_obj_ref_239_offset_scale_factor_0) (R_R_237_scaled)    $fullrate
    $buffering  $in array_obj_ref_239_index_0_scale R_R_237_resized 2
    $buffering  $in array_obj_ref_239_index_0_scale array_obj_ref_239_offset_scale_factor_0 2
    $buffering  $out array_obj_ref_239_index_0_scale R_R_237_scaled 2
    $delay array_obj_ref_239_index_0_scale 2
    &/ [array_obj_ref_239_index_1_resize] (Index_195) (R_Index_238_resized) 
    $flowthrough 
    &/ [array_obj_ref_239_index_1_rename] (R_Index_238_resized) (R_Index_238_scaled) 
    $flowthrough 
    +[array_obj_ref_239_index_sum_1] (R_Index_238_scaled R_R_237_scaled) (array_obj_ref_239_index_partial_sum_1)    $fullrate
    $buffering  $in array_obj_ref_239_index_sum_1 R_Index_238_scaled 2
    $buffering  $in array_obj_ref_239_index_sum_1 R_R_237_scaled 2
    $buffering  $out array_obj_ref_239_index_sum_1 array_obj_ref_239_index_partial_sum_1 2
    $delay array_obj_ref_239_index_sum_1 2
    &/ [array_obj_ref_239_index_offset] (array_obj_ref_239_index_partial_sum_1) (array_obj_ref_239_final_offset) 
    $flowthrough 
    &/ [array_obj_ref_239_root_address_inst] (array_obj_ref_239_final_offset) (array_obj_ref_239_root_address) 
    $flowthrough 
    &/ [array_obj_ref_239_addr_0] (array_obj_ref_239_root_address) (array_obj_ref_239_word_address_0) 
    $flowthrough 
    $load [array_obj_ref_239_load_0] $from memory_space_3 (array_obj_ref_239_word_address_0) (array_obj_ref_239_data_0) 
    $buffering  $in array_obj_ref_239_load_0 array_obj_ref_239_word_address_0 2
    $buffering  $out array_obj_ref_239_load_0 array_obj_ref_239_data_0 2
    $delay array_obj_ref_239_load_0 5
    &/ [array_obj_ref_239_gather_scatter] (array_obj_ref_239_data_0) (a_rc_3_240) 
    $flowthrough 
    // 			xval_0 := x0[Index] $buffering 2// bits of buffering = 64. 
    //  file .Aa/mvp.opt.aa, line 102
    // x0[Index]
    &/ [array_obj_ref_249_index_0_resize] (Index_195) (R_Index_248_resized) 
    $flowthrough 
    &/ [array_obj_ref_249_index_0_rename] (R_Index_248_resized) (R_Index_248_scaled) 
    $flowthrough 
    &/ [array_obj_ref_249_index_offset] (R_Index_248_scaled) (array_obj_ref_249_final_offset) 
    $flowthrough 
    &/ [array_obj_ref_249_root_address_inst] (array_obj_ref_249_final_offset) (array_obj_ref_249_root_address) 
    $flowthrough 
    &/ [array_obj_ref_249_addr_0] (array_obj_ref_249_root_address) (array_obj_ref_249_word_address_0) 
    $flowthrough 
    $load [array_obj_ref_249_load_0] $from memory_space_4 (array_obj_ref_249_word_address_0) (array_obj_ref_249_data_0) 
    $buffering  $in array_obj_ref_249_load_0 array_obj_ref_249_word_address_0 2
    $buffering  $out array_obj_ref_249_load_0 array_obj_ref_249_data_0 2
    $delay array_obj_ref_249_load_0 5
    &/ [array_obj_ref_249_gather_scatter] (array_obj_ref_249_data_0) (xval_0_250) 
    $flowthrough 
    // 			xval_1 := x1[Index] $buffering 2// bits of buffering = 64. 
    //  file .Aa/mvp.opt.aa, line 103
    // x1[Index]
    &/ [array_obj_ref_253_index_0_resize] (Index_195) (R_Index_252_resized) 
    $flowthrough 
    &/ [array_obj_ref_253_index_0_rename] (R_Index_252_resized) (R_Index_252_scaled) 
    $flowthrough 
    &/ [array_obj_ref_253_index_offset] (R_Index_252_scaled) (array_obj_ref_253_final_offset) 
    $flowthrough 
    &/ [array_obj_ref_253_root_address_inst] (array_obj_ref_253_final_offset) (array_obj_ref_253_root_address) 
    $flowthrough 
    &/ [array_obj_ref_253_addr_0] (array_obj_ref_253_root_address) (array_obj_ref_253_word_address_0) 
    $flowthrough 
    $load [array_obj_ref_253_load_0] $from memory_space_5 (array_obj_ref_253_word_address_0) (array_obj_ref_253_data_0) 
    $buffering  $in array_obj_ref_253_load_0 array_obj_ref_253_word_address_0 2
    $buffering  $out array_obj_ref_253_load_0 array_obj_ref_253_data_0 2
    $delay array_obj_ref_253_load_0 5
    &/ [array_obj_ref_253_gather_scatter] (array_obj_ref_253_data_0) (xval_1_254) 
    $flowthrough 
    // 			xval_2 := x2[Index] $buffering 2// bits of buffering = 64. 
    //  file .Aa/mvp.opt.aa, line 104
    // x2[Index]
    &/ [array_obj_ref_257_index_0_resize] (Index_195) (R_Index_256_resized) 
    $flowthrough 
    &/ [array_obj_ref_257_index_0_rename] (R_Index_256_resized) (R_Index_256_scaled) 
    $flowthrough 
    &/ [array_obj_ref_257_index_offset] (R_Index_256_scaled) (array_obj_ref_257_final_offset) 
    $flowthrough 
    &/ [array_obj_ref_257_root_address_inst] (array_obj_ref_257_final_offset) (array_obj_ref_257_root_address) 
    $flowthrough 
    &/ [array_obj_ref_257_addr_0] (array_obj_ref_257_root_address) (array_obj_ref_257_word_address_0) 
    $flowthrough 
    $load [array_obj_ref_257_load_0] $from memory_space_6 (array_obj_ref_257_word_address_0) (array_obj_ref_257_data_0) 
    $buffering  $in array_obj_ref_257_load_0 array_obj_ref_257_word_address_0 2
    $buffering  $out array_obj_ref_257_load_0 array_obj_ref_257_data_0 2
    $delay array_obj_ref_257_load_0 5
    &/ [array_obj_ref_257_gather_scatter] (array_obj_ref_257_data_0) (xval_2_258) 
    $flowthrough 
    // 			xval_3 := x3[Index] $buffering 2// bits of buffering = 64. 
    //  file .Aa/mvp.opt.aa, line 105
    // x3[Index]
    &/ [array_obj_ref_261_index_0_resize] (Index_195) (R_Index_260_resized) 
    $flowthrough 
    &/ [array_obj_ref_261_index_0_rename] (R_Index_260_resized) (R_Index_260_scaled) 
    $flowthrough 
    &/ [array_obj_ref_261_index_offset] (R_Index_260_scaled) (array_obj_ref_261_final_offset) 
    $flowthrough 
    &/ [array_obj_ref_261_root_address_inst] (array_obj_ref_261_final_offset) (array_obj_ref_261_root_address) 
    $flowthrough 
    &/ [array_obj_ref_261_addr_0] (array_obj_ref_261_root_address) (array_obj_ref_261_word_address_0) 
    $flowthrough 
    $load [array_obj_ref_261_load_0] $from memory_space_7 (array_obj_ref_261_word_address_0) (array_obj_ref_261_data_0) 
    $buffering  $in array_obj_ref_261_load_0 array_obj_ref_261_word_address_0 2
    $buffering  $out array_obj_ref_261_load_0 array_obj_ref_261_data_0 2
    $delay array_obj_ref_261_load_0 5
    &/ [array_obj_ref_261_gather_scatter] (array_obj_ref_261_data_0) (xval_3_262) 
    $flowthrough 
    // 			val_0_258_delayed_5_0 := val_0 $buffering 5 $cut_through // bits of buffering = 160. 
    //  file .Aa/mvp.opt.aa, line 107
    # := [W_val_0_258_delayed_5_0_269_inst] (val_0_200) (val_0_258_delayed_5_0_271)  $cut_through    $fullrate
    $buffering  $out W_val_0_258_delayed_5_0_269_inst val_0_258_delayed_5_0_271 5
    // 			$volatile nval_0 := (val_0_258_delayed_5_0 + (a_rc_0 * xval_0)) $buffering 1
    //  file .Aa/mvp.opt.aa, line 108
    // (a_rc_0 * xval_0)
    *[MUL_u32_u32_276_inst] (a_rc_0_225 xval_0_250) (MUL_u32_u32_276_wire)   $flowthrough 
    $delay MUL_u32_u32_276_inst 0
    // (val_0_258_delayed_5_0 + (a_rc_0 * xval_0))
    +[ADD_u32_u32_277_inst] (val_0_258_delayed_5_0_271 MUL_u32_u32_276_wire) (nval_0_278)   $flowthrough 
    $delay ADD_u32_u32_277_inst 0
    // 			val_1_265_delayed_5_0 := val_1 $buffering 5 $cut_through // bits of buffering = 160. 
    //  file .Aa/mvp.opt.aa, line 109
    # := [W_val_1_265_delayed_5_0_279_inst] (val_1_205) (val_1_265_delayed_5_0_281)  $cut_through    $fullrate
    $buffering  $out W_val_1_265_delayed_5_0_279_inst val_1_265_delayed_5_0_281 5
    // 			$volatile nval_1 := (val_1_265_delayed_5_0 + (a_rc_1 * xval_1)) $buffering 1
    //  file .Aa/mvp.opt.aa, line 110
    // (a_rc_1 * xval_1)
    *[MUL_u32_u32_286_inst] (a_rc_1_230 xval_1_254) (MUL_u32_u32_286_wire)   $flowthrough 
    $delay MUL_u32_u32_286_inst 0
    // (val_1_265_delayed_5_0 + (a_rc_1 * xval_1))
    +[ADD_u32_u32_287_inst] (val_1_265_delayed_5_0_281 MUL_u32_u32_286_wire) (nval_1_288)   $flowthrough 
    $delay ADD_u32_u32_287_inst 0
    // 			val_2_272_delayed_5_0 := val_2 $buffering 5 $cut_through // bits of buffering = 160. 
    //  file .Aa/mvp.opt.aa, line 111
    # := [W_val_2_272_delayed_5_0_289_inst] (val_2_210) (val_2_272_delayed_5_0_291)  $cut_through    $fullrate
    $buffering  $out W_val_2_272_delayed_5_0_289_inst val_2_272_delayed_5_0_291 5
    // 			$volatile nval_2 := (val_2_272_delayed_5_0 + (a_rc_2 * xval_2)) $buffering 1
    //  file .Aa/mvp.opt.aa, line 112
    // (a_rc_2 * xval_2)
    *[MUL_u32_u32_296_inst] (a_rc_2_235 xval_2_258) (MUL_u32_u32_296_wire)   $flowthrough 
    $delay MUL_u32_u32_296_inst 0
    // (val_2_272_delayed_5_0 + (a_rc_2 * xval_2))
    +[ADD_u32_u32_297_inst] (val_2_272_delayed_5_0_291 MUL_u32_u32_296_wire) (nval_2_298)   $flowthrough 
    $delay ADD_u32_u32_297_inst 0
    // 			val_3_279_delayed_5_0 := val_3 $buffering 5 $cut_through // bits of buffering = 160. 
    //  file .Aa/mvp.opt.aa, line 113
    # := [W_val_3_279_delayed_5_0_299_inst] (val_3_215) (val_3_279_delayed_5_0_301)  $cut_through    $fullrate
    $buffering  $out W_val_3_279_delayed_5_0_299_inst val_3_279_delayed_5_0_301 5
    // 			$volatile nval_3 := (val_3_279_delayed_5_0 + (a_rc_3 * xval_3)) $buffering 1
    //  file .Aa/mvp.opt.aa, line 114
    // (a_rc_3 * xval_3)
    *[MUL_u32_u32_306_inst] (a_rc_3_240 xval_3_262) (MUL_u32_u32_306_wire)   $flowthrough 
    $delay MUL_u32_u32_306_inst 0
    // (val_3_279_delayed_5_0 + (a_rc_3 * xval_3))
    +[ADD_u32_u32_307_inst] (val_3_279_delayed_5_0_301 MUL_u32_u32_306_wire) (nval_3_308)   $flowthrough 
    $delay ADD_u32_u32_307_inst 0
    // 			nC := (C + 4 ) $buffering 2// bits of buffering = 16. 
    //  file .Aa/mvp.opt.aa, line 116
    // (C + 4 )
    +[ADD_u8_u8_317_inst] (C_190 konst_316_wire_constant) (nC_318)    $fullrate
    $buffering  $out ADD_u8_u8_317_inst nC_318 2
    $delay ADD_u8_u8_317_inst 1
    // 			nIndex := (Index + 1 ) $buffering 2// bits of buffering = 6. 
    //  file .Aa/mvp.opt.aa, line 117
    // (Index + 1 )
    +[ADD_u3_u3_322_inst] (Index_195 konst_321_wire_constant) (nIndex_323)    $fullrate
    $buffering  $out ADD_u3_u3_322_inst nIndex_323 2
    $delay ADD_u3_u3_322_inst 1
    // 	result := (nval_0 + (nval_1 + (nval_2 + nval_3))) $buffering 1// bits of buffering = 32. 
    //  file .Aa/mvp.opt.aa, line 121
    // (nval_2 + nval_3)
    +[ADD_u32_u32_334_inst] (nval_2_298 nval_3_308) (ADD_u32_u32_334_wire)   $flowthrough 
    $delay ADD_u32_u32_334_inst 0
    // (nval_1 + (nval_2 + nval_3))
    +[ADD_u32_u32_335_inst] (nval_1_288 ADD_u32_u32_334_wire) (ADD_u32_u32_335_wire)   $flowthrough 
    $delay ADD_u32_u32_335_inst 0
    // (nval_0 + (nval_1 + (nval_2 + nval_3)))
    +[ADD_u32_u32_336_inst] (nval_0_278 ADD_u32_u32_335_wire) (result)   
    $buffering  $out ADD_u32_u32_336_inst result 1
    $delay ADD_u32_u32_336_inst 1
  }
  // end data-path
  // CP-DP links for do-while  do_while_stmt_188
  //  file .Aa/mvp.opt.aa, line 81
  phi_stmt_190 <=> (branch_block_stmt_187/do_while_stmt_188/do_while_stmt_188_loop_body/phi_stmt_190_loopback_sample_req branch_block_stmt_187/do_while_stmt_188/do_while_stmt_188_loop_body/phi_stmt_190_entry_sample_req) (branch_block_stmt_187/do_while_stmt_188/do_while_stmt_188_loop_body/phi_stmt_190_phi_mux_ack)
  nC_318_192_buf <=> (branch_block_stmt_187/do_while_stmt_188/do_while_stmt_188_loop_body/R_nC_192_Sample/req branch_block_stmt_187/do_while_stmt_188/do_while_stmt_188_loop_body/R_nC_192_Update/req) (branch_block_stmt_187/do_while_stmt_188/do_while_stmt_188_loop_body/R_nC_192_Sample/ack branch_block_stmt_187/do_while_stmt_188/do_while_stmt_188_loop_body/R_nC_192_Update/ack)
  phi_stmt_195 <=> (branch_block_stmt_187/do_while_stmt_188/do_while_stmt_188_loop_body/phi_stmt_195_entry_sample_req branch_block_stmt_187/do_while_stmt_188/do_while_stmt_188_loop_body/phi_stmt_195_loopback_sample_req) (branch_block_stmt_187/do_while_stmt_188/do_while_stmt_188_loop_body/phi_stmt_195_phi_mux_ack)
  nIndex_323_199_buf <=> (branch_block_stmt_187/do_while_stmt_188/do_while_stmt_188_loop_body/R_nIndex_199_Sample/req branch_block_stmt_187/do_while_stmt_188/do_while_stmt_188_loop_body/R_nIndex_199_Update/req) (branch_block_stmt_187/do_while_stmt_188/do_while_stmt_188_loop_body/R_nIndex_199_Sample/ack branch_block_stmt_187/do_while_stmt_188/do_while_stmt_188_loop_body/R_nIndex_199_Update/ack)
  phi_stmt_200 <=> (branch_block_stmt_187/do_while_stmt_188/do_while_stmt_188_loop_body/phi_stmt_200_entry_sample_req branch_block_stmt_187/do_while_stmt_188/do_while_stmt_188_loop_body/phi_stmt_200_loopback_sample_req) (branch_block_stmt_187/do_while_stmt_188/do_while_stmt_188_loop_body/phi_stmt_200_phi_mux_ack)
  nval_0_278_204_buf <=> (branch_block_stmt_187/do_while_stmt_188/do_while_stmt_188_loop_body/R_nval_0_204_Sample/req branch_block_stmt_187/do_while_stmt_188/do_while_stmt_188_loop_body/R_nval_0_204_Update/req) (branch_block_stmt_187/do_while_stmt_188/do_while_stmt_188_loop_body/R_nval_0_204_Sample/ack branch_block_stmt_187/do_while_stmt_188/do_while_stmt_188_loop_body/R_nval_0_204_Update/ack)
  phi_stmt_205 <=> (branch_block_stmt_187/do_while_stmt_188/do_while_stmt_188_loop_body/phi_stmt_205_entry_sample_req branch_block_stmt_187/do_while_stmt_188/do_while_stmt_188_loop_body/phi_stmt_205_loopback_sample_req) (branch_block_stmt_187/do_while_stmt_188/do_while_stmt_188_loop_body/phi_stmt_205_phi_mux_ack)
  nval_1_288_209_buf <=> (branch_block_stmt_187/do_while_stmt_188/do_while_stmt_188_loop_body/R_nval_1_209_Sample/req branch_block_stmt_187/do_while_stmt_188/do_while_stmt_188_loop_body/R_nval_1_209_Update/req) (branch_block_stmt_187/do_while_stmt_188/do_while_stmt_188_loop_body/R_nval_1_209_Sample/ack branch_block_stmt_187/do_while_stmt_188/do_while_stmt_188_loop_body/R_nval_1_209_Update/ack)
  phi_stmt_210 <=> (branch_block_stmt_187/do_while_stmt_188/do_while_stmt_188_loop_body/phi_stmt_210_entry_sample_req branch_block_stmt_187/do_while_stmt_188/do_while_stmt_188_loop_body/phi_stmt_210_loopback_sample_req) (branch_block_stmt_187/do_while_stmt_188/do_while_stmt_188_loop_body/phi_stmt_210_phi_mux_ack)
  nval_2_298_214_buf <=> (branch_block_stmt_187/do_while_stmt_188/do_while_stmt_188_loop_body/R_nval_2_214_Sample/req branch_block_stmt_187/do_while_stmt_188/do_while_stmt_188_loop_body/R_nval_2_214_Update/req) (branch_block_stmt_187/do_while_stmt_188/do_while_stmt_188_loop_body/R_nval_2_214_Sample/ack branch_block_stmt_187/do_while_stmt_188/do_while_stmt_188_loop_body/R_nval_2_214_Update/ack)
  phi_stmt_215 <=> (branch_block_stmt_187/do_while_stmt_188/do_while_stmt_188_loop_body/phi_stmt_215_loopback_sample_req branch_block_stmt_187/do_while_stmt_188/do_while_stmt_188_loop_body/phi_stmt_215_entry_sample_req) (branch_block_stmt_187/do_while_stmt_188/do_while_stmt_188_loop_body/phi_stmt_215_phi_mux_ack)
  nval_3_308_217_buf <=> (branch_block_stmt_187/do_while_stmt_188/do_while_stmt_188_loop_body/R_nval_3_217_Sample/req branch_block_stmt_187/do_while_stmt_188/do_while_stmt_188_loop_body/R_nval_3_217_Update/req) (branch_block_stmt_187/do_while_stmt_188/do_while_stmt_188_loop_body/R_nval_3_217_Sample/ack branch_block_stmt_187/do_while_stmt_188/do_while_stmt_188_loop_body/R_nval_3_217_Update/ack)
  // 			a_rc_0 := A_MEM[R][Index] $buffering 2// bits of buffering = 64. 
  //  file .Aa/mvp.opt.aa, line 97
  // A_MEM[R][Index]
  // R
  array_obj_ref_224_index_0_resize <=> (branch_block_stmt_187/do_while_stmt_188/do_while_stmt_188_loop_body/array_obj_ref_224_index_resize_0/index_resize_req) (branch_block_stmt_187/do_while_stmt_188/do_while_stmt_188_loop_body/array_obj_ref_224_index_resize_0/index_resize_ack)
  array_obj_ref_224_index_0_scale <=> (branch_block_stmt_187/do_while_stmt_188/do_while_stmt_188_loop_body/array_obj_ref_224_index_scale_0_Sample/rr branch_block_stmt_187/do_while_stmt_188/do_while_stmt_188_loop_body/array_obj_ref_224_index_scale_0_Update/cr) (branch_block_stmt_187/do_while_stmt_188/do_while_stmt_188_loop_body/array_obj_ref_224_index_scale_0_Sample/ra branch_block_stmt_187/do_while_stmt_188/do_while_stmt_188_loop_body/array_obj_ref_224_index_scale_0_Update/ca)
  // Index
  array_obj_ref_224_index_1_resize <=> (branch_block_stmt_187/do_while_stmt_188/do_while_stmt_188_loop_body/array_obj_ref_224_index_resize_1/index_resize_req) (branch_block_stmt_187/do_while_stmt_188/do_while_stmt_188_loop_body/array_obj_ref_224_index_resize_1/index_resize_ack)
  array_obj_ref_224_index_1_rename <=> (branch_block_stmt_187/do_while_stmt_188/do_while_stmt_188_loop_body/array_obj_ref_224_index_scale_1/scale_rename_req) (branch_block_stmt_187/do_while_stmt_188/do_while_stmt_188_loop_body/array_obj_ref_224_index_scale_1/scale_rename_ack)
  array_obj_ref_224_index_sum_1 <=> (branch_block_stmt_187/do_while_stmt_188/do_while_stmt_188_loop_body/array_obj_ref_224_partial_sum_1_Sample/rr branch_block_stmt_187/do_while_stmt_188/do_while_stmt_188_loop_body/array_obj_ref_224_partial_sum_1_Update/cr) (branch_block_stmt_187/do_while_stmt_188/do_while_stmt_188_loop_body/array_obj_ref_224_partial_sum_1_Sample/ra branch_block_stmt_187/do_while_stmt_188/do_while_stmt_188_loop_body/array_obj_ref_224_partial_sum_1_Update/ca)
  array_obj_ref_224_index_offset <=> (branch_block_stmt_187/do_while_stmt_188/do_while_stmt_188_loop_body/array_obj_ref_224_final_index_sum_regn/req) (branch_block_stmt_187/do_while_stmt_188/do_while_stmt_188_loop_body/array_obj_ref_224_final_index_sum_regn/ack)
  array_obj_ref_224_root_address_inst <=> (branch_block_stmt_187/do_while_stmt_188/do_while_stmt_188_loop_body/array_obj_ref_224_base_plus_offset/sum_rename_req) (branch_block_stmt_187/do_while_stmt_188/do_while_stmt_188_loop_body/array_obj_ref_224_base_plus_offset/sum_rename_ack)
  array_obj_ref_224_addr_0 <=> (branch_block_stmt_187/do_while_stmt_188/do_while_stmt_188_loop_body/array_obj_ref_224_word_addrgen/root_register_req) (branch_block_stmt_187/do_while_stmt_188/do_while_stmt_188_loop_body/array_obj_ref_224_word_addrgen/root_register_ack)
  array_obj_ref_224_gather_scatter <=> (branch_block_stmt_187/do_while_stmt_188/do_while_stmt_188_loop_body/array_obj_ref_224_Update/array_obj_ref_224_Merge/merge_req) (branch_block_stmt_187/do_while_stmt_188/do_while_stmt_188_loop_body/array_obj_ref_224_Update/array_obj_ref_224_Merge/merge_ack)
  array_obj_ref_224_load_0 <=> (branch_block_stmt_187/do_while_stmt_188/do_while_stmt_188_loop_body/array_obj_ref_224_Sample/word_access_start/word_0/rr branch_block_stmt_187/do_while_stmt_188/do_while_stmt_188_loop_body/array_obj_ref_224_Update/word_access_complete/word_0/cr) (branch_block_stmt_187/do_while_stmt_188/do_while_stmt_188_loop_body/array_obj_ref_224_Sample/word_access_start/word_0/ra branch_block_stmt_187/do_while_stmt_188/do_while_stmt_188_loop_body/array_obj_ref_224_Update/word_access_complete/word_0/ca)
  // 			a_rc_1 := B_MEM[R][Index] $buffering 2// bits of buffering = 64. 
  //  file .Aa/mvp.opt.aa, line 98
  // B_MEM[R][Index]
  // R
  array_obj_ref_229_index_0_resize <=> (branch_block_stmt_187/do_while_stmt_188/do_while_stmt_188_loop_body/array_obj_ref_229_index_resize_0/index_resize_req) (branch_block_stmt_187/do_while_stmt_188/do_while_stmt_188_loop_body/array_obj_ref_229_index_resize_0/index_resize_ack)
  array_obj_ref_229_index_0_scale <=> (branch_block_stmt_187/do_while_stmt_188/do_while_stmt_188_loop_body/array_obj_ref_229_index_scale_0_Sample/rr branch_block_stmt_187/do_while_stmt_188/do_while_stmt_188_loop_body/array_obj_ref_229_index_scale_0_Update/cr) (branch_block_stmt_187/do_while_stmt_188/do_while_stmt_188_loop_body/array_obj_ref_229_index_scale_0_Sample/ra branch_block_stmt_187/do_while_stmt_188/do_while_stmt_188_loop_body/array_obj_ref_229_index_scale_0_Update/ca)
  // Index
  array_obj_ref_229_index_1_resize <=> (branch_block_stmt_187/do_while_stmt_188/do_while_stmt_188_loop_body/array_obj_ref_229_index_resize_1/index_resize_req) (branch_block_stmt_187/do_while_stmt_188/do_while_stmt_188_loop_body/array_obj_ref_229_index_resize_1/index_resize_ack)
  array_obj_ref_229_index_1_rename <=> (branch_block_stmt_187/do_while_stmt_188/do_while_stmt_188_loop_body/array_obj_ref_229_index_scale_1/scale_rename_req) (branch_block_stmt_187/do_while_stmt_188/do_while_stmt_188_loop_body/array_obj_ref_229_index_scale_1/scale_rename_ack)
  array_obj_ref_229_index_sum_1 <=> (branch_block_stmt_187/do_while_stmt_188/do_while_stmt_188_loop_body/array_obj_ref_229_partial_sum_1_Sample/rr branch_block_stmt_187/do_while_stmt_188/do_while_stmt_188_loop_body/array_obj_ref_229_partial_sum_1_Update/cr) (branch_block_stmt_187/do_while_stmt_188/do_while_stmt_188_loop_body/array_obj_ref_229_partial_sum_1_Sample/ra branch_block_stmt_187/do_while_stmt_188/do_while_stmt_188_loop_body/array_obj_ref_229_partial_sum_1_Update/ca)
  array_obj_ref_229_index_offset <=> (branch_block_stmt_187/do_while_stmt_188/do_while_stmt_188_loop_body/array_obj_ref_229_final_index_sum_regn/req) (branch_block_stmt_187/do_while_stmt_188/do_while_stmt_188_loop_body/array_obj_ref_229_final_index_sum_regn/ack)
  array_obj_ref_229_root_address_inst <=> (branch_block_stmt_187/do_while_stmt_188/do_while_stmt_188_loop_body/array_obj_ref_229_base_plus_offset/sum_rename_req) (branch_block_stmt_187/do_while_stmt_188/do_while_stmt_188_loop_body/array_obj_ref_229_base_plus_offset/sum_rename_ack)
  array_obj_ref_229_addr_0 <=> (branch_block_stmt_187/do_while_stmt_188/do_while_stmt_188_loop_body/array_obj_ref_229_word_addrgen/root_register_req) (branch_block_stmt_187/do_while_stmt_188/do_while_stmt_188_loop_body/array_obj_ref_229_word_addrgen/root_register_ack)
  array_obj_ref_229_gather_scatter <=> (branch_block_stmt_187/do_while_stmt_188/do_while_stmt_188_loop_body/array_obj_ref_229_Update/array_obj_ref_229_Merge/merge_req) (branch_block_stmt_187/do_while_stmt_188/do_while_stmt_188_loop_body/array_obj_ref_229_Update/array_obj_ref_229_Merge/merge_ack)
  array_obj_ref_229_load_0 <=> (branch_block_stmt_187/do_while_stmt_188/do_while_stmt_188_loop_body/array_obj_ref_229_Sample/word_access_start/word_0/rr branch_block_stmt_187/do_while_stmt_188/do_while_stmt_188_loop_body/array_obj_ref_229_Update/word_access_complete/word_0/cr) (branch_block_stmt_187/do_while_stmt_188/do_while_stmt_188_loop_body/array_obj_ref_229_Sample/word_access_start/word_0/ra branch_block_stmt_187/do_while_stmt_188/do_while_stmt_188_loop_body/array_obj_ref_229_Update/word_access_complete/word_0/ca)
  // 			a_rc_2 := C_MEM[R][Index] $buffering 2// bits of buffering = 64. 
  //  file .Aa/mvp.opt.aa, line 99
  // C_MEM[R][Index]
  // R
  array_obj_ref_234_index_0_resize <=> (branch_block_stmt_187/do_while_stmt_188/do_while_stmt_188_loop_body/array_obj_ref_234_index_resize_0/index_resize_req) (branch_block_stmt_187/do_while_stmt_188/do_while_stmt_188_loop_body/array_obj_ref_234_index_resize_0/index_resize_ack)
  array_obj_ref_234_index_0_scale <=> (branch_block_stmt_187/do_while_stmt_188/do_while_stmt_188_loop_body/array_obj_ref_234_index_scale_0_Sample/rr branch_block_stmt_187/do_while_stmt_188/do_while_stmt_188_loop_body/array_obj_ref_234_index_scale_0_Update/cr) (branch_block_stmt_187/do_while_stmt_188/do_while_stmt_188_loop_body/array_obj_ref_234_index_scale_0_Sample/ra branch_block_stmt_187/do_while_stmt_188/do_while_stmt_188_loop_body/array_obj_ref_234_index_scale_0_Update/ca)
  // Index
  array_obj_ref_234_index_1_resize <=> (branch_block_stmt_187/do_while_stmt_188/do_while_stmt_188_loop_body/array_obj_ref_234_index_resize_1/index_resize_req) (branch_block_stmt_187/do_while_stmt_188/do_while_stmt_188_loop_body/array_obj_ref_234_index_resize_1/index_resize_ack)
  array_obj_ref_234_index_1_rename <=> (branch_block_stmt_187/do_while_stmt_188/do_while_stmt_188_loop_body/array_obj_ref_234_index_scale_1/scale_rename_req) (branch_block_stmt_187/do_while_stmt_188/do_while_stmt_188_loop_body/array_obj_ref_234_index_scale_1/scale_rename_ack)
  array_obj_ref_234_index_sum_1 <=> (branch_block_stmt_187/do_while_stmt_188/do_while_stmt_188_loop_body/array_obj_ref_234_partial_sum_1_Sample/rr branch_block_stmt_187/do_while_stmt_188/do_while_stmt_188_loop_body/array_obj_ref_234_partial_sum_1_Update/cr) (branch_block_stmt_187/do_while_stmt_188/do_while_stmt_188_loop_body/array_obj_ref_234_partial_sum_1_Sample/ra branch_block_stmt_187/do_while_stmt_188/do_while_stmt_188_loop_body/array_obj_ref_234_partial_sum_1_Update/ca)
  array_obj_ref_234_index_offset <=> (branch_block_stmt_187/do_while_stmt_188/do_while_stmt_188_loop_body/array_obj_ref_234_final_index_sum_regn/req) (branch_block_stmt_187/do_while_stmt_188/do_while_stmt_188_loop_body/array_obj_ref_234_final_index_sum_regn/ack)
  array_obj_ref_234_root_address_inst <=> (branch_block_stmt_187/do_while_stmt_188/do_while_stmt_188_loop_body/array_obj_ref_234_base_plus_offset/sum_rename_req) (branch_block_stmt_187/do_while_stmt_188/do_while_stmt_188_loop_body/array_obj_ref_234_base_plus_offset/sum_rename_ack)
  array_obj_ref_234_addr_0 <=> (branch_block_stmt_187/do_while_stmt_188/do_while_stmt_188_loop_body/array_obj_ref_234_word_addrgen/root_register_req) (branch_block_stmt_187/do_while_stmt_188/do_while_stmt_188_loop_body/array_obj_ref_234_word_addrgen/root_register_ack)
  array_obj_ref_234_gather_scatter <=> (branch_block_stmt_187/do_while_stmt_188/do_while_stmt_188_loop_body/array_obj_ref_234_Update/array_obj_ref_234_Merge/merge_req) (branch_block_stmt_187/do_while_stmt_188/do_while_stmt_188_loop_body/array_obj_ref_234_Update/array_obj_ref_234_Merge/merge_ack)
  array_obj_ref_234_load_0 <=> (branch_block_stmt_187/do_while_stmt_188/do_while_stmt_188_loop_body/array_obj_ref_234_Sample/word_access_start/word_0/rr branch_block_stmt_187/do_while_stmt_188/do_while_stmt_188_loop_body/array_obj_ref_234_Update/word_access_complete/word_0/cr) (branch_block_stmt_187/do_while_stmt_188/do_while_stmt_188_loop_body/array_obj_ref_234_Sample/word_access_start/word_0/ra branch_block_stmt_187/do_while_stmt_188/do_while_stmt_188_loop_body/array_obj_ref_234_Update/word_access_complete/word_0/ca)
  // 			a_rc_3 := D_MEM[R][Index] $buffering 2// bits of buffering = 64. 
  //  file .Aa/mvp.opt.aa, line 100
  // D_MEM[R][Index]
  // R
  array_obj_ref_239_index_0_resize <=> (branch_block_stmt_187/do_while_stmt_188/do_while_stmt_188_loop_body/array_obj_ref_239_index_resize_0/index_resize_req) (branch_block_stmt_187/do_while_stmt_188/do_while_stmt_188_loop_body/array_obj_ref_239_index_resize_0/index_resize_ack)
  array_obj_ref_239_index_0_scale <=> (branch_block_stmt_187/do_while_stmt_188/do_while_stmt_188_loop_body/array_obj_ref_239_index_scale_0_Sample/rr branch_block_stmt_187/do_while_stmt_188/do_while_stmt_188_loop_body/array_obj_ref_239_index_scale_0_Update/cr) (branch_block_stmt_187/do_while_stmt_188/do_while_stmt_188_loop_body/array_obj_ref_239_index_scale_0_Sample/ra branch_block_stmt_187/do_while_stmt_188/do_while_stmt_188_loop_body/array_obj_ref_239_index_scale_0_Update/ca)
  // Index
  array_obj_ref_239_index_1_resize <=> (branch_block_stmt_187/do_while_stmt_188/do_while_stmt_188_loop_body/array_obj_ref_239_index_resize_1/index_resize_req) (branch_block_stmt_187/do_while_stmt_188/do_while_stmt_188_loop_body/array_obj_ref_239_index_resize_1/index_resize_ack)
  array_obj_ref_239_index_1_rename <=> (branch_block_stmt_187/do_while_stmt_188/do_while_stmt_188_loop_body/array_obj_ref_239_index_scale_1/scale_rename_req) (branch_block_stmt_187/do_while_stmt_188/do_while_stmt_188_loop_body/array_obj_ref_239_index_scale_1/scale_rename_ack)
  array_obj_ref_239_index_sum_1 <=> (branch_block_stmt_187/do_while_stmt_188/do_while_stmt_188_loop_body/array_obj_ref_239_partial_sum_1_Sample/rr branch_block_stmt_187/do_while_stmt_188/do_while_stmt_188_loop_body/array_obj_ref_239_partial_sum_1_Update/cr) (branch_block_stmt_187/do_while_stmt_188/do_while_stmt_188_loop_body/array_obj_ref_239_partial_sum_1_Sample/ra branch_block_stmt_187/do_while_stmt_188/do_while_stmt_188_loop_body/array_obj_ref_239_partial_sum_1_Update/ca)
  array_obj_ref_239_index_offset <=> (branch_block_stmt_187/do_while_stmt_188/do_while_stmt_188_loop_body/array_obj_ref_239_final_index_sum_regn/req) (branch_block_stmt_187/do_while_stmt_188/do_while_stmt_188_loop_body/array_obj_ref_239_final_index_sum_regn/ack)
  array_obj_ref_239_root_address_inst <=> (branch_block_stmt_187/do_while_stmt_188/do_while_stmt_188_loop_body/array_obj_ref_239_base_plus_offset/sum_rename_req) (branch_block_stmt_187/do_while_stmt_188/do_while_stmt_188_loop_body/array_obj_ref_239_base_plus_offset/sum_rename_ack)
  array_obj_ref_239_addr_0 <=> (branch_block_stmt_187/do_while_stmt_188/do_while_stmt_188_loop_body/array_obj_ref_239_word_addrgen/root_register_req) (branch_block_stmt_187/do_while_stmt_188/do_while_stmt_188_loop_body/array_obj_ref_239_word_addrgen/root_register_ack)
  array_obj_ref_239_gather_scatter <=> (branch_block_stmt_187/do_while_stmt_188/do_while_stmt_188_loop_body/array_obj_ref_239_Update/array_obj_ref_239_Merge/merge_req) (branch_block_stmt_187/do_while_stmt_188/do_while_stmt_188_loop_body/array_obj_ref_239_Update/array_obj_ref_239_Merge/merge_ack)
  array_obj_ref_239_load_0 <=> (branch_block_stmt_187/do_while_stmt_188/do_while_stmt_188_loop_body/array_obj_ref_239_Sample/word_access_start/word_0/rr branch_block_stmt_187/do_while_stmt_188/do_while_stmt_188_loop_body/array_obj_ref_239_Update/word_access_complete/word_0/cr) (branch_block_stmt_187/do_while_stmt_188/do_while_stmt_188_loop_body/array_obj_ref_239_Sample/word_access_start/word_0/ra branch_block_stmt_187/do_while_stmt_188/do_while_stmt_188_loop_body/array_obj_ref_239_Update/word_access_complete/word_0/ca)
  // 			xval_0 := x0[Index] $buffering 2// bits of buffering = 64. 
  //  file .Aa/mvp.opt.aa, line 102
  // x0[Index]
  // Index
  array_obj_ref_249_index_0_resize <=> (branch_block_stmt_187/do_while_stmt_188/do_while_stmt_188_loop_body/array_obj_ref_249_index_resize_0/index_resize_req) (branch_block_stmt_187/do_while_stmt_188/do_while_stmt_188_loop_body/array_obj_ref_249_index_resize_0/index_resize_ack)
  array_obj_ref_249_index_0_rename <=> (branch_block_stmt_187/do_while_stmt_188/do_while_stmt_188_loop_body/array_obj_ref_249_index_scale_0/scale_rename_req) (branch_block_stmt_187/do_while_stmt_188/do_while_stmt_188_loop_body/array_obj_ref_249_index_scale_0/scale_rename_ack)
  array_obj_ref_249_index_offset <=> (branch_block_stmt_187/do_while_stmt_188/do_while_stmt_188_loop_body/array_obj_ref_249_final_index_sum_regn/req) (branch_block_stmt_187/do_while_stmt_188/do_while_stmt_188_loop_body/array_obj_ref_249_final_index_sum_regn/ack)
  array_obj_ref_249_root_address_inst <=> (branch_block_stmt_187/do_while_stmt_188/do_while_stmt_188_loop_body/array_obj_ref_249_base_plus_offset/sum_rename_req) (branch_block_stmt_187/do_while_stmt_188/do_while_stmt_188_loop_body/array_obj_ref_249_base_plus_offset/sum_rename_ack)
  array_obj_ref_249_addr_0 <=> (branch_block_stmt_187/do_while_stmt_188/do_while_stmt_188_loop_body/array_obj_ref_249_word_addrgen/root_register_req) (branch_block_stmt_187/do_while_stmt_188/do_while_stmt_188_loop_body/array_obj_ref_249_word_addrgen/root_register_ack)
  array_obj_ref_249_gather_scatter <=> (branch_block_stmt_187/do_while_stmt_188/do_while_stmt_188_loop_body/array_obj_ref_249_Update/array_obj_ref_249_Merge/merge_req) (branch_block_stmt_187/do_while_stmt_188/do_while_stmt_188_loop_body/array_obj_ref_249_Update/array_obj_ref_249_Merge/merge_ack)
  array_obj_ref_249_load_0 <=> (branch_block_stmt_187/do_while_stmt_188/do_while_stmt_188_loop_body/array_obj_ref_249_Sample/word_access_start/word_0/rr branch_block_stmt_187/do_while_stmt_188/do_while_stmt_188_loop_body/array_obj_ref_249_Update/word_access_complete/word_0/cr) (branch_block_stmt_187/do_while_stmt_188/do_while_stmt_188_loop_body/array_obj_ref_249_Sample/word_access_start/word_0/ra branch_block_stmt_187/do_while_stmt_188/do_while_stmt_188_loop_body/array_obj_ref_249_Update/word_access_complete/word_0/ca)
  // 			xval_1 := x1[Index] $buffering 2// bits of buffering = 64. 
  //  file .Aa/mvp.opt.aa, line 103
  // x1[Index]
  // Index
  array_obj_ref_253_index_0_resize <=> (branch_block_stmt_187/do_while_stmt_188/do_while_stmt_188_loop_body/array_obj_ref_253_index_resize_0/index_resize_req) (branch_block_stmt_187/do_while_stmt_188/do_while_stmt_188_loop_body/array_obj_ref_253_index_resize_0/index_resize_ack)
  array_obj_ref_253_index_0_rename <=> (branch_block_stmt_187/do_while_stmt_188/do_while_stmt_188_loop_body/array_obj_ref_253_index_scale_0/scale_rename_req) (branch_block_stmt_187/do_while_stmt_188/do_while_stmt_188_loop_body/array_obj_ref_253_index_scale_0/scale_rename_ack)
  array_obj_ref_253_index_offset <=> (branch_block_stmt_187/do_while_stmt_188/do_while_stmt_188_loop_body/array_obj_ref_253_final_index_sum_regn/req) (branch_block_stmt_187/do_while_stmt_188/do_while_stmt_188_loop_body/array_obj_ref_253_final_index_sum_regn/ack)
  array_obj_ref_253_root_address_inst <=> (branch_block_stmt_187/do_while_stmt_188/do_while_stmt_188_loop_body/array_obj_ref_253_base_plus_offset/sum_rename_req) (branch_block_stmt_187/do_while_stmt_188/do_while_stmt_188_loop_body/array_obj_ref_253_base_plus_offset/sum_rename_ack)
  array_obj_ref_253_addr_0 <=> (branch_block_stmt_187/do_while_stmt_188/do_while_stmt_188_loop_body/array_obj_ref_253_word_addrgen/root_register_req) (branch_block_stmt_187/do_while_stmt_188/do_while_stmt_188_loop_body/array_obj_ref_253_word_addrgen/root_register_ack)
  array_obj_ref_253_gather_scatter <=> (branch_block_stmt_187/do_while_stmt_188/do_while_stmt_188_loop_body/array_obj_ref_253_Update/array_obj_ref_253_Merge/merge_req) (branch_block_stmt_187/do_while_stmt_188/do_while_stmt_188_loop_body/array_obj_ref_253_Update/array_obj_ref_253_Merge/merge_ack)
  array_obj_ref_253_load_0 <=> (branch_block_stmt_187/do_while_stmt_188/do_while_stmt_188_loop_body/array_obj_ref_253_Sample/word_access_start/word_0/rr branch_block_stmt_187/do_while_stmt_188/do_while_stmt_188_loop_body/array_obj_ref_253_Update/word_access_complete/word_0/cr) (branch_block_stmt_187/do_while_stmt_188/do_while_stmt_188_loop_body/array_obj_ref_253_Sample/word_access_start/word_0/ra branch_block_stmt_187/do_while_stmt_188/do_while_stmt_188_loop_body/array_obj_ref_253_Update/word_access_complete/word_0/ca)
  // 			xval_2 := x2[Index] $buffering 2// bits of buffering = 64. 
  //  file .Aa/mvp.opt.aa, line 104
  // x2[Index]
  // Index
  array_obj_ref_257_index_0_resize <=> (branch_block_stmt_187/do_while_stmt_188/do_while_stmt_188_loop_body/array_obj_ref_257_index_resize_0/index_resize_req) (branch_block_stmt_187/do_while_stmt_188/do_while_stmt_188_loop_body/array_obj_ref_257_index_resize_0/index_resize_ack)
  array_obj_ref_257_index_0_rename <=> (branch_block_stmt_187/do_while_stmt_188/do_while_stmt_188_loop_body/array_obj_ref_257_index_scale_0/scale_rename_req) (branch_block_stmt_187/do_while_stmt_188/do_while_stmt_188_loop_body/array_obj_ref_257_index_scale_0/scale_rename_ack)
  array_obj_ref_257_index_offset <=> (branch_block_stmt_187/do_while_stmt_188/do_while_stmt_188_loop_body/array_obj_ref_257_final_index_sum_regn/req) (branch_block_stmt_187/do_while_stmt_188/do_while_stmt_188_loop_body/array_obj_ref_257_final_index_sum_regn/ack)
  array_obj_ref_257_root_address_inst <=> (branch_block_stmt_187/do_while_stmt_188/do_while_stmt_188_loop_body/array_obj_ref_257_base_plus_offset/sum_rename_req) (branch_block_stmt_187/do_while_stmt_188/do_while_stmt_188_loop_body/array_obj_ref_257_base_plus_offset/sum_rename_ack)
  array_obj_ref_257_addr_0 <=> (branch_block_stmt_187/do_while_stmt_188/do_while_stmt_188_loop_body/array_obj_ref_257_word_addrgen/root_register_req) (branch_block_stmt_187/do_while_stmt_188/do_while_stmt_188_loop_body/array_obj_ref_257_word_addrgen/root_register_ack)
  array_obj_ref_257_gather_scatter <=> (branch_block_stmt_187/do_while_stmt_188/do_while_stmt_188_loop_body/array_obj_ref_257_Update/array_obj_ref_257_Merge/merge_req) (branch_block_stmt_187/do_while_stmt_188/do_while_stmt_188_loop_body/array_obj_ref_257_Update/array_obj_ref_257_Merge/merge_ack)
  array_obj_ref_257_load_0 <=> (branch_block_stmt_187/do_while_stmt_188/do_while_stmt_188_loop_body/array_obj_ref_257_Sample/word_access_start/word_0/rr branch_block_stmt_187/do_while_stmt_188/do_while_stmt_188_loop_body/array_obj_ref_257_Update/word_access_complete/word_0/cr) (branch_block_stmt_187/do_while_stmt_188/do_while_stmt_188_loop_body/array_obj_ref_257_Sample/word_access_start/word_0/ra branch_block_stmt_187/do_while_stmt_188/do_while_stmt_188_loop_body/array_obj_ref_257_Update/word_access_complete/word_0/ca)
  // 			xval_3 := x3[Index] $buffering 2// bits of buffering = 64. 
  //  file .Aa/mvp.opt.aa, line 105
  // x3[Index]
  // Index
  array_obj_ref_261_index_0_resize <=> (branch_block_stmt_187/do_while_stmt_188/do_while_stmt_188_loop_body/array_obj_ref_261_index_resize_0/index_resize_req) (branch_block_stmt_187/do_while_stmt_188/do_while_stmt_188_loop_body/array_obj_ref_261_index_resize_0/index_resize_ack)
  array_obj_ref_261_index_0_rename <=> (branch_block_stmt_187/do_while_stmt_188/do_while_stmt_188_loop_body/array_obj_ref_261_index_scale_0/scale_rename_req) (branch_block_stmt_187/do_while_stmt_188/do_while_stmt_188_loop_body/array_obj_ref_261_index_scale_0/scale_rename_ack)
  array_obj_ref_261_index_offset <=> (branch_block_stmt_187/do_while_stmt_188/do_while_stmt_188_loop_body/array_obj_ref_261_final_index_sum_regn/req) (branch_block_stmt_187/do_while_stmt_188/do_while_stmt_188_loop_body/array_obj_ref_261_final_index_sum_regn/ack)
  array_obj_ref_261_root_address_inst <=> (branch_block_stmt_187/do_while_stmt_188/do_while_stmt_188_loop_body/array_obj_ref_261_base_plus_offset/sum_rename_req) (branch_block_stmt_187/do_while_stmt_188/do_while_stmt_188_loop_body/array_obj_ref_261_base_plus_offset/sum_rename_ack)
  array_obj_ref_261_addr_0 <=> (branch_block_stmt_187/do_while_stmt_188/do_while_stmt_188_loop_body/array_obj_ref_261_word_addrgen/root_register_req) (branch_block_stmt_187/do_while_stmt_188/do_while_stmt_188_loop_body/array_obj_ref_261_word_addrgen/root_register_ack)
  array_obj_ref_261_gather_scatter <=> (branch_block_stmt_187/do_while_stmt_188/do_while_stmt_188_loop_body/array_obj_ref_261_Update/array_obj_ref_261_Merge/merge_req) (branch_block_stmt_187/do_while_stmt_188/do_while_stmt_188_loop_body/array_obj_ref_261_Update/array_obj_ref_261_Merge/merge_ack)
  array_obj_ref_261_load_0 <=> (branch_block_stmt_187/do_while_stmt_188/do_while_stmt_188_loop_body/array_obj_ref_261_Sample/word_access_start/word_0/rr branch_block_stmt_187/do_while_stmt_188/do_while_stmt_188_loop_body/array_obj_ref_261_Update/word_access_complete/word_0/cr) (branch_block_stmt_187/do_while_stmt_188/do_while_stmt_188_loop_body/array_obj_ref_261_Sample/word_access_start/word_0/ra branch_block_stmt_187/do_while_stmt_188/do_while_stmt_188_loop_body/array_obj_ref_261_Update/word_access_complete/word_0/ca)
  // 			val_0_258_delayed_5_0 := val_0 $buffering 5 $cut_through // bits of buffering = 160. 
  //  file .Aa/mvp.opt.aa, line 107
  // val_0
  W_val_0_258_delayed_5_0_269_inst <=> (branch_block_stmt_187/do_while_stmt_188/do_while_stmt_188_loop_body/assign_stmt_271_Sample/req branch_block_stmt_187/do_while_stmt_188/do_while_stmt_188_loop_body/assign_stmt_271_Update/req) (branch_block_stmt_187/do_while_stmt_188/do_while_stmt_188_loop_body/assign_stmt_271_Sample/ack branch_block_stmt_187/do_while_stmt_188/do_while_stmt_188_loop_body/assign_stmt_271_Update/ack)
  // 			$volatile nval_0 := (val_0_258_delayed_5_0 + (a_rc_0 * xval_0)) $buffering 1
  //  file .Aa/mvp.opt.aa, line 108
  // (val_0_258_delayed_5_0 + (a_rc_0 * xval_0))
  // val_0_258_delayed_5_0
  // (a_rc_0 * xval_0)
  // a_rc_0
  // xval_0
  // 			val_1_265_delayed_5_0 := val_1 $buffering 5 $cut_through // bits of buffering = 160. 
  //  file .Aa/mvp.opt.aa, line 109
  // val_1
  W_val_1_265_delayed_5_0_279_inst <=> (branch_block_stmt_187/do_while_stmt_188/do_while_stmt_188_loop_body/assign_stmt_281_Sample/req branch_block_stmt_187/do_while_stmt_188/do_while_stmt_188_loop_body/assign_stmt_281_Update/req) (branch_block_stmt_187/do_while_stmt_188/do_while_stmt_188_loop_body/assign_stmt_281_Sample/ack branch_block_stmt_187/do_while_stmt_188/do_while_stmt_188_loop_body/assign_stmt_281_Update/ack)
  // 			$volatile nval_1 := (val_1_265_delayed_5_0 + (a_rc_1 * xval_1)) $buffering 1
  //  file .Aa/mvp.opt.aa, line 110
  // (val_1_265_delayed_5_0 + (a_rc_1 * xval_1))
  // val_1_265_delayed_5_0
  // (a_rc_1 * xval_1)
  // a_rc_1
  // xval_1
  // 			val_2_272_delayed_5_0 := val_2 $buffering 5 $cut_through // bits of buffering = 160. 
  //  file .Aa/mvp.opt.aa, line 111
  // val_2
  W_val_2_272_delayed_5_0_289_inst <=> (branch_block_stmt_187/do_while_stmt_188/do_while_stmt_188_loop_body/assign_stmt_291_Sample/req branch_block_stmt_187/do_while_stmt_188/do_while_stmt_188_loop_body/assign_stmt_291_Update/req) (branch_block_stmt_187/do_while_stmt_188/do_while_stmt_188_loop_body/assign_stmt_291_Sample/ack branch_block_stmt_187/do_while_stmt_188/do_while_stmt_188_loop_body/assign_stmt_291_Update/ack)
  // 			$volatile nval_2 := (val_2_272_delayed_5_0 + (a_rc_2 * xval_2)) $buffering 1
  //  file .Aa/mvp.opt.aa, line 112
  // (val_2_272_delayed_5_0 + (a_rc_2 * xval_2))
  // val_2_272_delayed_5_0
  // (a_rc_2 * xval_2)
  // a_rc_2
  // xval_2
  // 			val_3_279_delayed_5_0 := val_3 $buffering 5 $cut_through // bits of buffering = 160. 
  //  file .Aa/mvp.opt.aa, line 113
  // val_3
  W_val_3_279_delayed_5_0_299_inst <=> (branch_block_stmt_187/do_while_stmt_188/do_while_stmt_188_loop_body/assign_stmt_301_Sample/req branch_block_stmt_187/do_while_stmt_188/do_while_stmt_188_loop_body/assign_stmt_301_Update/req) (branch_block_stmt_187/do_while_stmt_188/do_while_stmt_188_loop_body/assign_stmt_301_Sample/ack branch_block_stmt_187/do_while_stmt_188/do_while_stmt_188_loop_body/assign_stmt_301_Update/ack)
  // 			$volatile nval_3 := (val_3_279_delayed_5_0 + (a_rc_3 * xval_3)) $buffering 1
  //  file .Aa/mvp.opt.aa, line 114
  // (val_3_279_delayed_5_0 + (a_rc_3 * xval_3))
  // val_3_279_delayed_5_0
  // (a_rc_3 * xval_3)
  // a_rc_3
  // xval_3
  // 			nC := (C + 4 ) $buffering 2// bits of buffering = 16. 
  //  file .Aa/mvp.opt.aa, line 116
  // (C + 4 )
  // C
  ADD_u8_u8_317_inst <=> (branch_block_stmt_187/do_while_stmt_188/do_while_stmt_188_loop_body/ADD_u8_u8_317_Sample/rr branch_block_stmt_187/do_while_stmt_188/do_while_stmt_188_loop_body/ADD_u8_u8_317_Update/cr) (branch_block_stmt_187/do_while_stmt_188/do_while_stmt_188_loop_body/ADD_u8_u8_317_Sample/ra branch_block_stmt_187/do_while_stmt_188/do_while_stmt_188_loop_body/ADD_u8_u8_317_Update/ca)
  // 			nIndex := (Index + 1 ) $buffering 2// bits of buffering = 6. 
  //  file .Aa/mvp.opt.aa, line 117
  // (Index + 1 )
  // Index
  ADD_u3_u3_322_inst <=> (branch_block_stmt_187/do_while_stmt_188/do_while_stmt_188_loop_body/ADD_u3_u3_322_Sample/rr branch_block_stmt_187/do_while_stmt_188/do_while_stmt_188_loop_body/ADD_u3_u3_322_Update/cr) (branch_block_stmt_187/do_while_stmt_188/do_while_stmt_188_loop_body/ADD_u3_u3_322_Sample/ra branch_block_stmt_187/do_while_stmt_188/do_while_stmt_188_loop_body/ADD_u3_u3_322_Update/ca)
  // (nC < 32 )
  // nC
  do_while_stmt_188_branch <=> (branch_block_stmt_187/do_while_stmt_188/do_while_stmt_188_loop_body/condition_evaluated) (branch_block_stmt_187/do_while_stmt_188/loop_exit/ack branch_block_stmt_187/do_while_stmt_188/loop_taken/ack)
  // 	result := (nval_0 + (nval_1 + (nval_2 + nval_3))) $buffering 1// bits of buffering = 32. 
  //  file .Aa/mvp.opt.aa, line 121
  // (nval_0 + (nval_1 + (nval_2 + nval_3)))
  // nval_0
  // (nval_1 + (nval_2 + nval_3))
  // nval_1
  // (nval_2 + nval_3)
  // nval_2
  // nval_3
  ADD_u32_u32_336_inst <=> (assign_stmt_337/ADD_u32_u32_336_Sample/rr assign_stmt_337/ADD_u32_u32_336_Update/cr) (assign_stmt_337/ADD_u32_u32_336_Sample/ra assign_stmt_337/ADD_u32_u32_336_Update/ca)
}
$module [dotP_1] 
{
  $in R:$int<8>
  // can point into 
  $out result:$int<32>
  // can point into 
  // pipe-declarations for block %dotP_1
  //  file .Aa/mvp.opt.aa, line 123
  // pipe-declarations for block %dotP_1%mmloop
  //  file .Aa/mvp.opt.aa, line 128
  // memory-space 7 is read from.
  // memory-space 6 is read from.
  // memory-space 5 is read from.
  // memory-space 4 is read from.
  // memory-space 3 is read from.
  // memory-space 2 is read from.
  // memory-space 1 is read from.
  // memory-space 0 is read from.
  // there are no memory spaces local to this module.
  $CP 
  {
    // begin control-path 
    <>[branch_block_stmt_342] // Branch Block  file .Aa/mvp.opt.aa, line 128
    {
      $P [branch_block_stmt_342__entry__]
      branch_block_stmt_342__entry__ <-| ($entry)
      $P [branch_block_stmt_342__exit__]
      branch_block_stmt_342__exit__ |-> ($exit)
      $P [do_while_stmt_343__entry__] 
      $P [do_while_stmt_343__exit__] 
      // do-while-statement  
      //  file .Aa/mvp.opt.aa, line 130
      <o> [do_while_stmt_343]  $depth 15 $buffering 1 
      {
        $P[do_while_stmt_343__entry__] 
        $P[do_while_stmt_343__exit__] 
        $P[loop_back] 
        $P[condition_done] 
        $P[loop_body_done] 
        $pipeline [do_while_stmt_343_loop_body] 
        {
          // Pipelined!
          $T[back_edge_to_loop_body] 
          $T[first_time_through_loop_body] 
          $T[loop_body_start] 
          $T[condition_evaluated] 
          $transitionmerge [entry_tmerge] (back_edge_to_loop_body first_time_through_loop_body) (loop_body_start)
          $entry <-& (loop_body_start)
          $T[aggregated_phi_sample_req] 
          $T[aggregated_phi_sample_ack] 
          $T[aggregated_phi_update_req] 
          $T[aggregated_phi_update_ack] 
          // do not loop-back unless all phi's have used up their triggering tokens.
          condition_evaluated <-& (aggregated_phi_update_ack)
          aggregated_phi_sample_req o<-& (aggregated_phi_update_ack 0)
          // start:  PHI statement phi_stmt_345
          // 			$phi C := 			  ($bitcast ($uint<8>) 0  ) $on   $entry 			  nC $on   $loopback 
          // type of target is $uint<8>
          $T[phi_stmt_345_sample_start_] 
          $T[phi_stmt_345_sample_completed_] 
          $T[phi_stmt_345_update_start_] 
          $T[phi_stmt_345_update_completed_] 
          $T[phi_stmt_345_sample_start__ps] 
          phi_stmt_345_sample_start__ps <-& (aggregated_phi_sample_req)
          $T[phi_stmt_345_sample_completed__ps] 
          phi_stmt_345_sample_completed__ps &-> (aggregated_phi_sample_ack)
          $T[phi_stmt_345_update_start__ps] 
          phi_stmt_345_update_start__ps <-& (aggregated_phi_update_req)
          $T[phi_stmt_345_update_completed__ps] 
          phi_stmt_345_update_completed_ <-& (phi_stmt_345_update_completed__ps)
          aggregated_phi_sample_req <-& (phi_stmt_345_sample_start_)
          aggregated_phi_sample_ack &-> (phi_stmt_345_sample_completed_)
          aggregated_phi_update_req <-& (phi_stmt_345_update_start_)
          $T[phi_stmt_345_loopback_trigger] 
          phi_stmt_345_loopback_trigger <-& (back_edge_to_loop_body)
          $T[phi_stmt_345_loopback_sample_req] 
          $T[phi_stmt_345_loopback_sample_req_ps] 
          phi_stmt_345_loopback_sample_req <-& (phi_stmt_345_loopback_sample_req_ps)
          phi_stmt_345_loopback_sample_req &-> ($null)
          $T[phi_stmt_345_entry_trigger] 
          phi_stmt_345_entry_trigger <-& (first_time_through_loop_body)
          $T[phi_stmt_345_entry_sample_req] 
          $T[phi_stmt_345_entry_sample_req_ps] 
          phi_stmt_345_entry_sample_req <-& (phi_stmt_345_entry_sample_req_ps)
          phi_stmt_345_entry_sample_req &-> ($null)
          phi_stmt_345_update_start_ o<-& (phi_stmt_345_update_completed_ 0)
          phi_stmt_345_sample_start_ o<-& (phi_stmt_345_sample_completed_ 1)
          $T[phi_stmt_345_merged_reqs] 
          $T[phi_stmt_345_phi_mux_ack] 
          $T[phi_stmt_345_phi_mux_ack_ps] 
          phi_stmt_345_phi_mux_ack_ps <-& (phi_stmt_345_phi_mux_ack)
          aggregated_phi_update_ack <-& (phi_stmt_345_update_completed_)
          $T[type_cast_348_sample_start__ps] 
          $T[type_cast_348_sample_completed__ps] 
          $T[type_cast_348_update_start__ps] 
          $T[type_cast_348_update_completed__ps] 
          // dummies for constant expression source for phi
          $T[type_cast_348_sample_start_] 
          $T[type_cast_348_sample_completed_] 
          type_cast_348_sample_completed_ <-& (type_cast_348_sample_start_)
          $T[type_cast_348_update_start_] 
          $T [type_cast_348_update_completed_] $delay 
          type_cast_348_update_completed_ <-& (type_cast_348_update_start_)
          // Phi start dependency for implicit/constant alternative.
          type_cast_348_sample_start_ <-& (type_cast_348_sample_start__ps)
          type_cast_348_update_start_ <-& (type_cast_348_update_start__ps)
          // Phi complete dependency.
          type_cast_348_sample_completed__ps <-& (type_cast_348_sample_completed_)
          type_cast_348_update_completed__ps <-& (type_cast_348_update_completed_)
          $T[R_nC_349_sample_start__ps] 
          $T[R_nC_349_sample_completed__ps] 
          $T[R_nC_349_update_start__ps] 
          $T[R_nC_349_update_completed__ps] 
          // interlock for implicit-variable-ref/signal-read in Phi alternative 1
          $T[R_nC_349_sample_start_] 
          $T[R_nC_349_sample_completed_] 
          $T[R_nC_349_update_start_] 
          $T[R_nC_349_update_completed_] 
          ;;[R_nC_349_Sample] 
          {
            $T [req] $T [ack] // interlock-sample.
          }
          R_nC_349_sample_start_ &-> (R_nC_349_Sample)
          R_nC_349_sample_completed_ <-& (R_nC_349_Sample)
          ;;[R_nC_349_Update] 
          {
            $T [req] $T [ack] // interlock-update.
          }
          R_nC_349_update_start_ &-> (R_nC_349_Update)
          R_nC_349_update_completed_ <-& (R_nC_349_Update)
          // RAW reenables for nC
          // Phi start dependency for implicit/constant alternative.
          R_nC_349_sample_start_ <-& (R_nC_349_sample_start__ps)
          R_nC_349_update_start_ <-& (R_nC_349_update_start__ps)
          // Phi complete dependency.
          R_nC_349_sample_completed__ps <-& (R_nC_349_sample_completed_)
          R_nC_349_update_completed__ps <-& (R_nC_349_update_completed_)
          $phisequencer [ phi_stmt_345_phi_seq] : 
          phi_stmt_345_entry_trigger type_cast_348_sample_start__ps type_cast_348_sample_completed__ps type_cast_348_update_start__ps type_cast_348_update_completed__ps phi_stmt_345_loopback_trigger R_nC_349_sample_start__ps R_nC_349_sample_completed__ps R_nC_349_update_start__ps R_nC_349_update_completed__ps :
          phi_stmt_345_sample_start__ps phi_stmt_345_sample_completed__ps phi_stmt_345_update_start__ps phi_stmt_345_update_completed__ps :
          phi_stmt_345_entry_sample_req_ps phi_stmt_345_loopback_sample_req_ps : 
          phi_stmt_345_phi_mux_ack_ps
          // done: PHI Statement phi_stmt_345
          // start:  PHI statement phi_stmt_350
          // 			$phi Index := 			  ($bitcast ($uint<3>) 0  ) $on   $entry 			  nIndex $on   $loopback 
          // type of target is $uint<3>
          $T[phi_stmt_350_sample_start_] 
          $T[phi_stmt_350_sample_completed_] 
          $T[phi_stmt_350_update_start_] 
          $T[phi_stmt_350_update_completed_] 
          $T[phi_stmt_350_sample_start__ps] 
          phi_stmt_350_sample_start__ps <-& (aggregated_phi_sample_req)
          $T[phi_stmt_350_sample_completed__ps] 
          phi_stmt_350_sample_completed__ps &-> (aggregated_phi_sample_ack)
          $T[phi_stmt_350_update_start__ps] 
          phi_stmt_350_update_start__ps <-& (aggregated_phi_update_req)
          $T[phi_stmt_350_update_completed__ps] 
          phi_stmt_350_update_completed_ <-& (phi_stmt_350_update_completed__ps)
          aggregated_phi_sample_req <-& (phi_stmt_350_sample_start_)
          aggregated_phi_sample_ack &-> (phi_stmt_350_sample_completed_)
          aggregated_phi_update_req <-& (phi_stmt_350_update_start_)
          $T[phi_stmt_350_loopback_trigger] 
          phi_stmt_350_loopback_trigger <-& (back_edge_to_loop_body)
          $T[phi_stmt_350_loopback_sample_req] 
          $T[phi_stmt_350_loopback_sample_req_ps] 
          phi_stmt_350_loopback_sample_req <-& (phi_stmt_350_loopback_sample_req_ps)
          phi_stmt_350_loopback_sample_req &-> ($null)
          $T[phi_stmt_350_entry_trigger] 
          phi_stmt_350_entry_trigger <-& (first_time_through_loop_body)
          $T[phi_stmt_350_entry_sample_req] 
          $T[phi_stmt_350_entry_sample_req_ps] 
          phi_stmt_350_entry_sample_req <-& (phi_stmt_350_entry_sample_req_ps)
          phi_stmt_350_entry_sample_req &-> ($null)
          phi_stmt_350_update_start_ o<-& (phi_stmt_350_update_completed_ 0)
          phi_stmt_350_sample_start_ o<-& (phi_stmt_350_sample_completed_ 1)
          $T[phi_stmt_350_merged_reqs] 
          $T[phi_stmt_350_phi_mux_ack] 
          $T[phi_stmt_350_phi_mux_ack_ps] 
          phi_stmt_350_phi_mux_ack_ps <-& (phi_stmt_350_phi_mux_ack)
          aggregated_phi_update_ack <-& (phi_stmt_350_update_completed_)
          $T[type_cast_353_sample_start__ps] 
          $T[type_cast_353_sample_completed__ps] 
          $T[type_cast_353_update_start__ps] 
          $T[type_cast_353_update_completed__ps] 
          // dummies for constant expression source for phi
          $T[type_cast_353_sample_start_] 
          $T[type_cast_353_sample_completed_] 
          type_cast_353_sample_completed_ <-& (type_cast_353_sample_start_)
          $T[type_cast_353_update_start_] 
          $T [type_cast_353_update_completed_] $delay 
          type_cast_353_update_completed_ <-& (type_cast_353_update_start_)
          // Phi start dependency for implicit/constant alternative.
          type_cast_353_sample_start_ <-& (type_cast_353_sample_start__ps)
          type_cast_353_update_start_ <-& (type_cast_353_update_start__ps)
          // Phi complete dependency.
          type_cast_353_sample_completed__ps <-& (type_cast_353_sample_completed_)
          type_cast_353_update_completed__ps <-& (type_cast_353_update_completed_)
          $T[R_nIndex_354_sample_start__ps] 
          $T[R_nIndex_354_sample_completed__ps] 
          $T[R_nIndex_354_update_start__ps] 
          $T[R_nIndex_354_update_completed__ps] 
          // interlock for implicit-variable-ref/signal-read in Phi alternative 1
          $T[R_nIndex_354_sample_start_] 
          $T[R_nIndex_354_sample_completed_] 
          $T[R_nIndex_354_update_start_] 
          $T[R_nIndex_354_update_completed_] 
          ;;[R_nIndex_354_Sample] 
          {
            $T [req] $T [ack] // interlock-sample.
          }
          R_nIndex_354_sample_start_ &-> (R_nIndex_354_Sample)
          R_nIndex_354_sample_completed_ <-& (R_nIndex_354_Sample)
          ;;[R_nIndex_354_Update] 
          {
            $T [req] $T [ack] // interlock-update.
          }
          R_nIndex_354_update_start_ &-> (R_nIndex_354_Update)
          R_nIndex_354_update_completed_ <-& (R_nIndex_354_Update)
          // RAW reenables for nIndex
          // Phi start dependency for implicit/constant alternative.
          R_nIndex_354_sample_start_ <-& (R_nIndex_354_sample_start__ps)
          R_nIndex_354_update_start_ <-& (R_nIndex_354_update_start__ps)
          // Phi complete dependency.
          R_nIndex_354_sample_completed__ps <-& (R_nIndex_354_sample_completed_)
          R_nIndex_354_update_completed__ps <-& (R_nIndex_354_update_completed_)
          $phisequencer [ phi_stmt_350_phi_seq] : 
          phi_stmt_350_entry_trigger type_cast_353_sample_start__ps type_cast_353_sample_completed__ps type_cast_353_update_start__ps type_cast_353_update_completed__ps phi_stmt_350_loopback_trigger R_nIndex_354_sample_start__ps R_nIndex_354_sample_completed__ps R_nIndex_354_update_start__ps R_nIndex_354_update_completed__ps :
          phi_stmt_350_sample_start__ps phi_stmt_350_sample_completed__ps phi_stmt_350_update_start__ps phi_stmt_350_update_completed__ps :
          phi_stmt_350_entry_sample_req_ps phi_stmt_350_loopback_sample_req_ps : 
          phi_stmt_350_phi_mux_ack_ps
          // done: PHI Statement phi_stmt_350
          // start:  PHI statement phi_stmt_355
          // 			$phi val_0 := 			  ($bitcast ($uint<32>) 0  ) $on   $entry 			  nval_0 $on   $loopback 
          // type of target is $uint<32>
          $T[phi_stmt_355_sample_start_] 
          $T[phi_stmt_355_sample_completed_] 
          $T[phi_stmt_355_update_start_] 
          $T[phi_stmt_355_update_completed_] 
          $T[phi_stmt_355_sample_start__ps] 
          phi_stmt_355_sample_start__ps <-& (aggregated_phi_sample_req)
          $T[phi_stmt_355_sample_completed__ps] 
          phi_stmt_355_sample_completed__ps &-> (aggregated_phi_sample_ack)
          $T[phi_stmt_355_update_start__ps] 
          phi_stmt_355_update_start__ps <-& (aggregated_phi_update_req)
          $T[phi_stmt_355_update_completed__ps] 
          phi_stmt_355_update_completed_ <-& (phi_stmt_355_update_completed__ps)
          aggregated_phi_sample_req <-& (phi_stmt_355_sample_start_)
          aggregated_phi_sample_ack &-> (phi_stmt_355_sample_completed_)
          aggregated_phi_update_req <-& (phi_stmt_355_update_start_)
          $T[phi_stmt_355_loopback_trigger] 
          phi_stmt_355_loopback_trigger <-& (back_edge_to_loop_body)
          $T[phi_stmt_355_loopback_sample_req] 
          $T[phi_stmt_355_loopback_sample_req_ps] 
          phi_stmt_355_loopback_sample_req <-& (phi_stmt_355_loopback_sample_req_ps)
          phi_stmt_355_loopback_sample_req &-> ($null)
          $T[phi_stmt_355_entry_trigger] 
          phi_stmt_355_entry_trigger <-& (first_time_through_loop_body)
          $T[phi_stmt_355_entry_sample_req] 
          $T[phi_stmt_355_entry_sample_req_ps] 
          phi_stmt_355_entry_sample_req <-& (phi_stmt_355_entry_sample_req_ps)
          phi_stmt_355_entry_sample_req &-> ($null)
          phi_stmt_355_update_start_ o<-& (phi_stmt_355_update_completed_ 0)
          phi_stmt_355_sample_start_ o<-& (phi_stmt_355_sample_completed_ 1)
          $T[phi_stmt_355_merged_reqs] 
          $T[phi_stmt_355_phi_mux_ack] 
          $T[phi_stmt_355_phi_mux_ack_ps] 
          phi_stmt_355_phi_mux_ack_ps <-& (phi_stmt_355_phi_mux_ack)
          aggregated_phi_update_ack <-& (phi_stmt_355_update_completed_)
          $T[type_cast_358_sample_start__ps] 
          $T[type_cast_358_sample_completed__ps] 
          $T[type_cast_358_update_start__ps] 
          $T[type_cast_358_update_completed__ps] 
          // dummies for constant expression source for phi
          $T[type_cast_358_sample_start_] 
          $T[type_cast_358_sample_completed_] 
          type_cast_358_sample_completed_ <-& (type_cast_358_sample_start_)
          $T[type_cast_358_update_start_] 
          $T [type_cast_358_update_completed_] $delay 
          type_cast_358_update_completed_ <-& (type_cast_358_update_start_)
          // Phi start dependency for implicit/constant alternative.
          type_cast_358_sample_start_ <-& (type_cast_358_sample_start__ps)
          type_cast_358_update_start_ <-& (type_cast_358_update_start__ps)
          // Phi complete dependency.
          type_cast_358_sample_completed__ps <-& (type_cast_358_sample_completed_)
          type_cast_358_update_completed__ps <-& (type_cast_358_update_completed_)
          $T[R_nval_0_359_sample_start__ps] 
          $T[R_nval_0_359_sample_completed__ps] 
          $T[R_nval_0_359_update_start__ps] 
          $T[R_nval_0_359_update_completed__ps] 
          // interlock for implicit-variable-ref/signal-read in Phi alternative 1
          $T[R_nval_0_359_sample_start_] 
          $T[R_nval_0_359_sample_completed_] 
          $T[R_nval_0_359_update_start_] 
          $T[R_nval_0_359_update_completed_] 
          ;;[R_nval_0_359_Sample] 
          {
            $T [req] $T [ack] // interlock-sample.
          }
          R_nval_0_359_sample_start_ &-> (R_nval_0_359_Sample)
          R_nval_0_359_sample_completed_ <-& (R_nval_0_359_Sample)
          ;;[R_nval_0_359_Update] 
          {
            $T [req] $T [ack] // interlock-update.
          }
          R_nval_0_359_update_start_ &-> (R_nval_0_359_Update)
          R_nval_0_359_update_completed_ <-& (R_nval_0_359_Update)
          // RAW reenables for nval_0
          // Phi start dependency for implicit/constant alternative.
          R_nval_0_359_sample_start_ <-& (R_nval_0_359_sample_start__ps)
          R_nval_0_359_update_start_ <-& (R_nval_0_359_update_start__ps)
          // Phi complete dependency.
          R_nval_0_359_sample_completed__ps <-& (R_nval_0_359_sample_completed_)
          R_nval_0_359_update_completed__ps <-& (R_nval_0_359_update_completed_)
          $phisequencer [ phi_stmt_355_phi_seq] : 
          phi_stmt_355_entry_trigger type_cast_358_sample_start__ps type_cast_358_sample_completed__ps type_cast_358_update_start__ps type_cast_358_update_completed__ps phi_stmt_355_loopback_trigger R_nval_0_359_sample_start__ps R_nval_0_359_sample_completed__ps R_nval_0_359_update_start__ps R_nval_0_359_update_completed__ps :
          phi_stmt_355_sample_start__ps phi_stmt_355_sample_completed__ps phi_stmt_355_update_start__ps phi_stmt_355_update_completed__ps :
          phi_stmt_355_entry_sample_req_ps phi_stmt_355_loopback_sample_req_ps : 
          phi_stmt_355_phi_mux_ack_ps
          // done: PHI Statement phi_stmt_355
          // start:  PHI statement phi_stmt_360
          // 			$phi val_1 := 			  nval_1 $on   $loopback 			  ($bitcast ($uint<32>) 0  ) $on   $entry 
          // type of target is $uint<32>
          $T[phi_stmt_360_sample_start_] 
          $T[phi_stmt_360_sample_completed_] 
          $T[phi_stmt_360_update_start_] 
          $T[phi_stmt_360_update_completed_] 
          $T[phi_stmt_360_sample_start__ps] 
          phi_stmt_360_sample_start__ps <-& (aggregated_phi_sample_req)
          $T[phi_stmt_360_sample_completed__ps] 
          phi_stmt_360_sample_completed__ps &-> (aggregated_phi_sample_ack)
          $T[phi_stmt_360_update_start__ps] 
          phi_stmt_360_update_start__ps <-& (aggregated_phi_update_req)
          $T[phi_stmt_360_update_completed__ps] 
          phi_stmt_360_update_completed_ <-& (phi_stmt_360_update_completed__ps)
          aggregated_phi_sample_req <-& (phi_stmt_360_sample_start_)
          aggregated_phi_sample_ack &-> (phi_stmt_360_sample_completed_)
          aggregated_phi_update_req <-& (phi_stmt_360_update_start_)
          $T[phi_stmt_360_loopback_trigger] 
          phi_stmt_360_loopback_trigger <-& (back_edge_to_loop_body)
          $T[phi_stmt_360_loopback_sample_req] 
          $T[phi_stmt_360_loopback_sample_req_ps] 
          phi_stmt_360_loopback_sample_req <-& (phi_stmt_360_loopback_sample_req_ps)
          phi_stmt_360_loopback_sample_req &-> ($null)
          $T[phi_stmt_360_entry_trigger] 
          phi_stmt_360_entry_trigger <-& (first_time_through_loop_body)
          $T[phi_stmt_360_entry_sample_req] 
          $T[phi_stmt_360_entry_sample_req_ps] 
          phi_stmt_360_entry_sample_req <-& (phi_stmt_360_entry_sample_req_ps)
          phi_stmt_360_entry_sample_req &-> ($null)
          phi_stmt_360_update_start_ o<-& (phi_stmt_360_update_completed_ 0)
          phi_stmt_360_sample_start_ o<-& (phi_stmt_360_sample_completed_ 1)
          $T[phi_stmt_360_merged_reqs] 
          $T[phi_stmt_360_phi_mux_ack] 
          $T[phi_stmt_360_phi_mux_ack_ps] 
          phi_stmt_360_phi_mux_ack_ps <-& (phi_stmt_360_phi_mux_ack)
          aggregated_phi_update_ack <-& (phi_stmt_360_update_completed_)
          $T[R_nval_1_362_sample_start__ps] 
          $T[R_nval_1_362_sample_completed__ps] 
          $T[R_nval_1_362_update_start__ps] 
          $T[R_nval_1_362_update_completed__ps] 
          // interlock for implicit-variable-ref/signal-read in Phi alternative 0
          $T[R_nval_1_362_sample_start_] 
          $T[R_nval_1_362_sample_completed_] 
          $T[R_nval_1_362_update_start_] 
          $T[R_nval_1_362_update_completed_] 
          ;;[R_nval_1_362_Sample] 
          {
            $T [req] $T [ack] // interlock-sample.
          }
          R_nval_1_362_sample_start_ &-> (R_nval_1_362_Sample)
          R_nval_1_362_sample_completed_ <-& (R_nval_1_362_Sample)
          ;;[R_nval_1_362_Update] 
          {
            $T [req] $T [ack] // interlock-update.
          }
          R_nval_1_362_update_start_ &-> (R_nval_1_362_Update)
          R_nval_1_362_update_completed_ <-& (R_nval_1_362_Update)
          // RAW reenables for nval_1
          // Phi start dependency for implicit/constant alternative.
          R_nval_1_362_sample_start_ <-& (R_nval_1_362_sample_start__ps)
          R_nval_1_362_update_start_ <-& (R_nval_1_362_update_start__ps)
          // Phi complete dependency.
          R_nval_1_362_sample_completed__ps <-& (R_nval_1_362_sample_completed_)
          R_nval_1_362_update_completed__ps <-& (R_nval_1_362_update_completed_)
          $T[type_cast_364_sample_start__ps] 
          $T[type_cast_364_sample_completed__ps] 
          $T[type_cast_364_update_start__ps] 
          $T[type_cast_364_update_completed__ps] 
          // dummies for constant expression source for phi
          $T[type_cast_364_sample_start_] 
          $T[type_cast_364_sample_completed_] 
          type_cast_364_sample_completed_ <-& (type_cast_364_sample_start_)
          $T[type_cast_364_update_start_] 
          $T [type_cast_364_update_completed_] $delay 
          type_cast_364_update_completed_ <-& (type_cast_364_update_start_)
          // Phi start dependency for implicit/constant alternative.
          type_cast_364_sample_start_ <-& (type_cast_364_sample_start__ps)
          type_cast_364_update_start_ <-& (type_cast_364_update_start__ps)
          // Phi complete dependency.
          type_cast_364_sample_completed__ps <-& (type_cast_364_sample_completed_)
          type_cast_364_update_completed__ps <-& (type_cast_364_update_completed_)
          $phisequencer [ phi_stmt_360_phi_seq] : 
          phi_stmt_360_loopback_trigger R_nval_1_362_sample_start__ps R_nval_1_362_sample_completed__ps R_nval_1_362_update_start__ps R_nval_1_362_update_completed__ps phi_stmt_360_entry_trigger type_cast_364_sample_start__ps type_cast_364_sample_completed__ps type_cast_364_update_start__ps type_cast_364_update_completed__ps :
          phi_stmt_360_sample_start__ps phi_stmt_360_sample_completed__ps phi_stmt_360_update_start__ps phi_stmt_360_update_completed__ps :
          phi_stmt_360_loopback_sample_req_ps phi_stmt_360_entry_sample_req_ps : 
          phi_stmt_360_phi_mux_ack_ps
          // done: PHI Statement phi_stmt_360
          // start:  PHI statement phi_stmt_365
          // 			$phi val_2 := 			  ($bitcast ($uint<32>) 0  ) $on   $entry 			  nval_2 $on   $loopback 
          // type of target is $uint<32>
          $T[phi_stmt_365_sample_start_] 
          $T[phi_stmt_365_sample_completed_] 
          $T[phi_stmt_365_update_start_] 
          $T[phi_stmt_365_update_completed_] 
          $T[phi_stmt_365_sample_start__ps] 
          phi_stmt_365_sample_start__ps <-& (aggregated_phi_sample_req)
          $T[phi_stmt_365_sample_completed__ps] 
          phi_stmt_365_sample_completed__ps &-> (aggregated_phi_sample_ack)
          $T[phi_stmt_365_update_start__ps] 
          phi_stmt_365_update_start__ps <-& (aggregated_phi_update_req)
          $T[phi_stmt_365_update_completed__ps] 
          phi_stmt_365_update_completed_ <-& (phi_stmt_365_update_completed__ps)
          aggregated_phi_sample_req <-& (phi_stmt_365_sample_start_)
          aggregated_phi_sample_ack &-> (phi_stmt_365_sample_completed_)
          aggregated_phi_update_req <-& (phi_stmt_365_update_start_)
          $T[phi_stmt_365_loopback_trigger] 
          phi_stmt_365_loopback_trigger <-& (back_edge_to_loop_body)
          $T[phi_stmt_365_loopback_sample_req] 
          $T[phi_stmt_365_loopback_sample_req_ps] 
          phi_stmt_365_loopback_sample_req <-& (phi_stmt_365_loopback_sample_req_ps)
          phi_stmt_365_loopback_sample_req &-> ($null)
          $T[phi_stmt_365_entry_trigger] 
          phi_stmt_365_entry_trigger <-& (first_time_through_loop_body)
          $T[phi_stmt_365_entry_sample_req] 
          $T[phi_stmt_365_entry_sample_req_ps] 
          phi_stmt_365_entry_sample_req <-& (phi_stmt_365_entry_sample_req_ps)
          phi_stmt_365_entry_sample_req &-> ($null)
          phi_stmt_365_update_start_ o<-& (phi_stmt_365_update_completed_ 0)
          phi_stmt_365_sample_start_ o<-& (phi_stmt_365_sample_completed_ 1)
          $T[phi_stmt_365_merged_reqs] 
          $T[phi_stmt_365_phi_mux_ack] 
          $T[phi_stmt_365_phi_mux_ack_ps] 
          phi_stmt_365_phi_mux_ack_ps <-& (phi_stmt_365_phi_mux_ack)
          aggregated_phi_update_ack <-& (phi_stmt_365_update_completed_)
          $T[type_cast_368_sample_start__ps] 
          $T[type_cast_368_sample_completed__ps] 
          $T[type_cast_368_update_start__ps] 
          $T[type_cast_368_update_completed__ps] 
          // dummies for constant expression source for phi
          $T[type_cast_368_sample_start_] 
          $T[type_cast_368_sample_completed_] 
          type_cast_368_sample_completed_ <-& (type_cast_368_sample_start_)
          $T[type_cast_368_update_start_] 
          $T [type_cast_368_update_completed_] $delay 
          type_cast_368_update_completed_ <-& (type_cast_368_update_start_)
          // Phi start dependency for implicit/constant alternative.
          type_cast_368_sample_start_ <-& (type_cast_368_sample_start__ps)
          type_cast_368_update_start_ <-& (type_cast_368_update_start__ps)
          // Phi complete dependency.
          type_cast_368_sample_completed__ps <-& (type_cast_368_sample_completed_)
          type_cast_368_update_completed__ps <-& (type_cast_368_update_completed_)
          $T[R_nval_2_369_sample_start__ps] 
          $T[R_nval_2_369_sample_completed__ps] 
          $T[R_nval_2_369_update_start__ps] 
          $T[R_nval_2_369_update_completed__ps] 
          // interlock for implicit-variable-ref/signal-read in Phi alternative 1
          $T[R_nval_2_369_sample_start_] 
          $T[R_nval_2_369_sample_completed_] 
          $T[R_nval_2_369_update_start_] 
          $T[R_nval_2_369_update_completed_] 
          ;;[R_nval_2_369_Sample] 
          {
            $T [req] $T [ack] // interlock-sample.
          }
          R_nval_2_369_sample_start_ &-> (R_nval_2_369_Sample)
          R_nval_2_369_sample_completed_ <-& (R_nval_2_369_Sample)
          ;;[R_nval_2_369_Update] 
          {
            $T [req] $T [ack] // interlock-update.
          }
          R_nval_2_369_update_start_ &-> (R_nval_2_369_Update)
          R_nval_2_369_update_completed_ <-& (R_nval_2_369_Update)
          // RAW reenables for nval_2
          // Phi start dependency for implicit/constant alternative.
          R_nval_2_369_sample_start_ <-& (R_nval_2_369_sample_start__ps)
          R_nval_2_369_update_start_ <-& (R_nval_2_369_update_start__ps)
          // Phi complete dependency.
          R_nval_2_369_sample_completed__ps <-& (R_nval_2_369_sample_completed_)
          R_nval_2_369_update_completed__ps <-& (R_nval_2_369_update_completed_)
          $phisequencer [ phi_stmt_365_phi_seq] : 
          phi_stmt_365_entry_trigger type_cast_368_sample_start__ps type_cast_368_sample_completed__ps type_cast_368_update_start__ps type_cast_368_update_completed__ps phi_stmt_365_loopback_trigger R_nval_2_369_sample_start__ps R_nval_2_369_sample_completed__ps R_nval_2_369_update_start__ps R_nval_2_369_update_completed__ps :
          phi_stmt_365_sample_start__ps phi_stmt_365_sample_completed__ps phi_stmt_365_update_start__ps phi_stmt_365_update_completed__ps :
          phi_stmt_365_entry_sample_req_ps phi_stmt_365_loopback_sample_req_ps : 
          phi_stmt_365_phi_mux_ack_ps
          // done: PHI Statement phi_stmt_365
          // start:  PHI statement phi_stmt_370
          // 			$phi val_3 := 			  ($bitcast ($uint<32>) 0  ) $on   $entry 			  nval_3 $on   $loopback 
          // type of target is $uint<32>
          $T[phi_stmt_370_sample_start_] 
          $T[phi_stmt_370_sample_completed_] 
          $T[phi_stmt_370_update_start_] 
          $T[phi_stmt_370_update_completed_] 
          $T[phi_stmt_370_sample_start__ps] 
          phi_stmt_370_sample_start__ps <-& (aggregated_phi_sample_req)
          $T[phi_stmt_370_sample_completed__ps] 
          phi_stmt_370_sample_completed__ps &-> (aggregated_phi_sample_ack)
          $T[phi_stmt_370_update_start__ps] 
          phi_stmt_370_update_start__ps <-& (aggregated_phi_update_req)
          $T[phi_stmt_370_update_completed__ps] 
          phi_stmt_370_update_completed_ <-& (phi_stmt_370_update_completed__ps)
          aggregated_phi_sample_req <-& (phi_stmt_370_sample_start_)
          aggregated_phi_sample_ack &-> (phi_stmt_370_sample_completed_)
          aggregated_phi_update_req <-& (phi_stmt_370_update_start_)
          $T[phi_stmt_370_loopback_trigger] 
          phi_stmt_370_loopback_trigger <-& (back_edge_to_loop_body)
          $T[phi_stmt_370_loopback_sample_req] 
          $T[phi_stmt_370_loopback_sample_req_ps] 
          phi_stmt_370_loopback_sample_req <-& (phi_stmt_370_loopback_sample_req_ps)
          phi_stmt_370_loopback_sample_req &-> ($null)
          $T[phi_stmt_370_entry_trigger] 
          phi_stmt_370_entry_trigger <-& (first_time_through_loop_body)
          $T[phi_stmt_370_entry_sample_req] 
          $T[phi_stmt_370_entry_sample_req_ps] 
          phi_stmt_370_entry_sample_req <-& (phi_stmt_370_entry_sample_req_ps)
          phi_stmt_370_entry_sample_req &-> ($null)
          phi_stmt_370_update_start_ o<-& (phi_stmt_370_update_completed_ 0)
          phi_stmt_370_sample_start_ o<-& (phi_stmt_370_sample_completed_ 1)
          $T[phi_stmt_370_merged_reqs] 
          $T[phi_stmt_370_phi_mux_ack] 
          $T[phi_stmt_370_phi_mux_ack_ps] 
          phi_stmt_370_phi_mux_ack_ps <-& (phi_stmt_370_phi_mux_ack)
          aggregated_phi_update_ack <-& (phi_stmt_370_update_completed_)
          $T[type_cast_373_sample_start__ps] 
          $T[type_cast_373_sample_completed__ps] 
          $T[type_cast_373_update_start__ps] 
          $T[type_cast_373_update_completed__ps] 
          // dummies for constant expression source for phi
          $T[type_cast_373_sample_start_] 
          $T[type_cast_373_sample_completed_] 
          type_cast_373_sample_completed_ <-& (type_cast_373_sample_start_)
          $T[type_cast_373_update_start_] 
          $T [type_cast_373_update_completed_] $delay 
          type_cast_373_update_completed_ <-& (type_cast_373_update_start_)
          // Phi start dependency for implicit/constant alternative.
          type_cast_373_sample_start_ <-& (type_cast_373_sample_start__ps)
          type_cast_373_update_start_ <-& (type_cast_373_update_start__ps)
          // Phi complete dependency.
          type_cast_373_sample_completed__ps <-& (type_cast_373_sample_completed_)
          type_cast_373_update_completed__ps <-& (type_cast_373_update_completed_)
          $T[R_nval_3_374_sample_start__ps] 
          $T[R_nval_3_374_sample_completed__ps] 
          $T[R_nval_3_374_update_start__ps] 
          $T[R_nval_3_374_update_completed__ps] 
          // interlock for implicit-variable-ref/signal-read in Phi alternative 1
          $T[R_nval_3_374_sample_start_] 
          $T[R_nval_3_374_sample_completed_] 
          $T[R_nval_3_374_update_start_] 
          $T[R_nval_3_374_update_completed_] 
          ;;[R_nval_3_374_Sample] 
          {
            $T [req] $T [ack] // interlock-sample.
          }
          R_nval_3_374_sample_start_ &-> (R_nval_3_374_Sample)
          R_nval_3_374_sample_completed_ <-& (R_nval_3_374_Sample)
          ;;[R_nval_3_374_Update] 
          {
            $T [req] $T [ack] // interlock-update.
          }
          R_nval_3_374_update_start_ &-> (R_nval_3_374_Update)
          R_nval_3_374_update_completed_ <-& (R_nval_3_374_Update)
          // RAW reenables for nval_3
          // Phi start dependency for implicit/constant alternative.
          R_nval_3_374_sample_start_ <-& (R_nval_3_374_sample_start__ps)
          R_nval_3_374_update_start_ <-& (R_nval_3_374_update_start__ps)
          // Phi complete dependency.
          R_nval_3_374_sample_completed__ps <-& (R_nval_3_374_sample_completed_)
          R_nval_3_374_update_completed__ps <-& (R_nval_3_374_update_completed_)
          $phisequencer [ phi_stmt_370_phi_seq] : 
          phi_stmt_370_entry_trigger type_cast_373_sample_start__ps type_cast_373_sample_completed__ps type_cast_373_update_start__ps type_cast_373_update_completed__ps phi_stmt_370_loopback_trigger R_nval_3_374_sample_start__ps R_nval_3_374_sample_completed__ps R_nval_3_374_update_start__ps R_nval_3_374_update_completed__ps :
          phi_stmt_370_sample_start__ps phi_stmt_370_sample_completed__ps phi_stmt_370_update_start__ps phi_stmt_370_update_completed__ps :
          phi_stmt_370_entry_sample_req_ps phi_stmt_370_loopback_sample_req_ps : 
          phi_stmt_370_phi_mux_ack_ps
          // done: PHI Statement phi_stmt_370
          // start:  			a_rc_0 := A_MEM[R][Index] $buffering 1// bits of buffering = 32. 
          //  file .Aa/mvp.opt.aa, line 146
          // Source expression
          // A_MEM[R][Index]
          $T[array_obj_ref_379_base_address_calculated] 
          $T[array_obj_ref_379_sample_start_] 
          $T[array_obj_ref_379_sample_completed_] 
          $T[array_obj_ref_379_update_start_] 
          $T[array_obj_ref_379_update_completed_] 
          $T[array_obj_ref_379_word_address_calculated] 
          $T[array_obj_ref_379_root_address_calculated] 
          $T[array_obj_ref_379_offset_calculated] 
          $T[array_obj_ref_379_index_resized_0] 
          $T[array_obj_ref_379_index_scaled_0] 
          $T[array_obj_ref_379_index_computed_0] 
          // R
          // start: Forward dependencies from R to transition array_obj_ref_379_index_computed_0
          // done: Forward dependencies from R to transition array_obj_ref_379_index_computed_0
          ;;[array_obj_ref_379_index_resize_0] 
          {
            $T [index_resize_req] $T [index_resize_ack] // resize index to address-width
          }
          array_obj_ref_379_index_computed_0 &-> (array_obj_ref_379_index_resize_0)
          array_obj_ref_379_index_resized_0 <-& (array_obj_ref_379_index_resize_0)
          $T[array_obj_ref_379_index_scale_0_sample_start] 
          $T[array_obj_ref_379_index_scale_0_sample_complete] 
          $T[array_obj_ref_379_index_scale_0_update_start] 
          $T[array_obj_ref_379_index_scale_0_update_complete] 
          ;;[array_obj_ref_379_index_scale_0_Sample] 
          {
            $T [rr] $T [ra] 
          }
          ;;[array_obj_ref_379_index_scale_0_Update] 
          {
            $T [cr] $T [ca] 
          }
          array_obj_ref_379_index_resized_0 &-> (array_obj_ref_379_index_scale_0_sample_start)
          array_obj_ref_379_index_scale_0_sample_start &-> (array_obj_ref_379_index_scale_0_Sample)
          array_obj_ref_379_index_scale_0_sample_complete <-& (array_obj_ref_379_index_scale_0_Sample)
          array_obj_ref_379_index_scale_0_update_start &-> (array_obj_ref_379_index_scale_0_Update)
          array_obj_ref_379_index_scale_0_update_complete <-& (array_obj_ref_379_index_scale_0_Update)
          array_obj_ref_379_index_scaled_0 <-& (array_obj_ref_379_index_scale_0_update_complete)
          array_obj_ref_379_index_scale_0_sample_start o<-& (array_obj_ref_379_index_scale_0_sample_complete 1)
          array_obj_ref_379_index_scale_0_update_start o<-& (array_obj_ref_379_index_scale_0_update_complete 0)
          $T[array_obj_ref_379_index_resized_1] 
          $T[array_obj_ref_379_index_scaled_1] 
          $T[array_obj_ref_379_index_computed_1] 
          // Index
          // start: Forward dependencies from Index to transition array_obj_ref_379_index_computed_1
          array_obj_ref_379_index_computed_1 <-& (phi_stmt_350_update_completed_)
          // done: Forward dependencies from Index to transition array_obj_ref_379_index_computed_1
          ;;[array_obj_ref_379_index_resize_1] 
          {
            $T [index_resize_req] $T [index_resize_ack] // resize index to address-width
          }
          array_obj_ref_379_index_computed_1 &-> (array_obj_ref_379_index_resize_1)
          array_obj_ref_379_index_resized_1 <-& (array_obj_ref_379_index_resize_1)
          ;;[array_obj_ref_379_index_scale_1] 
          {
            $T [scale_rename_req] $T [scale_rename_ack] // rename 
          }
          array_obj_ref_379_index_resized_1 &-> (array_obj_ref_379_index_scale_1)
          array_obj_ref_379_index_scaled_1 <-& (array_obj_ref_379_index_scale_1)
          $T[array_obj_ref_379_partial_sum_1_sample_start] 
          $T[array_obj_ref_379_partial_sum_1_sample_complete] 
          $T[array_obj_ref_379_partial_sum_1_update_start] 
          $T[array_obj_ref_379_partial_sum_1_update_complete] 
          ;;[array_obj_ref_379_partial_sum_1_Sample] 
          {
            $T [rr] $T [ra] 
          }
          ;;[array_obj_ref_379_partial_sum_1_Update] 
          {
            $T [cr] $T [ca] 
          }
          array_obj_ref_379_partial_sum_1_sample_start &-> (array_obj_ref_379_partial_sum_1_Sample)
          array_obj_ref_379_partial_sum_1_sample_complete <-& (array_obj_ref_379_partial_sum_1_Sample)
          array_obj_ref_379_partial_sum_1_update_start &-> (array_obj_ref_379_partial_sum_1_Update)
          array_obj_ref_379_partial_sum_1_update_complete <-& (array_obj_ref_379_partial_sum_1_Update)
          array_obj_ref_379_partial_sum_1_sample_start o<-& (array_obj_ref_379_partial_sum_1_sample_complete 1)
          array_obj_ref_379_partial_sum_1_update_start o<-& (array_obj_ref_379_partial_sum_1_update_complete 0)
          array_obj_ref_379_partial_sum_1_sample_start <-& (array_obj_ref_379_index_scaled_0)
          array_obj_ref_379_partial_sum_1_sample_start <-& (array_obj_ref_379_index_scaled_1)
          array_obj_ref_379_index_scaled_0 o<-& (array_obj_ref_379_partial_sum_1_sample_complete 1)
          phi_stmt_350_update_start_ o<-& (array_obj_ref_379_partial_sum_1_sample_complete 1)
          array_obj_ref_379_offset_calculated <-& (array_obj_ref_379_partial_sum_1_update_complete)
          ;;[array_obj_ref_379_final_index_sum_regn] 
          {
            $T [req] $T [ack] // rename
          }
          array_obj_ref_379_partial_sum_1_update_complete &-> (array_obj_ref_379_final_index_sum_regn)
          array_obj_ref_379_offset_calculated <-& (array_obj_ref_379_final_index_sum_regn)
          ;;[array_obj_ref_379_base_plus_offset] 
          {
            $T [sum_rename_req] $T [sum_rename_ack] // one gets through 
          }
          array_obj_ref_379_offset_calculated &-> (array_obj_ref_379_base_plus_offset)
          array_obj_ref_379_root_address_calculated <-& (array_obj_ref_379_base_plus_offset)
          ;;[array_obj_ref_379_word_addrgen] 
          {
            $T [root_register_req] $T [root_register_ack]
          }
          array_obj_ref_379_root_address_calculated &-> (array_obj_ref_379_word_addrgen)
          array_obj_ref_379_word_address_calculated <-& (array_obj_ref_379_word_addrgen)
          ;;[array_obj_ref_379_Sample] 
          {
            ||[word_access_start] 
            {
              ;;[word_0] 
              {
                $T [rr] $T [ra] 
              }
            }
          }
          ;;[array_obj_ref_379_Update] 
          {
            ||[word_access_complete] 
            {
              ;;[word_0] 
              {
                $T [cr] $T [ca] 
              }
            }
            ;;[array_obj_ref_379_Merge] 
            {
              $T [merge_req] $T [merge_ack]
            }
          }
          array_obj_ref_379_sample_start_ <-& (array_obj_ref_379_word_address_calculated)
          // reenable-joins
          array_obj_ref_379_partial_sum_1_update_start o<-& (array_obj_ref_379_sample_completed_ 0)
          array_obj_ref_379_sample_start_ &-> (array_obj_ref_379_Sample)
          array_obj_ref_379_sample_completed_ <-& (array_obj_ref_379_Sample)
          array_obj_ref_379_sample_completed_ &-> ($null)
          array_obj_ref_379_update_start_ &-> (array_obj_ref_379_Update)
          array_obj_ref_379_update_completed_ <-& (array_obj_ref_379_Update)
          // self-release: 
          array_obj_ref_379_sample_start_ o<-& (array_obj_ref_379_sample_completed_ 1)
          $null &-> (array_obj_ref_379_update_start_)
          array_obj_ref_379_update_start_ o<-& (array_obj_ref_379_update_completed_ 0)
          // Target expression
          // (as target) a_rc_0
          // start: WAR dependencies for a_rc_0
          // done: WAR dependencies for a_rc_0
          // end:  			a_rc_0 := A_MEM[R][Index] $buffering 1// bits of buffering = 32. 
          // start:  			a_rc_1 := B_MEM[R][Index] $buffering 1// bits of buffering = 32. 
          //  file .Aa/mvp.opt.aa, line 147
          // Source expression
          // B_MEM[R][Index]
          $T[array_obj_ref_384_base_address_calculated] 
          $T[array_obj_ref_384_sample_start_] 
          $T[array_obj_ref_384_sample_completed_] 
          $T[array_obj_ref_384_update_start_] 
          $T[array_obj_ref_384_update_completed_] 
          $T[array_obj_ref_384_word_address_calculated] 
          $T[array_obj_ref_384_root_address_calculated] 
          $T[array_obj_ref_384_offset_calculated] 
          $T[array_obj_ref_384_index_resized_0] 
          $T[array_obj_ref_384_index_scaled_0] 
          $T[array_obj_ref_384_index_computed_0] 
          // R
          // start: Forward dependencies from R to transition array_obj_ref_384_index_computed_0
          // done: Forward dependencies from R to transition array_obj_ref_384_index_computed_0
          ;;[array_obj_ref_384_index_resize_0] 
          {
            $T [index_resize_req] $T [index_resize_ack] // resize index to address-width
          }
          array_obj_ref_384_index_computed_0 &-> (array_obj_ref_384_index_resize_0)
          array_obj_ref_384_index_resized_0 <-& (array_obj_ref_384_index_resize_0)
          $T[array_obj_ref_384_index_scale_0_sample_start] 
          $T[array_obj_ref_384_index_scale_0_sample_complete] 
          $T[array_obj_ref_384_index_scale_0_update_start] 
          $T[array_obj_ref_384_index_scale_0_update_complete] 
          ;;[array_obj_ref_384_index_scale_0_Sample] 
          {
            $T [rr] $T [ra] 
          }
          ;;[array_obj_ref_384_index_scale_0_Update] 
          {
            $T [cr] $T [ca] 
          }
          array_obj_ref_384_index_resized_0 &-> (array_obj_ref_384_index_scale_0_sample_start)
          array_obj_ref_384_index_scale_0_sample_start &-> (array_obj_ref_384_index_scale_0_Sample)
          array_obj_ref_384_index_scale_0_sample_complete <-& (array_obj_ref_384_index_scale_0_Sample)
          array_obj_ref_384_index_scale_0_update_start &-> (array_obj_ref_384_index_scale_0_Update)
          array_obj_ref_384_index_scale_0_update_complete <-& (array_obj_ref_384_index_scale_0_Update)
          array_obj_ref_384_index_scaled_0 <-& (array_obj_ref_384_index_scale_0_update_complete)
          array_obj_ref_384_index_scale_0_sample_start o<-& (array_obj_ref_384_index_scale_0_sample_complete 1)
          array_obj_ref_384_index_scale_0_update_start o<-& (array_obj_ref_384_index_scale_0_update_complete 0)
          $T[array_obj_ref_384_index_resized_1] 
          $T[array_obj_ref_384_index_scaled_1] 
          $T[array_obj_ref_384_index_computed_1] 
          // Index
          // start: Forward dependencies from Index to transition array_obj_ref_384_index_computed_1
          array_obj_ref_384_index_computed_1 <-& (phi_stmt_350_update_completed_)
          // done: Forward dependencies from Index to transition array_obj_ref_384_index_computed_1
          ;;[array_obj_ref_384_index_resize_1] 
          {
            $T [index_resize_req] $T [index_resize_ack] // resize index to address-width
          }
          array_obj_ref_384_index_computed_1 &-> (array_obj_ref_384_index_resize_1)
          array_obj_ref_384_index_resized_1 <-& (array_obj_ref_384_index_resize_1)
          ;;[array_obj_ref_384_index_scale_1] 
          {
            $T [scale_rename_req] $T [scale_rename_ack] // rename 
          }
          array_obj_ref_384_index_resized_1 &-> (array_obj_ref_384_index_scale_1)
          array_obj_ref_384_index_scaled_1 <-& (array_obj_ref_384_index_scale_1)
          $T[array_obj_ref_384_partial_sum_1_sample_start] 
          $T[array_obj_ref_384_partial_sum_1_sample_complete] 
          $T[array_obj_ref_384_partial_sum_1_update_start] 
          $T[array_obj_ref_384_partial_sum_1_update_complete] 
          ;;[array_obj_ref_384_partial_sum_1_Sample] 
          {
            $T [rr] $T [ra] 
          }
          ;;[array_obj_ref_384_partial_sum_1_Update] 
          {
            $T [cr] $T [ca] 
          }
          array_obj_ref_384_partial_sum_1_sample_start &-> (array_obj_ref_384_partial_sum_1_Sample)
          array_obj_ref_384_partial_sum_1_sample_complete <-& (array_obj_ref_384_partial_sum_1_Sample)
          array_obj_ref_384_partial_sum_1_update_start &-> (array_obj_ref_384_partial_sum_1_Update)
          array_obj_ref_384_partial_sum_1_update_complete <-& (array_obj_ref_384_partial_sum_1_Update)
          array_obj_ref_384_partial_sum_1_sample_start o<-& (array_obj_ref_384_partial_sum_1_sample_complete 1)
          array_obj_ref_384_partial_sum_1_update_start o<-& (array_obj_ref_384_partial_sum_1_update_complete 0)
          array_obj_ref_384_partial_sum_1_sample_start <-& (array_obj_ref_384_index_scaled_0)
          array_obj_ref_384_partial_sum_1_sample_start <-& (array_obj_ref_384_index_scaled_1)
          array_obj_ref_384_index_scaled_0 o<-& (array_obj_ref_384_partial_sum_1_sample_complete 1)
          phi_stmt_350_update_start_ o<-& (array_obj_ref_384_partial_sum_1_sample_complete 1)
          array_obj_ref_384_offset_calculated <-& (array_obj_ref_384_partial_sum_1_update_complete)
          ;;[array_obj_ref_384_final_index_sum_regn] 
          {
            $T [req] $T [ack] // rename
          }
          array_obj_ref_384_partial_sum_1_update_complete &-> (array_obj_ref_384_final_index_sum_regn)
          array_obj_ref_384_offset_calculated <-& (array_obj_ref_384_final_index_sum_regn)
          ;;[array_obj_ref_384_base_plus_offset] 
          {
            $T [sum_rename_req] $T [sum_rename_ack] // one gets through 
          }
          array_obj_ref_384_offset_calculated &-> (array_obj_ref_384_base_plus_offset)
          array_obj_ref_384_root_address_calculated <-& (array_obj_ref_384_base_plus_offset)
          ;;[array_obj_ref_384_word_addrgen] 
          {
            $T [root_register_req] $T [root_register_ack]
          }
          array_obj_ref_384_root_address_calculated &-> (array_obj_ref_384_word_addrgen)
          array_obj_ref_384_word_address_calculated <-& (array_obj_ref_384_word_addrgen)
          ;;[array_obj_ref_384_Sample] 
          {
            ||[word_access_start] 
            {
              ;;[word_0] 
              {
                $T [rr] $T [ra] 
              }
            }
          }
          ;;[array_obj_ref_384_Update] 
          {
            ||[word_access_complete] 
            {
              ;;[word_0] 
              {
                $T [cr] $T [ca] 
              }
            }
            ;;[array_obj_ref_384_Merge] 
            {
              $T [merge_req] $T [merge_ack]
            }
          }
          array_obj_ref_384_sample_start_ <-& (array_obj_ref_384_word_address_calculated)
          // reenable-joins
          array_obj_ref_384_partial_sum_1_update_start o<-& (array_obj_ref_384_sample_completed_ 0)
          array_obj_ref_384_sample_start_ &-> (array_obj_ref_384_Sample)
          array_obj_ref_384_sample_completed_ <-& (array_obj_ref_384_Sample)
          array_obj_ref_384_sample_completed_ &-> ($null)
          array_obj_ref_384_update_start_ &-> (array_obj_ref_384_Update)
          array_obj_ref_384_update_completed_ <-& (array_obj_ref_384_Update)
          // self-release: 
          array_obj_ref_384_sample_start_ o<-& (array_obj_ref_384_sample_completed_ 1)
          $null &-> (array_obj_ref_384_update_start_)
          array_obj_ref_384_update_start_ o<-& (array_obj_ref_384_update_completed_ 0)
          // Target expression
          // (as target) a_rc_1
          // start: WAR dependencies for a_rc_1
          // done: WAR dependencies for a_rc_1
          // end:  			a_rc_1 := B_MEM[R][Index] $buffering 1// bits of buffering = 32. 
          // start:  			a_rc_2 := C_MEM[R][Index] $buffering 1// bits of buffering = 32. 
          //  file .Aa/mvp.opt.aa, line 148
          // Source expression
          // C_MEM[R][Index]
          $T[array_obj_ref_389_base_address_calculated] 
          $T[array_obj_ref_389_sample_start_] 
          $T[array_obj_ref_389_sample_completed_] 
          $T[array_obj_ref_389_update_start_] 
          $T[array_obj_ref_389_update_completed_] 
          $T[array_obj_ref_389_word_address_calculated] 
          $T[array_obj_ref_389_root_address_calculated] 
          $T[array_obj_ref_389_offset_calculated] 
          $T[array_obj_ref_389_index_resized_0] 
          $T[array_obj_ref_389_index_scaled_0] 
          $T[array_obj_ref_389_index_computed_0] 
          // R
          // start: Forward dependencies from R to transition array_obj_ref_389_index_computed_0
          // done: Forward dependencies from R to transition array_obj_ref_389_index_computed_0
          ;;[array_obj_ref_389_index_resize_0] 
          {
            $T [index_resize_req] $T [index_resize_ack] // resize index to address-width
          }
          array_obj_ref_389_index_computed_0 &-> (array_obj_ref_389_index_resize_0)
          array_obj_ref_389_index_resized_0 <-& (array_obj_ref_389_index_resize_0)
          $T[array_obj_ref_389_index_scale_0_sample_start] 
          $T[array_obj_ref_389_index_scale_0_sample_complete] 
          $T[array_obj_ref_389_index_scale_0_update_start] 
          $T[array_obj_ref_389_index_scale_0_update_complete] 
          ;;[array_obj_ref_389_index_scale_0_Sample] 
          {
            $T [rr] $T [ra] 
          }
          ;;[array_obj_ref_389_index_scale_0_Update] 
          {
            $T [cr] $T [ca] 
          }
          array_obj_ref_389_index_resized_0 &-> (array_obj_ref_389_index_scale_0_sample_start)
          array_obj_ref_389_index_scale_0_sample_start &-> (array_obj_ref_389_index_scale_0_Sample)
          array_obj_ref_389_index_scale_0_sample_complete <-& (array_obj_ref_389_index_scale_0_Sample)
          array_obj_ref_389_index_scale_0_update_start &-> (array_obj_ref_389_index_scale_0_Update)
          array_obj_ref_389_index_scale_0_update_complete <-& (array_obj_ref_389_index_scale_0_Update)
          array_obj_ref_389_index_scaled_0 <-& (array_obj_ref_389_index_scale_0_update_complete)
          array_obj_ref_389_index_scale_0_sample_start o<-& (array_obj_ref_389_index_scale_0_sample_complete 1)
          array_obj_ref_389_index_scale_0_update_start o<-& (array_obj_ref_389_index_scale_0_update_complete 0)
          $T[array_obj_ref_389_index_resized_1] 
          $T[array_obj_ref_389_index_scaled_1] 
          $T[array_obj_ref_389_index_computed_1] 
          // Index
          // start: Forward dependencies from Index to transition array_obj_ref_389_index_computed_1
          array_obj_ref_389_index_computed_1 <-& (phi_stmt_350_update_completed_)
          // done: Forward dependencies from Index to transition array_obj_ref_389_index_computed_1
          ;;[array_obj_ref_389_index_resize_1] 
          {
            $T [index_resize_req] $T [index_resize_ack] // resize index to address-width
          }
          array_obj_ref_389_index_computed_1 &-> (array_obj_ref_389_index_resize_1)
          array_obj_ref_389_index_resized_1 <-& (array_obj_ref_389_index_resize_1)
          ;;[array_obj_ref_389_index_scale_1] 
          {
            $T [scale_rename_req] $T [scale_rename_ack] // rename 
          }
          array_obj_ref_389_index_resized_1 &-> (array_obj_ref_389_index_scale_1)
          array_obj_ref_389_index_scaled_1 <-& (array_obj_ref_389_index_scale_1)
          $T[array_obj_ref_389_partial_sum_1_sample_start] 
          $T[array_obj_ref_389_partial_sum_1_sample_complete] 
          $T[array_obj_ref_389_partial_sum_1_update_start] 
          $T[array_obj_ref_389_partial_sum_1_update_complete] 
          ;;[array_obj_ref_389_partial_sum_1_Sample] 
          {
            $T [rr] $T [ra] 
          }
          ;;[array_obj_ref_389_partial_sum_1_Update] 
          {
            $T [cr] $T [ca] 
          }
          array_obj_ref_389_partial_sum_1_sample_start &-> (array_obj_ref_389_partial_sum_1_Sample)
          array_obj_ref_389_partial_sum_1_sample_complete <-& (array_obj_ref_389_partial_sum_1_Sample)
          array_obj_ref_389_partial_sum_1_update_start &-> (array_obj_ref_389_partial_sum_1_Update)
          array_obj_ref_389_partial_sum_1_update_complete <-& (array_obj_ref_389_partial_sum_1_Update)
          array_obj_ref_389_partial_sum_1_sample_start o<-& (array_obj_ref_389_partial_sum_1_sample_complete 1)
          array_obj_ref_389_partial_sum_1_update_start o<-& (array_obj_ref_389_partial_sum_1_update_complete 0)
          array_obj_ref_389_partial_sum_1_sample_start <-& (array_obj_ref_389_index_scaled_0)
          array_obj_ref_389_partial_sum_1_sample_start <-& (array_obj_ref_389_index_scaled_1)
          array_obj_ref_389_index_scaled_0 o<-& (array_obj_ref_389_partial_sum_1_sample_complete 1)
          phi_stmt_350_update_start_ o<-& (array_obj_ref_389_partial_sum_1_sample_complete 1)
          array_obj_ref_389_offset_calculated <-& (array_obj_ref_389_partial_sum_1_update_complete)
          ;;[array_obj_ref_389_final_index_sum_regn] 
          {
            $T [req] $T [ack] // rename
          }
          array_obj_ref_389_partial_sum_1_update_complete &-> (array_obj_ref_389_final_index_sum_regn)
          array_obj_ref_389_offset_calculated <-& (array_obj_ref_389_final_index_sum_regn)
          ;;[array_obj_ref_389_base_plus_offset] 
          {
            $T [sum_rename_req] $T [sum_rename_ack] // one gets through 
          }
          array_obj_ref_389_offset_calculated &-> (array_obj_ref_389_base_plus_offset)
          array_obj_ref_389_root_address_calculated <-& (array_obj_ref_389_base_plus_offset)
          ;;[array_obj_ref_389_word_addrgen] 
          {
            $T [root_register_req] $T [root_register_ack]
          }
          array_obj_ref_389_root_address_calculated &-> (array_obj_ref_389_word_addrgen)
          array_obj_ref_389_word_address_calculated <-& (array_obj_ref_389_word_addrgen)
          ;;[array_obj_ref_389_Sample] 
          {
            ||[word_access_start] 
            {
              ;;[word_0] 
              {
                $T [rr] $T [ra] 
              }
            }
          }
          ;;[array_obj_ref_389_Update] 
          {
            ||[word_access_complete] 
            {
              ;;[word_0] 
              {
                $T [cr] $T [ca] 
              }
            }
            ;;[array_obj_ref_389_Merge] 
            {
              $T [merge_req] $T [merge_ack]
            }
          }
          array_obj_ref_389_sample_start_ <-& (array_obj_ref_389_word_address_calculated)
          // reenable-joins
          array_obj_ref_389_partial_sum_1_update_start o<-& (array_obj_ref_389_sample_completed_ 0)
          array_obj_ref_389_sample_start_ &-> (array_obj_ref_389_Sample)
          array_obj_ref_389_sample_completed_ <-& (array_obj_ref_389_Sample)
          array_obj_ref_389_sample_completed_ &-> ($null)
          array_obj_ref_389_update_start_ &-> (array_obj_ref_389_Update)
          array_obj_ref_389_update_completed_ <-& (array_obj_ref_389_Update)
          // self-release: 
          array_obj_ref_389_sample_start_ o<-& (array_obj_ref_389_sample_completed_ 1)
          $null &-> (array_obj_ref_389_update_start_)
          array_obj_ref_389_update_start_ o<-& (array_obj_ref_389_update_completed_ 0)
          // Target expression
          // (as target) a_rc_2
          // start: WAR dependencies for a_rc_2
          // done: WAR dependencies for a_rc_2
          // end:  			a_rc_2 := C_MEM[R][Index] $buffering 1// bits of buffering = 32. 
          // start:  			a_rc_3 := D_MEM[R][Index] $buffering 1// bits of buffering = 32. 
          //  file .Aa/mvp.opt.aa, line 149
          // Source expression
          // D_MEM[R][Index]
          $T[array_obj_ref_394_base_address_calculated] 
          $T[array_obj_ref_394_sample_start_] 
          $T[array_obj_ref_394_sample_completed_] 
          $T[array_obj_ref_394_update_start_] 
          $T[array_obj_ref_394_update_completed_] 
          $T[array_obj_ref_394_word_address_calculated] 
          $T[array_obj_ref_394_root_address_calculated] 
          $T[array_obj_ref_394_offset_calculated] 
          $T[array_obj_ref_394_index_resized_0] 
          $T[array_obj_ref_394_index_scaled_0] 
          $T[array_obj_ref_394_index_computed_0] 
          // R
          // start: Forward dependencies from R to transition array_obj_ref_394_index_computed_0
          // done: Forward dependencies from R to transition array_obj_ref_394_index_computed_0
          ;;[array_obj_ref_394_index_resize_0] 
          {
            $T [index_resize_req] $T [index_resize_ack] // resize index to address-width
          }
          array_obj_ref_394_index_computed_0 &-> (array_obj_ref_394_index_resize_0)
          array_obj_ref_394_index_resized_0 <-& (array_obj_ref_394_index_resize_0)
          $T[array_obj_ref_394_index_scale_0_sample_start] 
          $T[array_obj_ref_394_index_scale_0_sample_complete] 
          $T[array_obj_ref_394_index_scale_0_update_start] 
          $T[array_obj_ref_394_index_scale_0_update_complete] 
          ;;[array_obj_ref_394_index_scale_0_Sample] 
          {
            $T [rr] $T [ra] 
          }
          ;;[array_obj_ref_394_index_scale_0_Update] 
          {
            $T [cr] $T [ca] 
          }
          array_obj_ref_394_index_resized_0 &-> (array_obj_ref_394_index_scale_0_sample_start)
          array_obj_ref_394_index_scale_0_sample_start &-> (array_obj_ref_394_index_scale_0_Sample)
          array_obj_ref_394_index_scale_0_sample_complete <-& (array_obj_ref_394_index_scale_0_Sample)
          array_obj_ref_394_index_scale_0_update_start &-> (array_obj_ref_394_index_scale_0_Update)
          array_obj_ref_394_index_scale_0_update_complete <-& (array_obj_ref_394_index_scale_0_Update)
          array_obj_ref_394_index_scaled_0 <-& (array_obj_ref_394_index_scale_0_update_complete)
          array_obj_ref_394_index_scale_0_sample_start o<-& (array_obj_ref_394_index_scale_0_sample_complete 1)
          array_obj_ref_394_index_scale_0_update_start o<-& (array_obj_ref_394_index_scale_0_update_complete 0)
          $T[array_obj_ref_394_index_resized_1] 
          $T[array_obj_ref_394_index_scaled_1] 
          $T[array_obj_ref_394_index_computed_1] 
          // Index
          // start: Forward dependencies from Index to transition array_obj_ref_394_index_computed_1
          array_obj_ref_394_index_computed_1 <-& (phi_stmt_350_update_completed_)
          // done: Forward dependencies from Index to transition array_obj_ref_394_index_computed_1
          ;;[array_obj_ref_394_index_resize_1] 
          {
            $T [index_resize_req] $T [index_resize_ack] // resize index to address-width
          }
          array_obj_ref_394_index_computed_1 &-> (array_obj_ref_394_index_resize_1)
          array_obj_ref_394_index_resized_1 <-& (array_obj_ref_394_index_resize_1)
          ;;[array_obj_ref_394_index_scale_1] 
          {
            $T [scale_rename_req] $T [scale_rename_ack] // rename 
          }
          array_obj_ref_394_index_resized_1 &-> (array_obj_ref_394_index_scale_1)
          array_obj_ref_394_index_scaled_1 <-& (array_obj_ref_394_index_scale_1)
          $T[array_obj_ref_394_partial_sum_1_sample_start] 
          $T[array_obj_ref_394_partial_sum_1_sample_complete] 
          $T[array_obj_ref_394_partial_sum_1_update_start] 
          $T[array_obj_ref_394_partial_sum_1_update_complete] 
          ;;[array_obj_ref_394_partial_sum_1_Sample] 
          {
            $T [rr] $T [ra] 
          }
          ;;[array_obj_ref_394_partial_sum_1_Update] 
          {
            $T [cr] $T [ca] 
          }
          array_obj_ref_394_partial_sum_1_sample_start &-> (array_obj_ref_394_partial_sum_1_Sample)
          array_obj_ref_394_partial_sum_1_sample_complete <-& (array_obj_ref_394_partial_sum_1_Sample)
          array_obj_ref_394_partial_sum_1_update_start &-> (array_obj_ref_394_partial_sum_1_Update)
          array_obj_ref_394_partial_sum_1_update_complete <-& (array_obj_ref_394_partial_sum_1_Update)
          array_obj_ref_394_partial_sum_1_sample_start o<-& (array_obj_ref_394_partial_sum_1_sample_complete 1)
          array_obj_ref_394_partial_sum_1_update_start o<-& (array_obj_ref_394_partial_sum_1_update_complete 0)
          array_obj_ref_394_partial_sum_1_sample_start <-& (array_obj_ref_394_index_scaled_0)
          array_obj_ref_394_partial_sum_1_sample_start <-& (array_obj_ref_394_index_scaled_1)
          array_obj_ref_394_index_scaled_0 o<-& (array_obj_ref_394_partial_sum_1_sample_complete 1)
          phi_stmt_350_update_start_ o<-& (array_obj_ref_394_partial_sum_1_sample_complete 1)
          array_obj_ref_394_offset_calculated <-& (array_obj_ref_394_partial_sum_1_update_complete)
          ;;[array_obj_ref_394_final_index_sum_regn] 
          {
            $T [req] $T [ack] // rename
          }
          array_obj_ref_394_partial_sum_1_update_complete &-> (array_obj_ref_394_final_index_sum_regn)
          array_obj_ref_394_offset_calculated <-& (array_obj_ref_394_final_index_sum_regn)
          ;;[array_obj_ref_394_base_plus_offset] 
          {
            $T [sum_rename_req] $T [sum_rename_ack] // one gets through 
          }
          array_obj_ref_394_offset_calculated &-> (array_obj_ref_394_base_plus_offset)
          array_obj_ref_394_root_address_calculated <-& (array_obj_ref_394_base_plus_offset)
          ;;[array_obj_ref_394_word_addrgen] 
          {
            $T [root_register_req] $T [root_register_ack]
          }
          array_obj_ref_394_root_address_calculated &-> (array_obj_ref_394_word_addrgen)
          array_obj_ref_394_word_address_calculated <-& (array_obj_ref_394_word_addrgen)
          ;;[array_obj_ref_394_Sample] 
          {
            ||[word_access_start] 
            {
              ;;[word_0] 
              {
                $T [rr] $T [ra] 
              }
            }
          }
          ;;[array_obj_ref_394_Update] 
          {
            ||[word_access_complete] 
            {
              ;;[word_0] 
              {
                $T [cr] $T [ca] 
              }
            }
            ;;[array_obj_ref_394_Merge] 
            {
              $T [merge_req] $T [merge_ack]
            }
          }
          array_obj_ref_394_sample_start_ <-& (array_obj_ref_394_word_address_calculated)
          // reenable-joins
          array_obj_ref_394_partial_sum_1_update_start o<-& (array_obj_ref_394_sample_completed_ 0)
          array_obj_ref_394_sample_start_ &-> (array_obj_ref_394_Sample)
          array_obj_ref_394_sample_completed_ <-& (array_obj_ref_394_Sample)
          array_obj_ref_394_sample_completed_ &-> ($null)
          array_obj_ref_394_update_start_ &-> (array_obj_ref_394_Update)
          array_obj_ref_394_update_completed_ <-& (array_obj_ref_394_Update)
          // self-release: 
          array_obj_ref_394_sample_start_ o<-& (array_obj_ref_394_sample_completed_ 1)
          $null &-> (array_obj_ref_394_update_start_)
          array_obj_ref_394_update_start_ o<-& (array_obj_ref_394_update_completed_ 0)
          // Target expression
          // (as target) a_rc_3
          // start: WAR dependencies for a_rc_3
          // done: WAR dependencies for a_rc_3
          // end:  			a_rc_3 := D_MEM[R][Index] $buffering 1// bits of buffering = 32. 
          // start:  			xval_0 := x0[Index] $buffering 1// bits of buffering = 32. 
          //  file .Aa/mvp.opt.aa, line 151
          // Source expression
          // x0[Index]
          $T[array_obj_ref_404_base_address_calculated] 
          $T[array_obj_ref_404_sample_start_] 
          $T[array_obj_ref_404_sample_completed_] 
          $T[array_obj_ref_404_update_start_] 
          $T[array_obj_ref_404_update_completed_] 
          $T[array_obj_ref_404_word_address_calculated] 
          $T[array_obj_ref_404_root_address_calculated] 
          $T[array_obj_ref_404_offset_calculated] 
          $T[array_obj_ref_404_index_resized_0] 
          $T[array_obj_ref_404_index_scaled_0] 
          $T[array_obj_ref_404_index_computed_0] 
          // Index
          // start: Forward dependencies from Index to transition array_obj_ref_404_index_computed_0
          array_obj_ref_404_index_computed_0 <-& (phi_stmt_350_update_completed_)
          // done: Forward dependencies from Index to transition array_obj_ref_404_index_computed_0
          ;;[array_obj_ref_404_index_resize_0] 
          {
            $T [index_resize_req] $T [index_resize_ack] // resize index to address-width
          }
          array_obj_ref_404_index_computed_0 &-> (array_obj_ref_404_index_resize_0)
          array_obj_ref_404_index_resized_0 <-& (array_obj_ref_404_index_resize_0)
          ;;[array_obj_ref_404_index_scale_0] 
          {
            $T [scale_rename_req] $T [scale_rename_ack] // rename 
          }
          array_obj_ref_404_index_resized_0 &-> (array_obj_ref_404_index_scale_0)
          array_obj_ref_404_index_scaled_0 <-& (array_obj_ref_404_index_scale_0)
          ;;[array_obj_ref_404_final_index_sum_regn] 
          {
            $T [req] $T [ack] // rename
          }
          array_obj_ref_404_index_scaled_0 &-> (array_obj_ref_404_final_index_sum_regn)
          array_obj_ref_404_offset_calculated <-& (array_obj_ref_404_final_index_sum_regn)
          ;;[array_obj_ref_404_base_plus_offset] 
          {
            $T [sum_rename_req] $T [sum_rename_ack] // one gets through 
          }
          array_obj_ref_404_offset_calculated &-> (array_obj_ref_404_base_plus_offset)
          array_obj_ref_404_root_address_calculated <-& (array_obj_ref_404_base_plus_offset)
          ;;[array_obj_ref_404_word_addrgen] 
          {
            $T [root_register_req] $T [root_register_ack]
          }
          array_obj_ref_404_root_address_calculated &-> (array_obj_ref_404_word_addrgen)
          array_obj_ref_404_word_address_calculated <-& (array_obj_ref_404_word_addrgen)
          ;;[array_obj_ref_404_Sample] 
          {
            ||[word_access_start] 
            {
              ;;[word_0] 
              {
                $T [rr] $T [ra] 
              }
            }
          }
          ;;[array_obj_ref_404_Update] 
          {
            ||[word_access_complete] 
            {
              ;;[word_0] 
              {
                $T [cr] $T [ca] 
              }
            }
            ;;[array_obj_ref_404_Merge] 
            {
              $T [merge_req] $T [merge_ack]
            }
          }
          array_obj_ref_404_sample_start_ <-& (array_obj_ref_404_word_address_calculated)
          // reenable-joins
          phi_stmt_350_update_start_ o<-& (array_obj_ref_404_sample_completed_ 0)
          array_obj_ref_404_sample_start_ &-> (array_obj_ref_404_Sample)
          array_obj_ref_404_sample_completed_ <-& (array_obj_ref_404_Sample)
          array_obj_ref_404_sample_completed_ &-> ($null)
          array_obj_ref_404_update_start_ &-> (array_obj_ref_404_Update)
          array_obj_ref_404_update_completed_ <-& (array_obj_ref_404_Update)
          // self-release: 
          array_obj_ref_404_sample_start_ o<-& (array_obj_ref_404_sample_completed_ 1)
          $null &-> (array_obj_ref_404_update_start_)
          array_obj_ref_404_update_start_ o<-& (array_obj_ref_404_update_completed_ 0)
          // Target expression
          // (as target) xval_0
          // start: WAR dependencies for xval_0
          // done: WAR dependencies for xval_0
          // end:  			xval_0 := x0[Index] $buffering 1// bits of buffering = 32. 
          // start:  			xval_1 := x1[Index] $buffering 1// bits of buffering = 32. 
          //  file .Aa/mvp.opt.aa, line 152
          // Source expression
          // x1[Index]
          $T[array_obj_ref_408_base_address_calculated] 
          $T[array_obj_ref_408_sample_start_] 
          $T[array_obj_ref_408_sample_completed_] 
          $T[array_obj_ref_408_update_start_] 
          $T[array_obj_ref_408_update_completed_] 
          $T[array_obj_ref_408_word_address_calculated] 
          $T[array_obj_ref_408_root_address_calculated] 
          $T[array_obj_ref_408_offset_calculated] 
          $T[array_obj_ref_408_index_resized_0] 
          $T[array_obj_ref_408_index_scaled_0] 
          $T[array_obj_ref_408_index_computed_0] 
          // Index
          // start: Forward dependencies from Index to transition array_obj_ref_408_index_computed_0
          array_obj_ref_408_index_computed_0 <-& (phi_stmt_350_update_completed_)
          // done: Forward dependencies from Index to transition array_obj_ref_408_index_computed_0
          ;;[array_obj_ref_408_index_resize_0] 
          {
            $T [index_resize_req] $T [index_resize_ack] // resize index to address-width
          }
          array_obj_ref_408_index_computed_0 &-> (array_obj_ref_408_index_resize_0)
          array_obj_ref_408_index_resized_0 <-& (array_obj_ref_408_index_resize_0)
          ;;[array_obj_ref_408_index_scale_0] 
          {
            $T [scale_rename_req] $T [scale_rename_ack] // rename 
          }
          array_obj_ref_408_index_resized_0 &-> (array_obj_ref_408_index_scale_0)
          array_obj_ref_408_index_scaled_0 <-& (array_obj_ref_408_index_scale_0)
          ;;[array_obj_ref_408_final_index_sum_regn] 
          {
            $T [req] $T [ack] // rename
          }
          array_obj_ref_408_index_scaled_0 &-> (array_obj_ref_408_final_index_sum_regn)
          array_obj_ref_408_offset_calculated <-& (array_obj_ref_408_final_index_sum_regn)
          ;;[array_obj_ref_408_base_plus_offset] 
          {
            $T [sum_rename_req] $T [sum_rename_ack] // one gets through 
          }
          array_obj_ref_408_offset_calculated &-> (array_obj_ref_408_base_plus_offset)
          array_obj_ref_408_root_address_calculated <-& (array_obj_ref_408_base_plus_offset)
          ;;[array_obj_ref_408_word_addrgen] 
          {
            $T [root_register_req] $T [root_register_ack]
          }
          array_obj_ref_408_root_address_calculated &-> (array_obj_ref_408_word_addrgen)
          array_obj_ref_408_word_address_calculated <-& (array_obj_ref_408_word_addrgen)
          ;;[array_obj_ref_408_Sample] 
          {
            ||[word_access_start] 
            {
              ;;[word_0] 
              {
                $T [rr] $T [ra] 
              }
            }
          }
          ;;[array_obj_ref_408_Update] 
          {
            ||[word_access_complete] 
            {
              ;;[word_0] 
              {
                $T [cr] $T [ca] 
              }
            }
            ;;[array_obj_ref_408_Merge] 
            {
              $T [merge_req] $T [merge_ack]
            }
          }
          array_obj_ref_408_sample_start_ <-& (array_obj_ref_408_word_address_calculated)
          // reenable-joins
          phi_stmt_350_update_start_ o<-& (array_obj_ref_408_sample_completed_ 0)
          array_obj_ref_408_sample_start_ &-> (array_obj_ref_408_Sample)
          array_obj_ref_408_sample_completed_ <-& (array_obj_ref_408_Sample)
          array_obj_ref_408_sample_completed_ &-> ($null)
          array_obj_ref_408_update_start_ &-> (array_obj_ref_408_Update)
          array_obj_ref_408_update_completed_ <-& (array_obj_ref_408_Update)
          // self-release: 
          array_obj_ref_408_sample_start_ o<-& (array_obj_ref_408_sample_completed_ 1)
          $null &-> (array_obj_ref_408_update_start_)
          array_obj_ref_408_update_start_ o<-& (array_obj_ref_408_update_completed_ 0)
          // Target expression
          // (as target) xval_1
          // start: WAR dependencies for xval_1
          // done: WAR dependencies for xval_1
          // end:  			xval_1 := x1[Index] $buffering 1// bits of buffering = 32. 
          // start:  			xval_2 := x2[Index] $buffering 1// bits of buffering = 32. 
          //  file .Aa/mvp.opt.aa, line 153
          // Source expression
          // x2[Index]
          $T[array_obj_ref_412_base_address_calculated] 
          $T[array_obj_ref_412_sample_start_] 
          $T[array_obj_ref_412_sample_completed_] 
          $T[array_obj_ref_412_update_start_] 
          $T[array_obj_ref_412_update_completed_] 
          $T[array_obj_ref_412_word_address_calculated] 
          $T[array_obj_ref_412_root_address_calculated] 
          $T[array_obj_ref_412_offset_calculated] 
          $T[array_obj_ref_412_index_resized_0] 
          $T[array_obj_ref_412_index_scaled_0] 
          $T[array_obj_ref_412_index_computed_0] 
          // Index
          // start: Forward dependencies from Index to transition array_obj_ref_412_index_computed_0
          array_obj_ref_412_index_computed_0 <-& (phi_stmt_350_update_completed_)
          // done: Forward dependencies from Index to transition array_obj_ref_412_index_computed_0
          ;;[array_obj_ref_412_index_resize_0] 
          {
            $T [index_resize_req] $T [index_resize_ack] // resize index to address-width
          }
          array_obj_ref_412_index_computed_0 &-> (array_obj_ref_412_index_resize_0)
          array_obj_ref_412_index_resized_0 <-& (array_obj_ref_412_index_resize_0)
          ;;[array_obj_ref_412_index_scale_0] 
          {
            $T [scale_rename_req] $T [scale_rename_ack] // rename 
          }
          array_obj_ref_412_index_resized_0 &-> (array_obj_ref_412_index_scale_0)
          array_obj_ref_412_index_scaled_0 <-& (array_obj_ref_412_index_scale_0)
          ;;[array_obj_ref_412_final_index_sum_regn] 
          {
            $T [req] $T [ack] // rename
          }
          array_obj_ref_412_index_scaled_0 &-> (array_obj_ref_412_final_index_sum_regn)
          array_obj_ref_412_offset_calculated <-& (array_obj_ref_412_final_index_sum_regn)
          ;;[array_obj_ref_412_base_plus_offset] 
          {
            $T [sum_rename_req] $T [sum_rename_ack] // one gets through 
          }
          array_obj_ref_412_offset_calculated &-> (array_obj_ref_412_base_plus_offset)
          array_obj_ref_412_root_address_calculated <-& (array_obj_ref_412_base_plus_offset)
          ;;[array_obj_ref_412_word_addrgen] 
          {
            $T [root_register_req] $T [root_register_ack]
          }
          array_obj_ref_412_root_address_calculated &-> (array_obj_ref_412_word_addrgen)
          array_obj_ref_412_word_address_calculated <-& (array_obj_ref_412_word_addrgen)
          ;;[array_obj_ref_412_Sample] 
          {
            ||[word_access_start] 
            {
              ;;[word_0] 
              {
                $T [rr] $T [ra] 
              }
            }
          }
          ;;[array_obj_ref_412_Update] 
          {
            ||[word_access_complete] 
            {
              ;;[word_0] 
              {
                $T [cr] $T [ca] 
              }
            }
            ;;[array_obj_ref_412_Merge] 
            {
              $T [merge_req] $T [merge_ack]
            }
          }
          array_obj_ref_412_sample_start_ <-& (array_obj_ref_412_word_address_calculated)
          // reenable-joins
          phi_stmt_350_update_start_ o<-& (array_obj_ref_412_sample_completed_ 0)
          array_obj_ref_412_sample_start_ &-> (array_obj_ref_412_Sample)
          array_obj_ref_412_sample_completed_ <-& (array_obj_ref_412_Sample)
          array_obj_ref_412_sample_completed_ &-> ($null)
          array_obj_ref_412_update_start_ &-> (array_obj_ref_412_Update)
          array_obj_ref_412_update_completed_ <-& (array_obj_ref_412_Update)
          // self-release: 
          array_obj_ref_412_sample_start_ o<-& (array_obj_ref_412_sample_completed_ 1)
          $null &-> (array_obj_ref_412_update_start_)
          array_obj_ref_412_update_start_ o<-& (array_obj_ref_412_update_completed_ 0)
          // Target expression
          // (as target) xval_2
          // start: WAR dependencies for xval_2
          // done: WAR dependencies for xval_2
          // end:  			xval_2 := x2[Index] $buffering 1// bits of buffering = 32. 
          // start:  			xval_3 := x3[Index] $buffering 1// bits of buffering = 32. 
          //  file .Aa/mvp.opt.aa, line 154
          // Source expression
          // x3[Index]
          $T[array_obj_ref_416_base_address_calculated] 
          $T[array_obj_ref_416_sample_start_] 
          $T[array_obj_ref_416_sample_completed_] 
          $T[array_obj_ref_416_update_start_] 
          $T[array_obj_ref_416_update_completed_] 
          $T[array_obj_ref_416_word_address_calculated] 
          $T[array_obj_ref_416_root_address_calculated] 
          $T[array_obj_ref_416_offset_calculated] 
          $T[array_obj_ref_416_index_resized_0] 
          $T[array_obj_ref_416_index_scaled_0] 
          $T[array_obj_ref_416_index_computed_0] 
          // Index
          // start: Forward dependencies from Index to transition array_obj_ref_416_index_computed_0
          array_obj_ref_416_index_computed_0 <-& (phi_stmt_350_update_completed_)
          // done: Forward dependencies from Index to transition array_obj_ref_416_index_computed_0
          ;;[array_obj_ref_416_index_resize_0] 
          {
            $T [index_resize_req] $T [index_resize_ack] // resize index to address-width
          }
          array_obj_ref_416_index_computed_0 &-> (array_obj_ref_416_index_resize_0)
          array_obj_ref_416_index_resized_0 <-& (array_obj_ref_416_index_resize_0)
          ;;[array_obj_ref_416_index_scale_0] 
          {
            $T [scale_rename_req] $T [scale_rename_ack] // rename 
          }
          array_obj_ref_416_index_resized_0 &-> (array_obj_ref_416_index_scale_0)
          array_obj_ref_416_index_scaled_0 <-& (array_obj_ref_416_index_scale_0)
          ;;[array_obj_ref_416_final_index_sum_regn] 
          {
            $T [req] $T [ack] // rename
          }
          array_obj_ref_416_index_scaled_0 &-> (array_obj_ref_416_final_index_sum_regn)
          array_obj_ref_416_offset_calculated <-& (array_obj_ref_416_final_index_sum_regn)
          ;;[array_obj_ref_416_base_plus_offset] 
          {
            $T [sum_rename_req] $T [sum_rename_ack] // one gets through 
          }
          array_obj_ref_416_offset_calculated &-> (array_obj_ref_416_base_plus_offset)
          array_obj_ref_416_root_address_calculated <-& (array_obj_ref_416_base_plus_offset)
          ;;[array_obj_ref_416_word_addrgen] 
          {
            $T [root_register_req] $T [root_register_ack]
          }
          array_obj_ref_416_root_address_calculated &-> (array_obj_ref_416_word_addrgen)
          array_obj_ref_416_word_address_calculated <-& (array_obj_ref_416_word_addrgen)
          ;;[array_obj_ref_416_Sample] 
          {
            ||[word_access_start] 
            {
              ;;[word_0] 
              {
                $T [rr] $T [ra] 
              }
            }
          }
          ;;[array_obj_ref_416_Update] 
          {
            ||[word_access_complete] 
            {
              ;;[word_0] 
              {
                $T [cr] $T [ca] 
              }
            }
            ;;[array_obj_ref_416_Merge] 
            {
              $T [merge_req] $T [merge_ack]
            }
          }
          array_obj_ref_416_sample_start_ <-& (array_obj_ref_416_word_address_calculated)
          // reenable-joins
          phi_stmt_350_update_start_ o<-& (array_obj_ref_416_sample_completed_ 0)
          array_obj_ref_416_sample_start_ &-> (array_obj_ref_416_Sample)
          array_obj_ref_416_sample_completed_ <-& (array_obj_ref_416_Sample)
          array_obj_ref_416_sample_completed_ &-> ($null)
          array_obj_ref_416_update_start_ &-> (array_obj_ref_416_Update)
          array_obj_ref_416_update_completed_ <-& (array_obj_ref_416_Update)
          // self-release: 
          array_obj_ref_416_sample_start_ o<-& (array_obj_ref_416_sample_completed_ 1)
          $null &-> (array_obj_ref_416_update_start_)
          array_obj_ref_416_update_start_ o<-& (array_obj_ref_416_update_completed_ 0)
          // Target expression
          // (as target) xval_3
          // start: WAR dependencies for xval_3
          // done: WAR dependencies for xval_3
          // end:  			xval_3 := x3[Index] $buffering 1// bits of buffering = 32. 
          // start:  			val_0_401_delayed_5_0 := val_0 $buffering 5 $cut_through // bits of buffering = 160. 
          //  file .Aa/mvp.opt.aa, line 156
          $T[assign_stmt_426_sample_start_] 
          $T[assign_stmt_426_sample_completed_] 
          $T[assign_stmt_426_update_start_] 
          $T[assign_stmt_426_update_completed_] 
          // Source expression
          // val_0
          // Target expression
          // (as target) val_0_401_delayed_5_0
          // both source and target are implicit: use interlock 
          // Interlock 
          ;;[assign_stmt_426_Sample] 
          {
            $T [req] $T [ack] // interlock-sample.
          }
          ;;[assign_stmt_426_Update] 
          {
            $T [req] $T [ack] // interlock-update.
          }
          assign_stmt_426_sample_start_ &-> (assign_stmt_426_Sample)
          assign_stmt_426_sample_completed_ <-& (assign_stmt_426_Sample)
          assign_stmt_426_sample_completed_ &-> ($null)
          assign_stmt_426_update_start_ &-> (assign_stmt_426_Update)
          assign_stmt_426_update_completed_ <-& (assign_stmt_426_Update)
          // start: Forward dependencies from val_0 to transition assign_stmt_426_sample_start_
          assign_stmt_426_sample_start_ <-& (phi_stmt_355_update_completed_)
          // done: Forward dependencies from val_0 to transition assign_stmt_426_sample_start_
          // RAW reenables for val_0
          phi_stmt_355_update_start_ o<-& (assign_stmt_426_sample_completed_ 0)
          // self-release: 
          assign_stmt_426_sample_start_ o<-& (assign_stmt_426_sample_completed_ 1)
          $null &-> (assign_stmt_426_update_start_)
          assign_stmt_426_update_start_ o<-& (assign_stmt_426_update_completed_ 0)
          // start: WAR dependencies for val_0_401_delayed_5_0
          // done: WAR dependencies for val_0_401_delayed_5_0
          // end:  			val_0_401_delayed_5_0 := val_0 $buffering 5 $cut_through // bits of buffering = 160. 
          // start: WAR dependencies for nval_0
          // WAR dependency: Read: nval_0 before Write: 			$volatile nval_0 := (val_0_401_delayed_5_0 + (a_rc_0 * xval_0)) $buffering 1
          array_obj_ref_379_update_start_ <-& (phi_stmt_355_sample_completed_)
          phi_stmt_355_sample_start_ o<-& (array_obj_ref_379_update_completed_ 0)
          // WAR dependency: release  Read: nval_0 with Write: 			a_rc_0 := A_MEM[R][Index] $buffering 1// bits of buffering = 32. 
          array_obj_ref_404_update_start_ <-& (phi_stmt_355_sample_completed_)
          phi_stmt_355_sample_start_ o<-& (array_obj_ref_404_update_completed_ 0)
          // WAR dependency: release  Read: nval_0 with Write: 			xval_0 := x0[Index] $buffering 1// bits of buffering = 32. 
          assign_stmt_426_update_start_ <-& (phi_stmt_355_sample_completed_)
          phi_stmt_355_sample_start_ o<-& (assign_stmt_426_update_completed_ 0)
          // WAR dependency: release  Read: nval_0 with Write: 			val_0_401_delayed_5_0 := val_0 $buffering 5 $cut_through // bits of buffering = 160. 
          // done: WAR dependencies for nval_0
          // start:  			$volatile nval_0 := (val_0_401_delayed_5_0 + (a_rc_0 * xval_0)) $buffering 1
          //  file .Aa/mvp.opt.aa, line 157
          // volatile! 
          // Source expression
          // (val_0_401_delayed_5_0 + (a_rc_0 * xval_0))
          // val_0_401_delayed_5_0
          // (a_rc_0 * xval_0)
          // a_rc_0
          // xval_0
          // Target expression
          // (as target) nval_0
          // start: WAR dependencies for nval_0
          // WAR dependency: Read: nval_0 before Write: 			$volatile nval_0 := (val_0_401_delayed_5_0 + (a_rc_0 * xval_0)) $buffering 1
          array_obj_ref_379_update_start_ <-& (phi_stmt_355_sample_completed_)
          phi_stmt_355_sample_start_ o<-& (array_obj_ref_379_update_completed_ 0)
          // WAR dependency: release  Read: nval_0 with Write: 			a_rc_0 := A_MEM[R][Index] $buffering 2// bits of buffering = 64. 
          array_obj_ref_404_update_start_ <-& (phi_stmt_355_sample_completed_)
          phi_stmt_355_sample_start_ o<-& (array_obj_ref_404_update_completed_ 0)
          // WAR dependency: release  Read: nval_0 with Write: 			xval_0 := x0[Index] $buffering 2// bits of buffering = 64. 
          assign_stmt_426_update_start_ <-& (phi_stmt_355_sample_completed_)
          phi_stmt_355_sample_start_ o<-& (assign_stmt_426_update_completed_ 0)
          // WAR dependency: release  Read: nval_0 with Write: 			val_0_401_delayed_5_0 := val_0 $buffering 5 $cut_through // bits of buffering = 160. 
          // done: WAR dependencies for nval_0
          // end:  			$volatile nval_0 := (val_0_401_delayed_5_0 + (a_rc_0 * xval_0)) $buffering 1
          // start:  			val_1_408_delayed_5_0 := val_1 $buffering 5 $cut_through // bits of buffering = 160. 
          //  file .Aa/mvp.opt.aa, line 158
          $T[assign_stmt_436_sample_start_] 
          $T[assign_stmt_436_sample_completed_] 
          $T[assign_stmt_436_update_start_] 
          $T[assign_stmt_436_update_completed_] 
          // Source expression
          // val_1
          // Target expression
          // (as target) val_1_408_delayed_5_0
          // both source and target are implicit: use interlock 
          // Interlock 
          ;;[assign_stmt_436_Sample] 
          {
            $T [req] $T [ack] // interlock-sample.
          }
          ;;[assign_stmt_436_Update] 
          {
            $T [req] $T [ack] // interlock-update.
          }
          assign_stmt_436_sample_start_ &-> (assign_stmt_436_Sample)
          assign_stmt_436_sample_completed_ <-& (assign_stmt_436_Sample)
          assign_stmt_436_sample_completed_ &-> ($null)
          assign_stmt_436_update_start_ &-> (assign_stmt_436_Update)
          assign_stmt_436_update_completed_ <-& (assign_stmt_436_Update)
          // start: Forward dependencies from val_1 to transition assign_stmt_436_sample_start_
          assign_stmt_436_sample_start_ <-& (phi_stmt_360_update_completed_)
          // done: Forward dependencies from val_1 to transition assign_stmt_436_sample_start_
          // RAW reenables for val_1
          phi_stmt_360_update_start_ o<-& (assign_stmt_436_sample_completed_ 0)
          // self-release: 
          assign_stmt_436_sample_start_ o<-& (assign_stmt_436_sample_completed_ 1)
          $null &-> (assign_stmt_436_update_start_)
          assign_stmt_436_update_start_ o<-& (assign_stmt_436_update_completed_ 0)
          // start: WAR dependencies for val_1_408_delayed_5_0
          // done: WAR dependencies for val_1_408_delayed_5_0
          // end:  			val_1_408_delayed_5_0 := val_1 $buffering 5 $cut_through // bits of buffering = 160. 
          // start: WAR dependencies for nval_1
          // WAR dependency: Read: nval_1 before Write: 			$volatile nval_1 := (val_1_408_delayed_5_0 + (a_rc_1 * xval_1)) $buffering 1
          array_obj_ref_384_update_start_ <-& (phi_stmt_360_sample_completed_)
          phi_stmt_360_sample_start_ o<-& (array_obj_ref_384_update_completed_ 0)
          // WAR dependency: release  Read: nval_1 with Write: 			a_rc_1 := B_MEM[R][Index] $buffering 1// bits of buffering = 32. 
          array_obj_ref_408_update_start_ <-& (phi_stmt_360_sample_completed_)
          phi_stmt_360_sample_start_ o<-& (array_obj_ref_408_update_completed_ 0)
          // WAR dependency: release  Read: nval_1 with Write: 			xval_1 := x1[Index] $buffering 1// bits of buffering = 32. 
          assign_stmt_436_update_start_ <-& (phi_stmt_360_sample_completed_)
          phi_stmt_360_sample_start_ o<-& (assign_stmt_436_update_completed_ 0)
          // WAR dependency: release  Read: nval_1 with Write: 			val_1_408_delayed_5_0 := val_1 $buffering 5 $cut_through // bits of buffering = 160. 
          // done: WAR dependencies for nval_1
          // start:  			$volatile nval_1 := (val_1_408_delayed_5_0 + (a_rc_1 * xval_1)) $buffering 1
          //  file .Aa/mvp.opt.aa, line 159
          // volatile! 
          // Source expression
          // (val_1_408_delayed_5_0 + (a_rc_1 * xval_1))
          // val_1_408_delayed_5_0
          // (a_rc_1 * xval_1)
          // a_rc_1
          // xval_1
          // Target expression
          // (as target) nval_1
          // start: WAR dependencies for nval_1
          // WAR dependency: Read: nval_1 before Write: 			$volatile nval_1 := (val_1_408_delayed_5_0 + (a_rc_1 * xval_1)) $buffering 1
          array_obj_ref_384_update_start_ <-& (phi_stmt_360_sample_completed_)
          phi_stmt_360_sample_start_ o<-& (array_obj_ref_384_update_completed_ 0)
          // WAR dependency: release  Read: nval_1 with Write: 			a_rc_1 := B_MEM[R][Index] $buffering 2// bits of buffering = 64. 
          array_obj_ref_408_update_start_ <-& (phi_stmt_360_sample_completed_)
          phi_stmt_360_sample_start_ o<-& (array_obj_ref_408_update_completed_ 0)
          // WAR dependency: release  Read: nval_1 with Write: 			xval_1 := x1[Index] $buffering 2// bits of buffering = 64. 
          assign_stmt_436_update_start_ <-& (phi_stmt_360_sample_completed_)
          phi_stmt_360_sample_start_ o<-& (assign_stmt_436_update_completed_ 0)
          // WAR dependency: release  Read: nval_1 with Write: 			val_1_408_delayed_5_0 := val_1 $buffering 5 $cut_through // bits of buffering = 160. 
          // done: WAR dependencies for nval_1
          // end:  			$volatile nval_1 := (val_1_408_delayed_5_0 + (a_rc_1 * xval_1)) $buffering 1
          // start:  			val_2_415_delayed_5_0 := val_2 $buffering 5 $cut_through // bits of buffering = 160. 
          //  file .Aa/mvp.opt.aa, line 160
          $T[assign_stmt_446_sample_start_] 
          $T[assign_stmt_446_sample_completed_] 
          $T[assign_stmt_446_update_start_] 
          $T[assign_stmt_446_update_completed_] 
          // Source expression
          // val_2
          // Target expression
          // (as target) val_2_415_delayed_5_0
          // both source and target are implicit: use interlock 
          // Interlock 
          ;;[assign_stmt_446_Sample] 
          {
            $T [req] $T [ack] // interlock-sample.
          }
          ;;[assign_stmt_446_Update] 
          {
            $T [req] $T [ack] // interlock-update.
          }
          assign_stmt_446_sample_start_ &-> (assign_stmt_446_Sample)
          assign_stmt_446_sample_completed_ <-& (assign_stmt_446_Sample)
          assign_stmt_446_sample_completed_ &-> ($null)
          assign_stmt_446_update_start_ &-> (assign_stmt_446_Update)
          assign_stmt_446_update_completed_ <-& (assign_stmt_446_Update)
          // start: Forward dependencies from val_2 to transition assign_stmt_446_sample_start_
          assign_stmt_446_sample_start_ <-& (phi_stmt_365_update_completed_)
          // done: Forward dependencies from val_2 to transition assign_stmt_446_sample_start_
          // RAW reenables for val_2
          phi_stmt_365_update_start_ o<-& (assign_stmt_446_sample_completed_ 0)
          // self-release: 
          assign_stmt_446_sample_start_ o<-& (assign_stmt_446_sample_completed_ 1)
          $null &-> (assign_stmt_446_update_start_)
          assign_stmt_446_update_start_ o<-& (assign_stmt_446_update_completed_ 0)
          // start: WAR dependencies for val_2_415_delayed_5_0
          // done: WAR dependencies for val_2_415_delayed_5_0
          // end:  			val_2_415_delayed_5_0 := val_2 $buffering 5 $cut_through // bits of buffering = 160. 
          // start: WAR dependencies for nval_2
          // WAR dependency: Read: nval_2 before Write: 			$volatile nval_2 := (val_2_415_delayed_5_0 + (a_rc_2 * xval_2)) $buffering 1
          array_obj_ref_389_update_start_ <-& (phi_stmt_365_sample_completed_)
          phi_stmt_365_sample_start_ o<-& (array_obj_ref_389_update_completed_ 0)
          // WAR dependency: release  Read: nval_2 with Write: 			a_rc_2 := C_MEM[R][Index] $buffering 1// bits of buffering = 32. 
          array_obj_ref_412_update_start_ <-& (phi_stmt_365_sample_completed_)
          phi_stmt_365_sample_start_ o<-& (array_obj_ref_412_update_completed_ 0)
          // WAR dependency: release  Read: nval_2 with Write: 			xval_2 := x2[Index] $buffering 1// bits of buffering = 32. 
          assign_stmt_446_update_start_ <-& (phi_stmt_365_sample_completed_)
          phi_stmt_365_sample_start_ o<-& (assign_stmt_446_update_completed_ 0)
          // WAR dependency: release  Read: nval_2 with Write: 			val_2_415_delayed_5_0 := val_2 $buffering 5 $cut_through // bits of buffering = 160. 
          // done: WAR dependencies for nval_2
          // start:  			$volatile nval_2 := (val_2_415_delayed_5_0 + (a_rc_2 * xval_2)) $buffering 1
          //  file .Aa/mvp.opt.aa, line 161
          // volatile! 
          // Source expression
          // (val_2_415_delayed_5_0 + (a_rc_2 * xval_2))
          // val_2_415_delayed_5_0
          // (a_rc_2 * xval_2)
          // a_rc_2
          // xval_2
          // Target expression
          // (as target) nval_2
          // start: WAR dependencies for nval_2
          // WAR dependency: Read: nval_2 before Write: 			$volatile nval_2 := (val_2_415_delayed_5_0 + (a_rc_2 * xval_2)) $buffering 1
          array_obj_ref_389_update_start_ <-& (phi_stmt_365_sample_completed_)
          phi_stmt_365_sample_start_ o<-& (array_obj_ref_389_update_completed_ 0)
          // WAR dependency: release  Read: nval_2 with Write: 			a_rc_2 := C_MEM[R][Index] $buffering 2// bits of buffering = 64. 
          array_obj_ref_412_update_start_ <-& (phi_stmt_365_sample_completed_)
          phi_stmt_365_sample_start_ o<-& (array_obj_ref_412_update_completed_ 0)
          // WAR dependency: release  Read: nval_2 with Write: 			xval_2 := x2[Index] $buffering 2// bits of buffering = 64. 
          assign_stmt_446_update_start_ <-& (phi_stmt_365_sample_completed_)
          phi_stmt_365_sample_start_ o<-& (assign_stmt_446_update_completed_ 0)
          // WAR dependency: release  Read: nval_2 with Write: 			val_2_415_delayed_5_0 := val_2 $buffering 5 $cut_through // bits of buffering = 160. 
          // done: WAR dependencies for nval_2
          // end:  			$volatile nval_2 := (val_2_415_delayed_5_0 + (a_rc_2 * xval_2)) $buffering 1
          // start:  			val_3_422_delayed_5_0 := val_3 $buffering 5 $cut_through // bits of buffering = 160. 
          //  file .Aa/mvp.opt.aa, line 162
          $T[assign_stmt_456_sample_start_] 
          $T[assign_stmt_456_sample_completed_] 
          $T[assign_stmt_456_update_start_] 
          $T[assign_stmt_456_update_completed_] 
          // Source expression
          // val_3
          // Target expression
          // (as target) val_3_422_delayed_5_0
          // both source and target are implicit: use interlock 
          // Interlock 
          ;;[assign_stmt_456_Sample] 
          {
            $T [req] $T [ack] // interlock-sample.
          }
          ;;[assign_stmt_456_Update] 
          {
            $T [req] $T [ack] // interlock-update.
          }
          assign_stmt_456_sample_start_ &-> (assign_stmt_456_Sample)
          assign_stmt_456_sample_completed_ <-& (assign_stmt_456_Sample)
          assign_stmt_456_sample_completed_ &-> ($null)
          assign_stmt_456_update_start_ &-> (assign_stmt_456_Update)
          assign_stmt_456_update_completed_ <-& (assign_stmt_456_Update)
          // start: Forward dependencies from val_3 to transition assign_stmt_456_sample_start_
          assign_stmt_456_sample_start_ <-& (phi_stmt_370_update_completed_)
          // done: Forward dependencies from val_3 to transition assign_stmt_456_sample_start_
          // RAW reenables for val_3
          phi_stmt_370_update_start_ o<-& (assign_stmt_456_sample_completed_ 0)
          // self-release: 
          assign_stmt_456_sample_start_ o<-& (assign_stmt_456_sample_completed_ 1)
          $null &-> (assign_stmt_456_update_start_)
          assign_stmt_456_update_start_ o<-& (assign_stmt_456_update_completed_ 0)
          // start: WAR dependencies for val_3_422_delayed_5_0
          // done: WAR dependencies for val_3_422_delayed_5_0
          // end:  			val_3_422_delayed_5_0 := val_3 $buffering 5 $cut_through // bits of buffering = 160. 
          // start: WAR dependencies for nval_3
          // WAR dependency: Read: nval_3 before Write: 			$volatile nval_3 := (val_3_422_delayed_5_0 + (a_rc_3 * xval_3)) $buffering 1
          array_obj_ref_394_update_start_ <-& (phi_stmt_370_sample_completed_)
          phi_stmt_370_sample_start_ o<-& (array_obj_ref_394_update_completed_ 0)
          // WAR dependency: release  Read: nval_3 with Write: 			a_rc_3 := D_MEM[R][Index] $buffering 1// bits of buffering = 32. 
          array_obj_ref_416_update_start_ <-& (phi_stmt_370_sample_completed_)
          phi_stmt_370_sample_start_ o<-& (array_obj_ref_416_update_completed_ 0)
          // WAR dependency: release  Read: nval_3 with Write: 			xval_3 := x3[Index] $buffering 1// bits of buffering = 32. 
          assign_stmt_456_update_start_ <-& (phi_stmt_370_sample_completed_)
          phi_stmt_370_sample_start_ o<-& (assign_stmt_456_update_completed_ 0)
          // WAR dependency: release  Read: nval_3 with Write: 			val_3_422_delayed_5_0 := val_3 $buffering 5 $cut_through // bits of buffering = 160. 
          // done: WAR dependencies for nval_3
          // start:  			$volatile nval_3 := (val_3_422_delayed_5_0 + (a_rc_3 * xval_3)) $buffering 1
          //  file .Aa/mvp.opt.aa, line 163
          // volatile! 
          // Source expression
          // (val_3_422_delayed_5_0 + (a_rc_3 * xval_3))
          // val_3_422_delayed_5_0
          // (a_rc_3 * xval_3)
          // a_rc_3
          // xval_3
          // Target expression
          // (as target) nval_3
          // start: WAR dependencies for nval_3
          // WAR dependency: Read: nval_3 before Write: 			$volatile nval_3 := (val_3_422_delayed_5_0 + (a_rc_3 * xval_3)) $buffering 1
          array_obj_ref_394_update_start_ <-& (phi_stmt_370_sample_completed_)
          phi_stmt_370_sample_start_ o<-& (array_obj_ref_394_update_completed_ 0)
          // WAR dependency: release  Read: nval_3 with Write: 			a_rc_3 := D_MEM[R][Index] $buffering 2// bits of buffering = 64. 
          array_obj_ref_416_update_start_ <-& (phi_stmt_370_sample_completed_)
          phi_stmt_370_sample_start_ o<-& (array_obj_ref_416_update_completed_ 0)
          // WAR dependency: release  Read: nval_3 with Write: 			xval_3 := x3[Index] $buffering 2// bits of buffering = 64. 
          assign_stmt_456_update_start_ <-& (phi_stmt_370_sample_completed_)
          phi_stmt_370_sample_start_ o<-& (assign_stmt_456_update_completed_ 0)
          // WAR dependency: release  Read: nval_3 with Write: 			val_3_422_delayed_5_0 := val_3 $buffering 5 $cut_through // bits of buffering = 160. 
          // done: WAR dependencies for nval_3
          // end:  			$volatile nval_3 := (val_3_422_delayed_5_0 + (a_rc_3 * xval_3)) $buffering 1
          // start:  			nC := (C + 4 ) $buffering 1// bits of buffering = 8. 
          //  file .Aa/mvp.opt.aa, line 165
          // Source expression
          // (C + 4 )
          $T[ADD_u8_u8_472_sample_start_] 
          $T[ADD_u8_u8_472_sample_completed_] 
          $T[ADD_u8_u8_472_update_start_] 
          $T[ADD_u8_u8_472_update_completed_] 
          // C
          // start: Forward dependencies from C to transition ADD_u8_u8_472_sample_start_
          ADD_u8_u8_472_sample_start_ <-& (phi_stmt_345_update_completed_)
          // done: Forward dependencies from C to transition ADD_u8_u8_472_sample_start_
          ;;[ADD_u8_u8_472_Sample] 
          {
            // binary expression 
            $T [rr] $T [ra]  // (split) binary operation 
          }
          ;;[ADD_u8_u8_472_Update] 
          {
            // binary expression 
            $T [cr] $T [ca] // (split) binary operation 
          }
          ADD_u8_u8_472_sample_start_ &-> (ADD_u8_u8_472_Sample)
          ADD_u8_u8_472_sample_completed_ <-& (ADD_u8_u8_472_Sample)
          ADD_u8_u8_472_sample_completed_ &-> ($null)
          ADD_u8_u8_472_update_start_ &-> (ADD_u8_u8_472_Update)
          ADD_u8_u8_472_update_completed_ <-& (ADD_u8_u8_472_Update)
          // RAW reenables for C
          phi_stmt_345_update_start_ o<-& (ADD_u8_u8_472_sample_completed_ 0)
          // self-release: 
          ADD_u8_u8_472_sample_start_ o<-& (ADD_u8_u8_472_sample_completed_ 1)
          $null &-> (ADD_u8_u8_472_update_start_)
          ADD_u8_u8_472_update_start_ o<-& (ADD_u8_u8_472_update_completed_ 0)
          // Target expression
          // (as target) nC
          // start: WAR dependencies for nC
          // WAR dependency: Read: nC before Write: 			nC := (C + 4 ) $buffering 1// bits of buffering = 8. 
          ADD_u8_u8_472_update_start_ <-& (phi_stmt_345_sample_completed_)
          phi_stmt_345_sample_start_ o<-& (ADD_u8_u8_472_update_completed_ 0)
          // WAR dependency: release  Read: nC with Write: 			nC := (C + 4 ) $buffering 1// bits of buffering = 8. 
          // done: WAR dependencies for nC
          // end:  			nC := (C + 4 ) $buffering 2// bits of buffering = 16. 
          // start:  			nIndex := (Index + 1 ) $buffering 1// bits of buffering = 3. 
          //  file .Aa/mvp.opt.aa, line 166
          // Source expression
          // (Index + 1 )
          $T[ADD_u3_u3_477_sample_start_] 
          $T[ADD_u3_u3_477_sample_completed_] 
          $T[ADD_u3_u3_477_update_start_] 
          $T[ADD_u3_u3_477_update_completed_] 
          // Index
          // start: Forward dependencies from Index to transition ADD_u3_u3_477_sample_start_
          ADD_u3_u3_477_sample_start_ <-& (phi_stmt_350_update_completed_)
          // done: Forward dependencies from Index to transition ADD_u3_u3_477_sample_start_
          ;;[ADD_u3_u3_477_Sample] 
          {
            // binary expression 
            $T [rr] $T [ra]  // (split) binary operation 
          }
          ;;[ADD_u3_u3_477_Update] 
          {
            // binary expression 
            $T [cr] $T [ca] // (split) binary operation 
          }
          ADD_u3_u3_477_sample_start_ &-> (ADD_u3_u3_477_Sample)
          ADD_u3_u3_477_sample_completed_ <-& (ADD_u3_u3_477_Sample)
          ADD_u3_u3_477_sample_completed_ &-> ($null)
          ADD_u3_u3_477_update_start_ &-> (ADD_u3_u3_477_Update)
          ADD_u3_u3_477_update_completed_ <-& (ADD_u3_u3_477_Update)
          // RAW reenables for Index
          phi_stmt_350_update_start_ o<-& (ADD_u3_u3_477_sample_completed_ 0)
          // self-release: 
          ADD_u3_u3_477_sample_start_ o<-& (ADD_u3_u3_477_sample_completed_ 1)
          $null &-> (ADD_u3_u3_477_update_start_)
          ADD_u3_u3_477_update_start_ o<-& (ADD_u3_u3_477_update_completed_ 0)
          // Target expression
          // (as target) nIndex
          // start: WAR dependencies for nIndex
          // WAR dependency: Read: nIndex before Write: 			nIndex := (Index + 1 ) $buffering 1// bits of buffering = 3. 
          ADD_u3_u3_477_update_start_ <-& (phi_stmt_350_sample_completed_)
          phi_stmt_350_sample_start_ o<-& (ADD_u3_u3_477_update_completed_ 0)
          // WAR dependency: release  Read: nIndex with Write: 			nIndex := (Index + 1 ) $buffering 1// bits of buffering = 3. 
          // done: WAR dependencies for nIndex
          // end:  			nIndex := (Index + 1 ) $buffering 2// bits of buffering = 6. 
          // (nC < 32 )
          // nC
          $T [loop_body_delay_to_condition_start] $delay
          loop_body_start &-> (loop_body_delay_to_condition_start)
          loop_body_delay_to_condition_start &-> (condition_evaluated)
          // start: Forward dependencies from (nC < 32 ) to transition condition_evaluated
          condition_evaluated <-& (ADD_u8_u8_472_update_completed_)
          // done: Forward dependencies from (nC < 32 ) to transition condition_evaluated
          condition_evaluated &-> ($null)
          // load-store dependencies..
          // memory-space  memory_space_7
          //  array_obj_ref_416 load
          // reenable across ring for memory space memory_space_7
          // leading and trailing sets are the same... no ring dependency
          // memory-space  memory_space_6
          //  array_obj_ref_412 load
          // reenable across ring for memory space memory_space_6
          // leading and trailing sets are the same... no ring dependency
          // memory-space  memory_space_5
          //  array_obj_ref_408 load
          // reenable across ring for memory space memory_space_5
          // leading and trailing sets are the same... no ring dependency
          // memory-space  memory_space_4
          //  array_obj_ref_404 load
          // reenable across ring for memory space memory_space_4
          // leading and trailing sets are the same... no ring dependency
          // memory-space  memory_space_3
          //  array_obj_ref_394 load
          // reenable across ring for memory space memory_space_3
          // leading and trailing sets are the same... no ring dependency
          // memory-space  memory_space_2
          //  array_obj_ref_389 load
          // reenable across ring for memory space memory_space_2
          // leading and trailing sets are the same... no ring dependency
          // memory-space  memory_space_1
          //  array_obj_ref_384 load
          // reenable across ring for memory space memory_space_1
          // leading and trailing sets are the same... no ring dependency
          // memory-space  memory_space_0
          //  array_obj_ref_379 load
          // reenable across ring for memory space memory_space_0
          // leading and trailing sets are the same... no ring dependency
        }
        ( first_time_through_loop_body  back_edge_to_loop_body) 
        ( condition_evaluated )
        ;; [loop_exit] 
        {
          $T [ack] 
        }
        ;; [loop_taken] 
        {
          $T [ack] 
        }
        do_while_stmt_343__entry__ <-| ($entry)
        loop_body_done <-| ( do_while_stmt_343_loop_body ) 
        condition_done |-> (loop_exit loop_taken)
        do_while_stmt_343__exit__ |-> ($exit)
        $bind condition_done <= do_while_stmt_343_loop_body : condition_evaluated
        $bind do_while_stmt_343__entry__  => do_while_stmt_343_loop_body : first_time_through_loop_body 
        $bind loop_back  => do_while_stmt_343_loop_body : back_edge_to_loop_body 
        $terminate (loop_exit loop_taken loop_body_done) (loop_back do_while_stmt_343__exit__)
      }
      do_while_stmt_343__entry__ |-> (do_while_stmt_343)
      do_while_stmt_343__exit__ <-| (do_while_stmt_343)
      do_while_stmt_343__entry__ <-| (branch_block_stmt_342__entry__)
      do_while_stmt_343__exit__ |-> (branch_block_stmt_342__exit__)
    }
    ::[assign_stmt_492] 
    {
      // start:  	result := (nval_0 + (nval_1 + (nval_2 + nval_3))) $buffering 1// bits of buffering = 32. 
      //  file .Aa/mvp.opt.aa, line 170
      // Source expression
      // (nval_0 + (nval_1 + (nval_2 + nval_3)))
      $T[ADD_u32_u32_491_sample_start_] 
      $T[ADD_u32_u32_491_sample_completed_] 
      $T[ADD_u32_u32_491_update_start_] 
      $T[ADD_u32_u32_491_update_completed_] 
      // nval_0
      // (nval_1 + (nval_2 + nval_3))
      // nval_1
      // (nval_2 + nval_3)
      // nval_2
      // nval_3
      // start: Forward dependencies from nval_0 to transition ADD_u32_u32_491_sample_start_
      // done: Forward dependencies from nval_0 to transition ADD_u32_u32_491_sample_start_
      // start: Forward dependencies from (nval_1 + (nval_2 + nval_3)) to transition ADD_u32_u32_491_sample_start_
      // done: Forward dependencies from (nval_1 + (nval_2 + nval_3)) to transition ADD_u32_u32_491_sample_start_
      ;;[ADD_u32_u32_491_Sample] 
      {
        // binary expression 
        $T [rr] $T [ra]  // (split) binary operation 
      }
      ;;[ADD_u32_u32_491_Update] 
      {
        // binary expression 
        $T [cr] $T [ca] // (split) binary operation 
      }
      ADD_u32_u32_491_sample_start_ &-> (ADD_u32_u32_491_Sample)
      ADD_u32_u32_491_sample_completed_ <-& (ADD_u32_u32_491_Sample)
      ADD_u32_u32_491_sample_completed_ &-> ($null)
      ADD_u32_u32_491_update_start_ &-> (ADD_u32_u32_491_Update)
      ADD_u32_u32_491_update_completed_ <-& (ADD_u32_u32_491_Update)
      // Target expression
      // (as target) result
      // result
      // write to interface object
      // start: WAR dependencies for result
      // done: WAR dependencies for result
      // result
      // write to interface object
      // end:  	result := (nval_0 + (nval_1 + (nval_2 + nval_3))) $buffering 1// bits of buffering = 32. 
      // load-store dependencies..
    }
  }
  // end control-path
  $DP 
  {
    // begin data-path 
    // constant-object-declarations for block %dotP_1%mmloop%
    //  file .Aa/mvp.opt.aa, line 132
    // constant-object-declarations for block %dotP_1%mmloop
    //  file .Aa/mvp.opt.aa, line 128
    // constant-object-declarations for block %dotP_1
    //  file .Aa/mvp.opt.aa, line 123
    // constant-declarations for block %dotP_1%mmloop
    //  file .Aa/mvp.opt.aa, line 128
    // do-while statement  
    //  file .Aa/mvp.opt.aa, line 130
    // 32 
    $constant $W[konst_481_wire_constant] : $int<8> := _b00100000// 32
    // constant-declarations for block %dotP_1%mmloop%
    //  file .Aa/mvp.opt.aa, line 132
    // constant-declarations for phi:  			$phi C := 			  ($bitcast ($uint<8>) 0  ) $on   $entry 			  nC $on   $loopback 
    // type of target is $uint<8>
    //  file .Aa/mvp.opt.aa, line 133
    // ($bitcast ($uint<8>) 0  )
    $constant $W[type_cast_348_wire_constant] : $int<8> := _b00000000// 0
    // constant-declarations for phi:  			$phi Index := 			  ($bitcast ($uint<3>) 0  ) $on   $entry 			  nIndex $on   $loopback 
    // type of target is $uint<3>
    //  file .Aa/mvp.opt.aa, line 135
    // ($bitcast ($uint<3>) 0  )
    $constant $W[type_cast_353_wire_constant] : $int<3> := _b000// 0
    // constant-declarations for phi:  			$phi val_0 := 			  ($bitcast ($uint<32>) 0  ) $on   $entry 			  nval_0 $on   $loopback 
    // type of target is $uint<32>
    //  file .Aa/mvp.opt.aa, line 137
    // ($bitcast ($uint<32>) 0  )
    $constant $W[type_cast_358_wire_constant] : $int<32> := _b00000000000000000000000000000000// 0
    // constant-declarations for phi:  			$phi val_1 := 			  nval_1 $on   $loopback 			  ($bitcast ($uint<32>) 0  ) $on   $entry 
    // type of target is $uint<32>
    //  file .Aa/mvp.opt.aa, line 139
    // ($bitcast ($uint<32>) 0  )
    $constant $W[type_cast_364_wire_constant] : $int<32> := _b00000000000000000000000000000000// 0
    // constant-declarations for phi:  			$phi val_2 := 			  ($bitcast ($uint<32>) 0  ) $on   $entry 			  nval_2 $on   $loopback 
    // type of target is $uint<32>
    //  file .Aa/mvp.opt.aa, line 141
    // ($bitcast ($uint<32>) 0  )
    $constant $W[type_cast_368_wire_constant] : $int<32> := _b00000000000000000000000000000000// 0
    // constant-declarations for phi:  			$phi val_3 := 			  ($bitcast ($uint<32>) 0  ) $on   $entry 			  nval_3 $on   $loopback 
    // type of target is $uint<32>
    //  file .Aa/mvp.opt.aa, line 143
    // ($bitcast ($uint<32>) 0  )
    $constant $W[type_cast_373_wire_constant] : $int<32> := _b00000000000000000000000000000000// 0
    // A_MEM[R][Index]
    $constant $W[array_obj_ref_379_resized_base_address] : $int<8> := _b00000000// 0
    $constant $W[array_obj_ref_379_offset_scale_factor_0] : $int<8> := _b00001000// 8
    $constant $W[array_obj_ref_379_offset_scale_factor_1] : $int<8> := _b00000001// 1
    $constant $W[array_obj_ref_379_word_offset_0] : $int<8> := _b00000000// 0
    // B_MEM[R][Index]
    $constant $W[array_obj_ref_384_resized_base_address] : $int<8> := _b00000000// 0
    $constant $W[array_obj_ref_384_offset_scale_factor_0] : $int<8> := _b00001000// 8
    $constant $W[array_obj_ref_384_offset_scale_factor_1] : $int<8> := _b00000001// 1
    $constant $W[array_obj_ref_384_word_offset_0] : $int<8> := _b00000000// 0
    // C_MEM[R][Index]
    $constant $W[array_obj_ref_389_resized_base_address] : $int<8> := _b00000000// 0
    $constant $W[array_obj_ref_389_offset_scale_factor_0] : $int<8> := _b00001000// 8
    $constant $W[array_obj_ref_389_offset_scale_factor_1] : $int<8> := _b00000001// 1
    $constant $W[array_obj_ref_389_word_offset_0] : $int<8> := _b00000000// 0
    // D_MEM[R][Index]
    $constant $W[array_obj_ref_394_resized_base_address] : $int<8> := _b00000000// 0
    $constant $W[array_obj_ref_394_offset_scale_factor_0] : $int<8> := _b00001000// 8
    $constant $W[array_obj_ref_394_offset_scale_factor_1] : $int<8> := _b00000001// 1
    $constant $W[array_obj_ref_394_word_offset_0] : $int<8> := _b00000000// 0
    // x0[Index]
    $constant $W[array_obj_ref_404_resized_base_address] : $int<3> := _b000// 0
    $constant $W[array_obj_ref_404_offset_scale_factor_0] : $int<3> := _b001// 1
    $constant $W[array_obj_ref_404_word_offset_0] : $int<3> := _b000// 0
    // x1[Index]
    $constant $W[array_obj_ref_408_resized_base_address] : $int<3> := _b000// 0
    $constant $W[array_obj_ref_408_offset_scale_factor_0] : $int<3> := _b001// 1
    $constant $W[array_obj_ref_408_word_offset_0] : $int<3> := _b000// 0
    // x2[Index]
    $constant $W[array_obj_ref_412_resized_base_address] : $int<3> := _b000// 0
    $constant $W[array_obj_ref_412_offset_scale_factor_0] : $int<3> := _b001// 1
    $constant $W[array_obj_ref_412_word_offset_0] : $int<3> := _b000// 0
    // x3[Index]
    $constant $W[array_obj_ref_416_resized_base_address] : $int<3> := _b000// 0
    $constant $W[array_obj_ref_416_offset_scale_factor_0] : $int<3> := _b001// 1
    $constant $W[array_obj_ref_416_word_offset_0] : $int<3> := _b000// 0
    // 4 
    $constant $W[konst_471_wire_constant] : $int<8> := _b00000100// 4
    // 1 
    $constant $W[konst_476_wire_constant] : $int<3> := _b001// 1
    // block %dotP_1%mmloop
    //  file .Aa/mvp.opt.aa, line 128
    // do-while statement  
    //  file .Aa/mvp.opt.aa, line 130
    // (nC < 32 )
    $intermediate $W[ULT_u8_u1_482_wire] : $int<1>
    // merge-statement  
    //  file .Aa/mvp.opt.aa, line 132
    // 			$phi C := 			  ($bitcast ($uint<8>) 0  ) $on   $entry 			  nC $on   $loopback 
    // type of target is $uint<8>
    //  file .Aa/mvp.opt.aa, line 133
    $W[nC_473_349_buffered] : $int<8>
    // C
    $W[C_345] : $int<8>
    // 			$phi Index := 			  ($bitcast ($uint<3>) 0  ) $on   $entry 			  nIndex $on   $loopback 
    // type of target is $uint<3>
    //  file .Aa/mvp.opt.aa, line 135
    $W[nIndex_478_354_buffered] : $int<3>
    // Index
    $W[Index_350] : $int<3>
    // 			$phi val_0 := 			  ($bitcast ($uint<32>) 0  ) $on   $entry 			  nval_0 $on   $loopback 
    // type of target is $uint<32>
    //  file .Aa/mvp.opt.aa, line 137
    $W[nval_0_433_359_buffered] : $int<32>
    // val_0
    $W[val_0_355] : $int<32>
    // 			$phi val_1 := 			  nval_1 $on   $loopback 			  ($bitcast ($uint<32>) 0  ) $on   $entry 
    // type of target is $uint<32>
    //  file .Aa/mvp.opt.aa, line 139
    $W[nval_1_443_362_buffered] : $int<32>
    // val_1
    $W[val_1_360] : $int<32>
    // 			$phi val_2 := 			  ($bitcast ($uint<32>) 0  ) $on   $entry 			  nval_2 $on   $loopback 
    // type of target is $uint<32>
    //  file .Aa/mvp.opt.aa, line 141
    $W[nval_2_453_369_buffered] : $int<32>
    // val_2
    $W[val_2_365] : $int<32>
    // 			$phi val_3 := 			  ($bitcast ($uint<32>) 0  ) $on   $entry 			  nval_3 $on   $loopback 
    // type of target is $uint<32>
    //  file .Aa/mvp.opt.aa, line 143
    $W[nval_3_463_374_buffered] : $int<32>
    // val_3
    $W[val_3_370] : $int<32>
    // 			a_rc_0 := A_MEM[R][Index] $buffering 2// bits of buffering = 64. 
    //  file .Aa/mvp.opt.aa, line 146
    // A_MEM[R][Index]
    $intermediate $W[R_R_377_resized] : $int<8>
    $intermediate $W[R_R_377_scaled] : $int<8>
    $intermediate $W[R_Index_378_resized] : $int<8>
    $intermediate $W[R_Index_378_scaled] : $int<8>
    $intermediate $W[array_obj_ref_379_index_partial_sum_1] : $int<8>
    $intermediate $W[array_obj_ref_379_final_offset] : $int<8>
    $intermediate $W[array_obj_ref_379_root_address] : $int<8>
    $W[array_obj_ref_379_word_address_0] : $pointer<memory_space_0>
    $W[array_obj_ref_379_data_0] : $int<32>
    // a_rc_0
    $W[a_rc_0_380] : $int<32>
    // 			a_rc_1 := B_MEM[R][Index] $buffering 2// bits of buffering = 64. 
    //  file .Aa/mvp.opt.aa, line 147
    // B_MEM[R][Index]
    $intermediate $W[R_R_382_resized] : $int<8>
    $intermediate $W[R_R_382_scaled] : $int<8>
    $intermediate $W[R_Index_383_resized] : $int<8>
    $intermediate $W[R_Index_383_scaled] : $int<8>
    $intermediate $W[array_obj_ref_384_index_partial_sum_1] : $int<8>
    $intermediate $W[array_obj_ref_384_final_offset] : $int<8>
    $intermediate $W[array_obj_ref_384_root_address] : $int<8>
    $W[array_obj_ref_384_word_address_0] : $pointer<memory_space_1>
    $W[array_obj_ref_384_data_0] : $int<32>
    // a_rc_1
    $W[a_rc_1_385] : $int<32>
    // 			a_rc_2 := C_MEM[R][Index] $buffering 2// bits of buffering = 64. 
    //  file .Aa/mvp.opt.aa, line 148
    // C_MEM[R][Index]
    $intermediate $W[R_R_387_resized] : $int<8>
    $intermediate $W[R_R_387_scaled] : $int<8>
    $intermediate $W[R_Index_388_resized] : $int<8>
    $intermediate $W[R_Index_388_scaled] : $int<8>
    $intermediate $W[array_obj_ref_389_index_partial_sum_1] : $int<8>
    $intermediate $W[array_obj_ref_389_final_offset] : $int<8>
    $intermediate $W[array_obj_ref_389_root_address] : $int<8>
    $W[array_obj_ref_389_word_address_0] : $pointer<memory_space_2>
    $W[array_obj_ref_389_data_0] : $int<32>
    // a_rc_2
    $W[a_rc_2_390] : $int<32>
    // 			a_rc_3 := D_MEM[R][Index] $buffering 2// bits of buffering = 64. 
    //  file .Aa/mvp.opt.aa, line 149
    // D_MEM[R][Index]
    $intermediate $W[R_R_392_resized] : $int<8>
    $intermediate $W[R_R_392_scaled] : $int<8>
    $intermediate $W[R_Index_393_resized] : $int<8>
    $intermediate $W[R_Index_393_scaled] : $int<8>
    $intermediate $W[array_obj_ref_394_index_partial_sum_1] : $int<8>
    $intermediate $W[array_obj_ref_394_final_offset] : $int<8>
    $intermediate $W[array_obj_ref_394_root_address] : $int<8>
    $W[array_obj_ref_394_word_address_0] : $pointer<memory_space_3>
    $W[array_obj_ref_394_data_0] : $int<32>
    // a_rc_3
    $W[a_rc_3_395] : $int<32>
    // 			xval_0 := x0[Index] $buffering 2// bits of buffering = 64. 
    //  file .Aa/mvp.opt.aa, line 151
    // x0[Index]
    $intermediate $W[R_Index_403_resized] : $int<3>
    $intermediate $W[R_Index_403_scaled] : $int<3>
    $intermediate $W[array_obj_ref_404_final_offset] : $int<3>
    $intermediate $W[array_obj_ref_404_root_address] : $int<3>
    $W[array_obj_ref_404_word_address_0] : $pointer<memory_space_4>
    $W[array_obj_ref_404_data_0] : $int<32>
    // xval_0
    $W[xval_0_405] : $int<32>
    // 			xval_1 := x1[Index] $buffering 2// bits of buffering = 64. 
    //  file .Aa/mvp.opt.aa, line 152
    // x1[Index]
    $intermediate $W[R_Index_407_resized] : $int<3>
    $intermediate $W[R_Index_407_scaled] : $int<3>
    $intermediate $W[array_obj_ref_408_final_offset] : $int<3>
    $intermediate $W[array_obj_ref_408_root_address] : $int<3>
    $W[array_obj_ref_408_word_address_0] : $pointer<memory_space_5>
    $W[array_obj_ref_408_data_0] : $int<32>
    // xval_1
    $W[xval_1_409] : $int<32>
    // 			xval_2 := x2[Index] $buffering 2// bits of buffering = 64. 
    //  file .Aa/mvp.opt.aa, line 153
    // x2[Index]
    $intermediate $W[R_Index_411_resized] : $int<3>
    $intermediate $W[R_Index_411_scaled] : $int<3>
    $intermediate $W[array_obj_ref_412_final_offset] : $int<3>
    $intermediate $W[array_obj_ref_412_root_address] : $int<3>
    $W[array_obj_ref_412_word_address_0] : $pointer<memory_space_6>
    $W[array_obj_ref_412_data_0] : $int<32>
    // xval_2
    $W[xval_2_413] : $int<32>
    // 			xval_3 := x3[Index] $buffering 2// bits of buffering = 64. 
    //  file .Aa/mvp.opt.aa, line 154
    // x3[Index]
    $intermediate $W[R_Index_415_resized] : $int<3>
    $intermediate $W[R_Index_415_scaled] : $int<3>
    $intermediate $W[array_obj_ref_416_final_offset] : $int<3>
    $intermediate $W[array_obj_ref_416_root_address] : $int<3>
    $W[array_obj_ref_416_word_address_0] : $pointer<memory_space_7>
    $W[array_obj_ref_416_data_0] : $int<32>
    // xval_3
    $W[xval_3_417] : $int<32>
    // 			val_0_401_delayed_5_0 := val_0 $buffering 5 $cut_through // bits of buffering = 160. 
    //  file .Aa/mvp.opt.aa, line 156
    // val_0_401_delayed_5_0
    $W[val_0_401_delayed_5_0_426] : $int<32>
    // 			$volatile nval_0 := (val_0_401_delayed_5_0 + (a_rc_0 * xval_0)) $buffering 1
    //  file .Aa/mvp.opt.aa, line 157
    // (a_rc_0 * xval_0)
    $intermediate $W[MUL_u32_u32_431_wire] : $int<32>
    // nval_0
    $W[nval_0_433] : $int<32>
    // 			val_1_408_delayed_5_0 := val_1 $buffering 5 $cut_through // bits of buffering = 160. 
    //  file .Aa/mvp.opt.aa, line 158
    // val_1_408_delayed_5_0
    $W[val_1_408_delayed_5_0_436] : $int<32>
    // 			$volatile nval_1 := (val_1_408_delayed_5_0 + (a_rc_1 * xval_1)) $buffering 1
    //  file .Aa/mvp.opt.aa, line 159
    // (a_rc_1 * xval_1)
    $intermediate $W[MUL_u32_u32_441_wire] : $int<32>
    // nval_1
    $W[nval_1_443] : $int<32>
    // 			val_2_415_delayed_5_0 := val_2 $buffering 5 $cut_through // bits of buffering = 160. 
    //  file .Aa/mvp.opt.aa, line 160
    // val_2_415_delayed_5_0
    $W[val_2_415_delayed_5_0_446] : $int<32>
    // 			$volatile nval_2 := (val_2_415_delayed_5_0 + (a_rc_2 * xval_2)) $buffering 1
    //  file .Aa/mvp.opt.aa, line 161
    // (a_rc_2 * xval_2)
    $intermediate $W[MUL_u32_u32_451_wire] : $int<32>
    // nval_2
    $W[nval_2_453] : $int<32>
    // 			val_3_422_delayed_5_0 := val_3 $buffering 5 $cut_through // bits of buffering = 160. 
    //  file .Aa/mvp.opt.aa, line 162
    // val_3_422_delayed_5_0
    $W[val_3_422_delayed_5_0_456] : $int<32>
    // 			$volatile nval_3 := (val_3_422_delayed_5_0 + (a_rc_3 * xval_3)) $buffering 1
    //  file .Aa/mvp.opt.aa, line 163
    // (a_rc_3 * xval_3)
    $intermediate $W[MUL_u32_u32_461_wire] : $int<32>
    // nval_3
    $W[nval_3_463] : $int<32>
    // 			nC := (C + 4 ) $buffering 2// bits of buffering = 16. 
    //  file .Aa/mvp.opt.aa, line 165
    // nC
    $W[nC_473] : $int<8>
    // 			nIndex := (Index + 1 ) $buffering 2// bits of buffering = 6. 
    //  file .Aa/mvp.opt.aa, line 166
    // nIndex
    $W[nIndex_478] : $int<3>
    // 	result := (nval_0 + (nval_1 + (nval_2 + nval_3))) $buffering 1// bits of buffering = 32. 
    //  file .Aa/mvp.opt.aa, line 170
    // (nval_2 + nval_3)
    $intermediate $W[ADD_u32_u32_489_wire] : $int<32>
    // (nval_1 + (nval_2 + nval_3))
    $intermediate $W[ADD_u32_u32_490_wire] : $int<32>
    // result
    // datapath-instances for block %dotP_1%mmloop
    //  file .Aa/mvp.opt.aa, line 128
    // datapath-instances for do-while  
    //  file .Aa/mvp.opt.aa, line 130
    // (nC < 32 )
    <[ULT_u8_u1_482_inst] (nC_473 konst_481_wire_constant) (ULT_u8_u1_482_wire)   $flowthrough 
    $delay ULT_u8_u1_482_inst 0
    ==0? [do_while_stmt_343_branch] (ULT_u8_u1_482_wire)
    $flowthrough
    // data-path instances for merge  
    //  file .Aa/mvp.opt.aa, line 132
    // 			$phi C := 			  ($bitcast ($uint<8>) 0  ) $on   $entry 			  nC $on   $loopback 
    // type of target is $uint<8>
    //  file .Aa/mvp.opt.aa, line 133
    # := [nC_473_349_buf] (nC_473) (nC_473_349_buffered)     $fullrate
    $buffering $out nC_473_349_buf nC_473_349_buffered  1
    # $phi [phi_stmt_345] (type_cast_348_wire_constant nC_473_349_buffered) ( C_345 ) $fullrate
    // $buffering  $out phi_stmt_345 C_345 2
    // 			$phi Index := 			  ($bitcast ($uint<3>) 0  ) $on   $entry 			  nIndex $on   $loopback 
    // type of target is $uint<3>
    //  file .Aa/mvp.opt.aa, line 135
    # := [nIndex_478_354_buf] (nIndex_478) (nIndex_478_354_buffered)     $fullrate
    $buffering $out nIndex_478_354_buf nIndex_478_354_buffered  1
    # $phi [phi_stmt_350] (type_cast_353_wire_constant nIndex_478_354_buffered) ( Index_350 ) $fullrate
    // $buffering  $out phi_stmt_350 Index_350 2
    // 			$phi val_0 := 			  ($bitcast ($uint<32>) 0  ) $on   $entry 			  nval_0 $on   $loopback 
    // type of target is $uint<32>
    //  file .Aa/mvp.opt.aa, line 137
    # := [nval_0_433_359_buf] (nval_0_433) (nval_0_433_359_buffered)     $fullrate
    $buffering $out nval_0_433_359_buf nval_0_433_359_buffered  1
    # $phi [phi_stmt_355] (type_cast_358_wire_constant nval_0_433_359_buffered) ( val_0_355 ) $fullrate
    // $buffering  $out phi_stmt_355 val_0_355 2
    // 			$phi val_1 := 			  nval_1 $on   $loopback 			  ($bitcast ($uint<32>) 0  ) $on   $entry 
    // type of target is $uint<32>
    //  file .Aa/mvp.opt.aa, line 139
    # := [nval_1_443_362_buf] (nval_1_443) (nval_1_443_362_buffered)     $fullrate
    $buffering $out nval_1_443_362_buf nval_1_443_362_buffered  1
    # $phi [phi_stmt_360] (nval_1_443_362_buffered type_cast_364_wire_constant) ( val_1_360 ) $fullrate
    // $buffering  $out phi_stmt_360 val_1_360 2
    // 			$phi val_2 := 			  ($bitcast ($uint<32>) 0  ) $on   $entry 			  nval_2 $on   $loopback 
    // type of target is $uint<32>
    //  file .Aa/mvp.opt.aa, line 141
    # := [nval_2_453_369_buf] (nval_2_453) (nval_2_453_369_buffered)     $fullrate
    $buffering $out nval_2_453_369_buf nval_2_453_369_buffered  1
    # $phi [phi_stmt_365] (type_cast_368_wire_constant nval_2_453_369_buffered) ( val_2_365 ) $fullrate
    // $buffering  $out phi_stmt_365 val_2_365 2
    // 			$phi val_3 := 			  ($bitcast ($uint<32>) 0  ) $on   $entry 			  nval_3 $on   $loopback 
    // type of target is $uint<32>
    //  file .Aa/mvp.opt.aa, line 143
    # := [nval_3_463_374_buf] (nval_3_463) (nval_3_463_374_buffered)     $fullrate
    $buffering $out nval_3_463_374_buf nval_3_463_374_buffered  1
    # $phi [phi_stmt_370] (type_cast_373_wire_constant nval_3_463_374_buffered) ( val_3_370 ) $fullrate
    // $buffering  $out phi_stmt_370 val_3_370 2
    // 			a_rc_0 := A_MEM[R][Index] $buffering 2// bits of buffering = 64. 
    //  file .Aa/mvp.opt.aa, line 146
    // A_MEM[R][Index]
    &/ [array_obj_ref_379_index_0_resize] (R) (R_R_377_resized) 
    $flowthrough 
    *[array_obj_ref_379_index_0_scale] (R_R_377_resized array_obj_ref_379_offset_scale_factor_0) (R_R_377_scaled)    $fullrate
    $buffering  $in array_obj_ref_379_index_0_scale R_R_377_resized 2
    $buffering  $in array_obj_ref_379_index_0_scale array_obj_ref_379_offset_scale_factor_0 2
    $buffering  $out array_obj_ref_379_index_0_scale R_R_377_scaled 2
    $delay array_obj_ref_379_index_0_scale 2
    &/ [array_obj_ref_379_index_1_resize] (Index_350) (R_Index_378_resized) 
    $flowthrough 
    &/ [array_obj_ref_379_index_1_rename] (R_Index_378_resized) (R_Index_378_scaled) 
    $flowthrough 
    +[array_obj_ref_379_index_sum_1] (R_Index_378_scaled R_R_377_scaled) (array_obj_ref_379_index_partial_sum_1)    $fullrate
    $buffering  $in array_obj_ref_379_index_sum_1 R_Index_378_scaled 2
    $buffering  $in array_obj_ref_379_index_sum_1 R_R_377_scaled 2
    $buffering  $out array_obj_ref_379_index_sum_1 array_obj_ref_379_index_partial_sum_1 2
    $delay array_obj_ref_379_index_sum_1 2
    &/ [array_obj_ref_379_index_offset] (array_obj_ref_379_index_partial_sum_1) (array_obj_ref_379_final_offset) 
    $flowthrough 
    &/ [array_obj_ref_379_root_address_inst] (array_obj_ref_379_final_offset) (array_obj_ref_379_root_address) 
    $flowthrough 
    &/ [array_obj_ref_379_addr_0] (array_obj_ref_379_root_address) (array_obj_ref_379_word_address_0) 
    $flowthrough 
    $load [array_obj_ref_379_load_0] $from memory_space_0 (array_obj_ref_379_word_address_0) (array_obj_ref_379_data_0) 
    $buffering  $in array_obj_ref_379_load_0 array_obj_ref_379_word_address_0 2
    $buffering  $out array_obj_ref_379_load_0 array_obj_ref_379_data_0 2
    $delay array_obj_ref_379_load_0 5
    &/ [array_obj_ref_379_gather_scatter] (array_obj_ref_379_data_0) (a_rc_0_380) 
    $flowthrough 
    // 			a_rc_1 := B_MEM[R][Index] $buffering 2// bits of buffering = 64. 
    //  file .Aa/mvp.opt.aa, line 147
    // B_MEM[R][Index]
    &/ [array_obj_ref_384_index_0_resize] (R) (R_R_382_resized) 
    $flowthrough 
    *[array_obj_ref_384_index_0_scale] (R_R_382_resized array_obj_ref_384_offset_scale_factor_0) (R_R_382_scaled)    $fullrate
    $buffering  $in array_obj_ref_384_index_0_scale R_R_382_resized 2
    $buffering  $in array_obj_ref_384_index_0_scale array_obj_ref_384_offset_scale_factor_0 2
    $buffering  $out array_obj_ref_384_index_0_scale R_R_382_scaled 2
    $delay array_obj_ref_384_index_0_scale 2
    &/ [array_obj_ref_384_index_1_resize] (Index_350) (R_Index_383_resized) 
    $flowthrough 
    &/ [array_obj_ref_384_index_1_rename] (R_Index_383_resized) (R_Index_383_scaled) 
    $flowthrough 
    +[array_obj_ref_384_index_sum_1] (R_Index_383_scaled R_R_382_scaled) (array_obj_ref_384_index_partial_sum_1)    $fullrate
    $buffering  $in array_obj_ref_384_index_sum_1 R_Index_383_scaled 2
    $buffering  $in array_obj_ref_384_index_sum_1 R_R_382_scaled 2
    $buffering  $out array_obj_ref_384_index_sum_1 array_obj_ref_384_index_partial_sum_1 2
    $delay array_obj_ref_384_index_sum_1 2
    &/ [array_obj_ref_384_index_offset] (array_obj_ref_384_index_partial_sum_1) (array_obj_ref_384_final_offset) 
    $flowthrough 
    &/ [array_obj_ref_384_root_address_inst] (array_obj_ref_384_final_offset) (array_obj_ref_384_root_address) 
    $flowthrough 
    &/ [array_obj_ref_384_addr_0] (array_obj_ref_384_root_address) (array_obj_ref_384_word_address_0) 
    $flowthrough 
    $load [array_obj_ref_384_load_0] $from memory_space_1 (array_obj_ref_384_word_address_0) (array_obj_ref_384_data_0) 
    $buffering  $in array_obj_ref_384_load_0 array_obj_ref_384_word_address_0 2
    $buffering  $out array_obj_ref_384_load_0 array_obj_ref_384_data_0 2
    $delay array_obj_ref_384_load_0 5
    &/ [array_obj_ref_384_gather_scatter] (array_obj_ref_384_data_0) (a_rc_1_385) 
    $flowthrough 
    // 			a_rc_2 := C_MEM[R][Index] $buffering 2// bits of buffering = 64. 
    //  file .Aa/mvp.opt.aa, line 148
    // C_MEM[R][Index]
    &/ [array_obj_ref_389_index_0_resize] (R) (R_R_387_resized) 
    $flowthrough 
    *[array_obj_ref_389_index_0_scale] (R_R_387_resized array_obj_ref_389_offset_scale_factor_0) (R_R_387_scaled)    $fullrate
    $buffering  $in array_obj_ref_389_index_0_scale R_R_387_resized 2
    $buffering  $in array_obj_ref_389_index_0_scale array_obj_ref_389_offset_scale_factor_0 2
    $buffering  $out array_obj_ref_389_index_0_scale R_R_387_scaled 2
    $delay array_obj_ref_389_index_0_scale 2
    &/ [array_obj_ref_389_index_1_resize] (Index_350) (R_Index_388_resized) 
    $flowthrough 
    &/ [array_obj_ref_389_index_1_rename] (R_Index_388_resized) (R_Index_388_scaled) 
    $flowthrough 
    +[array_obj_ref_389_index_sum_1] (R_Index_388_scaled R_R_387_scaled) (array_obj_ref_389_index_partial_sum_1)    $fullrate
    $buffering  $in array_obj_ref_389_index_sum_1 R_Index_388_scaled 2
    $buffering  $in array_obj_ref_389_index_sum_1 R_R_387_scaled 2
    $buffering  $out array_obj_ref_389_index_sum_1 array_obj_ref_389_index_partial_sum_1 2
    $delay array_obj_ref_389_index_sum_1 2
    &/ [array_obj_ref_389_index_offset] (array_obj_ref_389_index_partial_sum_1) (array_obj_ref_389_final_offset) 
    $flowthrough 
    &/ [array_obj_ref_389_root_address_inst] (array_obj_ref_389_final_offset) (array_obj_ref_389_root_address) 
    $flowthrough 
    &/ [array_obj_ref_389_addr_0] (array_obj_ref_389_root_address) (array_obj_ref_389_word_address_0) 
    $flowthrough 
    $load [array_obj_ref_389_load_0] $from memory_space_2 (array_obj_ref_389_word_address_0) (array_obj_ref_389_data_0) 
    $buffering  $in array_obj_ref_389_load_0 array_obj_ref_389_word_address_0 2
    $buffering  $out array_obj_ref_389_load_0 array_obj_ref_389_data_0 2
    $delay array_obj_ref_389_load_0 5
    &/ [array_obj_ref_389_gather_scatter] (array_obj_ref_389_data_0) (a_rc_2_390) 
    $flowthrough 
    // 			a_rc_3 := D_MEM[R][Index] $buffering 2// bits of buffering = 64. 
    //  file .Aa/mvp.opt.aa, line 149
    // D_MEM[R][Index]
    &/ [array_obj_ref_394_index_0_resize] (R) (R_R_392_resized) 
    $flowthrough 
    *[array_obj_ref_394_index_0_scale] (R_R_392_resized array_obj_ref_394_offset_scale_factor_0) (R_R_392_scaled)    $fullrate
    $buffering  $in array_obj_ref_394_index_0_scale R_R_392_resized 2
    $buffering  $in array_obj_ref_394_index_0_scale array_obj_ref_394_offset_scale_factor_0 2
    $buffering  $out array_obj_ref_394_index_0_scale R_R_392_scaled 2
    $delay array_obj_ref_394_index_0_scale 2
    &/ [array_obj_ref_394_index_1_resize] (Index_350) (R_Index_393_resized) 
    $flowthrough 
    &/ [array_obj_ref_394_index_1_rename] (R_Index_393_resized) (R_Index_393_scaled) 
    $flowthrough 
    +[array_obj_ref_394_index_sum_1] (R_Index_393_scaled R_R_392_scaled) (array_obj_ref_394_index_partial_sum_1)    $fullrate
    $buffering  $in array_obj_ref_394_index_sum_1 R_Index_393_scaled 2
    $buffering  $in array_obj_ref_394_index_sum_1 R_R_392_scaled 2
    $buffering  $out array_obj_ref_394_index_sum_1 array_obj_ref_394_index_partial_sum_1 2
    $delay array_obj_ref_394_index_sum_1 2
    &/ [array_obj_ref_394_index_offset] (array_obj_ref_394_index_partial_sum_1) (array_obj_ref_394_final_offset) 
    $flowthrough 
    &/ [array_obj_ref_394_root_address_inst] (array_obj_ref_394_final_offset) (array_obj_ref_394_root_address) 
    $flowthrough 
    &/ [array_obj_ref_394_addr_0] (array_obj_ref_394_root_address) (array_obj_ref_394_word_address_0) 
    $flowthrough 
    $load [array_obj_ref_394_load_0] $from memory_space_3 (array_obj_ref_394_word_address_0) (array_obj_ref_394_data_0) 
    $buffering  $in array_obj_ref_394_load_0 array_obj_ref_394_word_address_0 2
    $buffering  $out array_obj_ref_394_load_0 array_obj_ref_394_data_0 2
    $delay array_obj_ref_394_load_0 5
    &/ [array_obj_ref_394_gather_scatter] (array_obj_ref_394_data_0) (a_rc_3_395) 
    $flowthrough 
    // 			xval_0 := x0[Index] $buffering 2// bits of buffering = 64. 
    //  file .Aa/mvp.opt.aa, line 151
    // x0[Index]
    &/ [array_obj_ref_404_index_0_resize] (Index_350) (R_Index_403_resized) 
    $flowthrough 
    &/ [array_obj_ref_404_index_0_rename] (R_Index_403_resized) (R_Index_403_scaled) 
    $flowthrough 
    &/ [array_obj_ref_404_index_offset] (R_Index_403_scaled) (array_obj_ref_404_final_offset) 
    $flowthrough 
    &/ [array_obj_ref_404_root_address_inst] (array_obj_ref_404_final_offset) (array_obj_ref_404_root_address) 
    $flowthrough 
    &/ [array_obj_ref_404_addr_0] (array_obj_ref_404_root_address) (array_obj_ref_404_word_address_0) 
    $flowthrough 
    $load [array_obj_ref_404_load_0] $from memory_space_4 (array_obj_ref_404_word_address_0) (array_obj_ref_404_data_0) 
    $buffering  $in array_obj_ref_404_load_0 array_obj_ref_404_word_address_0 2
    $buffering  $out array_obj_ref_404_load_0 array_obj_ref_404_data_0 2
    $delay array_obj_ref_404_load_0 5
    &/ [array_obj_ref_404_gather_scatter] (array_obj_ref_404_data_0) (xval_0_405) 
    $flowthrough 
    // 			xval_1 := x1[Index] $buffering 2// bits of buffering = 64. 
    //  file .Aa/mvp.opt.aa, line 152
    // x1[Index]
    &/ [array_obj_ref_408_index_0_resize] (Index_350) (R_Index_407_resized) 
    $flowthrough 
    &/ [array_obj_ref_408_index_0_rename] (R_Index_407_resized) (R_Index_407_scaled) 
    $flowthrough 
    &/ [array_obj_ref_408_index_offset] (R_Index_407_scaled) (array_obj_ref_408_final_offset) 
    $flowthrough 
    &/ [array_obj_ref_408_root_address_inst] (array_obj_ref_408_final_offset) (array_obj_ref_408_root_address) 
    $flowthrough 
    &/ [array_obj_ref_408_addr_0] (array_obj_ref_408_root_address) (array_obj_ref_408_word_address_0) 
    $flowthrough 
    $load [array_obj_ref_408_load_0] $from memory_space_5 (array_obj_ref_408_word_address_0) (array_obj_ref_408_data_0) 
    $buffering  $in array_obj_ref_408_load_0 array_obj_ref_408_word_address_0 2
    $buffering  $out array_obj_ref_408_load_0 array_obj_ref_408_data_0 2
    $delay array_obj_ref_408_load_0 5
    &/ [array_obj_ref_408_gather_scatter] (array_obj_ref_408_data_0) (xval_1_409) 
    $flowthrough 
    // 			xval_2 := x2[Index] $buffering 2// bits of buffering = 64. 
    //  file .Aa/mvp.opt.aa, line 153
    // x2[Index]
    &/ [array_obj_ref_412_index_0_resize] (Index_350) (R_Index_411_resized) 
    $flowthrough 
    &/ [array_obj_ref_412_index_0_rename] (R_Index_411_resized) (R_Index_411_scaled) 
    $flowthrough 
    &/ [array_obj_ref_412_index_offset] (R_Index_411_scaled) (array_obj_ref_412_final_offset) 
    $flowthrough 
    &/ [array_obj_ref_412_root_address_inst] (array_obj_ref_412_final_offset) (array_obj_ref_412_root_address) 
    $flowthrough 
    &/ [array_obj_ref_412_addr_0] (array_obj_ref_412_root_address) (array_obj_ref_412_word_address_0) 
    $flowthrough 
    $load [array_obj_ref_412_load_0] $from memory_space_6 (array_obj_ref_412_word_address_0) (array_obj_ref_412_data_0) 
    $buffering  $in array_obj_ref_412_load_0 array_obj_ref_412_word_address_0 2
    $buffering  $out array_obj_ref_412_load_0 array_obj_ref_412_data_0 2
    $delay array_obj_ref_412_load_0 5
    &/ [array_obj_ref_412_gather_scatter] (array_obj_ref_412_data_0) (xval_2_413) 
    $flowthrough 
    // 			xval_3 := x3[Index] $buffering 2// bits of buffering = 64. 
    //  file .Aa/mvp.opt.aa, line 154
    // x3[Index]
    &/ [array_obj_ref_416_index_0_resize] (Index_350) (R_Index_415_resized) 
    $flowthrough 
    &/ [array_obj_ref_416_index_0_rename] (R_Index_415_resized) (R_Index_415_scaled) 
    $flowthrough 
    &/ [array_obj_ref_416_index_offset] (R_Index_415_scaled) (array_obj_ref_416_final_offset) 
    $flowthrough 
    &/ [array_obj_ref_416_root_address_inst] (array_obj_ref_416_final_offset) (array_obj_ref_416_root_address) 
    $flowthrough 
    &/ [array_obj_ref_416_addr_0] (array_obj_ref_416_root_address) (array_obj_ref_416_word_address_0) 
    $flowthrough 
    $load [array_obj_ref_416_load_0] $from memory_space_7 (array_obj_ref_416_word_address_0) (array_obj_ref_416_data_0) 
    $buffering  $in array_obj_ref_416_load_0 array_obj_ref_416_word_address_0 2
    $buffering  $out array_obj_ref_416_load_0 array_obj_ref_416_data_0 2
    $delay array_obj_ref_416_load_0 5
    &/ [array_obj_ref_416_gather_scatter] (array_obj_ref_416_data_0) (xval_3_417) 
    $flowthrough 
    // 			val_0_401_delayed_5_0 := val_0 $buffering 5 $cut_through // bits of buffering = 160. 
    //  file .Aa/mvp.opt.aa, line 156
    # := [W_val_0_401_delayed_5_0_424_inst] (val_0_355) (val_0_401_delayed_5_0_426)  $cut_through    $fullrate
    $buffering  $out W_val_0_401_delayed_5_0_424_inst val_0_401_delayed_5_0_426 5
    // 			$volatile nval_0 := (val_0_401_delayed_5_0 + (a_rc_0 * xval_0)) $buffering 1
    //  file .Aa/mvp.opt.aa, line 157
    // (a_rc_0 * xval_0)
    *[MUL_u32_u32_431_inst] (a_rc_0_380 xval_0_405) (MUL_u32_u32_431_wire)   $flowthrough 
    $delay MUL_u32_u32_431_inst 0
    // (val_0_401_delayed_5_0 + (a_rc_0 * xval_0))
    +[ADD_u32_u32_432_inst] (val_0_401_delayed_5_0_426 MUL_u32_u32_431_wire) (nval_0_433)   $flowthrough 
    $delay ADD_u32_u32_432_inst 0
    // 			val_1_408_delayed_5_0 := val_1 $buffering 5 $cut_through // bits of buffering = 160. 
    //  file .Aa/mvp.opt.aa, line 158
    # := [W_val_1_408_delayed_5_0_434_inst] (val_1_360) (val_1_408_delayed_5_0_436)  $cut_through    $fullrate
    $buffering  $out W_val_1_408_delayed_5_0_434_inst val_1_408_delayed_5_0_436 5
    // 			$volatile nval_1 := (val_1_408_delayed_5_0 + (a_rc_1 * xval_1)) $buffering 1
    //  file .Aa/mvp.opt.aa, line 159
    // (a_rc_1 * xval_1)
    *[MUL_u32_u32_441_inst] (a_rc_1_385 xval_1_409) (MUL_u32_u32_441_wire)   $flowthrough 
    $delay MUL_u32_u32_441_inst 0
    // (val_1_408_delayed_5_0 + (a_rc_1 * xval_1))
    +[ADD_u32_u32_442_inst] (val_1_408_delayed_5_0_436 MUL_u32_u32_441_wire) (nval_1_443)   $flowthrough 
    $delay ADD_u32_u32_442_inst 0
    // 			val_2_415_delayed_5_0 := val_2 $buffering 5 $cut_through // bits of buffering = 160. 
    //  file .Aa/mvp.opt.aa, line 160
    # := [W_val_2_415_delayed_5_0_444_inst] (val_2_365) (val_2_415_delayed_5_0_446)  $cut_through    $fullrate
    $buffering  $out W_val_2_415_delayed_5_0_444_inst val_2_415_delayed_5_0_446 5
    // 			$volatile nval_2 := (val_2_415_delayed_5_0 + (a_rc_2 * xval_2)) $buffering 1
    //  file .Aa/mvp.opt.aa, line 161
    // (a_rc_2 * xval_2)
    *[MUL_u32_u32_451_inst] (a_rc_2_390 xval_2_413) (MUL_u32_u32_451_wire)   $flowthrough 
    $delay MUL_u32_u32_451_inst 0
    // (val_2_415_delayed_5_0 + (a_rc_2 * xval_2))
    +[ADD_u32_u32_452_inst] (val_2_415_delayed_5_0_446 MUL_u32_u32_451_wire) (nval_2_453)   $flowthrough 
    $delay ADD_u32_u32_452_inst 0
    // 			val_3_422_delayed_5_0 := val_3 $buffering 5 $cut_through // bits of buffering = 160. 
    //  file .Aa/mvp.opt.aa, line 162
    # := [W_val_3_422_delayed_5_0_454_inst] (val_3_370) (val_3_422_delayed_5_0_456)  $cut_through    $fullrate
    $buffering  $out W_val_3_422_delayed_5_0_454_inst val_3_422_delayed_5_0_456 5
    // 			$volatile nval_3 := (val_3_422_delayed_5_0 + (a_rc_3 * xval_3)) $buffering 1
    //  file .Aa/mvp.opt.aa, line 163
    // (a_rc_3 * xval_3)
    *[MUL_u32_u32_461_inst] (a_rc_3_395 xval_3_417) (MUL_u32_u32_461_wire)   $flowthrough 
    $delay MUL_u32_u32_461_inst 0
    // (val_3_422_delayed_5_0 + (a_rc_3 * xval_3))
    +[ADD_u32_u32_462_inst] (val_3_422_delayed_5_0_456 MUL_u32_u32_461_wire) (nval_3_463)   $flowthrough 
    $delay ADD_u32_u32_462_inst 0
    // 			nC := (C + 4 ) $buffering 2// bits of buffering = 16. 
    //  file .Aa/mvp.opt.aa, line 165
    // (C + 4 )
    +[ADD_u8_u8_472_inst] (C_345 konst_471_wire_constant) (nC_473)    $fullrate
    $buffering  $out ADD_u8_u8_472_inst nC_473 2
    $delay ADD_u8_u8_472_inst 1
    // 			nIndex := (Index + 1 ) $buffering 2// bits of buffering = 6. 
    //  file .Aa/mvp.opt.aa, line 166
    // (Index + 1 )
    +[ADD_u3_u3_477_inst] (Index_350 konst_476_wire_constant) (nIndex_478)    $fullrate
    $buffering  $out ADD_u3_u3_477_inst nIndex_478 2
    $delay ADD_u3_u3_477_inst 1
    // 	result := (nval_0 + (nval_1 + (nval_2 + nval_3))) $buffering 1// bits of buffering = 32. 
    //  file .Aa/mvp.opt.aa, line 170
    // (nval_2 + nval_3)
    +[ADD_u32_u32_489_inst] (nval_2_453 nval_3_463) (ADD_u32_u32_489_wire)   $flowthrough 
    $delay ADD_u32_u32_489_inst 0
    // (nval_1 + (nval_2 + nval_3))
    +[ADD_u32_u32_490_inst] (nval_1_443 ADD_u32_u32_489_wire) (ADD_u32_u32_490_wire)   $flowthrough 
    $delay ADD_u32_u32_490_inst 0
    // (nval_0 + (nval_1 + (nval_2 + nval_3)))
    +[ADD_u32_u32_491_inst] (nval_0_433 ADD_u32_u32_490_wire) (result)   
    $buffering  $out ADD_u32_u32_491_inst result 1
    $delay ADD_u32_u32_491_inst 1
  }
  // end data-path
  // CP-DP links for do-while  do_while_stmt_343
  //  file .Aa/mvp.opt.aa, line 130
  phi_stmt_345 <=> (branch_block_stmt_342/do_while_stmt_343/do_while_stmt_343_loop_body/phi_stmt_345_entry_sample_req branch_block_stmt_342/do_while_stmt_343/do_while_stmt_343_loop_body/phi_stmt_345_loopback_sample_req) (branch_block_stmt_342/do_while_stmt_343/do_while_stmt_343_loop_body/phi_stmt_345_phi_mux_ack)
  nC_473_349_buf <=> (branch_block_stmt_342/do_while_stmt_343/do_while_stmt_343_loop_body/R_nC_349_Sample/req branch_block_stmt_342/do_while_stmt_343/do_while_stmt_343_loop_body/R_nC_349_Update/req) (branch_block_stmt_342/do_while_stmt_343/do_while_stmt_343_loop_body/R_nC_349_Sample/ack branch_block_stmt_342/do_while_stmt_343/do_while_stmt_343_loop_body/R_nC_349_Update/ack)
  phi_stmt_350 <=> (branch_block_stmt_342/do_while_stmt_343/do_while_stmt_343_loop_body/phi_stmt_350_entry_sample_req branch_block_stmt_342/do_while_stmt_343/do_while_stmt_343_loop_body/phi_stmt_350_loopback_sample_req) (branch_block_stmt_342/do_while_stmt_343/do_while_stmt_343_loop_body/phi_stmt_350_phi_mux_ack)
  nIndex_478_354_buf <=> (branch_block_stmt_342/do_while_stmt_343/do_while_stmt_343_loop_body/R_nIndex_354_Sample/req branch_block_stmt_342/do_while_stmt_343/do_while_stmt_343_loop_body/R_nIndex_354_Update/req) (branch_block_stmt_342/do_while_stmt_343/do_while_stmt_343_loop_body/R_nIndex_354_Sample/ack branch_block_stmt_342/do_while_stmt_343/do_while_stmt_343_loop_body/R_nIndex_354_Update/ack)
  phi_stmt_355 <=> (branch_block_stmt_342/do_while_stmt_343/do_while_stmt_343_loop_body/phi_stmt_355_entry_sample_req branch_block_stmt_342/do_while_stmt_343/do_while_stmt_343_loop_body/phi_stmt_355_loopback_sample_req) (branch_block_stmt_342/do_while_stmt_343/do_while_stmt_343_loop_body/phi_stmt_355_phi_mux_ack)
  nval_0_433_359_buf <=> (branch_block_stmt_342/do_while_stmt_343/do_while_stmt_343_loop_body/R_nval_0_359_Sample/req branch_block_stmt_342/do_while_stmt_343/do_while_stmt_343_loop_body/R_nval_0_359_Update/req) (branch_block_stmt_342/do_while_stmt_343/do_while_stmt_343_loop_body/R_nval_0_359_Sample/ack branch_block_stmt_342/do_while_stmt_343/do_while_stmt_343_loop_body/R_nval_0_359_Update/ack)
  phi_stmt_360 <=> (branch_block_stmt_342/do_while_stmt_343/do_while_stmt_343_loop_body/phi_stmt_360_loopback_sample_req branch_block_stmt_342/do_while_stmt_343/do_while_stmt_343_loop_body/phi_stmt_360_entry_sample_req) (branch_block_stmt_342/do_while_stmt_343/do_while_stmt_343_loop_body/phi_stmt_360_phi_mux_ack)
  nval_1_443_362_buf <=> (branch_block_stmt_342/do_while_stmt_343/do_while_stmt_343_loop_body/R_nval_1_362_Sample/req branch_block_stmt_342/do_while_stmt_343/do_while_stmt_343_loop_body/R_nval_1_362_Update/req) (branch_block_stmt_342/do_while_stmt_343/do_while_stmt_343_loop_body/R_nval_1_362_Sample/ack branch_block_stmt_342/do_while_stmt_343/do_while_stmt_343_loop_body/R_nval_1_362_Update/ack)
  phi_stmt_365 <=> (branch_block_stmt_342/do_while_stmt_343/do_while_stmt_343_loop_body/phi_stmt_365_entry_sample_req branch_block_stmt_342/do_while_stmt_343/do_while_stmt_343_loop_body/phi_stmt_365_loopback_sample_req) (branch_block_stmt_342/do_while_stmt_343/do_while_stmt_343_loop_body/phi_stmt_365_phi_mux_ack)
  nval_2_453_369_buf <=> (branch_block_stmt_342/do_while_stmt_343/do_while_stmt_343_loop_body/R_nval_2_369_Sample/req branch_block_stmt_342/do_while_stmt_343/do_while_stmt_343_loop_body/R_nval_2_369_Update/req) (branch_block_stmt_342/do_while_stmt_343/do_while_stmt_343_loop_body/R_nval_2_369_Sample/ack branch_block_stmt_342/do_while_stmt_343/do_while_stmt_343_loop_body/R_nval_2_369_Update/ack)
  phi_stmt_370 <=> (branch_block_stmt_342/do_while_stmt_343/do_while_stmt_343_loop_body/phi_stmt_370_entry_sample_req branch_block_stmt_342/do_while_stmt_343/do_while_stmt_343_loop_body/phi_stmt_370_loopback_sample_req) (branch_block_stmt_342/do_while_stmt_343/do_while_stmt_343_loop_body/phi_stmt_370_phi_mux_ack)
  nval_3_463_374_buf <=> (branch_block_stmt_342/do_while_stmt_343/do_while_stmt_343_loop_body/R_nval_3_374_Sample/req branch_block_stmt_342/do_while_stmt_343/do_while_stmt_343_loop_body/R_nval_3_374_Update/req) (branch_block_stmt_342/do_while_stmt_343/do_while_stmt_343_loop_body/R_nval_3_374_Sample/ack branch_block_stmt_342/do_while_stmt_343/do_while_stmt_343_loop_body/R_nval_3_374_Update/ack)
  // 			a_rc_0 := A_MEM[R][Index] $buffering 2// bits of buffering = 64. 
  //  file .Aa/mvp.opt.aa, line 146
  // A_MEM[R][Index]
  // R
  array_obj_ref_379_index_0_resize <=> (branch_block_stmt_342/do_while_stmt_343/do_while_stmt_343_loop_body/array_obj_ref_379_index_resize_0/index_resize_req) (branch_block_stmt_342/do_while_stmt_343/do_while_stmt_343_loop_body/array_obj_ref_379_index_resize_0/index_resize_ack)
  array_obj_ref_379_index_0_scale <=> (branch_block_stmt_342/do_while_stmt_343/do_while_stmt_343_loop_body/array_obj_ref_379_index_scale_0_Sample/rr branch_block_stmt_342/do_while_stmt_343/do_while_stmt_343_loop_body/array_obj_ref_379_index_scale_0_Update/cr) (branch_block_stmt_342/do_while_stmt_343/do_while_stmt_343_loop_body/array_obj_ref_379_index_scale_0_Sample/ra branch_block_stmt_342/do_while_stmt_343/do_while_stmt_343_loop_body/array_obj_ref_379_index_scale_0_Update/ca)
  // Index
  array_obj_ref_379_index_1_resize <=> (branch_block_stmt_342/do_while_stmt_343/do_while_stmt_343_loop_body/array_obj_ref_379_index_resize_1/index_resize_req) (branch_block_stmt_342/do_while_stmt_343/do_while_stmt_343_loop_body/array_obj_ref_379_index_resize_1/index_resize_ack)
  array_obj_ref_379_index_1_rename <=> (branch_block_stmt_342/do_while_stmt_343/do_while_stmt_343_loop_body/array_obj_ref_379_index_scale_1/scale_rename_req) (branch_block_stmt_342/do_while_stmt_343/do_while_stmt_343_loop_body/array_obj_ref_379_index_scale_1/scale_rename_ack)
  array_obj_ref_379_index_sum_1 <=> (branch_block_stmt_342/do_while_stmt_343/do_while_stmt_343_loop_body/array_obj_ref_379_partial_sum_1_Sample/rr branch_block_stmt_342/do_while_stmt_343/do_while_stmt_343_loop_body/array_obj_ref_379_partial_sum_1_Update/cr) (branch_block_stmt_342/do_while_stmt_343/do_while_stmt_343_loop_body/array_obj_ref_379_partial_sum_1_Sample/ra branch_block_stmt_342/do_while_stmt_343/do_while_stmt_343_loop_body/array_obj_ref_379_partial_sum_1_Update/ca)
  array_obj_ref_379_index_offset <=> (branch_block_stmt_342/do_while_stmt_343/do_while_stmt_343_loop_body/array_obj_ref_379_final_index_sum_regn/req) (branch_block_stmt_342/do_while_stmt_343/do_while_stmt_343_loop_body/array_obj_ref_379_final_index_sum_regn/ack)
  array_obj_ref_379_root_address_inst <=> (branch_block_stmt_342/do_while_stmt_343/do_while_stmt_343_loop_body/array_obj_ref_379_base_plus_offset/sum_rename_req) (branch_block_stmt_342/do_while_stmt_343/do_while_stmt_343_loop_body/array_obj_ref_379_base_plus_offset/sum_rename_ack)
  array_obj_ref_379_addr_0 <=> (branch_block_stmt_342/do_while_stmt_343/do_while_stmt_343_loop_body/array_obj_ref_379_word_addrgen/root_register_req) (branch_block_stmt_342/do_while_stmt_343/do_while_stmt_343_loop_body/array_obj_ref_379_word_addrgen/root_register_ack)
  array_obj_ref_379_gather_scatter <=> (branch_block_stmt_342/do_while_stmt_343/do_while_stmt_343_loop_body/array_obj_ref_379_Update/array_obj_ref_379_Merge/merge_req) (branch_block_stmt_342/do_while_stmt_343/do_while_stmt_343_loop_body/array_obj_ref_379_Update/array_obj_ref_379_Merge/merge_ack)
  array_obj_ref_379_load_0 <=> (branch_block_stmt_342/do_while_stmt_343/do_while_stmt_343_loop_body/array_obj_ref_379_Sample/word_access_start/word_0/rr branch_block_stmt_342/do_while_stmt_343/do_while_stmt_343_loop_body/array_obj_ref_379_Update/word_access_complete/word_0/cr) (branch_block_stmt_342/do_while_stmt_343/do_while_stmt_343_loop_body/array_obj_ref_379_Sample/word_access_start/word_0/ra branch_block_stmt_342/do_while_stmt_343/do_while_stmt_343_loop_body/array_obj_ref_379_Update/word_access_complete/word_0/ca)
  // 			a_rc_1 := B_MEM[R][Index] $buffering 2// bits of buffering = 64. 
  //  file .Aa/mvp.opt.aa, line 147
  // B_MEM[R][Index]
  // R
  array_obj_ref_384_index_0_resize <=> (branch_block_stmt_342/do_while_stmt_343/do_while_stmt_343_loop_body/array_obj_ref_384_index_resize_0/index_resize_req) (branch_block_stmt_342/do_while_stmt_343/do_while_stmt_343_loop_body/array_obj_ref_384_index_resize_0/index_resize_ack)
  array_obj_ref_384_index_0_scale <=> (branch_block_stmt_342/do_while_stmt_343/do_while_stmt_343_loop_body/array_obj_ref_384_index_scale_0_Sample/rr branch_block_stmt_342/do_while_stmt_343/do_while_stmt_343_loop_body/array_obj_ref_384_index_scale_0_Update/cr) (branch_block_stmt_342/do_while_stmt_343/do_while_stmt_343_loop_body/array_obj_ref_384_index_scale_0_Sample/ra branch_block_stmt_342/do_while_stmt_343/do_while_stmt_343_loop_body/array_obj_ref_384_index_scale_0_Update/ca)
  // Index
  array_obj_ref_384_index_1_resize <=> (branch_block_stmt_342/do_while_stmt_343/do_while_stmt_343_loop_body/array_obj_ref_384_index_resize_1/index_resize_req) (branch_block_stmt_342/do_while_stmt_343/do_while_stmt_343_loop_body/array_obj_ref_384_index_resize_1/index_resize_ack)
  array_obj_ref_384_index_1_rename <=> (branch_block_stmt_342/do_while_stmt_343/do_while_stmt_343_loop_body/array_obj_ref_384_index_scale_1/scale_rename_req) (branch_block_stmt_342/do_while_stmt_343/do_while_stmt_343_loop_body/array_obj_ref_384_index_scale_1/scale_rename_ack)
  array_obj_ref_384_index_sum_1 <=> (branch_block_stmt_342/do_while_stmt_343/do_while_stmt_343_loop_body/array_obj_ref_384_partial_sum_1_Sample/rr branch_block_stmt_342/do_while_stmt_343/do_while_stmt_343_loop_body/array_obj_ref_384_partial_sum_1_Update/cr) (branch_block_stmt_342/do_while_stmt_343/do_while_stmt_343_loop_body/array_obj_ref_384_partial_sum_1_Sample/ra branch_block_stmt_342/do_while_stmt_343/do_while_stmt_343_loop_body/array_obj_ref_384_partial_sum_1_Update/ca)
  array_obj_ref_384_index_offset <=> (branch_block_stmt_342/do_while_stmt_343/do_while_stmt_343_loop_body/array_obj_ref_384_final_index_sum_regn/req) (branch_block_stmt_342/do_while_stmt_343/do_while_stmt_343_loop_body/array_obj_ref_384_final_index_sum_regn/ack)
  array_obj_ref_384_root_address_inst <=> (branch_block_stmt_342/do_while_stmt_343/do_while_stmt_343_loop_body/array_obj_ref_384_base_plus_offset/sum_rename_req) (branch_block_stmt_342/do_while_stmt_343/do_while_stmt_343_loop_body/array_obj_ref_384_base_plus_offset/sum_rename_ack)
  array_obj_ref_384_addr_0 <=> (branch_block_stmt_342/do_while_stmt_343/do_while_stmt_343_loop_body/array_obj_ref_384_word_addrgen/root_register_req) (branch_block_stmt_342/do_while_stmt_343/do_while_stmt_343_loop_body/array_obj_ref_384_word_addrgen/root_register_ack)
  array_obj_ref_384_gather_scatter <=> (branch_block_stmt_342/do_while_stmt_343/do_while_stmt_343_loop_body/array_obj_ref_384_Update/array_obj_ref_384_Merge/merge_req) (branch_block_stmt_342/do_while_stmt_343/do_while_stmt_343_loop_body/array_obj_ref_384_Update/array_obj_ref_384_Merge/merge_ack)
  array_obj_ref_384_load_0 <=> (branch_block_stmt_342/do_while_stmt_343/do_while_stmt_343_loop_body/array_obj_ref_384_Sample/word_access_start/word_0/rr branch_block_stmt_342/do_while_stmt_343/do_while_stmt_343_loop_body/array_obj_ref_384_Update/word_access_complete/word_0/cr) (branch_block_stmt_342/do_while_stmt_343/do_while_stmt_343_loop_body/array_obj_ref_384_Sample/word_access_start/word_0/ra branch_block_stmt_342/do_while_stmt_343/do_while_stmt_343_loop_body/array_obj_ref_384_Update/word_access_complete/word_0/ca)
  // 			a_rc_2 := C_MEM[R][Index] $buffering 2// bits of buffering = 64. 
  //  file .Aa/mvp.opt.aa, line 148
  // C_MEM[R][Index]
  // R
  array_obj_ref_389_index_0_resize <=> (branch_block_stmt_342/do_while_stmt_343/do_while_stmt_343_loop_body/array_obj_ref_389_index_resize_0/index_resize_req) (branch_block_stmt_342/do_while_stmt_343/do_while_stmt_343_loop_body/array_obj_ref_389_index_resize_0/index_resize_ack)
  array_obj_ref_389_index_0_scale <=> (branch_block_stmt_342/do_while_stmt_343/do_while_stmt_343_loop_body/array_obj_ref_389_index_scale_0_Sample/rr branch_block_stmt_342/do_while_stmt_343/do_while_stmt_343_loop_body/array_obj_ref_389_index_scale_0_Update/cr) (branch_block_stmt_342/do_while_stmt_343/do_while_stmt_343_loop_body/array_obj_ref_389_index_scale_0_Sample/ra branch_block_stmt_342/do_while_stmt_343/do_while_stmt_343_loop_body/array_obj_ref_389_index_scale_0_Update/ca)
  // Index
  array_obj_ref_389_index_1_resize <=> (branch_block_stmt_342/do_while_stmt_343/do_while_stmt_343_loop_body/array_obj_ref_389_index_resize_1/index_resize_req) (branch_block_stmt_342/do_while_stmt_343/do_while_stmt_343_loop_body/array_obj_ref_389_index_resize_1/index_resize_ack)
  array_obj_ref_389_index_1_rename <=> (branch_block_stmt_342/do_while_stmt_343/do_while_stmt_343_loop_body/array_obj_ref_389_index_scale_1/scale_rename_req) (branch_block_stmt_342/do_while_stmt_343/do_while_stmt_343_loop_body/array_obj_ref_389_index_scale_1/scale_rename_ack)
  array_obj_ref_389_index_sum_1 <=> (branch_block_stmt_342/do_while_stmt_343/do_while_stmt_343_loop_body/array_obj_ref_389_partial_sum_1_Sample/rr branch_block_stmt_342/do_while_stmt_343/do_while_stmt_343_loop_body/array_obj_ref_389_partial_sum_1_Update/cr) (branch_block_stmt_342/do_while_stmt_343/do_while_stmt_343_loop_body/array_obj_ref_389_partial_sum_1_Sample/ra branch_block_stmt_342/do_while_stmt_343/do_while_stmt_343_loop_body/array_obj_ref_389_partial_sum_1_Update/ca)
  array_obj_ref_389_index_offset <=> (branch_block_stmt_342/do_while_stmt_343/do_while_stmt_343_loop_body/array_obj_ref_389_final_index_sum_regn/req) (branch_block_stmt_342/do_while_stmt_343/do_while_stmt_343_loop_body/array_obj_ref_389_final_index_sum_regn/ack)
  array_obj_ref_389_root_address_inst <=> (branch_block_stmt_342/do_while_stmt_343/do_while_stmt_343_loop_body/array_obj_ref_389_base_plus_offset/sum_rename_req) (branch_block_stmt_342/do_while_stmt_343/do_while_stmt_343_loop_body/array_obj_ref_389_base_plus_offset/sum_rename_ack)
  array_obj_ref_389_addr_0 <=> (branch_block_stmt_342/do_while_stmt_343/do_while_stmt_343_loop_body/array_obj_ref_389_word_addrgen/root_register_req) (branch_block_stmt_342/do_while_stmt_343/do_while_stmt_343_loop_body/array_obj_ref_389_word_addrgen/root_register_ack)
  array_obj_ref_389_gather_scatter <=> (branch_block_stmt_342/do_while_stmt_343/do_while_stmt_343_loop_body/array_obj_ref_389_Update/array_obj_ref_389_Merge/merge_req) (branch_block_stmt_342/do_while_stmt_343/do_while_stmt_343_loop_body/array_obj_ref_389_Update/array_obj_ref_389_Merge/merge_ack)
  array_obj_ref_389_load_0 <=> (branch_block_stmt_342/do_while_stmt_343/do_while_stmt_343_loop_body/array_obj_ref_389_Sample/word_access_start/word_0/rr branch_block_stmt_342/do_while_stmt_343/do_while_stmt_343_loop_body/array_obj_ref_389_Update/word_access_complete/word_0/cr) (branch_block_stmt_342/do_while_stmt_343/do_while_stmt_343_loop_body/array_obj_ref_389_Sample/word_access_start/word_0/ra branch_block_stmt_342/do_while_stmt_343/do_while_stmt_343_loop_body/array_obj_ref_389_Update/word_access_complete/word_0/ca)
  // 			a_rc_3 := D_MEM[R][Index] $buffering 2// bits of buffering = 64. 
  //  file .Aa/mvp.opt.aa, line 149
  // D_MEM[R][Index]
  // R
  array_obj_ref_394_index_0_resize <=> (branch_block_stmt_342/do_while_stmt_343/do_while_stmt_343_loop_body/array_obj_ref_394_index_resize_0/index_resize_req) (branch_block_stmt_342/do_while_stmt_343/do_while_stmt_343_loop_body/array_obj_ref_394_index_resize_0/index_resize_ack)
  array_obj_ref_394_index_0_scale <=> (branch_block_stmt_342/do_while_stmt_343/do_while_stmt_343_loop_body/array_obj_ref_394_index_scale_0_Sample/rr branch_block_stmt_342/do_while_stmt_343/do_while_stmt_343_loop_body/array_obj_ref_394_index_scale_0_Update/cr) (branch_block_stmt_342/do_while_stmt_343/do_while_stmt_343_loop_body/array_obj_ref_394_index_scale_0_Sample/ra branch_block_stmt_342/do_while_stmt_343/do_while_stmt_343_loop_body/array_obj_ref_394_index_scale_0_Update/ca)
  // Index
  array_obj_ref_394_index_1_resize <=> (branch_block_stmt_342/do_while_stmt_343/do_while_stmt_343_loop_body/array_obj_ref_394_index_resize_1/index_resize_req) (branch_block_stmt_342/do_while_stmt_343/do_while_stmt_343_loop_body/array_obj_ref_394_index_resize_1/index_resize_ack)
  array_obj_ref_394_index_1_rename <=> (branch_block_stmt_342/do_while_stmt_343/do_while_stmt_343_loop_body/array_obj_ref_394_index_scale_1/scale_rename_req) (branch_block_stmt_342/do_while_stmt_343/do_while_stmt_343_loop_body/array_obj_ref_394_index_scale_1/scale_rename_ack)
  array_obj_ref_394_index_sum_1 <=> (branch_block_stmt_342/do_while_stmt_343/do_while_stmt_343_loop_body/array_obj_ref_394_partial_sum_1_Sample/rr branch_block_stmt_342/do_while_stmt_343/do_while_stmt_343_loop_body/array_obj_ref_394_partial_sum_1_Update/cr) (branch_block_stmt_342/do_while_stmt_343/do_while_stmt_343_loop_body/array_obj_ref_394_partial_sum_1_Sample/ra branch_block_stmt_342/do_while_stmt_343/do_while_stmt_343_loop_body/array_obj_ref_394_partial_sum_1_Update/ca)
  array_obj_ref_394_index_offset <=> (branch_block_stmt_342/do_while_stmt_343/do_while_stmt_343_loop_body/array_obj_ref_394_final_index_sum_regn/req) (branch_block_stmt_342/do_while_stmt_343/do_while_stmt_343_loop_body/array_obj_ref_394_final_index_sum_regn/ack)
  array_obj_ref_394_root_address_inst <=> (branch_block_stmt_342/do_while_stmt_343/do_while_stmt_343_loop_body/array_obj_ref_394_base_plus_offset/sum_rename_req) (branch_block_stmt_342/do_while_stmt_343/do_while_stmt_343_loop_body/array_obj_ref_394_base_plus_offset/sum_rename_ack)
  array_obj_ref_394_addr_0 <=> (branch_block_stmt_342/do_while_stmt_343/do_while_stmt_343_loop_body/array_obj_ref_394_word_addrgen/root_register_req) (branch_block_stmt_342/do_while_stmt_343/do_while_stmt_343_loop_body/array_obj_ref_394_word_addrgen/root_register_ack)
  array_obj_ref_394_gather_scatter <=> (branch_block_stmt_342/do_while_stmt_343/do_while_stmt_343_loop_body/array_obj_ref_394_Update/array_obj_ref_394_Merge/merge_req) (branch_block_stmt_342/do_while_stmt_343/do_while_stmt_343_loop_body/array_obj_ref_394_Update/array_obj_ref_394_Merge/merge_ack)
  array_obj_ref_394_load_0 <=> (branch_block_stmt_342/do_while_stmt_343/do_while_stmt_343_loop_body/array_obj_ref_394_Sample/word_access_start/word_0/rr branch_block_stmt_342/do_while_stmt_343/do_while_stmt_343_loop_body/array_obj_ref_394_Update/word_access_complete/word_0/cr) (branch_block_stmt_342/do_while_stmt_343/do_while_stmt_343_loop_body/array_obj_ref_394_Sample/word_access_start/word_0/ra branch_block_stmt_342/do_while_stmt_343/do_while_stmt_343_loop_body/array_obj_ref_394_Update/word_access_complete/word_0/ca)
  // 			xval_0 := x0[Index] $buffering 2// bits of buffering = 64. 
  //  file .Aa/mvp.opt.aa, line 151
  // x0[Index]
  // Index
  array_obj_ref_404_index_0_resize <=> (branch_block_stmt_342/do_while_stmt_343/do_while_stmt_343_loop_body/array_obj_ref_404_index_resize_0/index_resize_req) (branch_block_stmt_342/do_while_stmt_343/do_while_stmt_343_loop_body/array_obj_ref_404_index_resize_0/index_resize_ack)
  array_obj_ref_404_index_0_rename <=> (branch_block_stmt_342/do_while_stmt_343/do_while_stmt_343_loop_body/array_obj_ref_404_index_scale_0/scale_rename_req) (branch_block_stmt_342/do_while_stmt_343/do_while_stmt_343_loop_body/array_obj_ref_404_index_scale_0/scale_rename_ack)
  array_obj_ref_404_index_offset <=> (branch_block_stmt_342/do_while_stmt_343/do_while_stmt_343_loop_body/array_obj_ref_404_final_index_sum_regn/req) (branch_block_stmt_342/do_while_stmt_343/do_while_stmt_343_loop_body/array_obj_ref_404_final_index_sum_regn/ack)
  array_obj_ref_404_root_address_inst <=> (branch_block_stmt_342/do_while_stmt_343/do_while_stmt_343_loop_body/array_obj_ref_404_base_plus_offset/sum_rename_req) (branch_block_stmt_342/do_while_stmt_343/do_while_stmt_343_loop_body/array_obj_ref_404_base_plus_offset/sum_rename_ack)
  array_obj_ref_404_addr_0 <=> (branch_block_stmt_342/do_while_stmt_343/do_while_stmt_343_loop_body/array_obj_ref_404_word_addrgen/root_register_req) (branch_block_stmt_342/do_while_stmt_343/do_while_stmt_343_loop_body/array_obj_ref_404_word_addrgen/root_register_ack)
  array_obj_ref_404_gather_scatter <=> (branch_block_stmt_342/do_while_stmt_343/do_while_stmt_343_loop_body/array_obj_ref_404_Update/array_obj_ref_404_Merge/merge_req) (branch_block_stmt_342/do_while_stmt_343/do_while_stmt_343_loop_body/array_obj_ref_404_Update/array_obj_ref_404_Merge/merge_ack)
  array_obj_ref_404_load_0 <=> (branch_block_stmt_342/do_while_stmt_343/do_while_stmt_343_loop_body/array_obj_ref_404_Sample/word_access_start/word_0/rr branch_block_stmt_342/do_while_stmt_343/do_while_stmt_343_loop_body/array_obj_ref_404_Update/word_access_complete/word_0/cr) (branch_block_stmt_342/do_while_stmt_343/do_while_stmt_343_loop_body/array_obj_ref_404_Sample/word_access_start/word_0/ra branch_block_stmt_342/do_while_stmt_343/do_while_stmt_343_loop_body/array_obj_ref_404_Update/word_access_complete/word_0/ca)
  // 			xval_1 := x1[Index] $buffering 2// bits of buffering = 64. 
  //  file .Aa/mvp.opt.aa, line 152
  // x1[Index]
  // Index
  array_obj_ref_408_index_0_resize <=> (branch_block_stmt_342/do_while_stmt_343/do_while_stmt_343_loop_body/array_obj_ref_408_index_resize_0/index_resize_req) (branch_block_stmt_342/do_while_stmt_343/do_while_stmt_343_loop_body/array_obj_ref_408_index_resize_0/index_resize_ack)
  array_obj_ref_408_index_0_rename <=> (branch_block_stmt_342/do_while_stmt_343/do_while_stmt_343_loop_body/array_obj_ref_408_index_scale_0/scale_rename_req) (branch_block_stmt_342/do_while_stmt_343/do_while_stmt_343_loop_body/array_obj_ref_408_index_scale_0/scale_rename_ack)
  array_obj_ref_408_index_offset <=> (branch_block_stmt_342/do_while_stmt_343/do_while_stmt_343_loop_body/array_obj_ref_408_final_index_sum_regn/req) (branch_block_stmt_342/do_while_stmt_343/do_while_stmt_343_loop_body/array_obj_ref_408_final_index_sum_regn/ack)
  array_obj_ref_408_root_address_inst <=> (branch_block_stmt_342/do_while_stmt_343/do_while_stmt_343_loop_body/array_obj_ref_408_base_plus_offset/sum_rename_req) (branch_block_stmt_342/do_while_stmt_343/do_while_stmt_343_loop_body/array_obj_ref_408_base_plus_offset/sum_rename_ack)
  array_obj_ref_408_addr_0 <=> (branch_block_stmt_342/do_while_stmt_343/do_while_stmt_343_loop_body/array_obj_ref_408_word_addrgen/root_register_req) (branch_block_stmt_342/do_while_stmt_343/do_while_stmt_343_loop_body/array_obj_ref_408_word_addrgen/root_register_ack)
  array_obj_ref_408_gather_scatter <=> (branch_block_stmt_342/do_while_stmt_343/do_while_stmt_343_loop_body/array_obj_ref_408_Update/array_obj_ref_408_Merge/merge_req) (branch_block_stmt_342/do_while_stmt_343/do_while_stmt_343_loop_body/array_obj_ref_408_Update/array_obj_ref_408_Merge/merge_ack)
  array_obj_ref_408_load_0 <=> (branch_block_stmt_342/do_while_stmt_343/do_while_stmt_343_loop_body/array_obj_ref_408_Sample/word_access_start/word_0/rr branch_block_stmt_342/do_while_stmt_343/do_while_stmt_343_loop_body/array_obj_ref_408_Update/word_access_complete/word_0/cr) (branch_block_stmt_342/do_while_stmt_343/do_while_stmt_343_loop_body/array_obj_ref_408_Sample/word_access_start/word_0/ra branch_block_stmt_342/do_while_stmt_343/do_while_stmt_343_loop_body/array_obj_ref_408_Update/word_access_complete/word_0/ca)
  // 			xval_2 := x2[Index] $buffering 2// bits of buffering = 64. 
  //  file .Aa/mvp.opt.aa, line 153
  // x2[Index]
  // Index
  array_obj_ref_412_index_0_resize <=> (branch_block_stmt_342/do_while_stmt_343/do_while_stmt_343_loop_body/array_obj_ref_412_index_resize_0/index_resize_req) (branch_block_stmt_342/do_while_stmt_343/do_while_stmt_343_loop_body/array_obj_ref_412_index_resize_0/index_resize_ack)
  array_obj_ref_412_index_0_rename <=> (branch_block_stmt_342/do_while_stmt_343/do_while_stmt_343_loop_body/array_obj_ref_412_index_scale_0/scale_rename_req) (branch_block_stmt_342/do_while_stmt_343/do_while_stmt_343_loop_body/array_obj_ref_412_index_scale_0/scale_rename_ack)
  array_obj_ref_412_index_offset <=> (branch_block_stmt_342/do_while_stmt_343/do_while_stmt_343_loop_body/array_obj_ref_412_final_index_sum_regn/req) (branch_block_stmt_342/do_while_stmt_343/do_while_stmt_343_loop_body/array_obj_ref_412_final_index_sum_regn/ack)
  array_obj_ref_412_root_address_inst <=> (branch_block_stmt_342/do_while_stmt_343/do_while_stmt_343_loop_body/array_obj_ref_412_base_plus_offset/sum_rename_req) (branch_block_stmt_342/do_while_stmt_343/do_while_stmt_343_loop_body/array_obj_ref_412_base_plus_offset/sum_rename_ack)
  array_obj_ref_412_addr_0 <=> (branch_block_stmt_342/do_while_stmt_343/do_while_stmt_343_loop_body/array_obj_ref_412_word_addrgen/root_register_req) (branch_block_stmt_342/do_while_stmt_343/do_while_stmt_343_loop_body/array_obj_ref_412_word_addrgen/root_register_ack)
  array_obj_ref_412_gather_scatter <=> (branch_block_stmt_342/do_while_stmt_343/do_while_stmt_343_loop_body/array_obj_ref_412_Update/array_obj_ref_412_Merge/merge_req) (branch_block_stmt_342/do_while_stmt_343/do_while_stmt_343_loop_body/array_obj_ref_412_Update/array_obj_ref_412_Merge/merge_ack)
  array_obj_ref_412_load_0 <=> (branch_block_stmt_342/do_while_stmt_343/do_while_stmt_343_loop_body/array_obj_ref_412_Sample/word_access_start/word_0/rr branch_block_stmt_342/do_while_stmt_343/do_while_stmt_343_loop_body/array_obj_ref_412_Update/word_access_complete/word_0/cr) (branch_block_stmt_342/do_while_stmt_343/do_while_stmt_343_loop_body/array_obj_ref_412_Sample/word_access_start/word_0/ra branch_block_stmt_342/do_while_stmt_343/do_while_stmt_343_loop_body/array_obj_ref_412_Update/word_access_complete/word_0/ca)
  // 			xval_3 := x3[Index] $buffering 2// bits of buffering = 64. 
  //  file .Aa/mvp.opt.aa, line 154
  // x3[Index]
  // Index
  array_obj_ref_416_index_0_resize <=> (branch_block_stmt_342/do_while_stmt_343/do_while_stmt_343_loop_body/array_obj_ref_416_index_resize_0/index_resize_req) (branch_block_stmt_342/do_while_stmt_343/do_while_stmt_343_loop_body/array_obj_ref_416_index_resize_0/index_resize_ack)
  array_obj_ref_416_index_0_rename <=> (branch_block_stmt_342/do_while_stmt_343/do_while_stmt_343_loop_body/array_obj_ref_416_index_scale_0/scale_rename_req) (branch_block_stmt_342/do_while_stmt_343/do_while_stmt_343_loop_body/array_obj_ref_416_index_scale_0/scale_rename_ack)
  array_obj_ref_416_index_offset <=> (branch_block_stmt_342/do_while_stmt_343/do_while_stmt_343_loop_body/array_obj_ref_416_final_index_sum_regn/req) (branch_block_stmt_342/do_while_stmt_343/do_while_stmt_343_loop_body/array_obj_ref_416_final_index_sum_regn/ack)
  array_obj_ref_416_root_address_inst <=> (branch_block_stmt_342/do_while_stmt_343/do_while_stmt_343_loop_body/array_obj_ref_416_base_plus_offset/sum_rename_req) (branch_block_stmt_342/do_while_stmt_343/do_while_stmt_343_loop_body/array_obj_ref_416_base_plus_offset/sum_rename_ack)
  array_obj_ref_416_addr_0 <=> (branch_block_stmt_342/do_while_stmt_343/do_while_stmt_343_loop_body/array_obj_ref_416_word_addrgen/root_register_req) (branch_block_stmt_342/do_while_stmt_343/do_while_stmt_343_loop_body/array_obj_ref_416_word_addrgen/root_register_ack)
  array_obj_ref_416_gather_scatter <=> (branch_block_stmt_342/do_while_stmt_343/do_while_stmt_343_loop_body/array_obj_ref_416_Update/array_obj_ref_416_Merge/merge_req) (branch_block_stmt_342/do_while_stmt_343/do_while_stmt_343_loop_body/array_obj_ref_416_Update/array_obj_ref_416_Merge/merge_ack)
  array_obj_ref_416_load_0 <=> (branch_block_stmt_342/do_while_stmt_343/do_while_stmt_343_loop_body/array_obj_ref_416_Sample/word_access_start/word_0/rr branch_block_stmt_342/do_while_stmt_343/do_while_stmt_343_loop_body/array_obj_ref_416_Update/word_access_complete/word_0/cr) (branch_block_stmt_342/do_while_stmt_343/do_while_stmt_343_loop_body/array_obj_ref_416_Sample/word_access_start/word_0/ra branch_block_stmt_342/do_while_stmt_343/do_while_stmt_343_loop_body/array_obj_ref_416_Update/word_access_complete/word_0/ca)
  // 			val_0_401_delayed_5_0 := val_0 $buffering 5 $cut_through // bits of buffering = 160. 
  //  file .Aa/mvp.opt.aa, line 156
  // val_0
  W_val_0_401_delayed_5_0_424_inst <=> (branch_block_stmt_342/do_while_stmt_343/do_while_stmt_343_loop_body/assign_stmt_426_Sample/req branch_block_stmt_342/do_while_stmt_343/do_while_stmt_343_loop_body/assign_stmt_426_Update/req) (branch_block_stmt_342/do_while_stmt_343/do_while_stmt_343_loop_body/assign_stmt_426_Sample/ack branch_block_stmt_342/do_while_stmt_343/do_while_stmt_343_loop_body/assign_stmt_426_Update/ack)
  // 			$volatile nval_0 := (val_0_401_delayed_5_0 + (a_rc_0 * xval_0)) $buffering 1
  //  file .Aa/mvp.opt.aa, line 157
  // (val_0_401_delayed_5_0 + (a_rc_0 * xval_0))
  // val_0_401_delayed_5_0
  // (a_rc_0 * xval_0)
  // a_rc_0
  // xval_0
  // 			val_1_408_delayed_5_0 := val_1 $buffering 5 $cut_through // bits of buffering = 160. 
  //  file .Aa/mvp.opt.aa, line 158
  // val_1
  W_val_1_408_delayed_5_0_434_inst <=> (branch_block_stmt_342/do_while_stmt_343/do_while_stmt_343_loop_body/assign_stmt_436_Sample/req branch_block_stmt_342/do_while_stmt_343/do_while_stmt_343_loop_body/assign_stmt_436_Update/req) (branch_block_stmt_342/do_while_stmt_343/do_while_stmt_343_loop_body/assign_stmt_436_Sample/ack branch_block_stmt_342/do_while_stmt_343/do_while_stmt_343_loop_body/assign_stmt_436_Update/ack)
  // 			$volatile nval_1 := (val_1_408_delayed_5_0 + (a_rc_1 * xval_1)) $buffering 1
  //  file .Aa/mvp.opt.aa, line 159
  // (val_1_408_delayed_5_0 + (a_rc_1 * xval_1))
  // val_1_408_delayed_5_0
  // (a_rc_1 * xval_1)
  // a_rc_1
  // xval_1
  // 			val_2_415_delayed_5_0 := val_2 $buffering 5 $cut_through // bits of buffering = 160. 
  //  file .Aa/mvp.opt.aa, line 160
  // val_2
  W_val_2_415_delayed_5_0_444_inst <=> (branch_block_stmt_342/do_while_stmt_343/do_while_stmt_343_loop_body/assign_stmt_446_Sample/req branch_block_stmt_342/do_while_stmt_343/do_while_stmt_343_loop_body/assign_stmt_446_Update/req) (branch_block_stmt_342/do_while_stmt_343/do_while_stmt_343_loop_body/assign_stmt_446_Sample/ack branch_block_stmt_342/do_while_stmt_343/do_while_stmt_343_loop_body/assign_stmt_446_Update/ack)
  // 			$volatile nval_2 := (val_2_415_delayed_5_0 + (a_rc_2 * xval_2)) $buffering 1
  //  file .Aa/mvp.opt.aa, line 161
  // (val_2_415_delayed_5_0 + (a_rc_2 * xval_2))
  // val_2_415_delayed_5_0
  // (a_rc_2 * xval_2)
  // a_rc_2
  // xval_2
  // 			val_3_422_delayed_5_0 := val_3 $buffering 5 $cut_through // bits of buffering = 160. 
  //  file .Aa/mvp.opt.aa, line 162
  // val_3
  W_val_3_422_delayed_5_0_454_inst <=> (branch_block_stmt_342/do_while_stmt_343/do_while_stmt_343_loop_body/assign_stmt_456_Sample/req branch_block_stmt_342/do_while_stmt_343/do_while_stmt_343_loop_body/assign_stmt_456_Update/req) (branch_block_stmt_342/do_while_stmt_343/do_while_stmt_343_loop_body/assign_stmt_456_Sample/ack branch_block_stmt_342/do_while_stmt_343/do_while_stmt_343_loop_body/assign_stmt_456_Update/ack)
  // 			$volatile nval_3 := (val_3_422_delayed_5_0 + (a_rc_3 * xval_3)) $buffering 1
  //  file .Aa/mvp.opt.aa, line 163
  // (val_3_422_delayed_5_0 + (a_rc_3 * xval_3))
  // val_3_422_delayed_5_0
  // (a_rc_3 * xval_3)
  // a_rc_3
  // xval_3
  // 			nC := (C + 4 ) $buffering 2// bits of buffering = 16. 
  //  file .Aa/mvp.opt.aa, line 165
  // (C + 4 )
  // C
  ADD_u8_u8_472_inst <=> (branch_block_stmt_342/do_while_stmt_343/do_while_stmt_343_loop_body/ADD_u8_u8_472_Sample/rr branch_block_stmt_342/do_while_stmt_343/do_while_stmt_343_loop_body/ADD_u8_u8_472_Update/cr) (branch_block_stmt_342/do_while_stmt_343/do_while_stmt_343_loop_body/ADD_u8_u8_472_Sample/ra branch_block_stmt_342/do_while_stmt_343/do_while_stmt_343_loop_body/ADD_u8_u8_472_Update/ca)
  // 			nIndex := (Index + 1 ) $buffering 2// bits of buffering = 6. 
  //  file .Aa/mvp.opt.aa, line 166
  // (Index + 1 )
  // Index
  ADD_u3_u3_477_inst <=> (branch_block_stmt_342/do_while_stmt_343/do_while_stmt_343_loop_body/ADD_u3_u3_477_Sample/rr branch_block_stmt_342/do_while_stmt_343/do_while_stmt_343_loop_body/ADD_u3_u3_477_Update/cr) (branch_block_stmt_342/do_while_stmt_343/do_while_stmt_343_loop_body/ADD_u3_u3_477_Sample/ra branch_block_stmt_342/do_while_stmt_343/do_while_stmt_343_loop_body/ADD_u3_u3_477_Update/ca)
  // (nC < 32 )
  // nC
  do_while_stmt_343_branch <=> (branch_block_stmt_342/do_while_stmt_343/do_while_stmt_343_loop_body/condition_evaluated) (branch_block_stmt_342/do_while_stmt_343/loop_exit/ack branch_block_stmt_342/do_while_stmt_343/loop_taken/ack)
  // 	result := (nval_0 + (nval_1 + (nval_2 + nval_3))) $buffering 1// bits of buffering = 32. 
  //  file .Aa/mvp.opt.aa, line 170
  // (nval_0 + (nval_1 + (nval_2 + nval_3)))
  // nval_0
  // (nval_1 + (nval_2 + nval_3))
  // nval_1
  // (nval_2 + nval_3)
  // nval_2
  // nval_3
  ADD_u32_u32_491_inst <=> (assign_stmt_492/ADD_u32_u32_491_Sample/rr assign_stmt_492/ADD_u32_u32_491_Update/cr) (assign_stmt_492/ADD_u32_u32_491_Sample/ra assign_stmt_492/ADD_u32_u32_491_Update/ca)
}
$module [global_storage_initializer_] 
{
  // pipe-declarations for block %global_storage_initializer_
  //  file .Aa/mvp.opt.aa, line 172
  // there are no memory spaces local to this module.
  $CP 
  {
    // begin control-path 
  }
  // end control-path
  $DP 
  {
    // begin data-path 
    // constant-object-declarations for block %global_storage_initializer_
    //  file .Aa/mvp.opt.aa, line 172
  }
  // end data-path
}
$module [multiplyMatrixVector] 
{
  // pipe-declarations for block %multiplyMatrixVector
  //  file .Aa/mvp.opt.aa, line 179
  // pipe-declarations for block %multiplyMatrixVector%mmloop
  //  file .Aa/mvp.opt.aa, line 184
  // pipe-declarations for block %multiplyMatrixVector%mmloop%
  //  file .Aa/mvp.opt.aa, line 186
  // there are no memory spaces local to this module.
  $CP 
  {
    // begin control-path 
    <>[branch_block_stmt_498] // Branch Block  file .Aa/mvp.opt.aa, line 184
    {
      $P [branch_block_stmt_498__entry__]
      branch_block_stmt_498__entry__ <-| ($entry)
      $P [branch_block_stmt_498__exit__]
      branch_block_stmt_498__exit__ |-> ($exit)
      $P [merge_stmt_499__entry__] 
      $P [merge_stmt_499__exit__] 
      $P [call_stmt_508_to_assign_stmt_528__entry__] 
      $P [call_stmt_508_to_assign_stmt_528__exit__] 
      $P [if_stmt_529__entry__] 
      $P [if_stmt_529__exit__] 
      ::[call_stmt_508_to_assign_stmt_528] 
      {
        // start: 		$call dotP_0 (R ) (val_0 ) 
        //  file .Aa/mvp.opt.aa, line 190
        $T[call_stmt_508_sample_start_] 
        $T[call_stmt_508_sample_completed_] 
        $T[call_stmt_508_update_start_] 
        $T[call_stmt_508_update_completed_] 
        // Call input argument 0
        // R
        // start: Forward dependencies from R to transition call_stmt_508_sample_start_
        // done: Forward dependencies from R to transition call_stmt_508_sample_start_
        ;;[call_stmt_508_Sample] 
        {
          $T [crr] $T [cra] 
        }
        ;;[call_stmt_508_Update] 
        {
          $T [ccr] $T [cca] 
        }
        call_stmt_508_sample_start_ &-> (call_stmt_508_Sample)
        call_stmt_508_sample_completed_ <-& (call_stmt_508_Sample)
        call_stmt_508_sample_completed_ &-> ($null)
        call_stmt_508_update_start_ &-> (call_stmt_508_Update)
        call_stmt_508_update_completed_ <-& (call_stmt_508_Update)
        // Call output argument 0
        // (as target) val_0
        // start: WAR dependencies for val_0
        // done: WAR dependencies for val_0
        // end: 		$call dotP_0 (R ) (val_0 ) 
        // start: 		$call dotP_1 ((R + 1 ) ) (val_1 ) 
        //  file .Aa/mvp.opt.aa, line 191
        $T[call_stmt_513_sample_start_] 
        $T[call_stmt_513_sample_completed_] 
        $T[call_stmt_513_update_start_] 
        $T[call_stmt_513_update_completed_] 
        // Call input argument 0
        // (R + 1 )
        // R
        // start: Forward dependencies from (R + 1 ) to transition call_stmt_513_sample_start_
        // done: Forward dependencies from (R + 1 ) to transition call_stmt_513_sample_start_
        ;;[call_stmt_513_Sample] 
        {
          $T [crr] $T [cra] 
        }
        ;;[call_stmt_513_Update] 
        {
          $T [ccr] $T [cca] 
        }
        call_stmt_513_sample_start_ &-> (call_stmt_513_Sample)
        call_stmt_513_sample_completed_ <-& (call_stmt_513_Sample)
        call_stmt_513_sample_completed_ &-> ($null)
        call_stmt_513_update_start_ &-> (call_stmt_513_Update)
        call_stmt_513_update_completed_ <-& (call_stmt_513_Update)
        // Call output argument 0
        // (as target) val_1
        // start: WAR dependencies for val_1
        // done: WAR dependencies for val_1
        // end: 		$call dotP_1 ((R + 1 ) ) (val_1 ) 
        // start:  		out_data := val_0 $buffering 1// bits of buffering = 32. 
        //  file .Aa/mvp.opt.aa, line 192
        // Source expression
        // val_0
        // Target expression
        // (as target) out_data
        $T[WPIPE_out_data_514_sample_start_] 
        $T[WPIPE_out_data_514_sample_completed_] 
        $T[WPIPE_out_data_514_update_start_] 
        $T[WPIPE_out_data_514_update_completed_] 
        ;;[WPIPE_out_data_514_Sample] 
        {
          // pipe write sample-start out_data
          $T [req] $T [ack] 
        }
        ;;[WPIPE_out_data_514_Update] 
        {
          // pipe write update (complete) out_data
          $T [req] $T [ack] 
        }
        WPIPE_out_data_514_sample_start_ &-> (WPIPE_out_data_514_Sample)
        WPIPE_out_data_514_sample_completed_ <-& (WPIPE_out_data_514_Sample)
        WPIPE_out_data_514_update_start_ <-& (WPIPE_out_data_514_sample_completed_)
        WPIPE_out_data_514_update_start_ &-> (WPIPE_out_data_514_Update)
        WPIPE_out_data_514_update_completed_ <-& (WPIPE_out_data_514_Update)
        // start: Forward dependencies from val_0 to transition WPIPE_out_data_514_sample_start_
        WPIPE_out_data_514_sample_start_ <-& (call_stmt_508_update_completed_)
        // done: Forward dependencies from val_0 to transition WPIPE_out_data_514_sample_start_
        // end:  		out_data := val_0 $buffering 1// bits of buffering = 32. 
        // start:  		out_data := val_1 $buffering 1// bits of buffering = 32. 
        //  file .Aa/mvp.opt.aa, line 193
        // Source expression
        // val_1
        // Target expression
        // (as target) out_data
        $T[WPIPE_out_data_517_sample_start_] 
        $T[WPIPE_out_data_517_sample_completed_] 
        $T[WPIPE_out_data_517_update_start_] 
        $T[WPIPE_out_data_517_update_completed_] 
        ;;[WPIPE_out_data_517_Sample] 
        {
          // pipe write sample-start out_data
          $T [req] $T [ack] 
        }
        ;;[WPIPE_out_data_517_Update] 
        {
          // pipe write update (complete) out_data
          $T [req] $T [ack] 
        }
        WPIPE_out_data_517_sample_start_ &-> (WPIPE_out_data_517_Sample)
        WPIPE_out_data_517_sample_completed_ <-& (WPIPE_out_data_517_Sample)
        WPIPE_out_data_517_update_start_ <-& (WPIPE_out_data_517_sample_completed_)
        WPIPE_out_data_517_update_start_ &-> (WPIPE_out_data_517_Update)
        WPIPE_out_data_517_update_completed_ <-& (WPIPE_out_data_517_Update)
        // start: Forward dependencies from val_1 to transition WPIPE_out_data_517_sample_start_
        WPIPE_out_data_517_sample_start_ <-& (call_stmt_513_update_completed_)
        // done: Forward dependencies from val_1 to transition WPIPE_out_data_517_sample_start_
        // end:  		out_data := val_1 $buffering 1// bits of buffering = 32. 
        // start:  		nR := (R + 2 ) $buffering 1// bits of buffering = 8. 
        //  file .Aa/mvp.opt.aa, line 195
        // Source expression
        // (R + 2 )
        $T[ADD_u8_u8_527_sample_start_] 
        $T[ADD_u8_u8_527_sample_completed_] 
        $T[ADD_u8_u8_527_update_start_] 
        $T[ADD_u8_u8_527_update_completed_] 
        // R
        // start: Forward dependencies from R to transition ADD_u8_u8_527_sample_start_
        // done: Forward dependencies from R to transition ADD_u8_u8_527_sample_start_
        ;;[ADD_u8_u8_527_Sample] 
        {
          // binary expression 
          $T [rr] $T [ra]  // (split) binary operation 
        }
        ;;[ADD_u8_u8_527_Update] 
        {
          // binary expression 
          $T [cr] $T [ca] // (split) binary operation 
        }
        ADD_u8_u8_527_sample_start_ &-> (ADD_u8_u8_527_Sample)
        ADD_u8_u8_527_sample_completed_ <-& (ADD_u8_u8_527_Sample)
        ADD_u8_u8_527_sample_completed_ &-> ($null)
        ADD_u8_u8_527_update_start_ &-> (ADD_u8_u8_527_Update)
        ADD_u8_u8_527_update_completed_ <-& (ADD_u8_u8_527_Update)
        // Target expression
        // (as target) nR
        // start: WAR dependencies for nR
        // done: WAR dependencies for nR
        // end:  		nR := (R + 2 ) $buffering 1// bits of buffering = 8. 
        // load-store dependencies..
        // memory-space  memory_space_7
        //  call_stmt_508 load
        //  call_stmt_513 load
        // memory-space  memory_space_6
        //  call_stmt_508 load
        //  call_stmt_513 load
        // memory-space  memory_space_5
        //  call_stmt_508 load
        //  call_stmt_513 load
        // memory-space  memory_space_4
        //  call_stmt_508 load
        //  call_stmt_513 load
        // memory-space  memory_space_3
        //  call_stmt_508 load
        //  call_stmt_513 load
        // memory-space  memory_space_2
        //  call_stmt_508 load
        //  call_stmt_513 load
        // memory-space  memory_space_1
        //  call_stmt_508 load
        //  call_stmt_513 load
        // memory-space  memory_space_0
        //  call_stmt_508 load
        //  call_stmt_513 load
        // pipe read/write dependencies for pipe out_data
        // read-dependencies for pipe out_data
        // write-dependencies for pipe out_data
        WPIPE_out_data_517_sample_start_ <-& (WPIPE_out_data_514_update_completed_)
        // signal write dependencies for out_data
      }
      call_stmt_508_to_assign_stmt_528__entry__ |-> (call_stmt_508_to_assign_stmt_528)
      call_stmt_508_to_assign_stmt_528__exit__ <-| (call_stmt_508_to_assign_stmt_528)
      // if-statement  
      //  file .Aa/mvp.opt.aa, line 0
      ;;[if_stmt_529_dead_link] 
      {
        $T [dead_transition] $dead 
      }
      if_stmt_529__entry__ |-> (if_stmt_529_dead_link)
      if_stmt_529__exit__ <-| (if_stmt_529_dead_link)
      ;;[if_stmt_529_eval_test] 
      {
        // test expression evaluate and trigger branch 
        // (nR < 32 )
        ;;[ULT_u8_u1_532] 
        {
          // binary expression 
          ||[ULT_u8_u1_532_inputs] 
          {
          }
          // flow-through
          ;;[SplitProtocol] 
          {
            ;;[Sample] 
            {
              $T [rr] $T [ra]
            }
            ;;[Update] 
            {
              $T [cr] $T [ca]
            }
          }
        }
        $T [branch_req] 
      }
      if_stmt_529__entry__ |-> (if_stmt_529_eval_test)
      $P [ULT_u8_u1_532_place]
      ULT_u8_u1_532_place <-| (if_stmt_529_eval_test)
      ;;[if_stmt_529_if_link] 
      {
        $T [if_choice_transition] 
      }
      ;;[if_stmt_529_else_link] 
      {
        $T [else_choice_transition] 
      }
      ULT_u8_u1_532_place |-> (if_stmt_529_if_link if_stmt_529_else_link)
      $P [loopback]
      loopback <-| (if_stmt_529_if_link)
      if_stmt_529__exit__ <-| (if_stmt_529_else_link)
      // control-path for merge  
      //  file .Aa/mvp.opt.aa, line 186
      ;;[merge_stmt_499_dead_link] 
      {
        $T [dead_transition] $dead 
      }
      merge_stmt_499__entry__ |-> (merge_stmt_499_dead_link)
      merge_stmt_499__exit__ <-| (merge_stmt_499_dead_link)
      //---------------------   merge statement  file .Aa/mvp.opt.aa, line 186  --------------------------
      ||[merge_stmt_499__entry___PhiReq] 
      {
        ;;[phi_stmt_500] 
        {
          ||[phi_stmt_500_sources] 
          {
            // sources for 			$phi R := 			  ($bitcast ($uint<8>) 0  ) $on   $entry 			  nR $on   loopback 
            // type of target is $uint<8>
            // constant source .... delay transition 
            $T [type_cast_503_konst_delay_trans] $delay
          }
          $T [phi_stmt_500_req] 
        }
      }
      merge_stmt_499__entry__ |-> (merge_stmt_499__entry___PhiReq)
      ||[loopback_PhiReq] 
      {
        ;;[phi_stmt_500] 
        {
          ||[phi_stmt_500_sources] 
          {
            // sources for 			$phi R := 			  ($bitcast ($uint<8>) 0  ) $on   $entry 			  nR $on   loopback 
            // type of target is $uint<8>
            // trivial non-constant source .... interlock-buffer introduced 
            || [Interlock] 
            {
              ;;[Sample] 
              {
                $T [req] $T [ack]
              }
              ;;[Update] 
              {
                $T [req] $T [ack]
              }
            }
          }
          $T [phi_stmt_500_req] 
        }
      }
      loopback |-> (loopback_PhiReq)
      $P [merge_stmt_499_PhiReqMerge] 
      merge_stmt_499_PhiReqMerge <-| ( merge_stmt_499__entry___PhiReq  loopback_PhiReq )
      ||[merge_stmt_499_PhiAck] 
      {
        $T [phi_stmt_500_ack] 
      }
      merge_stmt_499_PhiReqMerge |-> (merge_stmt_499_PhiAck)
      merge_stmt_499__exit__  <-| (merge_stmt_499_PhiAck)
      //---------------------  end of merge statement  file .Aa/mvp.opt.aa, line 186  --------------------------
      merge_stmt_499__entry__ <-| (branch_block_stmt_498__entry__)
      call_stmt_508_to_assign_stmt_528__entry__ <-| (merge_stmt_499__exit__)
      if_stmt_529__entry__ <-| (call_stmt_508_to_assign_stmt_528__exit__)
      if_stmt_529__exit__ |-> (branch_block_stmt_498__exit__)
    }
  }
  // end control-path
  $DP 
  {
    // begin data-path 
    // constant-object-declarations for block %multiplyMatrixVector%mmloop%
    //  file .Aa/mvp.opt.aa, line 186
    // constant-object-declarations for block %multiplyMatrixVector%mmloop
    //  file .Aa/mvp.opt.aa, line 184
    // constant-object-declarations for block %multiplyMatrixVector
    //  file .Aa/mvp.opt.aa, line 179
    // constant-declarations for block %multiplyMatrixVector%mmloop
    //  file .Aa/mvp.opt.aa, line 184
    // constant-declarations for block %multiplyMatrixVector%mmloop%
    //  file .Aa/mvp.opt.aa, line 186
    // constant-declarations for phi:  			$phi R := 			  ($bitcast ($uint<8>) 0  ) $on   $entry 			  nR $on   loopback 
    // type of target is $uint<8>
    //  file .Aa/mvp.opt.aa, line 187
    // ($bitcast ($uint<8>) 0  )
    $constant $W[type_cast_503_wire_constant] : $int<8> := _b00000000// 0
    // 		$call dotP_0 (R ) (val_0 ) 
    //  file .Aa/mvp.opt.aa, line 190
    // 		$call dotP_1 ((R + 1 ) ) (val_1 ) 
    //  file .Aa/mvp.opt.aa, line 191
    // 1 
    $constant $W[konst_510_wire_constant] : $int<8> := _b00000001// 1
    // 2 
    $constant $W[konst_526_wire_constant] : $int<8> := _b00000010// 2
    // if-statement  
    //  file .Aa/mvp.opt.aa, line 0
    // 32 
    $constant $W[konst_531_wire_constant] : $int<8> := _b00100000// 32
    // block %multiplyMatrixVector%mmloop
    //  file .Aa/mvp.opt.aa, line 184
    // merge-statement  
    //  file .Aa/mvp.opt.aa, line 186
    // 			$phi R := 			  ($bitcast ($uint<8>) 0  ) $on   $entry 			  nR $on   loopback 
    // type of target is $uint<8>
    //  file .Aa/mvp.opt.aa, line 187
    $W[nR_528_504_buffered] : $int<8>
    // R
    $W[R_500] : $int<8>
    // 		$call dotP_0 (R ) (val_0 ) 
    //  file .Aa/mvp.opt.aa, line 190
    // val_0
    $W[val_0_508] : $int<32>
    // 		$call dotP_1 ((R + 1 ) ) (val_1 ) 
    //  file .Aa/mvp.opt.aa, line 191
    // (R + 1 )
    $intermediate $W[ADD_u8_u8_511_wire] : $int<8>
    // val_1
    $W[val_1_513] : $int<32>
    // 		out_data := val_0 $buffering 1// bits of buffering = 32. 
    //  file .Aa/mvp.opt.aa, line 192
    // out_data
    // 		out_data := val_1 $buffering 1// bits of buffering = 32. 
    //  file .Aa/mvp.opt.aa, line 193
    // out_data
    // 		nR := (R + 2 ) $buffering 1// bits of buffering = 8. 
    //  file .Aa/mvp.opt.aa, line 195
    // nR
    $W[nR_528] : $int<8>
    // if statement  
    //  file .Aa/mvp.opt.aa, line 0
    // (nR < 32 )
    $intermediate $W[ULT_u8_u1_532_wire] : $int<1>
    // datapath-instances for block %multiplyMatrixVector%mmloop
    //  file .Aa/mvp.opt.aa, line 184
    // data-path instances for merge  
    //  file .Aa/mvp.opt.aa, line 186
    // 			$phi R := 			  ($bitcast ($uint<8>) 0  ) $on   $entry 			  nR $on   loopback 
    // type of target is $uint<8>
    //  file .Aa/mvp.opt.aa, line 187
    # := [nR_528_504_buf] (nR_528) (nR_528_504_buffered)    
    $phi [phi_stmt_500] (type_cast_503_wire_constant nR_528_504_buffered) ( R_500 ) 
    // 		$call dotP_0 (R ) (val_0 ) 
    //  file .Aa/mvp.opt.aa, line 190
    $call [call_stmt_508_call] $module dotP_0(R_500) (val_0_508)  
    $delay call_stmt_508_call 4
    $buffering  $in call_stmt_508_call R_500 1
    $buffering  $out call_stmt_508_call val_0_508 1
    // 		$call dotP_1 ((R + 1 ) ) (val_1 ) 
    //  file .Aa/mvp.opt.aa, line 191
    // (R + 1 )
    +[ADD_u8_u8_511_inst] (R_500 konst_510_wire_constant) (ADD_u8_u8_511_wire)   $flowthrough 
    $delay ADD_u8_u8_511_inst 0
    $call [call_stmt_513_call] $module dotP_1(ADD_u8_u8_511_wire) (val_1_513)  
    $delay call_stmt_513_call 4
    $buffering  $in call_stmt_513_call ADD_u8_u8_511_wire 1
    $buffering  $out call_stmt_513_call val_1_513 1
    // 		out_data := val_0 $buffering 1// bits of buffering = 32. 
    //  file .Aa/mvp.opt.aa, line 192
    // out_data
    $ioport $out [WPIPE_out_data_514_inst]  (val_0_508) (out_data) 
    // 		out_data := val_1 $buffering 1// bits of buffering = 32. 
    //  file .Aa/mvp.opt.aa, line 193
    // out_data
    $ioport $out [WPIPE_out_data_517_inst]  (val_1_513) (out_data) 
    // 		nR := (R + 2 ) $buffering 1// bits of buffering = 8. 
    //  file .Aa/mvp.opt.aa, line 195
    // (R + 2 )
    +[ADD_u8_u8_527_inst] (R_500 konst_526_wire_constant) (nR_528)   
    $buffering  $out ADD_u8_u8_527_inst nR_528 1
    $delay ADD_u8_u8_527_inst 1
    // datapath-instances for if  
    //  file .Aa/mvp.opt.aa, line 0
    // (nR < 32 )
    <[ULT_u8_u1_532_inst] (nR_528 konst_531_wire_constant) (ULT_u8_u1_532_wire)   $flowthrough 
    $delay ULT_u8_u1_532_inst 0
    ==0? [if_stmt_529_branch] (ULT_u8_u1_532_wire)
  }
  // end data-path
  // CP-DP links for merge  
  //  file .Aa/mvp.opt.aa, line 186
  nR_528_504_buf <=> (branch_block_stmt_498/loopback_PhiReq/phi_stmt_500/phi_stmt_500_sources/Interlock/Sample/req branch_block_stmt_498/loopback_PhiReq/phi_stmt_500/phi_stmt_500_sources/Interlock/Update/req) (branch_block_stmt_498/loopback_PhiReq/phi_stmt_500/phi_stmt_500_sources/Interlock/Sample/ack branch_block_stmt_498/loopback_PhiReq/phi_stmt_500/phi_stmt_500_sources/Interlock/Update/ack)
  phi_stmt_500 <=> (branch_block_stmt_498/merge_stmt_499__entry___PhiReq/phi_stmt_500/phi_stmt_500_req branch_block_stmt_498/loopback_PhiReq/phi_stmt_500/phi_stmt_500_req) (branch_block_stmt_498/merge_stmt_499_PhiAck/phi_stmt_500_ack)
  // 		$call dotP_0 (R ) (val_0 ) 
  //  file .Aa/mvp.opt.aa, line 190
  // R
  call_stmt_508_call <=> (branch_block_stmt_498/call_stmt_508_to_assign_stmt_528/call_stmt_508_Sample/crr branch_block_stmt_498/call_stmt_508_to_assign_stmt_528/call_stmt_508_Update/ccr) (branch_block_stmt_498/call_stmt_508_to_assign_stmt_528/call_stmt_508_Sample/cra branch_block_stmt_498/call_stmt_508_to_assign_stmt_528/call_stmt_508_Update/cca)
  // 		$call dotP_1 ((R + 1 ) ) (val_1 ) 
  //  file .Aa/mvp.opt.aa, line 191
  // (R + 1 )
  // R
  call_stmt_513_call <=> (branch_block_stmt_498/call_stmt_508_to_assign_stmt_528/call_stmt_513_Sample/crr branch_block_stmt_498/call_stmt_508_to_assign_stmt_528/call_stmt_513_Update/ccr) (branch_block_stmt_498/call_stmt_508_to_assign_stmt_528/call_stmt_513_Sample/cra branch_block_stmt_498/call_stmt_508_to_assign_stmt_528/call_stmt_513_Update/cca)
  // 		out_data := val_0 $buffering 1// bits of buffering = 32. 
  //  file .Aa/mvp.opt.aa, line 192
  // val_0
  // out_data
  WPIPE_out_data_514_inst <=> (branch_block_stmt_498/call_stmt_508_to_assign_stmt_528/WPIPE_out_data_514_Sample/req branch_block_stmt_498/call_stmt_508_to_assign_stmt_528/WPIPE_out_data_514_Update/req) (branch_block_stmt_498/call_stmt_508_to_assign_stmt_528/WPIPE_out_data_514_Sample/ack branch_block_stmt_498/call_stmt_508_to_assign_stmt_528/WPIPE_out_data_514_Update/ack)
  // 		out_data := val_1 $buffering 1// bits of buffering = 32. 
  //  file .Aa/mvp.opt.aa, line 193
  // val_1
  // out_data
  WPIPE_out_data_517_inst <=> (branch_block_stmt_498/call_stmt_508_to_assign_stmt_528/WPIPE_out_data_517_Sample/req branch_block_stmt_498/call_stmt_508_to_assign_stmt_528/WPIPE_out_data_517_Update/req) (branch_block_stmt_498/call_stmt_508_to_assign_stmt_528/WPIPE_out_data_517_Sample/ack branch_block_stmt_498/call_stmt_508_to_assign_stmt_528/WPIPE_out_data_517_Update/ack)
  // 		nR := (R + 2 ) $buffering 1// bits of buffering = 8. 
  //  file .Aa/mvp.opt.aa, line 195
  // (R + 2 )
  // R
  ADD_u8_u8_527_inst <=> (branch_block_stmt_498/call_stmt_508_to_assign_stmt_528/ADD_u8_u8_527_Sample/rr branch_block_stmt_498/call_stmt_508_to_assign_stmt_528/ADD_u8_u8_527_Update/cr) (branch_block_stmt_498/call_stmt_508_to_assign_stmt_528/ADD_u8_u8_527_Sample/ra branch_block_stmt_498/call_stmt_508_to_assign_stmt_528/ADD_u8_u8_527_Update/ca)
  // CP-DP links for if  
  //  file .Aa/mvp.opt.aa, line 0
  // (nR < 32 )
  if_stmt_529_branch <=> (branch_block_stmt_498/if_stmt_529_eval_test/branch_req) (branch_block_stmt_498/if_stmt_529_else_link/else_choice_transition branch_block_stmt_498/if_stmt_529_if_link/if_choice_transition)
}
$module [readMatrix] 
{
  // pipe-declarations for block %readMatrix
  //  file .Aa/mvp.opt.aa, line 201
  // pipe-declarations for block %readMatrix%mRead
  //  file .Aa/mvp.opt.aa, line 206
  // pipe-declarations for block %readMatrix%mRead%
  //  file .Aa/mvp.opt.aa, line 208
  // pipe-declarations for block %readMatrix%mRead%
  //  file .Aa/mvp.opt.aa, line 213
  // memory-space 3 is written into.
  // memory-space 2 is written into.
  // memory-space 1 is written into.
  // memory-space 0 is written into.
  // there are no memory spaces local to this module.
  $CP 
  {
    // begin control-path 
    <>[branch_block_stmt_538] // Branch Block  file .Aa/mvp.opt.aa, line 206
    {
      $P [branch_block_stmt_538__entry__]
      branch_block_stmt_538__entry__ <-| ($entry)
      $P [branch_block_stmt_538__exit__]
      branch_block_stmt_538__exit__ |-> ($exit)
      $P [merge_stmt_539__entry__] 
      $P [merge_stmt_539__exit__] 
      $P [assign_stmt_550__entry__] 
      $P [assign_stmt_550__exit__] 
      $P [merge_stmt_551__entry__] 
      $P [merge_stmt_551__exit__] 
      $P [assign_stmt_562_to_assign_stmt_640__entry__] 
      $P [assign_stmt_562_to_assign_stmt_640__exit__] 
      $P [if_stmt_647__entry__] 
      $P [if_stmt_647__exit__] 
      $P [if_stmt_653__entry__] 
      $P [if_stmt_653__exit__] 
      ::[assign_stmt_550] 
      {
        // start:  		nI := (I + 1 ) $buffering 1// bits of buffering = 8. 
        //  file .Aa/mvp.opt.aa, line 212
        // Source expression
        // (I + 1 )
        $T[ADD_u8_u8_549_sample_start_] 
        $T[ADD_u8_u8_549_sample_completed_] 
        $T[ADD_u8_u8_549_update_start_] 
        $T[ADD_u8_u8_549_update_completed_] 
        // I
        // start: Forward dependencies from I to transition ADD_u8_u8_549_sample_start_
        // done: Forward dependencies from I to transition ADD_u8_u8_549_sample_start_
        ;;[ADD_u8_u8_549_Sample] 
        {
          // binary expression 
          $T [rr] $T [ra]  // (split) binary operation 
        }
        ;;[ADD_u8_u8_549_Update] 
        {
          // binary expression 
          $T [cr] $T [ca] // (split) binary operation 
        }
        ADD_u8_u8_549_sample_start_ &-> (ADD_u8_u8_549_Sample)
        ADD_u8_u8_549_sample_completed_ <-& (ADD_u8_u8_549_Sample)
        ADD_u8_u8_549_sample_completed_ &-> ($null)
        ADD_u8_u8_549_update_start_ &-> (ADD_u8_u8_549_Update)
        ADD_u8_u8_549_update_completed_ <-& (ADD_u8_u8_549_Update)
        // Target expression
        // (as target) nI
        // start: WAR dependencies for nI
        // done: WAR dependencies for nI
        // end:  		nI := (I + 1 ) $buffering 1// bits of buffering = 8. 
        // load-store dependencies..
      }
      assign_stmt_550__entry__ |-> (assign_stmt_550)
      assign_stmt_550__exit__ <-| (assign_stmt_550)
      ::[assign_stmt_562_to_assign_stmt_640] 
      {
        // start:  		nJ := (J + 1 ) $buffering 1// bits of buffering = 8. 
        //  file .Aa/mvp.opt.aa, line 217
        // Source expression
        // (J + 1 )
        $T[ADD_u8_u8_561_sample_start_] 
        $T[ADD_u8_u8_561_sample_completed_] 
        $T[ADD_u8_u8_561_update_start_] 
        $T[ADD_u8_u8_561_update_completed_] 
        // J
        // start: Forward dependencies from J to transition ADD_u8_u8_561_sample_start_
        // done: Forward dependencies from J to transition ADD_u8_u8_561_sample_start_
        ;;[ADD_u8_u8_561_Sample] 
        {
          // binary expression 
          $T [rr] $T [ra]  // (split) binary operation 
        }
        ;;[ADD_u8_u8_561_Update] 
        {
          // binary expression 
          $T [cr] $T [ca] // (split) binary operation 
        }
        ADD_u8_u8_561_sample_start_ &-> (ADD_u8_u8_561_Sample)
        ADD_u8_u8_561_sample_completed_ <-& (ADD_u8_u8_561_Sample)
        ADD_u8_u8_561_sample_completed_ &-> ($null)
        ADD_u8_u8_561_update_start_ &-> (ADD_u8_u8_561_Update)
        ADD_u8_u8_561_update_completed_ <-& (ADD_u8_u8_561_Update)
        // Target expression
        // (as target) nJ
        // start: WAR dependencies for nJ
        // done: WAR dependencies for nJ
        // end:  		nJ := (J + 1 ) $buffering 1// bits of buffering = 8. 
        // start:  		aval := in_data $buffering 1// bits of buffering = 32. 
        //  file .Aa/mvp.opt.aa, line 218
        // Source expression
        // in_data
        $T[RPIPE_in_data_564_sample_start_] 
        $T[RPIPE_in_data_564_sample_completed_] 
        $T[RPIPE_in_data_564_update_start_] 
        $T[RPIPE_in_data_564_update_completed_] 
        ;;[RPIPE_in_data_564_Sample] 
        {
          // pipe read sample
          $T [rr] $T [ra] 
        }
        ;;[RPIPE_in_data_564_Update] 
        {
          // pipe read update
          $T [cr] $T [ca] 
        }
        RPIPE_in_data_564_sample_start_ &-> (RPIPE_in_data_564_Sample)
        RPIPE_in_data_564_sample_completed_ <-& (RPIPE_in_data_564_Sample)
        RPIPE_in_data_564_update_start_ <-& (RPIPE_in_data_564_sample_completed_)
        RPIPE_in_data_564_update_start_ &-> (RPIPE_in_data_564_Update)
        RPIPE_in_data_564_update_completed_ <-& (RPIPE_in_data_564_Update)
        // Target expression
        // (as target) aval
        // start: WAR dependencies for aval
        // done: WAR dependencies for aval
        // end:  		aval := in_data $buffering 1// bits of buffering = 32. 
        // start: WAR dependencies for Digit
        // ignored out-of-scope w_root 			$phi J := 			  ($bitcast ($uint<8>) 0  ) $on   $entry 			  nJ $on   inner_loopback 
        // type of target is $uint<8>
        // done: WAR dependencies for Digit
        // start:  		$volatile Digit := ( $slice J 1 0 )  $buffering 1
        //  file .Aa/mvp.opt.aa, line 219
        // volatile! 
        // Source expression
        // ( $slice J 1 0 ) 
        // J
        // Target expression
        // (as target) Digit
        // start: WAR dependencies for Digit
        // ignored out-of-scope w_root 			$phi J := 			  ($bitcast ($uint<8>) 0  ) $on   $entry 			  nJ $on   inner_loopback 
        // type of target is $uint<8>
        // done: WAR dependencies for Digit
        // end:  		$volatile Digit := ( $slice J 1 0 )  $buffering 1
        // start:  		Index := ( $slice J 7 2 )  $buffering 1// bits of buffering = 6. 
        //  file .Aa/mvp.opt.aa, line 221
        // Source expression
        // ( $slice J 7 2 ) 
        $T[slice_577_sample_start_] 
        $T[slice_577_sample_completed_] 
        $T[slice_577_update_start_] 
        $T[slice_577_update_completed_] 
        // J
        // start: Forward dependencies from J to transition slice_577_sample_start_
        // done: Forward dependencies from J to transition slice_577_sample_start_
        ;;[slice_577_Sample] 
        {
          // unary expression 
          $T [rr] $T [ra] // (split) unary operation
        }
        ;;[slice_577_Update] 
        {
          // unary expression 
          $T [cr] $T [ca] //(split) unary operation
        }
        slice_577_sample_start_ &-> (slice_577_Sample)
        slice_577_sample_completed_ <-& (slice_577_Sample)
        slice_577_sample_completed_ &-> ($null)
        slice_577_update_start_ &-> (slice_577_Update)
        slice_577_update_completed_ <-& (slice_577_Update)
        // Target expression
        // (as target) Index
        // start: WAR dependencies for Index
        // done: WAR dependencies for Index
        // end:  		Index := ( $slice J 7 2 )  $buffering 1// bits of buffering = 6. 
        // start: WAR dependencies for aTrue
        // ignored out-of-scope w_root 			$phi J := 			  ($bitcast ($uint<8>) 0  ) $on   $entry 			  nJ $on   inner_loopback 
        // type of target is $uint<8>
        // done: WAR dependencies for aTrue
        // start:  		$volatile aTrue := (Digit == ZERO_2) $buffering 1
        //  file .Aa/mvp.opt.aa, line 222
        // volatile! 
        // Source expression
        // (Digit == ZERO_2)
        // Digit
        // Target expression
        // (as target) aTrue
        // start: WAR dependencies for aTrue
        // ignored out-of-scope w_root 			$phi J := 			  ($bitcast ($uint<8>) 0  ) $on   $entry 			  nJ $on   inner_loopback 
        // type of target is $uint<8>
        // done: WAR dependencies for aTrue
        // end:  		$volatile aTrue := (Digit == ZERO_2) $buffering 1
        // start: WAR dependencies for bTrue
        // ignored out-of-scope w_root 			$phi J := 			  ($bitcast ($uint<8>) 0  ) $on   $entry 			  nJ $on   inner_loopback 
        // type of target is $uint<8>
        // done: WAR dependencies for bTrue
        // start:  		$volatile bTrue := (Digit == ONE_2) $buffering 1
        //  file .Aa/mvp.opt.aa, line 223
        // volatile! 
        // Source expression
        // (Digit == ONE_2)
        // Digit
        // Target expression
        // (as target) bTrue
        // start: WAR dependencies for bTrue
        // ignored out-of-scope w_root 			$phi J := 			  ($bitcast ($uint<8>) 0  ) $on   $entry 			  nJ $on   inner_loopback 
        // type of target is $uint<8>
        // done: WAR dependencies for bTrue
        // end:  		$volatile bTrue := (Digit == ONE_2) $buffering 1
        // start: WAR dependencies for cTrue
        // ignored out-of-scope w_root 			$phi J := 			  ($bitcast ($uint<8>) 0  ) $on   $entry 			  nJ $on   inner_loopback 
        // type of target is $uint<8>
        // done: WAR dependencies for cTrue
        // start:  		$volatile cTrue := (Digit == TWO_2) $buffering 1
        //  file .Aa/mvp.opt.aa, line 224
        // volatile! 
        // Source expression
        // (Digit == TWO_2)
        // Digit
        // Target expression
        // (as target) cTrue
        // start: WAR dependencies for cTrue
        // ignored out-of-scope w_root 			$phi J := 			  ($bitcast ($uint<8>) 0  ) $on   $entry 			  nJ $on   inner_loopback 
        // type of target is $uint<8>
        // done: WAR dependencies for cTrue
        // end:  		$volatile cTrue := (Digit == TWO_2) $buffering 1
        // start: WAR dependencies for dTrue
        // ignored out-of-scope w_root 			$phi J := 			  ($bitcast ($uint<8>) 0  ) $on   $entry 			  nJ $on   inner_loopback 
        // type of target is $uint<8>
        // done: WAR dependencies for dTrue
        // start:  		$volatile dTrue := (Digit == THREE_2) $buffering 1
        //  file .Aa/mvp.opt.aa, line 225
        // volatile! 
        // Source expression
        // (Digit == THREE_2)
        // Digit
        // Target expression
        // (as target) dTrue
        // start: WAR dependencies for dTrue
        // ignored out-of-scope w_root 			$phi J := 			  ($bitcast ($uint<8>) 0  ) $on   $entry 			  nJ $on   inner_loopback 
        // type of target is $uint<8>
        // done: WAR dependencies for dTrue
        // end:  		$volatile dTrue := (Digit == THREE_2) $buffering 1
        // start:  		$guard (aTrue) A_MEM[I][Index] := aval $buffering 1// bits of buffering = 32. 
        //  file .Aa/mvp.opt.aa, line 226
        // Guard expression 
        // aTrue
        // Source expression
        // aval
        // Target expression
        // A_MEM[I][Index]
        $T[array_obj_ref_602_sample_start_] 
        $T[array_obj_ref_602_sample_completed_] 
        $T[array_obj_ref_602_update_start_] 
        $T[array_obj_ref_602_update_completed_] 
        $T[array_obj_ref_602_word_address_calculated] 
        $T[array_obj_ref_602_root_address_calculated] 
        $T[array_obj_ref_602_offset_calculated] 
        $T[array_obj_ref_602_index_resized_0] 
        $T[array_obj_ref_602_index_scaled_0] 
        $T[array_obj_ref_602_index_computed_0] 
        // I
        // start: Forward dependencies from I to transition array_obj_ref_602_index_computed_0
        // done: Forward dependencies from I to transition array_obj_ref_602_index_computed_0
        ;;[array_obj_ref_602_index_resize_0] 
        {
          $T [index_resize_req] $T [index_resize_ack] // resize index to address-width
        }
        array_obj_ref_602_index_computed_0 &-> (array_obj_ref_602_index_resize_0)
        array_obj_ref_602_index_resized_0 <-& (array_obj_ref_602_index_resize_0)
        $T[array_obj_ref_602_index_scale_0_sample_start] 
        $T[array_obj_ref_602_index_scale_0_sample_complete] 
        $T[array_obj_ref_602_index_scale_0_update_start] 
        $T[array_obj_ref_602_index_scale_0_update_complete] 
        ;;[array_obj_ref_602_index_scale_0_Sample] 
        {
          $T [rr] $T [ra] 
        }
        ;;[array_obj_ref_602_index_scale_0_Update] 
        {
          $T [cr] $T [ca] 
        }
        array_obj_ref_602_index_resized_0 &-> (array_obj_ref_602_index_scale_0_sample_start)
        array_obj_ref_602_index_scale_0_sample_start &-> (array_obj_ref_602_index_scale_0_Sample)
        array_obj_ref_602_index_scale_0_sample_complete <-& (array_obj_ref_602_index_scale_0_Sample)
        array_obj_ref_602_index_scale_0_update_start &-> (array_obj_ref_602_index_scale_0_Update)
        array_obj_ref_602_index_scale_0_update_complete <-& (array_obj_ref_602_index_scale_0_Update)
        array_obj_ref_602_index_scaled_0 <-& (array_obj_ref_602_index_scale_0_update_complete)
        $T[array_obj_ref_602_index_resized_1] 
        $T[array_obj_ref_602_index_scaled_1] 
        $T[array_obj_ref_602_index_computed_1] 
        // Index
        // start: Forward dependencies from Index to transition array_obj_ref_602_index_computed_1
        array_obj_ref_602_index_computed_1 <-& (slice_577_update_completed_)
        // done: Forward dependencies from Index to transition array_obj_ref_602_index_computed_1
        ;;[array_obj_ref_602_index_resize_1] 
        {
          $T [index_resize_req] $T [index_resize_ack] // resize index to address-width
        }
        array_obj_ref_602_index_computed_1 &-> (array_obj_ref_602_index_resize_1)
        array_obj_ref_602_index_resized_1 <-& (array_obj_ref_602_index_resize_1)
        ;;[array_obj_ref_602_index_scale_1] 
        {
          $T [scale_rename_req] $T [scale_rename_ack] // rename 
        }
        array_obj_ref_602_index_resized_1 &-> (array_obj_ref_602_index_scale_1)
        array_obj_ref_602_index_scaled_1 <-& (array_obj_ref_602_index_scale_1)
        $T[array_obj_ref_602_partial_sum_1_sample_start] 
        $T[array_obj_ref_602_partial_sum_1_sample_complete] 
        $T[array_obj_ref_602_partial_sum_1_update_start] 
        $T[array_obj_ref_602_partial_sum_1_update_complete] 
        ;;[array_obj_ref_602_partial_sum_1_Sample] 
        {
          $T [rr] $T [ra] 
        }
        ;;[array_obj_ref_602_partial_sum_1_Update] 
        {
          $T [cr] $T [ca] 
        }
        array_obj_ref_602_partial_sum_1_sample_start &-> (array_obj_ref_602_partial_sum_1_Sample)
        array_obj_ref_602_partial_sum_1_sample_complete <-& (array_obj_ref_602_partial_sum_1_Sample)
        array_obj_ref_602_partial_sum_1_update_start &-> (array_obj_ref_602_partial_sum_1_Update)
        array_obj_ref_602_partial_sum_1_update_complete <-& (array_obj_ref_602_partial_sum_1_Update)
        array_obj_ref_602_partial_sum_1_sample_start <-& (array_obj_ref_602_index_scaled_0)
        array_obj_ref_602_partial_sum_1_sample_start <-& (array_obj_ref_602_index_scaled_1)
        array_obj_ref_602_offset_calculated <-& (array_obj_ref_602_partial_sum_1_update_complete)
        ;;[array_obj_ref_602_final_index_sum_regn] 
        {
          $T [req] $T [ack] // rename
        }
        array_obj_ref_602_partial_sum_1_update_complete &-> (array_obj_ref_602_final_index_sum_regn)
        array_obj_ref_602_offset_calculated <-& (array_obj_ref_602_final_index_sum_regn)
        ;;[array_obj_ref_602_base_plus_offset] 
        {
          $T [sum_rename_req] $T [sum_rename_ack] // one gets through 
        }
        array_obj_ref_602_offset_calculated &-> (array_obj_ref_602_base_plus_offset)
        array_obj_ref_602_root_address_calculated <-& (array_obj_ref_602_base_plus_offset)
        ;;[array_obj_ref_602_word_addrgen] 
        {
          $T [root_register_req] $T [root_register_ack]
        }
        array_obj_ref_602_root_address_calculated &-> (array_obj_ref_602_word_addrgen)
        array_obj_ref_602_word_address_calculated <-& (array_obj_ref_602_word_addrgen)
        ;;[array_obj_ref_602_Sample] 
        {
          ;;[array_obj_ref_602_Split] 
          {
            $T [split_req] $T [split_ack]
          }
          ||[word_access_start] 
          {
            ;;[word_0] 
            {
              $T [rr] $T [ra] 
            }
          }
        }
        ;;[array_obj_ref_602_Update] 
        {
          ||[word_access_complete] 
          {
            ;;[word_0] 
            {
              $T [cr] $T [ca] 
            }
          }
        }
        array_obj_ref_602_sample_start_ <-& (array_obj_ref_602_word_address_calculated)
        array_obj_ref_602_sample_start_ &-> (array_obj_ref_602_Sample)
        array_obj_ref_602_sample_completed_ <-& (array_obj_ref_602_Sample)
        array_obj_ref_602_sample_completed_ &-> ($null)
        array_obj_ref_602_update_start_ &-> (array_obj_ref_602_Update)
        array_obj_ref_602_update_completed_ <-& (array_obj_ref_602_Update)
        // Guard dependency for expression array_obj_ref_602 with guard R_aTrue_599
        // root phi_stmt_552 of guard-expression not in visited elements.
        // start: Forward dependencies from aval to transition array_obj_ref_602_sample_start_
        array_obj_ref_602_sample_start_ <-& (RPIPE_in_data_564_update_completed_)
        // done: Forward dependencies from aval to transition array_obj_ref_602_sample_start_
        // end:  		$guard (aTrue) A_MEM[I][Index] := aval $buffering 1// bits of buffering = 32. 
        // start:  		$guard (bTrue) B_MEM[I][Index] := aval $buffering 1// bits of buffering = 32. 
        //  file .Aa/mvp.opt.aa, line 228
        // Guard expression 
        // bTrue
        // Source expression
        // aval
        // Target expression
        // B_MEM[I][Index]
        $T[array_obj_ref_614_sample_start_] 
        $T[array_obj_ref_614_sample_completed_] 
        $T[array_obj_ref_614_update_start_] 
        $T[array_obj_ref_614_update_completed_] 
        $T[array_obj_ref_614_word_address_calculated] 
        $T[array_obj_ref_614_root_address_calculated] 
        $T[array_obj_ref_614_offset_calculated] 
        $T[array_obj_ref_614_index_resized_0] 
        $T[array_obj_ref_614_index_scaled_0] 
        $T[array_obj_ref_614_index_computed_0] 
        // I
        // start: Forward dependencies from I to transition array_obj_ref_614_index_computed_0
        // done: Forward dependencies from I to transition array_obj_ref_614_index_computed_0
        ;;[array_obj_ref_614_index_resize_0] 
        {
          $T [index_resize_req] $T [index_resize_ack] // resize index to address-width
        }
        array_obj_ref_614_index_computed_0 &-> (array_obj_ref_614_index_resize_0)
        array_obj_ref_614_index_resized_0 <-& (array_obj_ref_614_index_resize_0)
        $T[array_obj_ref_614_index_scale_0_sample_start] 
        $T[array_obj_ref_614_index_scale_0_sample_complete] 
        $T[array_obj_ref_614_index_scale_0_update_start] 
        $T[array_obj_ref_614_index_scale_0_update_complete] 
        ;;[array_obj_ref_614_index_scale_0_Sample] 
        {
          $T [rr] $T [ra] 
        }
        ;;[array_obj_ref_614_index_scale_0_Update] 
        {
          $T [cr] $T [ca] 
        }
        array_obj_ref_614_index_resized_0 &-> (array_obj_ref_614_index_scale_0_sample_start)
        array_obj_ref_614_index_scale_0_sample_start &-> (array_obj_ref_614_index_scale_0_Sample)
        array_obj_ref_614_index_scale_0_sample_complete <-& (array_obj_ref_614_index_scale_0_Sample)
        array_obj_ref_614_index_scale_0_update_start &-> (array_obj_ref_614_index_scale_0_Update)
        array_obj_ref_614_index_scale_0_update_complete <-& (array_obj_ref_614_index_scale_0_Update)
        array_obj_ref_614_index_scaled_0 <-& (array_obj_ref_614_index_scale_0_update_complete)
        $T[array_obj_ref_614_index_resized_1] 
        $T[array_obj_ref_614_index_scaled_1] 
        $T[array_obj_ref_614_index_computed_1] 
        // Index
        // start: Forward dependencies from Index to transition array_obj_ref_614_index_computed_1
        array_obj_ref_614_index_computed_1 <-& (slice_577_update_completed_)
        // done: Forward dependencies from Index to transition array_obj_ref_614_index_computed_1
        ;;[array_obj_ref_614_index_resize_1] 
        {
          $T [index_resize_req] $T [index_resize_ack] // resize index to address-width
        }
        array_obj_ref_614_index_computed_1 &-> (array_obj_ref_614_index_resize_1)
        array_obj_ref_614_index_resized_1 <-& (array_obj_ref_614_index_resize_1)
        ;;[array_obj_ref_614_index_scale_1] 
        {
          $T [scale_rename_req] $T [scale_rename_ack] // rename 
        }
        array_obj_ref_614_index_resized_1 &-> (array_obj_ref_614_index_scale_1)
        array_obj_ref_614_index_scaled_1 <-& (array_obj_ref_614_index_scale_1)
        $T[array_obj_ref_614_partial_sum_1_sample_start] 
        $T[array_obj_ref_614_partial_sum_1_sample_complete] 
        $T[array_obj_ref_614_partial_sum_1_update_start] 
        $T[array_obj_ref_614_partial_sum_1_update_complete] 
        ;;[array_obj_ref_614_partial_sum_1_Sample] 
        {
          $T [rr] $T [ra] 
        }
        ;;[array_obj_ref_614_partial_sum_1_Update] 
        {
          $T [cr] $T [ca] 
        }
        array_obj_ref_614_partial_sum_1_sample_start &-> (array_obj_ref_614_partial_sum_1_Sample)
        array_obj_ref_614_partial_sum_1_sample_complete <-& (array_obj_ref_614_partial_sum_1_Sample)
        array_obj_ref_614_partial_sum_1_update_start &-> (array_obj_ref_614_partial_sum_1_Update)
        array_obj_ref_614_partial_sum_1_update_complete <-& (array_obj_ref_614_partial_sum_1_Update)
        array_obj_ref_614_partial_sum_1_sample_start <-& (array_obj_ref_614_index_scaled_0)
        array_obj_ref_614_partial_sum_1_sample_start <-& (array_obj_ref_614_index_scaled_1)
        array_obj_ref_614_offset_calculated <-& (array_obj_ref_614_partial_sum_1_update_complete)
        ;;[array_obj_ref_614_final_index_sum_regn] 
        {
          $T [req] $T [ack] // rename
        }
        array_obj_ref_614_partial_sum_1_update_complete &-> (array_obj_ref_614_final_index_sum_regn)
        array_obj_ref_614_offset_calculated <-& (array_obj_ref_614_final_index_sum_regn)
        ;;[array_obj_ref_614_base_plus_offset] 
        {
          $T [sum_rename_req] $T [sum_rename_ack] // one gets through 
        }
        array_obj_ref_614_offset_calculated &-> (array_obj_ref_614_base_plus_offset)
        array_obj_ref_614_root_address_calculated <-& (array_obj_ref_614_base_plus_offset)
        ;;[array_obj_ref_614_word_addrgen] 
        {
          $T [root_register_req] $T [root_register_ack]
        }
        array_obj_ref_614_root_address_calculated &-> (array_obj_ref_614_word_addrgen)
        array_obj_ref_614_word_address_calculated <-& (array_obj_ref_614_word_addrgen)
        ;;[array_obj_ref_614_Sample] 
        {
          ;;[array_obj_ref_614_Split] 
          {
            $T [split_req] $T [split_ack]
          }
          ||[word_access_start] 
          {
            ;;[word_0] 
            {
              $T [rr] $T [ra] 
            }
          }
        }
        ;;[array_obj_ref_614_Update] 
        {
          ||[word_access_complete] 
          {
            ;;[word_0] 
            {
              $T [cr] $T [ca] 
            }
          }
        }
        array_obj_ref_614_sample_start_ <-& (array_obj_ref_614_word_address_calculated)
        array_obj_ref_614_sample_start_ &-> (array_obj_ref_614_Sample)
        array_obj_ref_614_sample_completed_ <-& (array_obj_ref_614_Sample)
        array_obj_ref_614_sample_completed_ &-> ($null)
        array_obj_ref_614_update_start_ &-> (array_obj_ref_614_Update)
        array_obj_ref_614_update_completed_ <-& (array_obj_ref_614_Update)
        // Guard dependency for expression array_obj_ref_614 with guard R_bTrue_611
        // root phi_stmt_552 of guard-expression not in visited elements.
        // start: Forward dependencies from aval to transition array_obj_ref_614_sample_start_
        array_obj_ref_614_sample_start_ <-& (RPIPE_in_data_564_update_completed_)
        // done: Forward dependencies from aval to transition array_obj_ref_614_sample_start_
        // end:  		$guard (bTrue) B_MEM[I][Index] := aval $buffering 1// bits of buffering = 32. 
        // start:  		$guard (cTrue) C_MEM[I][Index] := aval $buffering 1// bits of buffering = 32. 
        //  file .Aa/mvp.opt.aa, line 230
        // Guard expression 
        // cTrue
        // Source expression
        // aval
        // Target expression
        // C_MEM[I][Index]
        $T[array_obj_ref_626_sample_start_] 
        $T[array_obj_ref_626_sample_completed_] 
        $T[array_obj_ref_626_update_start_] 
        $T[array_obj_ref_626_update_completed_] 
        $T[array_obj_ref_626_word_address_calculated] 
        $T[array_obj_ref_626_root_address_calculated] 
        $T[array_obj_ref_626_offset_calculated] 
        $T[array_obj_ref_626_index_resized_0] 
        $T[array_obj_ref_626_index_scaled_0] 
        $T[array_obj_ref_626_index_computed_0] 
        // I
        // start: Forward dependencies from I to transition array_obj_ref_626_index_computed_0
        // done: Forward dependencies from I to transition array_obj_ref_626_index_computed_0
        ;;[array_obj_ref_626_index_resize_0] 
        {
          $T [index_resize_req] $T [index_resize_ack] // resize index to address-width
        }
        array_obj_ref_626_index_computed_0 &-> (array_obj_ref_626_index_resize_0)
        array_obj_ref_626_index_resized_0 <-& (array_obj_ref_626_index_resize_0)
        $T[array_obj_ref_626_index_scale_0_sample_start] 
        $T[array_obj_ref_626_index_scale_0_sample_complete] 
        $T[array_obj_ref_626_index_scale_0_update_start] 
        $T[array_obj_ref_626_index_scale_0_update_complete] 
        ;;[array_obj_ref_626_index_scale_0_Sample] 
        {
          $T [rr] $T [ra] 
        }
        ;;[array_obj_ref_626_index_scale_0_Update] 
        {
          $T [cr] $T [ca] 
        }
        array_obj_ref_626_index_resized_0 &-> (array_obj_ref_626_index_scale_0_sample_start)
        array_obj_ref_626_index_scale_0_sample_start &-> (array_obj_ref_626_index_scale_0_Sample)
        array_obj_ref_626_index_scale_0_sample_complete <-& (array_obj_ref_626_index_scale_0_Sample)
        array_obj_ref_626_index_scale_0_update_start &-> (array_obj_ref_626_index_scale_0_Update)
        array_obj_ref_626_index_scale_0_update_complete <-& (array_obj_ref_626_index_scale_0_Update)
        array_obj_ref_626_index_scaled_0 <-& (array_obj_ref_626_index_scale_0_update_complete)
        $T[array_obj_ref_626_index_resized_1] 
        $T[array_obj_ref_626_index_scaled_1] 
        $T[array_obj_ref_626_index_computed_1] 
        // Index
        // start: Forward dependencies from Index to transition array_obj_ref_626_index_computed_1
        array_obj_ref_626_index_computed_1 <-& (slice_577_update_completed_)
        // done: Forward dependencies from Index to transition array_obj_ref_626_index_computed_1
        ;;[array_obj_ref_626_index_resize_1] 
        {
          $T [index_resize_req] $T [index_resize_ack] // resize index to address-width
        }
        array_obj_ref_626_index_computed_1 &-> (array_obj_ref_626_index_resize_1)
        array_obj_ref_626_index_resized_1 <-& (array_obj_ref_626_index_resize_1)
        ;;[array_obj_ref_626_index_scale_1] 
        {
          $T [scale_rename_req] $T [scale_rename_ack] // rename 
        }
        array_obj_ref_626_index_resized_1 &-> (array_obj_ref_626_index_scale_1)
        array_obj_ref_626_index_scaled_1 <-& (array_obj_ref_626_index_scale_1)
        $T[array_obj_ref_626_partial_sum_1_sample_start] 
        $T[array_obj_ref_626_partial_sum_1_sample_complete] 
        $T[array_obj_ref_626_partial_sum_1_update_start] 
        $T[array_obj_ref_626_partial_sum_1_update_complete] 
        ;;[array_obj_ref_626_partial_sum_1_Sample] 
        {
          $T [rr] $T [ra] 
        }
        ;;[array_obj_ref_626_partial_sum_1_Update] 
        {
          $T [cr] $T [ca] 
        }
        array_obj_ref_626_partial_sum_1_sample_start &-> (array_obj_ref_626_partial_sum_1_Sample)
        array_obj_ref_626_partial_sum_1_sample_complete <-& (array_obj_ref_626_partial_sum_1_Sample)
        array_obj_ref_626_partial_sum_1_update_start &-> (array_obj_ref_626_partial_sum_1_Update)
        array_obj_ref_626_partial_sum_1_update_complete <-& (array_obj_ref_626_partial_sum_1_Update)
        array_obj_ref_626_partial_sum_1_sample_start <-& (array_obj_ref_626_index_scaled_0)
        array_obj_ref_626_partial_sum_1_sample_start <-& (array_obj_ref_626_index_scaled_1)
        array_obj_ref_626_offset_calculated <-& (array_obj_ref_626_partial_sum_1_update_complete)
        ;;[array_obj_ref_626_final_index_sum_regn] 
        {
          $T [req] $T [ack] // rename
        }
        array_obj_ref_626_partial_sum_1_update_complete &-> (array_obj_ref_626_final_index_sum_regn)
        array_obj_ref_626_offset_calculated <-& (array_obj_ref_626_final_index_sum_regn)
        ;;[array_obj_ref_626_base_plus_offset] 
        {
          $T [sum_rename_req] $T [sum_rename_ack] // one gets through 
        }
        array_obj_ref_626_offset_calculated &-> (array_obj_ref_626_base_plus_offset)
        array_obj_ref_626_root_address_calculated <-& (array_obj_ref_626_base_plus_offset)
        ;;[array_obj_ref_626_word_addrgen] 
        {
          $T [root_register_req] $T [root_register_ack]
        }
        array_obj_ref_626_root_address_calculated &-> (array_obj_ref_626_word_addrgen)
        array_obj_ref_626_word_address_calculated <-& (array_obj_ref_626_word_addrgen)
        ;;[array_obj_ref_626_Sample] 
        {
          ;;[array_obj_ref_626_Split] 
          {
            $T [split_req] $T [split_ack]
          }
          ||[word_access_start] 
          {
            ;;[word_0] 
            {
              $T [rr] $T [ra] 
            }
          }
        }
        ;;[array_obj_ref_626_Update] 
        {
          ||[word_access_complete] 
          {
            ;;[word_0] 
            {
              $T [cr] $T [ca] 
            }
          }
        }
        array_obj_ref_626_sample_start_ <-& (array_obj_ref_626_word_address_calculated)
        array_obj_ref_626_sample_start_ &-> (array_obj_ref_626_Sample)
        array_obj_ref_626_sample_completed_ <-& (array_obj_ref_626_Sample)
        array_obj_ref_626_sample_completed_ &-> ($null)
        array_obj_ref_626_update_start_ &-> (array_obj_ref_626_Update)
        array_obj_ref_626_update_completed_ <-& (array_obj_ref_626_Update)
        // Guard dependency for expression array_obj_ref_626 with guard R_cTrue_623
        // root phi_stmt_552 of guard-expression not in visited elements.
        // start: Forward dependencies from aval to transition array_obj_ref_626_sample_start_
        array_obj_ref_626_sample_start_ <-& (RPIPE_in_data_564_update_completed_)
        // done: Forward dependencies from aval to transition array_obj_ref_626_sample_start_
        // end:  		$guard (cTrue) C_MEM[I][Index] := aval $buffering 1// bits of buffering = 32. 
        // start:  		$guard (dTrue) D_MEM[I][Index] := aval $buffering 1// bits of buffering = 32. 
        //  file .Aa/mvp.opt.aa, line 232
        // Guard expression 
        // dTrue
        // Source expression
        // aval
        // Target expression
        // D_MEM[I][Index]
        $T[array_obj_ref_638_sample_start_] 
        $T[array_obj_ref_638_sample_completed_] 
        $T[array_obj_ref_638_update_start_] 
        $T[array_obj_ref_638_update_completed_] 
        $T[array_obj_ref_638_word_address_calculated] 
        $T[array_obj_ref_638_root_address_calculated] 
        $T[array_obj_ref_638_offset_calculated] 
        $T[array_obj_ref_638_index_resized_0] 
        $T[array_obj_ref_638_index_scaled_0] 
        $T[array_obj_ref_638_index_computed_0] 
        // I
        // start: Forward dependencies from I to transition array_obj_ref_638_index_computed_0
        // done: Forward dependencies from I to transition array_obj_ref_638_index_computed_0
        ;;[array_obj_ref_638_index_resize_0] 
        {
          $T [index_resize_req] $T [index_resize_ack] // resize index to address-width
        }
        array_obj_ref_638_index_computed_0 &-> (array_obj_ref_638_index_resize_0)
        array_obj_ref_638_index_resized_0 <-& (array_obj_ref_638_index_resize_0)
        $T[array_obj_ref_638_index_scale_0_sample_start] 
        $T[array_obj_ref_638_index_scale_0_sample_complete] 
        $T[array_obj_ref_638_index_scale_0_update_start] 
        $T[array_obj_ref_638_index_scale_0_update_complete] 
        ;;[array_obj_ref_638_index_scale_0_Sample] 
        {
          $T [rr] $T [ra] 
        }
        ;;[array_obj_ref_638_index_scale_0_Update] 
        {
          $T [cr] $T [ca] 
        }
        array_obj_ref_638_index_resized_0 &-> (array_obj_ref_638_index_scale_0_sample_start)
        array_obj_ref_638_index_scale_0_sample_start &-> (array_obj_ref_638_index_scale_0_Sample)
        array_obj_ref_638_index_scale_0_sample_complete <-& (array_obj_ref_638_index_scale_0_Sample)
        array_obj_ref_638_index_scale_0_update_start &-> (array_obj_ref_638_index_scale_0_Update)
        array_obj_ref_638_index_scale_0_update_complete <-& (array_obj_ref_638_index_scale_0_Update)
        array_obj_ref_638_index_scaled_0 <-& (array_obj_ref_638_index_scale_0_update_complete)
        $T[array_obj_ref_638_index_resized_1] 
        $T[array_obj_ref_638_index_scaled_1] 
        $T[array_obj_ref_638_index_computed_1] 
        // Index
        // start: Forward dependencies from Index to transition array_obj_ref_638_index_computed_1
        array_obj_ref_638_index_computed_1 <-& (slice_577_update_completed_)
        // done: Forward dependencies from Index to transition array_obj_ref_638_index_computed_1
        ;;[array_obj_ref_638_index_resize_1] 
        {
          $T [index_resize_req] $T [index_resize_ack] // resize index to address-width
        }
        array_obj_ref_638_index_computed_1 &-> (array_obj_ref_638_index_resize_1)
        array_obj_ref_638_index_resized_1 <-& (array_obj_ref_638_index_resize_1)
        ;;[array_obj_ref_638_index_scale_1] 
        {
          $T [scale_rename_req] $T [scale_rename_ack] // rename 
        }
        array_obj_ref_638_index_resized_1 &-> (array_obj_ref_638_index_scale_1)
        array_obj_ref_638_index_scaled_1 <-& (array_obj_ref_638_index_scale_1)
        $T[array_obj_ref_638_partial_sum_1_sample_start] 
        $T[array_obj_ref_638_partial_sum_1_sample_complete] 
        $T[array_obj_ref_638_partial_sum_1_update_start] 
        $T[array_obj_ref_638_partial_sum_1_update_complete] 
        ;;[array_obj_ref_638_partial_sum_1_Sample] 
        {
          $T [rr] $T [ra] 
        }
        ;;[array_obj_ref_638_partial_sum_1_Update] 
        {
          $T [cr] $T [ca] 
        }
        array_obj_ref_638_partial_sum_1_sample_start &-> (array_obj_ref_638_partial_sum_1_Sample)
        array_obj_ref_638_partial_sum_1_sample_complete <-& (array_obj_ref_638_partial_sum_1_Sample)
        array_obj_ref_638_partial_sum_1_update_start &-> (array_obj_ref_638_partial_sum_1_Update)
        array_obj_ref_638_partial_sum_1_update_complete <-& (array_obj_ref_638_partial_sum_1_Update)
        array_obj_ref_638_partial_sum_1_sample_start <-& (array_obj_ref_638_index_scaled_0)
        array_obj_ref_638_partial_sum_1_sample_start <-& (array_obj_ref_638_index_scaled_1)
        array_obj_ref_638_offset_calculated <-& (array_obj_ref_638_partial_sum_1_update_complete)
        ;;[array_obj_ref_638_final_index_sum_regn] 
        {
          $T [req] $T [ack] // rename
        }
        array_obj_ref_638_partial_sum_1_update_complete &-> (array_obj_ref_638_final_index_sum_regn)
        array_obj_ref_638_offset_calculated <-& (array_obj_ref_638_final_index_sum_regn)
        ;;[array_obj_ref_638_base_plus_offset] 
        {
          $T [sum_rename_req] $T [sum_rename_ack] // one gets through 
        }
        array_obj_ref_638_offset_calculated &-> (array_obj_ref_638_base_plus_offset)
        array_obj_ref_638_root_address_calculated <-& (array_obj_ref_638_base_plus_offset)
        ;;[array_obj_ref_638_word_addrgen] 
        {
          $T [root_register_req] $T [root_register_ack]
        }
        array_obj_ref_638_root_address_calculated &-> (array_obj_ref_638_word_addrgen)
        array_obj_ref_638_word_address_calculated <-& (array_obj_ref_638_word_addrgen)
        ;;[array_obj_ref_638_Sample] 
        {
          ;;[array_obj_ref_638_Split] 
          {
            $T [split_req] $T [split_ack]
          }
          ||[word_access_start] 
          {
            ;;[word_0] 
            {
              $T [rr] $T [ra] 
            }
          }
        }
        ;;[array_obj_ref_638_Update] 
        {
          ||[word_access_complete] 
          {
            ;;[word_0] 
            {
              $T [cr] $T [ca] 
            }
          }
        }
        array_obj_ref_638_sample_start_ <-& (array_obj_ref_638_word_address_calculated)
        array_obj_ref_638_sample_start_ &-> (array_obj_ref_638_Sample)
        array_obj_ref_638_sample_completed_ <-& (array_obj_ref_638_Sample)
        array_obj_ref_638_sample_completed_ &-> ($null)
        array_obj_ref_638_update_start_ &-> (array_obj_ref_638_Update)
        array_obj_ref_638_update_completed_ <-& (array_obj_ref_638_Update)
        // Guard dependency for expression array_obj_ref_638 with guard R_dTrue_635
        // root phi_stmt_552 of guard-expression not in visited elements.
        // start: Forward dependencies from aval to transition array_obj_ref_638_sample_start_
        array_obj_ref_638_sample_start_ <-& (RPIPE_in_data_564_update_completed_)
        // done: Forward dependencies from aval to transition array_obj_ref_638_sample_start_
        // end:  		$guard (dTrue) D_MEM[I][Index] := aval $buffering 1// bits of buffering = 32. 
        // load-store dependencies..
        // memory-space  memory_space_3
        //  array_obj_ref_638 store
        // memory-space  memory_space_2
        //  array_obj_ref_626 store
        // memory-space  memory_space_1
        //  array_obj_ref_614 store
        // memory-space  memory_space_0
        //  array_obj_ref_602 store
        // pipe read/write dependencies for pipe in_data
        // read-dependencies for pipe in_data
        // write-dependencies for pipe in_data
        // signal write dependencies for in_data
      }
      assign_stmt_562_to_assign_stmt_640__entry__ |-> (assign_stmt_562_to_assign_stmt_640)
      assign_stmt_562_to_assign_stmt_640__exit__ <-| (assign_stmt_562_to_assign_stmt_640)
      // if-statement  
      //  file .Aa/mvp.opt.aa, line 0
      ;;[if_stmt_647_dead_link] 
      {
        $T [dead_transition] $dead 
      }
      if_stmt_647__entry__ |-> (if_stmt_647_dead_link)
      if_stmt_647__exit__ <-| (if_stmt_647_dead_link)
      ;;[if_stmt_647_eval_test] 
      {
        // test expression evaluate and trigger branch 
        // (nJ < 32 )
        ;;[ULT_u8_u1_650] 
        {
          // binary expression 
          ||[ULT_u8_u1_650_inputs] 
          {
          }
          // flow-through
          ;;[SplitProtocol] 
          {
            ;;[Sample] 
            {
              $T [rr] $T [ra]
            }
            ;;[Update] 
            {
              $T [cr] $T [ca]
            }
          }
        }
        $T [branch_req] 
      }
      if_stmt_647__entry__ |-> (if_stmt_647_eval_test)
      $P [ULT_u8_u1_650_place]
      ULT_u8_u1_650_place <-| (if_stmt_647_eval_test)
      ;;[if_stmt_647_if_link] 
      {
        $T [if_choice_transition] 
      }
      ;;[if_stmt_647_else_link] 
      {
        $T [else_choice_transition] 
      }
      ULT_u8_u1_650_place |-> (if_stmt_647_if_link if_stmt_647_else_link)
      $P [inner_loopback]
      inner_loopback <-| (if_stmt_647_if_link)
      if_stmt_647__exit__ <-| (if_stmt_647_else_link)
      // if-statement  
      //  file .Aa/mvp.opt.aa, line 950438880
      ;;[if_stmt_653_dead_link] 
      {
        $T [dead_transition] $dead 
      }
      if_stmt_653__entry__ |-> (if_stmt_653_dead_link)
      if_stmt_653__exit__ <-| (if_stmt_653_dead_link)
      ;;[if_stmt_653_eval_test] 
      {
        // test expression evaluate and trigger branch 
        // (nI < 32 )
        ;;[ULT_u8_u1_656] 
        {
          // binary expression 
          ||[ULT_u8_u1_656_inputs] 
          {
          }
          // flow-through
          ;;[SplitProtocol] 
          {
            ;;[Sample] 
            {
              $T [rr] $T [ra]
            }
            ;;[Update] 
            {
              $T [cr] $T [ca]
            }
          }
        }
        $T [branch_req] 
      }
      if_stmt_653__entry__ |-> (if_stmt_653_eval_test)
      $P [ULT_u8_u1_656_place]
      ULT_u8_u1_656_place <-| (if_stmt_653_eval_test)
      ;;[if_stmt_653_if_link] 
      {
        $T [if_choice_transition] 
      }
      ;;[if_stmt_653_else_link] 
      {
        $T [else_choice_transition] 
      }
      ULT_u8_u1_656_place |-> (if_stmt_653_if_link if_stmt_653_else_link)
      $P [outer_loopback]
      outer_loopback <-| (if_stmt_653_if_link)
      if_stmt_653__exit__ <-| (if_stmt_653_else_link)
      // control-path for merge  
      //  file .Aa/mvp.opt.aa, line 208
      ;;[merge_stmt_539_dead_link] 
      {
        $T [dead_transition] $dead 
      }
      merge_stmt_539__entry__ |-> (merge_stmt_539_dead_link)
      merge_stmt_539__exit__ <-| (merge_stmt_539_dead_link)
      //---------------------   merge statement  file .Aa/mvp.opt.aa, line 208  --------------------------
      ||[merge_stmt_539__entry___PhiReq] 
      {
        ;;[phi_stmt_540] 
        {
          ||[phi_stmt_540_sources] 
          {
            // sources for 			$phi I := 			  ($bitcast ($uint<8>) 0  ) $on   $entry 			  nI $on   outer_loopback 
            // type of target is $uint<8>
            // constant source .... delay transition 
            $T [type_cast_543_konst_delay_trans] $delay
          }
          $T [phi_stmt_540_req] 
        }
      }
      merge_stmt_539__entry__ |-> (merge_stmt_539__entry___PhiReq)
      ||[outer_loopback_PhiReq] 
      {
        ;;[phi_stmt_540] 
        {
          ||[phi_stmt_540_sources] 
          {
            // sources for 			$phi I := 			  ($bitcast ($uint<8>) 0  ) $on   $entry 			  nI $on   outer_loopback 
            // type of target is $uint<8>
            // trivial non-constant source .... interlock-buffer introduced 
            || [Interlock] 
            {
              ;;[Sample] 
              {
                $T [req] $T [ack]
              }
              ;;[Update] 
              {
                $T [req] $T [ack]
              }
            }
          }
          $T [phi_stmt_540_req] 
        }
      }
      outer_loopback |-> (outer_loopback_PhiReq)
      $P [merge_stmt_539_PhiReqMerge] 
      merge_stmt_539_PhiReqMerge <-| ( merge_stmt_539__entry___PhiReq  outer_loopback_PhiReq )
      ||[merge_stmt_539_PhiAck] 
      {
        $T [phi_stmt_540_ack] 
      }
      merge_stmt_539_PhiReqMerge |-> (merge_stmt_539_PhiAck)
      merge_stmt_539__exit__  <-| (merge_stmt_539_PhiAck)
      //---------------------  end of merge statement  file .Aa/mvp.opt.aa, line 208  --------------------------
      // control-path for merge  
      //  file .Aa/mvp.opt.aa, line 213
      ;;[merge_stmt_551_dead_link] 
      {
        $T [dead_transition] $dead 
      }
      merge_stmt_551__entry__ |-> (merge_stmt_551_dead_link)
      merge_stmt_551__exit__ <-| (merge_stmt_551_dead_link)
      //---------------------   merge statement  file .Aa/mvp.opt.aa, line 213  --------------------------
      ||[merge_stmt_551__entry___PhiReq] 
      {
        ;;[phi_stmt_552] 
        {
          ||[phi_stmt_552_sources] 
          {
            // sources for 			$phi J := 			  ($bitcast ($uint<8>) 0  ) $on   $entry 			  nJ $on   inner_loopback 
            // type of target is $uint<8>
            // constant source .... delay transition 
            $T [type_cast_555_konst_delay_trans] $delay
          }
          $T [phi_stmt_552_req] 
        }
      }
      merge_stmt_551__entry__ |-> (merge_stmt_551__entry___PhiReq)
      ||[inner_loopback_PhiReq] 
      {
        ;;[phi_stmt_552] 
        {
          ||[phi_stmt_552_sources] 
          {
            // sources for 			$phi J := 			  ($bitcast ($uint<8>) 0  ) $on   $entry 			  nJ $on   inner_loopback 
            // type of target is $uint<8>
            // trivial non-constant source .... interlock-buffer introduced 
            || [Interlock] 
            {
              ;;[Sample] 
              {
                $T [req] $T [ack]
              }
              ;;[Update] 
              {
                $T [req] $T [ack]
              }
            }
          }
          $T [phi_stmt_552_req] 
        }
      }
      inner_loopback |-> (inner_loopback_PhiReq)
      $P [merge_stmt_551_PhiReqMerge] 
      merge_stmt_551_PhiReqMerge <-| ( merge_stmt_551__entry___PhiReq  inner_loopback_PhiReq )
      ||[merge_stmt_551_PhiAck] 
      {
        $T [phi_stmt_552_ack] 
      }
      merge_stmt_551_PhiReqMerge |-> (merge_stmt_551_PhiAck)
      merge_stmt_551__exit__  <-| (merge_stmt_551_PhiAck)
      //---------------------  end of merge statement  file .Aa/mvp.opt.aa, line 213  --------------------------
      merge_stmt_539__entry__ <-| (branch_block_stmt_538__entry__)
      assign_stmt_550__entry__ <-| (merge_stmt_539__exit__)
      merge_stmt_551__entry__ <-| (assign_stmt_550__exit__)
      assign_stmt_562_to_assign_stmt_640__entry__ <-| (merge_stmt_551__exit__)
      if_stmt_647__entry__ <-| (assign_stmt_562_to_assign_stmt_640__exit__)
      if_stmt_653__entry__ <-| (if_stmt_647__exit__)
      if_stmt_653__exit__ |-> (branch_block_stmt_538__exit__)
    }
  }
  // end control-path
  $DP 
  {
    // begin data-path 
    // constant-object-declarations for block %readMatrix%mRead%
    //  file .Aa/mvp.opt.aa, line 208
    // constant-object-declarations for block %readMatrix%mRead%
    //  file .Aa/mvp.opt.aa, line 213
    // constant-object-declarations for block %readMatrix%mRead
    //  file .Aa/mvp.opt.aa, line 206
    // constant-object-declarations for block %readMatrix
    //  file .Aa/mvp.opt.aa, line 201
    // constant-declarations for block %readMatrix%mRead
    //  file .Aa/mvp.opt.aa, line 206
    // constant-declarations for block %readMatrix%mRead%
    //  file .Aa/mvp.opt.aa, line 208
    // constant-declarations for phi:  			$phi I := 			  ($bitcast ($uint<8>) 0  ) $on   $entry 			  nI $on   outer_loopback 
    // type of target is $uint<8>
    //  file .Aa/mvp.opt.aa, line 209
    // ($bitcast ($uint<8>) 0  )
    $constant $W[type_cast_543_wire_constant] : $int<8> := _b00000000// 0
    // 1 
    $constant $W[konst_548_wire_constant] : $int<8> := _b00000001// 1
    // constant-declarations for block %readMatrix%mRead%
    //  file .Aa/mvp.opt.aa, line 213
    // constant-declarations for phi:  			$phi J := 			  ($bitcast ($uint<8>) 0  ) $on   $entry 			  nJ $on   inner_loopback 
    // type of target is $uint<8>
    //  file .Aa/mvp.opt.aa, line 214
    // ($bitcast ($uint<8>) 0  )
    $constant $W[type_cast_555_wire_constant] : $int<8> := _b00000000// 0
    // 1 
    $constant $W[konst_560_wire_constant] : $int<8> := _b00000001// 1
    // ZERO_2
    $constant $W[R_ZERO_2_581_wire_constant] : $int<2> := _b00// 0
    // ONE_2
    $constant $W[R_ONE_2_586_wire_constant] : $int<2> := _b01// 1
    // TWO_2
    $constant $W[R_TWO_2_591_wire_constant] : $int<2> := _b10// 2
    // THREE_2
    $constant $W[R_THREE_2_596_wire_constant] : $int<2> := _b11// 3
    // A_MEM[I][Index]
    $constant $W[array_obj_ref_602_resized_base_address] : $int<8> := _b00000000// 0
    $constant $W[array_obj_ref_602_offset_scale_factor_0] : $int<8> := _b00001000// 8
    $constant $W[array_obj_ref_602_offset_scale_factor_1] : $int<8> := _b00000001// 1
    $constant $W[array_obj_ref_602_word_offset_0] : $int<8> := _b00000000// 0
    // B_MEM[I][Index]
    $constant $W[array_obj_ref_614_resized_base_address] : $int<8> := _b00000000// 0
    $constant $W[array_obj_ref_614_offset_scale_factor_0] : $int<8> := _b00001000// 8
    $constant $W[array_obj_ref_614_offset_scale_factor_1] : $int<8> := _b00000001// 1
    $constant $W[array_obj_ref_614_word_offset_0] : $int<8> := _b00000000// 0
    // C_MEM[I][Index]
    $constant $W[array_obj_ref_626_resized_base_address] : $int<8> := _b00000000// 0
    $constant $W[array_obj_ref_626_offset_scale_factor_0] : $int<8> := _b00001000// 8
    $constant $W[array_obj_ref_626_offset_scale_factor_1] : $int<8> := _b00000001// 1
    $constant $W[array_obj_ref_626_word_offset_0] : $int<8> := _b00000000// 0
    // D_MEM[I][Index]
    $constant $W[array_obj_ref_638_resized_base_address] : $int<8> := _b00000000// 0
    $constant $W[array_obj_ref_638_offset_scale_factor_0] : $int<8> := _b00001000// 8
    $constant $W[array_obj_ref_638_offset_scale_factor_1] : $int<8> := _b00000001// 1
    $constant $W[array_obj_ref_638_word_offset_0] : $int<8> := _b00000000// 0
    // if-statement  
    //  file .Aa/mvp.opt.aa, line 0
    // 32 
    $constant $W[konst_649_wire_constant] : $int<8> := _b00100000// 32
    // if-statement  
    //  file .Aa/mvp.opt.aa, line 950438880
    // 32 
    $constant $W[konst_655_wire_constant] : $int<8> := _b00100000// 32
    // block %readMatrix%mRead
    //  file .Aa/mvp.opt.aa, line 206
    // merge-statement  
    //  file .Aa/mvp.opt.aa, line 208
    // 			$phi I := 			  ($bitcast ($uint<8>) 0  ) $on   $entry 			  nI $on   outer_loopback 
    // type of target is $uint<8>
    //  file .Aa/mvp.opt.aa, line 209
    $W[nI_550_544_buffered] : $int<8>
    // I
    $W[I_540] : $int<8>
    // 		nI := (I + 1 ) $buffering 1// bits of buffering = 8. 
    //  file .Aa/mvp.opt.aa, line 212
    // nI
    $W[nI_550] : $int<8>
    // merge-statement  
    //  file .Aa/mvp.opt.aa, line 213
    // 			$phi J := 			  ($bitcast ($uint<8>) 0  ) $on   $entry 			  nJ $on   inner_loopback 
    // type of target is $uint<8>
    //  file .Aa/mvp.opt.aa, line 214
    $W[nJ_562_556_buffered] : $int<8>
    // J
    $W[J_552] : $int<8>
    // 		nJ := (J + 1 ) $buffering 1// bits of buffering = 8. 
    //  file .Aa/mvp.opt.aa, line 217
    // nJ
    $W[nJ_562] : $int<8>
    // 		aval := in_data $buffering 1// bits of buffering = 32. 
    //  file .Aa/mvp.opt.aa, line 218
    // aval
    $W[aval_565] : $int<32>
    // 		$volatile Digit := ( $slice J 1 0 )  $buffering 1
    //  file .Aa/mvp.opt.aa, line 219
    // Digit
    $W[Digit_569] : $int<2>
    // 		Index := ( $slice J 7 2 )  $buffering 1// bits of buffering = 6. 
    //  file .Aa/mvp.opt.aa, line 221
    // Index
    $W[Index_578] : $int<6>
    // 		$volatile aTrue := (Digit == ZERO_2) $buffering 1
    //  file .Aa/mvp.opt.aa, line 222
    // aTrue
    $W[aTrue_583] : $int<1>
    // 		$volatile bTrue := (Digit == ONE_2) $buffering 1
    //  file .Aa/mvp.opt.aa, line 223
    // bTrue
    $W[bTrue_588] : $int<1>
    // 		$volatile cTrue := (Digit == TWO_2) $buffering 1
    //  file .Aa/mvp.opt.aa, line 224
    // cTrue
    $W[cTrue_593] : $int<1>
    // 		$volatile dTrue := (Digit == THREE_2) $buffering 1
    //  file .Aa/mvp.opt.aa, line 225
    // dTrue
    $W[dTrue_598] : $int<1>
    // 		$guard (aTrue) A_MEM[I][Index] := aval $buffering 1// bits of buffering = 32. 
    //  file .Aa/mvp.opt.aa, line 226
    // A_MEM[I][Index]
    $intermediate $W[R_I_600_resized] : $int<8>
    $intermediate $W[R_I_600_scaled] : $int<8>
    $intermediate $W[R_Index_601_resized] : $int<8>
    $intermediate $W[R_Index_601_scaled] : $int<8>
    $intermediate $W[array_obj_ref_602_index_partial_sum_1] : $int<8>
    $intermediate $W[array_obj_ref_602_final_offset] : $int<8>
    $intermediate $W[array_obj_ref_602_root_address] : $int<8>
    $W[array_obj_ref_602_word_address_0] : $pointer<memory_space_0>
    $W[array_obj_ref_602_data_0] : $int<32>
    // 		$guard (bTrue) B_MEM[I][Index] := aval $buffering 1// bits of buffering = 32. 
    //  file .Aa/mvp.opt.aa, line 228
    // B_MEM[I][Index]
    $intermediate $W[R_I_612_resized] : $int<8>
    $intermediate $W[R_I_612_scaled] : $int<8>
    $intermediate $W[R_Index_613_resized] : $int<8>
    $intermediate $W[R_Index_613_scaled] : $int<8>
    $intermediate $W[array_obj_ref_614_index_partial_sum_1] : $int<8>
    $intermediate $W[array_obj_ref_614_final_offset] : $int<8>
    $intermediate $W[array_obj_ref_614_root_address] : $int<8>
    $W[array_obj_ref_614_word_address_0] : $pointer<memory_space_1>
    $W[array_obj_ref_614_data_0] : $int<32>
    // 		$guard (cTrue) C_MEM[I][Index] := aval $buffering 1// bits of buffering = 32. 
    //  file .Aa/mvp.opt.aa, line 230
    // C_MEM[I][Index]
    $intermediate $W[R_I_624_resized] : $int<8>
    $intermediate $W[R_I_624_scaled] : $int<8>
    $intermediate $W[R_Index_625_resized] : $int<8>
    $intermediate $W[R_Index_625_scaled] : $int<8>
    $intermediate $W[array_obj_ref_626_index_partial_sum_1] : $int<8>
    $intermediate $W[array_obj_ref_626_final_offset] : $int<8>
    $intermediate $W[array_obj_ref_626_root_address] : $int<8>
    $W[array_obj_ref_626_word_address_0] : $pointer<memory_space_2>
    $W[array_obj_ref_626_data_0] : $int<32>
    // 		$guard (dTrue) D_MEM[I][Index] := aval $buffering 1// bits of buffering = 32. 
    //  file .Aa/mvp.opt.aa, line 232
    // D_MEM[I][Index]
    $intermediate $W[R_I_636_resized] : $int<8>
    $intermediate $W[R_I_636_scaled] : $int<8>
    $intermediate $W[R_Index_637_resized] : $int<8>
    $intermediate $W[R_Index_637_scaled] : $int<8>
    $intermediate $W[array_obj_ref_638_index_partial_sum_1] : $int<8>
    $intermediate $W[array_obj_ref_638_final_offset] : $int<8>
    $intermediate $W[array_obj_ref_638_root_address] : $int<8>
    $W[array_obj_ref_638_word_address_0] : $pointer<memory_space_3>
    $W[array_obj_ref_638_data_0] : $int<32>
    // if statement  
    //  file .Aa/mvp.opt.aa, line 0
    // (nJ < 32 )
    $intermediate $W[ULT_u8_u1_650_wire] : $int<1>
    // if statement  
    //  file .Aa/mvp.opt.aa, line 950438880
    // (nI < 32 )
    $intermediate $W[ULT_u8_u1_656_wire] : $int<1>
    // datapath-instances for block %readMatrix%mRead
    //  file .Aa/mvp.opt.aa, line 206
    // data-path instances for merge  
    //  file .Aa/mvp.opt.aa, line 208
    // 			$phi I := 			  ($bitcast ($uint<8>) 0  ) $on   $entry 			  nI $on   outer_loopback 
    // type of target is $uint<8>
    //  file .Aa/mvp.opt.aa, line 209
    # := [nI_550_544_buf] (nI_550) (nI_550_544_buffered)    
    $phi [phi_stmt_540] (type_cast_543_wire_constant nI_550_544_buffered) ( I_540 ) 
    // 		nI := (I + 1 ) $buffering 1// bits of buffering = 8. 
    //  file .Aa/mvp.opt.aa, line 212
    // (I + 1 )
    +[ADD_u8_u8_549_inst] (I_540 konst_548_wire_constant) (nI_550)   
    $buffering  $out ADD_u8_u8_549_inst nI_550 1
    $delay ADD_u8_u8_549_inst 1
    // data-path instances for merge  
    //  file .Aa/mvp.opt.aa, line 213
    // 			$phi J := 			  ($bitcast ($uint<8>) 0  ) $on   $entry 			  nJ $on   inner_loopback 
    // type of target is $uint<8>
    //  file .Aa/mvp.opt.aa, line 214
    # := [nJ_562_556_buf] (nJ_562) (nJ_562_556_buffered)    
    $phi [phi_stmt_552] (type_cast_555_wire_constant nJ_562_556_buffered) ( J_552 ) 
    // 		nJ := (J + 1 ) $buffering 1// bits of buffering = 8. 
    //  file .Aa/mvp.opt.aa, line 217
    // (J + 1 )
    +[ADD_u8_u8_561_inst] (J_552 konst_560_wire_constant) (nJ_562)   
    $buffering  $out ADD_u8_u8_561_inst nJ_562 1
    $delay ADD_u8_u8_561_inst 1
    // 		aval := in_data $buffering 1// bits of buffering = 32. 
    //  file .Aa/mvp.opt.aa, line 218
    // in_data
    $ioport $in [RPIPE_in_data_564_inst] (in_data) (aval_565) 
    $buffering $out RPIPE_in_data_564_inst aval_565 1
    // 		$volatile Digit := ( $slice J 1 0 )  $buffering 1
    //  file .Aa/mvp.opt.aa, line 219
    // ( $slice J 1 0 ) 
    [:] [slice_568_inst] (J_552 1 0) (Digit_569)  $flowthrough
    $delay slice_568_inst 0
    // 		Index := ( $slice J 7 2 )  $buffering 1// bits of buffering = 6. 
    //  file .Aa/mvp.opt.aa, line 221
    // ( $slice J 7 2 ) 
    [:] [slice_577_inst] (J_552 7 2) (Index_578) 
    $buffering  $out slice_577_inst Index_578 1
    $delay slice_577_inst 1
    // 		$volatile aTrue := (Digit == ZERO_2) $buffering 1
    //  file .Aa/mvp.opt.aa, line 222
    // (Digit == ZERO_2)
    ==[EQ_u2_u1_582_inst] (Digit_569 R_ZERO_2_581_wire_constant) (aTrue_583)   $flowthrough 
    $delay EQ_u2_u1_582_inst 0
    // 		$volatile bTrue := (Digit == ONE_2) $buffering 1
    //  file .Aa/mvp.opt.aa, line 223
    // (Digit == ONE_2)
    ==[EQ_u2_u1_587_inst] (Digit_569 R_ONE_2_586_wire_constant) (bTrue_588)   $flowthrough 
    $delay EQ_u2_u1_587_inst 0
    // 		$volatile cTrue := (Digit == TWO_2) $buffering 1
    //  file .Aa/mvp.opt.aa, line 224
    // (Digit == TWO_2)
    ==[EQ_u2_u1_592_inst] (Digit_569 R_TWO_2_591_wire_constant) (cTrue_593)   $flowthrough 
    $delay EQ_u2_u1_592_inst 0
    // 		$volatile dTrue := (Digit == THREE_2) $buffering 1
    //  file .Aa/mvp.opt.aa, line 225
    // (Digit == THREE_2)
    ==[EQ_u2_u1_597_inst] (Digit_569 R_THREE_2_596_wire_constant) (dTrue_598)   $flowthrough 
    $delay EQ_u2_u1_597_inst 0
    // 		$guard (aTrue) A_MEM[I][Index] := aval $buffering 1// bits of buffering = 32. 
    //  file .Aa/mvp.opt.aa, line 226
    // A_MEM[I][Index]
    &/ [array_obj_ref_602_index_0_resize] (I_540) (R_I_600_resized) $guard ( aTrue_583 ) 
    $flowthrough 
    *[array_obj_ref_602_index_0_scale] (R_I_600_resized array_obj_ref_602_offset_scale_factor_0) (R_I_600_scaled) $guard ( aTrue_583 )   
    $delay array_obj_ref_602_index_0_scale 2
    &/ [array_obj_ref_602_index_1_resize] (Index_578) (R_Index_601_resized) $guard ( aTrue_583 ) 
    $flowthrough 
    &/ [array_obj_ref_602_index_1_rename] (R_Index_601_resized) (R_Index_601_scaled) $guard ( aTrue_583 ) 
    $flowthrough 
    +[array_obj_ref_602_index_sum_1] (R_Index_601_scaled R_I_600_scaled) (array_obj_ref_602_index_partial_sum_1) $guard ( aTrue_583 )   
    $delay array_obj_ref_602_index_sum_1 2
    &/ [array_obj_ref_602_index_offset] (array_obj_ref_602_index_partial_sum_1) (array_obj_ref_602_final_offset) $guard ( aTrue_583 ) 
    $flowthrough 
    &/ [array_obj_ref_602_root_address_inst] (array_obj_ref_602_final_offset) (array_obj_ref_602_root_address) $guard ( aTrue_583 ) 
    $flowthrough 
    &/ [array_obj_ref_602_addr_0] (array_obj_ref_602_root_address) (array_obj_ref_602_word_address_0) $guard ( aTrue_583 ) 
    $flowthrough 
    $store [array_obj_ref_602_store_0] $to memory_space_0 (array_obj_ref_602_word_address_0 array_obj_ref_602_data_0) $guard ( aTrue_583 ) 
    $delay array_obj_ref_602_store_0 4
    &/ [array_obj_ref_602_gather_scatter] (aval_565) (array_obj_ref_602_data_0) $guard ( aTrue_583 ) 
    $flowthrough 
    // 		$guard (bTrue) B_MEM[I][Index] := aval $buffering 1// bits of buffering = 32. 
    //  file .Aa/mvp.opt.aa, line 228
    // B_MEM[I][Index]
    &/ [array_obj_ref_614_index_0_resize] (I_540) (R_I_612_resized) $guard ( bTrue_588 ) 
    $flowthrough 
    *[array_obj_ref_614_index_0_scale] (R_I_612_resized array_obj_ref_614_offset_scale_factor_0) (R_I_612_scaled) $guard ( bTrue_588 )   
    $delay array_obj_ref_614_index_0_scale 2
    &/ [array_obj_ref_614_index_1_resize] (Index_578) (R_Index_613_resized) $guard ( bTrue_588 ) 
    $flowthrough 
    &/ [array_obj_ref_614_index_1_rename] (R_Index_613_resized) (R_Index_613_scaled) $guard ( bTrue_588 ) 
    $flowthrough 
    +[array_obj_ref_614_index_sum_1] (R_Index_613_scaled R_I_612_scaled) (array_obj_ref_614_index_partial_sum_1) $guard ( bTrue_588 )   
    $delay array_obj_ref_614_index_sum_1 2
    &/ [array_obj_ref_614_index_offset] (array_obj_ref_614_index_partial_sum_1) (array_obj_ref_614_final_offset) $guard ( bTrue_588 ) 
    $flowthrough 
    &/ [array_obj_ref_614_root_address_inst] (array_obj_ref_614_final_offset) (array_obj_ref_614_root_address) $guard ( bTrue_588 ) 
    $flowthrough 
    &/ [array_obj_ref_614_addr_0] (array_obj_ref_614_root_address) (array_obj_ref_614_word_address_0) $guard ( bTrue_588 ) 
    $flowthrough 
    $store [array_obj_ref_614_store_0] $to memory_space_1 (array_obj_ref_614_word_address_0 array_obj_ref_614_data_0) $guard ( bTrue_588 ) 
    $delay array_obj_ref_614_store_0 4
    &/ [array_obj_ref_614_gather_scatter] (aval_565) (array_obj_ref_614_data_0) $guard ( bTrue_588 ) 
    $flowthrough 
    // 		$guard (cTrue) C_MEM[I][Index] := aval $buffering 1// bits of buffering = 32. 
    //  file .Aa/mvp.opt.aa, line 230
    // C_MEM[I][Index]
    &/ [array_obj_ref_626_index_0_resize] (I_540) (R_I_624_resized) $guard ( cTrue_593 ) 
    $flowthrough 
    *[array_obj_ref_626_index_0_scale] (R_I_624_resized array_obj_ref_626_offset_scale_factor_0) (R_I_624_scaled) $guard ( cTrue_593 )   
    $delay array_obj_ref_626_index_0_scale 2
    &/ [array_obj_ref_626_index_1_resize] (Index_578) (R_Index_625_resized) $guard ( cTrue_593 ) 
    $flowthrough 
    &/ [array_obj_ref_626_index_1_rename] (R_Index_625_resized) (R_Index_625_scaled) $guard ( cTrue_593 ) 
    $flowthrough 
    +[array_obj_ref_626_index_sum_1] (R_Index_625_scaled R_I_624_scaled) (array_obj_ref_626_index_partial_sum_1) $guard ( cTrue_593 )   
    $delay array_obj_ref_626_index_sum_1 2
    &/ [array_obj_ref_626_index_offset] (array_obj_ref_626_index_partial_sum_1) (array_obj_ref_626_final_offset) $guard ( cTrue_593 ) 
    $flowthrough 
    &/ [array_obj_ref_626_root_address_inst] (array_obj_ref_626_final_offset) (array_obj_ref_626_root_address) $guard ( cTrue_593 ) 
    $flowthrough 
    &/ [array_obj_ref_626_addr_0] (array_obj_ref_626_root_address) (array_obj_ref_626_word_address_0) $guard ( cTrue_593 ) 
    $flowthrough 
    $store [array_obj_ref_626_store_0] $to memory_space_2 (array_obj_ref_626_word_address_0 array_obj_ref_626_data_0) $guard ( cTrue_593 ) 
    $delay array_obj_ref_626_store_0 4
    &/ [array_obj_ref_626_gather_scatter] (aval_565) (array_obj_ref_626_data_0) $guard ( cTrue_593 ) 
    $flowthrough 
    // 		$guard (dTrue) D_MEM[I][Index] := aval $buffering 1// bits of buffering = 32. 
    //  file .Aa/mvp.opt.aa, line 232
    // D_MEM[I][Index]
    &/ [array_obj_ref_638_index_0_resize] (I_540) (R_I_636_resized) $guard ( dTrue_598 ) 
    $flowthrough 
    *[array_obj_ref_638_index_0_scale] (R_I_636_resized array_obj_ref_638_offset_scale_factor_0) (R_I_636_scaled) $guard ( dTrue_598 )   
    $delay array_obj_ref_638_index_0_scale 2
    &/ [array_obj_ref_638_index_1_resize] (Index_578) (R_Index_637_resized) $guard ( dTrue_598 ) 
    $flowthrough 
    &/ [array_obj_ref_638_index_1_rename] (R_Index_637_resized) (R_Index_637_scaled) $guard ( dTrue_598 ) 
    $flowthrough 
    +[array_obj_ref_638_index_sum_1] (R_Index_637_scaled R_I_636_scaled) (array_obj_ref_638_index_partial_sum_1) $guard ( dTrue_598 )   
    $delay array_obj_ref_638_index_sum_1 2
    &/ [array_obj_ref_638_index_offset] (array_obj_ref_638_index_partial_sum_1) (array_obj_ref_638_final_offset) $guard ( dTrue_598 ) 
    $flowthrough 
    &/ [array_obj_ref_638_root_address_inst] (array_obj_ref_638_final_offset) (array_obj_ref_638_root_address) $guard ( dTrue_598 ) 
    $flowthrough 
    &/ [array_obj_ref_638_addr_0] (array_obj_ref_638_root_address) (array_obj_ref_638_word_address_0) $guard ( dTrue_598 ) 
    $flowthrough 
    $store [array_obj_ref_638_store_0] $to memory_space_3 (array_obj_ref_638_word_address_0 array_obj_ref_638_data_0) $guard ( dTrue_598 ) 
    $delay array_obj_ref_638_store_0 4
    &/ [array_obj_ref_638_gather_scatter] (aval_565) (array_obj_ref_638_data_0) $guard ( dTrue_598 ) 
    $flowthrough 
    // datapath-instances for if  
    //  file .Aa/mvp.opt.aa, line 0
    // (nJ < 32 )
    <[ULT_u8_u1_650_inst] (nJ_562 konst_649_wire_constant) (ULT_u8_u1_650_wire)   $flowthrough 
    $delay ULT_u8_u1_650_inst 0
    ==0? [if_stmt_647_branch] (ULT_u8_u1_650_wire)
    // datapath-instances for if  
    //  file .Aa/mvp.opt.aa, line 950438880
    // (nI < 32 )
    <[ULT_u8_u1_656_inst] (nI_550 konst_655_wire_constant) (ULT_u8_u1_656_wire)   $flowthrough 
    $delay ULT_u8_u1_656_inst 0
    ==0? [if_stmt_653_branch] (ULT_u8_u1_656_wire)
  }
  // end data-path
  // CP-DP links for merge  
  //  file .Aa/mvp.opt.aa, line 208
  nI_550_544_buf <=> (branch_block_stmt_538/outer_loopback_PhiReq/phi_stmt_540/phi_stmt_540_sources/Interlock/Sample/req branch_block_stmt_538/outer_loopback_PhiReq/phi_stmt_540/phi_stmt_540_sources/Interlock/Update/req) (branch_block_stmt_538/outer_loopback_PhiReq/phi_stmt_540/phi_stmt_540_sources/Interlock/Sample/ack branch_block_stmt_538/outer_loopback_PhiReq/phi_stmt_540/phi_stmt_540_sources/Interlock/Update/ack)
  phi_stmt_540 <=> (branch_block_stmt_538/merge_stmt_539__entry___PhiReq/phi_stmt_540/phi_stmt_540_req branch_block_stmt_538/outer_loopback_PhiReq/phi_stmt_540/phi_stmt_540_req) (branch_block_stmt_538/merge_stmt_539_PhiAck/phi_stmt_540_ack)
  // 		nI := (I + 1 ) $buffering 1// bits of buffering = 8. 
  //  file .Aa/mvp.opt.aa, line 212
  // (I + 1 )
  // I
  ADD_u8_u8_549_inst <=> (branch_block_stmt_538/assign_stmt_550/ADD_u8_u8_549_Sample/rr branch_block_stmt_538/assign_stmt_550/ADD_u8_u8_549_Update/cr) (branch_block_stmt_538/assign_stmt_550/ADD_u8_u8_549_Sample/ra branch_block_stmt_538/assign_stmt_550/ADD_u8_u8_549_Update/ca)
  // CP-DP links for merge  
  //  file .Aa/mvp.opt.aa, line 213
  nJ_562_556_buf <=> (branch_block_stmt_538/inner_loopback_PhiReq/phi_stmt_552/phi_stmt_552_sources/Interlock/Sample/req branch_block_stmt_538/inner_loopback_PhiReq/phi_stmt_552/phi_stmt_552_sources/Interlock/Update/req) (branch_block_stmt_538/inner_loopback_PhiReq/phi_stmt_552/phi_stmt_552_sources/Interlock/Sample/ack branch_block_stmt_538/inner_loopback_PhiReq/phi_stmt_552/phi_stmt_552_sources/Interlock/Update/ack)
  phi_stmt_552 <=> (branch_block_stmt_538/merge_stmt_551__entry___PhiReq/phi_stmt_552/phi_stmt_552_req branch_block_stmt_538/inner_loopback_PhiReq/phi_stmt_552/phi_stmt_552_req) (branch_block_stmt_538/merge_stmt_551_PhiAck/phi_stmt_552_ack)
  // 		nJ := (J + 1 ) $buffering 1// bits of buffering = 8. 
  //  file .Aa/mvp.opt.aa, line 217
  // (J + 1 )
  // J
  ADD_u8_u8_561_inst <=> (branch_block_stmt_538/assign_stmt_562_to_assign_stmt_640/ADD_u8_u8_561_Sample/rr branch_block_stmt_538/assign_stmt_562_to_assign_stmt_640/ADD_u8_u8_561_Update/cr) (branch_block_stmt_538/assign_stmt_562_to_assign_stmt_640/ADD_u8_u8_561_Sample/ra branch_block_stmt_538/assign_stmt_562_to_assign_stmt_640/ADD_u8_u8_561_Update/ca)
  // 		aval := in_data $buffering 1// bits of buffering = 32. 
  //  file .Aa/mvp.opt.aa, line 218
  // in_data
  RPIPE_in_data_564_inst <=> (branch_block_stmt_538/assign_stmt_562_to_assign_stmt_640/RPIPE_in_data_564_Sample/rr branch_block_stmt_538/assign_stmt_562_to_assign_stmt_640/RPIPE_in_data_564_Update/cr) (branch_block_stmt_538/assign_stmt_562_to_assign_stmt_640/RPIPE_in_data_564_Sample/ra branch_block_stmt_538/assign_stmt_562_to_assign_stmt_640/RPIPE_in_data_564_Update/ca)
  // 		$volatile Digit := ( $slice J 1 0 )  $buffering 1
  //  file .Aa/mvp.opt.aa, line 219
  // J
  // 		Index := ( $slice J 7 2 )  $buffering 1// bits of buffering = 6. 
  //  file .Aa/mvp.opt.aa, line 221
  // J
  // ( $slice J 7 2 ) 
  slice_577_inst <=> (branch_block_stmt_538/assign_stmt_562_to_assign_stmt_640/slice_577_Sample/rr branch_block_stmt_538/assign_stmt_562_to_assign_stmt_640/slice_577_Update/cr) (branch_block_stmt_538/assign_stmt_562_to_assign_stmt_640/slice_577_Sample/ra branch_block_stmt_538/assign_stmt_562_to_assign_stmt_640/slice_577_Update/ca)
  // 		$volatile aTrue := (Digit == ZERO_2) $buffering 1
  //  file .Aa/mvp.opt.aa, line 222
  // (Digit == ZERO_2)
  // Digit
  // 		$volatile bTrue := (Digit == ONE_2) $buffering 1
  //  file .Aa/mvp.opt.aa, line 223
  // (Digit == ONE_2)
  // Digit
  // 		$volatile cTrue := (Digit == TWO_2) $buffering 1
  //  file .Aa/mvp.opt.aa, line 224
  // (Digit == TWO_2)
  // Digit
  // 		$volatile dTrue := (Digit == THREE_2) $buffering 1
  //  file .Aa/mvp.opt.aa, line 225
  // (Digit == THREE_2)
  // Digit
  // 		$guard (aTrue) A_MEM[I][Index] := aval $buffering 1// bits of buffering = 32. 
  //  file .Aa/mvp.opt.aa, line 226
  // aval
  // I
  array_obj_ref_602_index_0_resize <=> (branch_block_stmt_538/assign_stmt_562_to_assign_stmt_640/array_obj_ref_602_index_resize_0/index_resize_req) (branch_block_stmt_538/assign_stmt_562_to_assign_stmt_640/array_obj_ref_602_index_resize_0/index_resize_ack)
  array_obj_ref_602_index_0_scale <=> (branch_block_stmt_538/assign_stmt_562_to_assign_stmt_640/array_obj_ref_602_index_scale_0_Sample/rr branch_block_stmt_538/assign_stmt_562_to_assign_stmt_640/array_obj_ref_602_index_scale_0_Update/cr) (branch_block_stmt_538/assign_stmt_562_to_assign_stmt_640/array_obj_ref_602_index_scale_0_Sample/ra branch_block_stmt_538/assign_stmt_562_to_assign_stmt_640/array_obj_ref_602_index_scale_0_Update/ca)
  // Index
  array_obj_ref_602_index_1_resize <=> (branch_block_stmt_538/assign_stmt_562_to_assign_stmt_640/array_obj_ref_602_index_resize_1/index_resize_req) (branch_block_stmt_538/assign_stmt_562_to_assign_stmt_640/array_obj_ref_602_index_resize_1/index_resize_ack)
  array_obj_ref_602_index_1_rename <=> (branch_block_stmt_538/assign_stmt_562_to_assign_stmt_640/array_obj_ref_602_index_scale_1/scale_rename_req) (branch_block_stmt_538/assign_stmt_562_to_assign_stmt_640/array_obj_ref_602_index_scale_1/scale_rename_ack)
  array_obj_ref_602_index_sum_1 <=> (branch_block_stmt_538/assign_stmt_562_to_assign_stmt_640/array_obj_ref_602_partial_sum_1_Sample/rr branch_block_stmt_538/assign_stmt_562_to_assign_stmt_640/array_obj_ref_602_partial_sum_1_Update/cr) (branch_block_stmt_538/assign_stmt_562_to_assign_stmt_640/array_obj_ref_602_partial_sum_1_Sample/ra branch_block_stmt_538/assign_stmt_562_to_assign_stmt_640/array_obj_ref_602_partial_sum_1_Update/ca)
  array_obj_ref_602_index_offset <=> (branch_block_stmt_538/assign_stmt_562_to_assign_stmt_640/array_obj_ref_602_final_index_sum_regn/req) (branch_block_stmt_538/assign_stmt_562_to_assign_stmt_640/array_obj_ref_602_final_index_sum_regn/ack)
  array_obj_ref_602_root_address_inst <=> (branch_block_stmt_538/assign_stmt_562_to_assign_stmt_640/array_obj_ref_602_base_plus_offset/sum_rename_req) (branch_block_stmt_538/assign_stmt_562_to_assign_stmt_640/array_obj_ref_602_base_plus_offset/sum_rename_ack)
  array_obj_ref_602_addr_0 <=> (branch_block_stmt_538/assign_stmt_562_to_assign_stmt_640/array_obj_ref_602_word_addrgen/root_register_req) (branch_block_stmt_538/assign_stmt_562_to_assign_stmt_640/array_obj_ref_602_word_addrgen/root_register_ack)
  array_obj_ref_602_gather_scatter <=> (branch_block_stmt_538/assign_stmt_562_to_assign_stmt_640/array_obj_ref_602_Sample/array_obj_ref_602_Split/split_req) (branch_block_stmt_538/assign_stmt_562_to_assign_stmt_640/array_obj_ref_602_Sample/array_obj_ref_602_Split/split_ack)
  array_obj_ref_602_store_0 <=> (branch_block_stmt_538/assign_stmt_562_to_assign_stmt_640/array_obj_ref_602_Sample/word_access_start/word_0/rr branch_block_stmt_538/assign_stmt_562_to_assign_stmt_640/array_obj_ref_602_Update/word_access_complete/word_0/cr) (branch_block_stmt_538/assign_stmt_562_to_assign_stmt_640/array_obj_ref_602_Sample/word_access_start/word_0/ra branch_block_stmt_538/assign_stmt_562_to_assign_stmt_640/array_obj_ref_602_Update/word_access_complete/word_0/ca)
  // 		$guard (bTrue) B_MEM[I][Index] := aval $buffering 1// bits of buffering = 32. 
  //  file .Aa/mvp.opt.aa, line 228
  // aval
  // I
  array_obj_ref_614_index_0_resize <=> (branch_block_stmt_538/assign_stmt_562_to_assign_stmt_640/array_obj_ref_614_index_resize_0/index_resize_req) (branch_block_stmt_538/assign_stmt_562_to_assign_stmt_640/array_obj_ref_614_index_resize_0/index_resize_ack)
  array_obj_ref_614_index_0_scale <=> (branch_block_stmt_538/assign_stmt_562_to_assign_stmt_640/array_obj_ref_614_index_scale_0_Sample/rr branch_block_stmt_538/assign_stmt_562_to_assign_stmt_640/array_obj_ref_614_index_scale_0_Update/cr) (branch_block_stmt_538/assign_stmt_562_to_assign_stmt_640/array_obj_ref_614_index_scale_0_Sample/ra branch_block_stmt_538/assign_stmt_562_to_assign_stmt_640/array_obj_ref_614_index_scale_0_Update/ca)
  // Index
  array_obj_ref_614_index_1_resize <=> (branch_block_stmt_538/assign_stmt_562_to_assign_stmt_640/array_obj_ref_614_index_resize_1/index_resize_req) (branch_block_stmt_538/assign_stmt_562_to_assign_stmt_640/array_obj_ref_614_index_resize_1/index_resize_ack)
  array_obj_ref_614_index_1_rename <=> (branch_block_stmt_538/assign_stmt_562_to_assign_stmt_640/array_obj_ref_614_index_scale_1/scale_rename_req) (branch_block_stmt_538/assign_stmt_562_to_assign_stmt_640/array_obj_ref_614_index_scale_1/scale_rename_ack)
  array_obj_ref_614_index_sum_1 <=> (branch_block_stmt_538/assign_stmt_562_to_assign_stmt_640/array_obj_ref_614_partial_sum_1_Sample/rr branch_block_stmt_538/assign_stmt_562_to_assign_stmt_640/array_obj_ref_614_partial_sum_1_Update/cr) (branch_block_stmt_538/assign_stmt_562_to_assign_stmt_640/array_obj_ref_614_partial_sum_1_Sample/ra branch_block_stmt_538/assign_stmt_562_to_assign_stmt_640/array_obj_ref_614_partial_sum_1_Update/ca)
  array_obj_ref_614_index_offset <=> (branch_block_stmt_538/assign_stmt_562_to_assign_stmt_640/array_obj_ref_614_final_index_sum_regn/req) (branch_block_stmt_538/assign_stmt_562_to_assign_stmt_640/array_obj_ref_614_final_index_sum_regn/ack)
  array_obj_ref_614_root_address_inst <=> (branch_block_stmt_538/assign_stmt_562_to_assign_stmt_640/array_obj_ref_614_base_plus_offset/sum_rename_req) (branch_block_stmt_538/assign_stmt_562_to_assign_stmt_640/array_obj_ref_614_base_plus_offset/sum_rename_ack)
  array_obj_ref_614_addr_0 <=> (branch_block_stmt_538/assign_stmt_562_to_assign_stmt_640/array_obj_ref_614_word_addrgen/root_register_req) (branch_block_stmt_538/assign_stmt_562_to_assign_stmt_640/array_obj_ref_614_word_addrgen/root_register_ack)
  array_obj_ref_614_gather_scatter <=> (branch_block_stmt_538/assign_stmt_562_to_assign_stmt_640/array_obj_ref_614_Sample/array_obj_ref_614_Split/split_req) (branch_block_stmt_538/assign_stmt_562_to_assign_stmt_640/array_obj_ref_614_Sample/array_obj_ref_614_Split/split_ack)
  array_obj_ref_614_store_0 <=> (branch_block_stmt_538/assign_stmt_562_to_assign_stmt_640/array_obj_ref_614_Sample/word_access_start/word_0/rr branch_block_stmt_538/assign_stmt_562_to_assign_stmt_640/array_obj_ref_614_Update/word_access_complete/word_0/cr) (branch_block_stmt_538/assign_stmt_562_to_assign_stmt_640/array_obj_ref_614_Sample/word_access_start/word_0/ra branch_block_stmt_538/assign_stmt_562_to_assign_stmt_640/array_obj_ref_614_Update/word_access_complete/word_0/ca)
  // 		$guard (cTrue) C_MEM[I][Index] := aval $buffering 1// bits of buffering = 32. 
  //  file .Aa/mvp.opt.aa, line 230
  // aval
  // I
  array_obj_ref_626_index_0_resize <=> (branch_block_stmt_538/assign_stmt_562_to_assign_stmt_640/array_obj_ref_626_index_resize_0/index_resize_req) (branch_block_stmt_538/assign_stmt_562_to_assign_stmt_640/array_obj_ref_626_index_resize_0/index_resize_ack)
  array_obj_ref_626_index_0_scale <=> (branch_block_stmt_538/assign_stmt_562_to_assign_stmt_640/array_obj_ref_626_index_scale_0_Sample/rr branch_block_stmt_538/assign_stmt_562_to_assign_stmt_640/array_obj_ref_626_index_scale_0_Update/cr) (branch_block_stmt_538/assign_stmt_562_to_assign_stmt_640/array_obj_ref_626_index_scale_0_Sample/ra branch_block_stmt_538/assign_stmt_562_to_assign_stmt_640/array_obj_ref_626_index_scale_0_Update/ca)
  // Index
  array_obj_ref_626_index_1_resize <=> (branch_block_stmt_538/assign_stmt_562_to_assign_stmt_640/array_obj_ref_626_index_resize_1/index_resize_req) (branch_block_stmt_538/assign_stmt_562_to_assign_stmt_640/array_obj_ref_626_index_resize_1/index_resize_ack)
  array_obj_ref_626_index_1_rename <=> (branch_block_stmt_538/assign_stmt_562_to_assign_stmt_640/array_obj_ref_626_index_scale_1/scale_rename_req) (branch_block_stmt_538/assign_stmt_562_to_assign_stmt_640/array_obj_ref_626_index_scale_1/scale_rename_ack)
  array_obj_ref_626_index_sum_1 <=> (branch_block_stmt_538/assign_stmt_562_to_assign_stmt_640/array_obj_ref_626_partial_sum_1_Sample/rr branch_block_stmt_538/assign_stmt_562_to_assign_stmt_640/array_obj_ref_626_partial_sum_1_Update/cr) (branch_block_stmt_538/assign_stmt_562_to_assign_stmt_640/array_obj_ref_626_partial_sum_1_Sample/ra branch_block_stmt_538/assign_stmt_562_to_assign_stmt_640/array_obj_ref_626_partial_sum_1_Update/ca)
  array_obj_ref_626_index_offset <=> (branch_block_stmt_538/assign_stmt_562_to_assign_stmt_640/array_obj_ref_626_final_index_sum_regn/req) (branch_block_stmt_538/assign_stmt_562_to_assign_stmt_640/array_obj_ref_626_final_index_sum_regn/ack)
  array_obj_ref_626_root_address_inst <=> (branch_block_stmt_538/assign_stmt_562_to_assign_stmt_640/array_obj_ref_626_base_plus_offset/sum_rename_req) (branch_block_stmt_538/assign_stmt_562_to_assign_stmt_640/array_obj_ref_626_base_plus_offset/sum_rename_ack)
  array_obj_ref_626_addr_0 <=> (branch_block_stmt_538/assign_stmt_562_to_assign_stmt_640/array_obj_ref_626_word_addrgen/root_register_req) (branch_block_stmt_538/assign_stmt_562_to_assign_stmt_640/array_obj_ref_626_word_addrgen/root_register_ack)
  array_obj_ref_626_gather_scatter <=> (branch_block_stmt_538/assign_stmt_562_to_assign_stmt_640/array_obj_ref_626_Sample/array_obj_ref_626_Split/split_req) (branch_block_stmt_538/assign_stmt_562_to_assign_stmt_640/array_obj_ref_626_Sample/array_obj_ref_626_Split/split_ack)
  array_obj_ref_626_store_0 <=> (branch_block_stmt_538/assign_stmt_562_to_assign_stmt_640/array_obj_ref_626_Sample/word_access_start/word_0/rr branch_block_stmt_538/assign_stmt_562_to_assign_stmt_640/array_obj_ref_626_Update/word_access_complete/word_0/cr) (branch_block_stmt_538/assign_stmt_562_to_assign_stmt_640/array_obj_ref_626_Sample/word_access_start/word_0/ra branch_block_stmt_538/assign_stmt_562_to_assign_stmt_640/array_obj_ref_626_Update/word_access_complete/word_0/ca)
  // 		$guard (dTrue) D_MEM[I][Index] := aval $buffering 1// bits of buffering = 32. 
  //  file .Aa/mvp.opt.aa, line 232
  // aval
  // I
  array_obj_ref_638_index_0_resize <=> (branch_block_stmt_538/assign_stmt_562_to_assign_stmt_640/array_obj_ref_638_index_resize_0/index_resize_req) (branch_block_stmt_538/assign_stmt_562_to_assign_stmt_640/array_obj_ref_638_index_resize_0/index_resize_ack)
  array_obj_ref_638_index_0_scale <=> (branch_block_stmt_538/assign_stmt_562_to_assign_stmt_640/array_obj_ref_638_index_scale_0_Sample/rr branch_block_stmt_538/assign_stmt_562_to_assign_stmt_640/array_obj_ref_638_index_scale_0_Update/cr) (branch_block_stmt_538/assign_stmt_562_to_assign_stmt_640/array_obj_ref_638_index_scale_0_Sample/ra branch_block_stmt_538/assign_stmt_562_to_assign_stmt_640/array_obj_ref_638_index_scale_0_Update/ca)
  // Index
  array_obj_ref_638_index_1_resize <=> (branch_block_stmt_538/assign_stmt_562_to_assign_stmt_640/array_obj_ref_638_index_resize_1/index_resize_req) (branch_block_stmt_538/assign_stmt_562_to_assign_stmt_640/array_obj_ref_638_index_resize_1/index_resize_ack)
  array_obj_ref_638_index_1_rename <=> (branch_block_stmt_538/assign_stmt_562_to_assign_stmt_640/array_obj_ref_638_index_scale_1/scale_rename_req) (branch_block_stmt_538/assign_stmt_562_to_assign_stmt_640/array_obj_ref_638_index_scale_1/scale_rename_ack)
  array_obj_ref_638_index_sum_1 <=> (branch_block_stmt_538/assign_stmt_562_to_assign_stmt_640/array_obj_ref_638_partial_sum_1_Sample/rr branch_block_stmt_538/assign_stmt_562_to_assign_stmt_640/array_obj_ref_638_partial_sum_1_Update/cr) (branch_block_stmt_538/assign_stmt_562_to_assign_stmt_640/array_obj_ref_638_partial_sum_1_Sample/ra branch_block_stmt_538/assign_stmt_562_to_assign_stmt_640/array_obj_ref_638_partial_sum_1_Update/ca)
  array_obj_ref_638_index_offset <=> (branch_block_stmt_538/assign_stmt_562_to_assign_stmt_640/array_obj_ref_638_final_index_sum_regn/req) (branch_block_stmt_538/assign_stmt_562_to_assign_stmt_640/array_obj_ref_638_final_index_sum_regn/ack)
  array_obj_ref_638_root_address_inst <=> (branch_block_stmt_538/assign_stmt_562_to_assign_stmt_640/array_obj_ref_638_base_plus_offset/sum_rename_req) (branch_block_stmt_538/assign_stmt_562_to_assign_stmt_640/array_obj_ref_638_base_plus_offset/sum_rename_ack)
  array_obj_ref_638_addr_0 <=> (branch_block_stmt_538/assign_stmt_562_to_assign_stmt_640/array_obj_ref_638_word_addrgen/root_register_req) (branch_block_stmt_538/assign_stmt_562_to_assign_stmt_640/array_obj_ref_638_word_addrgen/root_register_ack)
  array_obj_ref_638_gather_scatter <=> (branch_block_stmt_538/assign_stmt_562_to_assign_stmt_640/array_obj_ref_638_Sample/array_obj_ref_638_Split/split_req) (branch_block_stmt_538/assign_stmt_562_to_assign_stmt_640/array_obj_ref_638_Sample/array_obj_ref_638_Split/split_ack)
  array_obj_ref_638_store_0 <=> (branch_block_stmt_538/assign_stmt_562_to_assign_stmt_640/array_obj_ref_638_Sample/word_access_start/word_0/rr branch_block_stmt_538/assign_stmt_562_to_assign_stmt_640/array_obj_ref_638_Update/word_access_complete/word_0/cr) (branch_block_stmt_538/assign_stmt_562_to_assign_stmt_640/array_obj_ref_638_Sample/word_access_start/word_0/ra branch_block_stmt_538/assign_stmt_562_to_assign_stmt_640/array_obj_ref_638_Update/word_access_complete/word_0/ca)
  // CP-DP links for if  
  //  file .Aa/mvp.opt.aa, line 0
  // (nJ < 32 )
  if_stmt_647_branch <=> (branch_block_stmt_538/if_stmt_647_eval_test/branch_req) (branch_block_stmt_538/if_stmt_647_else_link/else_choice_transition branch_block_stmt_538/if_stmt_647_if_link/if_choice_transition)
  // CP-DP links for if  
  //  file .Aa/mvp.opt.aa, line 950438880
  // (nI < 32 )
  if_stmt_653_branch <=> (branch_block_stmt_538/if_stmt_653_eval_test/branch_req) (branch_block_stmt_538/if_stmt_653_else_link/else_choice_transition branch_block_stmt_538/if_stmt_653_if_link/if_choice_transition)
}
$module [readVector] 
{
  // pipe-declarations for block %readVector
  //  file .Aa/mvp.opt.aa, line 242
  // pipe-declarations for block %readVector%loop
  //  file .Aa/mvp.opt.aa, line 247
  // memory-space 7 is written into.
  // memory-space 6 is written into.
  // memory-space 5 is written into.
  // memory-space 4 is written into.
  // there are no memory spaces local to this module.
  $CP 
  {
    // begin control-path 
    <>[branch_block_stmt_662] // Branch Block  file .Aa/mvp.opt.aa, line 247
    {
      $P [branch_block_stmt_662__entry__]
      branch_block_stmt_662__entry__ <-| ($entry)
      $P [branch_block_stmt_662__exit__]
      branch_block_stmt_662__exit__ |-> ($exit)
      $P [do_while_stmt_663__entry__] 
      $P [do_while_stmt_663__exit__] 
      // do-while-statement  
      //  file .Aa/mvp.opt.aa, line 249
      <o> [do_while_stmt_663]  $depth 7 $buffering 1 
      {
        $P[do_while_stmt_663__entry__] 
        $P[do_while_stmt_663__exit__] 
        $P[loop_back] 
        $P[condition_done] 
        $P[loop_body_done] 
        $pipeline [do_while_stmt_663_loop_body] 
        {
          // Pipelined!
          $T[back_edge_to_loop_body] 
          $T[first_time_through_loop_body] 
          $T[loop_body_start] 
          $T[condition_evaluated] 
          $transitionmerge [entry_tmerge] (back_edge_to_loop_body first_time_through_loop_body) (loop_body_start)
          $entry <-& (loop_body_start)
          $T[aggregated_phi_sample_req] 
          $T[aggregated_phi_sample_ack] 
          $T[aggregated_phi_update_req] 
          $T[aggregated_phi_update_ack] 
          // do not loop-back unless all phi's have used up their triggering tokens.
          condition_evaluated <-& (aggregated_phi_update_ack)
          aggregated_phi_sample_req o<-& (aggregated_phi_update_ack 0)
          // start:  PHI statement phi_stmt_665
          // 			$phi I := 			  ($bitcast ($uint<8>) 0  ) $on   $entry 			  nI $on   $loopback 
          // type of target is $uint<8>
          $T[phi_stmt_665_sample_start_] 
          $T[phi_stmt_665_sample_completed_] 
          $T[phi_stmt_665_update_start_] 
          $T[phi_stmt_665_update_completed_] 
          $T[phi_stmt_665_sample_start__ps] 
          phi_stmt_665_sample_start__ps <-& (aggregated_phi_sample_req)
          $T[phi_stmt_665_sample_completed__ps] 
          phi_stmt_665_sample_completed__ps &-> (aggregated_phi_sample_ack)
          $T[phi_stmt_665_update_start__ps] 
          phi_stmt_665_update_start__ps <-& (aggregated_phi_update_req)
          $T[phi_stmt_665_update_completed__ps] 
          phi_stmt_665_update_completed_ <-& (phi_stmt_665_update_completed__ps)
          aggregated_phi_sample_req <-& (phi_stmt_665_sample_start_)
          aggregated_phi_sample_ack &-> (phi_stmt_665_sample_completed_)
          aggregated_phi_update_req <-& (phi_stmt_665_update_start_)
          $T[phi_stmt_665_loopback_trigger] 
          phi_stmt_665_loopback_trigger <-& (back_edge_to_loop_body)
          $T[phi_stmt_665_loopback_sample_req] 
          $T[phi_stmt_665_loopback_sample_req_ps] 
          phi_stmt_665_loopback_sample_req <-& (phi_stmt_665_loopback_sample_req_ps)
          phi_stmt_665_loopback_sample_req &-> ($null)
          $T[phi_stmt_665_entry_trigger] 
          phi_stmt_665_entry_trigger <-& (first_time_through_loop_body)
          $T[phi_stmt_665_entry_sample_req] 
          $T[phi_stmt_665_entry_sample_req_ps] 
          phi_stmt_665_entry_sample_req <-& (phi_stmt_665_entry_sample_req_ps)
          phi_stmt_665_entry_sample_req &-> ($null)
          phi_stmt_665_update_start_ o<-& (phi_stmt_665_update_completed_ 0)
          phi_stmt_665_sample_start_ o<-& (phi_stmt_665_sample_completed_ 1)
          $T[phi_stmt_665_merged_reqs] 
          $T[phi_stmt_665_phi_mux_ack] 
          $T[phi_stmt_665_phi_mux_ack_ps] 
          phi_stmt_665_phi_mux_ack_ps <-& (phi_stmt_665_phi_mux_ack)
          aggregated_phi_update_ack <-& (phi_stmt_665_update_completed_)
          $T[type_cast_668_sample_start__ps] 
          $T[type_cast_668_sample_completed__ps] 
          $T[type_cast_668_update_start__ps] 
          $T[type_cast_668_update_completed__ps] 
          // dummies for constant expression source for phi
          $T[type_cast_668_sample_start_] 
          $T[type_cast_668_sample_completed_] 
          type_cast_668_sample_completed_ <-& (type_cast_668_sample_start_)
          $T[type_cast_668_update_start_] 
          $T [type_cast_668_update_completed_] $delay 
          type_cast_668_update_completed_ <-& (type_cast_668_update_start_)
          // Phi start dependency for implicit/constant alternative.
          type_cast_668_sample_start_ <-& (type_cast_668_sample_start__ps)
          type_cast_668_update_start_ <-& (type_cast_668_update_start__ps)
          // Phi complete dependency.
          type_cast_668_sample_completed__ps <-& (type_cast_668_sample_completed_)
          type_cast_668_update_completed__ps <-& (type_cast_668_update_completed_)
          $T[R_nI_669_sample_start__ps] 
          $T[R_nI_669_sample_completed__ps] 
          $T[R_nI_669_update_start__ps] 
          $T[R_nI_669_update_completed__ps] 
          // interlock for implicit-variable-ref/signal-read in Phi alternative 1
          $T[R_nI_669_sample_start_] 
          $T[R_nI_669_sample_completed_] 
          $T[R_nI_669_update_start_] 
          $T[R_nI_669_update_completed_] 
          ;;[R_nI_669_Sample] 
          {
            $T [req] $T [ack] // interlock-sample.
          }
          R_nI_669_sample_start_ &-> (R_nI_669_Sample)
          R_nI_669_sample_completed_ <-& (R_nI_669_Sample)
          ;;[R_nI_669_Update] 
          {
            $T [req] $T [ack] // interlock-update.
          }
          R_nI_669_update_start_ &-> (R_nI_669_Update)
          R_nI_669_update_completed_ <-& (R_nI_669_Update)
          // RAW reenables for nI
          // Phi start dependency for implicit/constant alternative.
          R_nI_669_sample_start_ <-& (R_nI_669_sample_start__ps)
          R_nI_669_update_start_ <-& (R_nI_669_update_start__ps)
          // Phi complete dependency.
          R_nI_669_sample_completed__ps <-& (R_nI_669_sample_completed_)
          R_nI_669_update_completed__ps <-& (R_nI_669_update_completed_)
          $phisequencer [ phi_stmt_665_phi_seq] : 
          phi_stmt_665_entry_trigger type_cast_668_sample_start__ps type_cast_668_sample_completed__ps type_cast_668_update_start__ps type_cast_668_update_completed__ps phi_stmt_665_loopback_trigger R_nI_669_sample_start__ps R_nI_669_sample_completed__ps R_nI_669_update_start__ps R_nI_669_update_completed__ps :
          phi_stmt_665_sample_start__ps phi_stmt_665_sample_completed__ps phi_stmt_665_update_start__ps phi_stmt_665_update_completed__ps :
          phi_stmt_665_entry_sample_req_ps phi_stmt_665_loopback_sample_req_ps : 
          phi_stmt_665_phi_mux_ack_ps
          // done: PHI Statement phi_stmt_665
          // start:  			aval := in_data $buffering 1// bits of buffering = 32. 
          //  file .Aa/mvp.opt.aa, line 255
          // Source expression
          // in_data
          $T[RPIPE_in_data_672_sample_start_] 
          $T[RPIPE_in_data_672_sample_completed_] 
          $T[RPIPE_in_data_672_update_start_] 
          $T[RPIPE_in_data_672_update_completed_] 
          ;;[RPIPE_in_data_672_Sample] 
          {
            // pipe read sample
            $T [rr] $T [ra] 
          }
          ;;[RPIPE_in_data_672_Update] 
          {
            // pipe read update
            $T [cr] $T [ca] 
          }
          RPIPE_in_data_672_sample_start_ &-> (RPIPE_in_data_672_Sample)
          RPIPE_in_data_672_sample_completed_ <-& (RPIPE_in_data_672_Sample)
          RPIPE_in_data_672_update_start_ <-& (RPIPE_in_data_672_sample_completed_)
          RPIPE_in_data_672_update_start_ &-> (RPIPE_in_data_672_Update)
          RPIPE_in_data_672_update_completed_ <-& (RPIPE_in_data_672_Update)
          RPIPE_in_data_672_sample_start_ o<-& (RPIPE_in_data_672_update_completed_ 0)
          // Target expression
          // (as target) aval
          // start: WAR dependencies for aval
          // done: WAR dependencies for aval
          // end:  			aval := in_data $buffering 1// bits of buffering = 32. 
          // start:  			i_val := ( $slice I 1 0 )  $buffering 1// bits of buffering = 2. 
          //  file .Aa/mvp.opt.aa, line 256
          // Source expression
          // ( $slice I 1 0 ) 
          $T[slice_676_sample_start_] 
          $T[slice_676_sample_completed_] 
          $T[slice_676_update_start_] 
          $T[slice_676_update_completed_] 
          // I
          // start: Forward dependencies from I to transition slice_676_sample_start_
          slice_676_sample_start_ <-& (phi_stmt_665_update_completed_)
          // done: Forward dependencies from I to transition slice_676_sample_start_
          ;;[slice_676_Sample] 
          {
            // unary expression 
            $T [rr] $T [ra] // (split) unary operation
          }
          ;;[slice_676_Update] 
          {
            // unary expression 
            $T [cr] $T [ca] //(split) unary operation
          }
          slice_676_sample_start_ &-> (slice_676_Sample)
          slice_676_sample_completed_ <-& (slice_676_Sample)
          slice_676_sample_completed_ &-> ($null)
          slice_676_update_start_ &-> (slice_676_Update)
          slice_676_update_completed_ <-& (slice_676_Update)
          // RAW reenables for I
          phi_stmt_665_update_start_ o<-& (slice_676_sample_completed_ 0)
          // self-release: 
          slice_676_sample_start_ o<-& (slice_676_sample_completed_ 1)
          $null &-> (slice_676_update_start_)
          slice_676_update_start_ o<-& (slice_676_update_completed_ 0)
          // Target expression
          // (as target) i_val
          // start: WAR dependencies for i_val
          // done: WAR dependencies for i_val
          // end:  			i_val := ( $slice I 1 0 )  $buffering 1// bits of buffering = 2. 
          // start:  			Index := ( $slice I 7 2 )  $buffering 1// bits of buffering = 6. 
          //  file .Aa/mvp.opt.aa, line 257
          // Source expression
          // ( $slice I 7 2 ) 
          $T[slice_680_sample_start_] 
          $T[slice_680_sample_completed_] 
          $T[slice_680_update_start_] 
          $T[slice_680_update_completed_] 
          // I
          // start: Forward dependencies from I to transition slice_680_sample_start_
          slice_680_sample_start_ <-& (phi_stmt_665_update_completed_)
          // done: Forward dependencies from I to transition slice_680_sample_start_
          ;;[slice_680_Sample] 
          {
            // unary expression 
            $T [rr] $T [ra] // (split) unary operation
          }
          ;;[slice_680_Update] 
          {
            // unary expression 
            $T [cr] $T [ca] //(split) unary operation
          }
          slice_680_sample_start_ &-> (slice_680_Sample)
          slice_680_sample_completed_ <-& (slice_680_Sample)
          slice_680_sample_completed_ &-> ($null)
          slice_680_update_start_ &-> (slice_680_Update)
          slice_680_update_completed_ <-& (slice_680_Update)
          // RAW reenables for I
          phi_stmt_665_update_start_ o<-& (slice_680_sample_completed_ 0)
          // self-release: 
          slice_680_sample_start_ o<-& (slice_680_sample_completed_ 1)
          $null &-> (slice_680_update_start_)
          slice_680_update_start_ o<-& (slice_680_update_completed_ 0)
          // Target expression
          // (as target) Index
          // start: WAR dependencies for Index
          // done: WAR dependencies for Index
          // end:  			Index := ( $slice I 7 2 )  $buffering 1// bits of buffering = 6. 
          // start: WAR dependencies for aTrue
          // done: WAR dependencies for aTrue
          // start:  			$volatile aTrue := (i_val == ZERO_2) $buffering 1
          //  file .Aa/mvp.opt.aa, line 259
          // volatile! 
          // Source expression
          // (i_val == ZERO_2)
          // i_val
          // Target expression
          // (as target) aTrue
          // start: WAR dependencies for aTrue
          // done: WAR dependencies for aTrue
          // end:  			$volatile aTrue := (i_val == ZERO_2) $buffering 1
          // start: WAR dependencies for bTrue
          // done: WAR dependencies for bTrue
          // start:  			$volatile bTrue := (i_val == ONE_2) $buffering 1
          //  file .Aa/mvp.opt.aa, line 260
          // volatile! 
          // Source expression
          // (i_val == ONE_2)
          // i_val
          // Target expression
          // (as target) bTrue
          // start: WAR dependencies for bTrue
          // done: WAR dependencies for bTrue
          // end:  			$volatile bTrue := (i_val == ONE_2) $buffering 1
          // start: WAR dependencies for cTrue
          // done: WAR dependencies for cTrue
          // start:  			$volatile cTrue := (i_val == TWO_2) $buffering 1
          //  file .Aa/mvp.opt.aa, line 261
          // volatile! 
          // Source expression
          // (i_val == TWO_2)
          // i_val
          // Target expression
          // (as target) cTrue
          // start: WAR dependencies for cTrue
          // done: WAR dependencies for cTrue
          // end:  			$volatile cTrue := (i_val == TWO_2) $buffering 1
          // start: WAR dependencies for dTrue
          // done: WAR dependencies for dTrue
          // start:  			$volatile dTrue := (i_val == THREE_2) $buffering 1
          //  file .Aa/mvp.opt.aa, line 262
          // volatile! 
          // Source expression
          // (i_val == THREE_2)
          // i_val
          // Target expression
          // (as target) dTrue
          // start: WAR dependencies for dTrue
          // done: WAR dependencies for dTrue
          // end:  			$volatile dTrue := (i_val == THREE_2) $buffering 1
          // start:  			aval_673_delayed_1_0 := aval $buffering 1 $cut_through // bits of buffering = 32. 
          //  file .Aa/mvp.opt.aa, line 263
          $T[assign_stmt_708_sample_start_] 
          $T[assign_stmt_708_sample_completed_] 
          $T[assign_stmt_708_update_start_] 
          $T[assign_stmt_708_update_completed_] 
          // Source expression
          // aval
          // Target expression
          // (as target) aval_673_delayed_1_0
          // both source and target are implicit: use interlock 
          // Interlock 
          ;;[assign_stmt_708_Sample] 
          {
            $T [req] $T [ack] // interlock-sample.
          }
          ;;[assign_stmt_708_Update] 
          {
            $T [req] $T [ack] // interlock-update.
          }
          assign_stmt_708_sample_start_ &-> (assign_stmt_708_Sample)
          assign_stmt_708_sample_completed_ <-& (assign_stmt_708_Sample)
          assign_stmt_708_sample_completed_ &-> ($null)
          assign_stmt_708_update_start_ &-> (assign_stmt_708_Update)
          assign_stmt_708_update_completed_ <-& (assign_stmt_708_Update)
          // start: Forward dependencies from aval to transition assign_stmt_708_sample_start_
          assign_stmt_708_sample_start_ <-& (RPIPE_in_data_672_update_completed_)
          // done: Forward dependencies from aval to transition assign_stmt_708_sample_start_
          // RAW reenables for aval
          RPIPE_in_data_672_update_start_ o<-& (assign_stmt_708_sample_completed_ 0)
          // self-release: 
          assign_stmt_708_sample_start_ o<-& (assign_stmt_708_sample_completed_ 1)
          $null &-> (assign_stmt_708_update_start_)
          assign_stmt_708_update_start_ o<-& (assign_stmt_708_update_completed_ 0)
          // start: WAR dependencies for aval_673_delayed_1_0
          // done: WAR dependencies for aval_673_delayed_1_0
          // end:  			aval_673_delayed_1_0 := aval $buffering 1 $cut_through // bits of buffering = 32. 
          // start:  			$guard (aTrue) x0[Index] := aval_673_delayed_1_0 $buffering 1// bits of buffering = 32. 
          //  file .Aa/mvp.opt.aa, line 264
          // Guard expression 
          // aTrue
          // Source expression
          // aval_673_delayed_1_0
          // Target expression
          // x0[Index]
          $T[array_obj_ref_711_sample_start_] 
          $T[array_obj_ref_711_sample_completed_] 
          $T[array_obj_ref_711_update_start_] 
          $T[array_obj_ref_711_update_completed_] 
          $T[array_obj_ref_711_word_address_calculated] 
          $T[array_obj_ref_711_root_address_calculated] 
          $T[array_obj_ref_711_offset_calculated] 
          $T[array_obj_ref_711_index_resized_0] 
          $T[array_obj_ref_711_index_scaled_0] 
          $T[array_obj_ref_711_index_computed_0] 
          // Index
          // start: Forward dependencies from Index to transition array_obj_ref_711_index_computed_0
          array_obj_ref_711_index_computed_0 <-& (slice_680_update_completed_)
          // done: Forward dependencies from Index to transition array_obj_ref_711_index_computed_0
          ;;[array_obj_ref_711_index_resize_0] 
          {
            $T [index_resize_req] $T [index_resize_ack] // resize index to address-width
          }
          array_obj_ref_711_index_computed_0 &-> (array_obj_ref_711_index_resize_0)
          array_obj_ref_711_index_resized_0 <-& (array_obj_ref_711_index_resize_0)
          ;;[array_obj_ref_711_index_scale_0] 
          {
            $T [scale_rename_req] $T [scale_rename_ack] // rename 
          }
          array_obj_ref_711_index_resized_0 &-> (array_obj_ref_711_index_scale_0)
          array_obj_ref_711_index_scaled_0 <-& (array_obj_ref_711_index_scale_0)
          ;;[array_obj_ref_711_final_index_sum_regn] 
          {
            $T [req] $T [ack] // rename
          }
          array_obj_ref_711_index_scaled_0 &-> (array_obj_ref_711_final_index_sum_regn)
          array_obj_ref_711_offset_calculated <-& (array_obj_ref_711_final_index_sum_regn)
          ;;[array_obj_ref_711_base_plus_offset] 
          {
            $T [sum_rename_req] $T [sum_rename_ack] // one gets through 
          }
          array_obj_ref_711_offset_calculated &-> (array_obj_ref_711_base_plus_offset)
          array_obj_ref_711_root_address_calculated <-& (array_obj_ref_711_base_plus_offset)
          ;;[array_obj_ref_711_word_addrgen] 
          {
            $T [root_register_req] $T [root_register_ack]
          }
          array_obj_ref_711_root_address_calculated &-> (array_obj_ref_711_word_addrgen)
          array_obj_ref_711_word_address_calculated <-& (array_obj_ref_711_word_addrgen)
          ;;[array_obj_ref_711_Sample] 
          {
            ;;[array_obj_ref_711_Split] 
            {
              $T [split_req] $T [split_ack]
            }
            ||[word_access_start] 
            {
              ;;[word_0] 
              {
                $T [rr] $T [ra] 
              }
            }
          }
          ;;[array_obj_ref_711_Update] 
          {
            ||[word_access_complete] 
            {
              ;;[word_0] 
              {
                $T [cr] $T [ca] 
              }
            }
          }
          array_obj_ref_711_sample_start_ <-& (array_obj_ref_711_word_address_calculated)
          // reenable-joins
          slice_680_update_start_ o<-& (array_obj_ref_711_sample_completed_ 0)
          array_obj_ref_711_sample_start_ &-> (array_obj_ref_711_Sample)
          array_obj_ref_711_sample_completed_ <-& (array_obj_ref_711_Sample)
          array_obj_ref_711_sample_completed_ &-> ($null)
          array_obj_ref_711_update_start_ &-> (array_obj_ref_711_Update)
          array_obj_ref_711_update_completed_ <-& (array_obj_ref_711_Update)
          // Guard dependency for expression array_obj_ref_711 with guard R_aTrue_709
          array_obj_ref_711_sample_start_ <-& (slice_676_update_completed_)
          // RAW reenables for aTrue
          slice_676_update_start_ o<-& (array_obj_ref_711_sample_completed_ 0)
          // self-release: 
          array_obj_ref_711_sample_start_ o<-& (array_obj_ref_711_sample_completed_ 1)
          $null &-> (array_obj_ref_711_update_start_)
          array_obj_ref_711_update_start_ o<-& (array_obj_ref_711_update_completed_ 0)
          // start: Forward dependencies from aval_673_delayed_1_0 to transition array_obj_ref_711_sample_start_
          array_obj_ref_711_sample_start_ <-& (assign_stmt_708_update_completed_)
          // done: Forward dependencies from aval_673_delayed_1_0 to transition array_obj_ref_711_sample_start_
          // RAW reenables for aval_673_delayed_1_0
          assign_stmt_708_update_start_ o<-& (array_obj_ref_711_sample_completed_ 0)
          // end:  			$guard (aTrue) x0[Index] := aval_673_delayed_1_0 $buffering 1// bits of buffering = 32. 
          // start:  			aval_684_delayed_1_0 := aval $buffering 1 $cut_through // bits of buffering = 32. 
          //  file .Aa/mvp.opt.aa, line 266
          $T[assign_stmt_722_sample_start_] 
          $T[assign_stmt_722_sample_completed_] 
          $T[assign_stmt_722_update_start_] 
          $T[assign_stmt_722_update_completed_] 
          // Source expression
          // aval
          // Target expression
          // (as target) aval_684_delayed_1_0
          // both source and target are implicit: use interlock 
          // Interlock 
          ;;[assign_stmt_722_Sample] 
          {
            $T [req] $T [ack] // interlock-sample.
          }
          ;;[assign_stmt_722_Update] 
          {
            $T [req] $T [ack] // interlock-update.
          }
          assign_stmt_722_sample_start_ &-> (assign_stmt_722_Sample)
          assign_stmt_722_sample_completed_ <-& (assign_stmt_722_Sample)
          assign_stmt_722_sample_completed_ &-> ($null)
          assign_stmt_722_update_start_ &-> (assign_stmt_722_Update)
          assign_stmt_722_update_completed_ <-& (assign_stmt_722_Update)
          // start: Forward dependencies from aval to transition assign_stmt_722_sample_start_
          assign_stmt_722_sample_start_ <-& (RPIPE_in_data_672_update_completed_)
          // done: Forward dependencies from aval to transition assign_stmt_722_sample_start_
          // RAW reenables for aval
          RPIPE_in_data_672_update_start_ o<-& (assign_stmt_722_sample_completed_ 0)
          // self-release: 
          assign_stmt_722_sample_start_ o<-& (assign_stmt_722_sample_completed_ 1)
          $null &-> (assign_stmt_722_update_start_)
          assign_stmt_722_update_start_ o<-& (assign_stmt_722_update_completed_ 0)
          // start: WAR dependencies for aval_684_delayed_1_0
          // done: WAR dependencies for aval_684_delayed_1_0
          // end:  			aval_684_delayed_1_0 := aval $buffering 1 $cut_through // bits of buffering = 32. 
          // start:  			$guard (bTrue) x1[Index] := aval_684_delayed_1_0 $buffering 1// bits of buffering = 32. 
          //  file .Aa/mvp.opt.aa, line 267
          // Guard expression 
          // bTrue
          // Source expression
          // aval_684_delayed_1_0
          // Target expression
          // x1[Index]
          $T[array_obj_ref_725_sample_start_] 
          $T[array_obj_ref_725_sample_completed_] 
          $T[array_obj_ref_725_update_start_] 
          $T[array_obj_ref_725_update_completed_] 
          $T[array_obj_ref_725_word_address_calculated] 
          $T[array_obj_ref_725_root_address_calculated] 
          $T[array_obj_ref_725_offset_calculated] 
          $T[array_obj_ref_725_index_resized_0] 
          $T[array_obj_ref_725_index_scaled_0] 
          $T[array_obj_ref_725_index_computed_0] 
          // Index
          // start: Forward dependencies from Index to transition array_obj_ref_725_index_computed_0
          array_obj_ref_725_index_computed_0 <-& (slice_680_update_completed_)
          // done: Forward dependencies from Index to transition array_obj_ref_725_index_computed_0
          ;;[array_obj_ref_725_index_resize_0] 
          {
            $T [index_resize_req] $T [index_resize_ack] // resize index to address-width
          }
          array_obj_ref_725_index_computed_0 &-> (array_obj_ref_725_index_resize_0)
          array_obj_ref_725_index_resized_0 <-& (array_obj_ref_725_index_resize_0)
          ;;[array_obj_ref_725_index_scale_0] 
          {
            $T [scale_rename_req] $T [scale_rename_ack] // rename 
          }
          array_obj_ref_725_index_resized_0 &-> (array_obj_ref_725_index_scale_0)
          array_obj_ref_725_index_scaled_0 <-& (array_obj_ref_725_index_scale_0)
          ;;[array_obj_ref_725_final_index_sum_regn] 
          {
            $T [req] $T [ack] // rename
          }
          array_obj_ref_725_index_scaled_0 &-> (array_obj_ref_725_final_index_sum_regn)
          array_obj_ref_725_offset_calculated <-& (array_obj_ref_725_final_index_sum_regn)
          ;;[array_obj_ref_725_base_plus_offset] 
          {
            $T [sum_rename_req] $T [sum_rename_ack] // one gets through 
          }
          array_obj_ref_725_offset_calculated &-> (array_obj_ref_725_base_plus_offset)
          array_obj_ref_725_root_address_calculated <-& (array_obj_ref_725_base_plus_offset)
          ;;[array_obj_ref_725_word_addrgen] 
          {
            $T [root_register_req] $T [root_register_ack]
          }
          array_obj_ref_725_root_address_calculated &-> (array_obj_ref_725_word_addrgen)
          array_obj_ref_725_word_address_calculated <-& (array_obj_ref_725_word_addrgen)
          ;;[array_obj_ref_725_Sample] 
          {
            ;;[array_obj_ref_725_Split] 
            {
              $T [split_req] $T [split_ack]
            }
            ||[word_access_start] 
            {
              ;;[word_0] 
              {
                $T [rr] $T [ra] 
              }
            }
          }
          ;;[array_obj_ref_725_Update] 
          {
            ||[word_access_complete] 
            {
              ;;[word_0] 
              {
                $T [cr] $T [ca] 
              }
            }
          }
          array_obj_ref_725_sample_start_ <-& (array_obj_ref_725_word_address_calculated)
          // reenable-joins
          slice_680_update_start_ o<-& (array_obj_ref_725_sample_completed_ 0)
          array_obj_ref_725_sample_start_ &-> (array_obj_ref_725_Sample)
          array_obj_ref_725_sample_completed_ <-& (array_obj_ref_725_Sample)
          array_obj_ref_725_sample_completed_ &-> ($null)
          array_obj_ref_725_update_start_ &-> (array_obj_ref_725_Update)
          array_obj_ref_725_update_completed_ <-& (array_obj_ref_725_Update)
          // Guard dependency for expression array_obj_ref_725 with guard R_bTrue_723
          array_obj_ref_725_sample_start_ <-& (slice_676_update_completed_)
          // RAW reenables for bTrue
          slice_676_update_start_ o<-& (array_obj_ref_725_sample_completed_ 0)
          // self-release: 
          array_obj_ref_725_sample_start_ o<-& (array_obj_ref_725_sample_completed_ 1)
          $null &-> (array_obj_ref_725_update_start_)
          array_obj_ref_725_update_start_ o<-& (array_obj_ref_725_update_completed_ 0)
          // start: Forward dependencies from aval_684_delayed_1_0 to transition array_obj_ref_725_sample_start_
          array_obj_ref_725_sample_start_ <-& (assign_stmt_722_update_completed_)
          // done: Forward dependencies from aval_684_delayed_1_0 to transition array_obj_ref_725_sample_start_
          // RAW reenables for aval_684_delayed_1_0
          assign_stmt_722_update_start_ o<-& (array_obj_ref_725_sample_completed_ 0)
          // end:  			$guard (bTrue) x1[Index] := aval_684_delayed_1_0 $buffering 1// bits of buffering = 32. 
          // start:  			aval_695_delayed_1_0 := aval $buffering 1 $cut_through // bits of buffering = 32. 
          //  file .Aa/mvp.opt.aa, line 269
          $T[assign_stmt_736_sample_start_] 
          $T[assign_stmt_736_sample_completed_] 
          $T[assign_stmt_736_update_start_] 
          $T[assign_stmt_736_update_completed_] 
          // Source expression
          // aval
          // Target expression
          // (as target) aval_695_delayed_1_0
          // both source and target are implicit: use interlock 
          // Interlock 
          ;;[assign_stmt_736_Sample] 
          {
            $T [req] $T [ack] // interlock-sample.
          }
          ;;[assign_stmt_736_Update] 
          {
            $T [req] $T [ack] // interlock-update.
          }
          assign_stmt_736_sample_start_ &-> (assign_stmt_736_Sample)
          assign_stmt_736_sample_completed_ <-& (assign_stmt_736_Sample)
          assign_stmt_736_sample_completed_ &-> ($null)
          assign_stmt_736_update_start_ &-> (assign_stmt_736_Update)
          assign_stmt_736_update_completed_ <-& (assign_stmt_736_Update)
          // start: Forward dependencies from aval to transition assign_stmt_736_sample_start_
          assign_stmt_736_sample_start_ <-& (RPIPE_in_data_672_update_completed_)
          // done: Forward dependencies from aval to transition assign_stmt_736_sample_start_
          // RAW reenables for aval
          RPIPE_in_data_672_update_start_ o<-& (assign_stmt_736_sample_completed_ 0)
          // self-release: 
          assign_stmt_736_sample_start_ o<-& (assign_stmt_736_sample_completed_ 1)
          $null &-> (assign_stmt_736_update_start_)
          assign_stmt_736_update_start_ o<-& (assign_stmt_736_update_completed_ 0)
          // start: WAR dependencies for aval_695_delayed_1_0
          // done: WAR dependencies for aval_695_delayed_1_0
          // end:  			aval_695_delayed_1_0 := aval $buffering 1 $cut_through // bits of buffering = 32. 
          // start:  			$guard (cTrue) x2[Index] := aval_695_delayed_1_0 $buffering 1// bits of buffering = 32. 
          //  file .Aa/mvp.opt.aa, line 270
          // Guard expression 
          // cTrue
          // Source expression
          // aval_695_delayed_1_0
          // Target expression
          // x2[Index]
          $T[array_obj_ref_739_sample_start_] 
          $T[array_obj_ref_739_sample_completed_] 
          $T[array_obj_ref_739_update_start_] 
          $T[array_obj_ref_739_update_completed_] 
          $T[array_obj_ref_739_word_address_calculated] 
          $T[array_obj_ref_739_root_address_calculated] 
          $T[array_obj_ref_739_offset_calculated] 
          $T[array_obj_ref_739_index_resized_0] 
          $T[array_obj_ref_739_index_scaled_0] 
          $T[array_obj_ref_739_index_computed_0] 
          // Index
          // start: Forward dependencies from Index to transition array_obj_ref_739_index_computed_0
          array_obj_ref_739_index_computed_0 <-& (slice_680_update_completed_)
          // done: Forward dependencies from Index to transition array_obj_ref_739_index_computed_0
          ;;[array_obj_ref_739_index_resize_0] 
          {
            $T [index_resize_req] $T [index_resize_ack] // resize index to address-width
          }
          array_obj_ref_739_index_computed_0 &-> (array_obj_ref_739_index_resize_0)
          array_obj_ref_739_index_resized_0 <-& (array_obj_ref_739_index_resize_0)
          ;;[array_obj_ref_739_index_scale_0] 
          {
            $T [scale_rename_req] $T [scale_rename_ack] // rename 
          }
          array_obj_ref_739_index_resized_0 &-> (array_obj_ref_739_index_scale_0)
          array_obj_ref_739_index_scaled_0 <-& (array_obj_ref_739_index_scale_0)
          ;;[array_obj_ref_739_final_index_sum_regn] 
          {
            $T [req] $T [ack] // rename
          }
          array_obj_ref_739_index_scaled_0 &-> (array_obj_ref_739_final_index_sum_regn)
          array_obj_ref_739_offset_calculated <-& (array_obj_ref_739_final_index_sum_regn)
          ;;[array_obj_ref_739_base_plus_offset] 
          {
            $T [sum_rename_req] $T [sum_rename_ack] // one gets through 
          }
          array_obj_ref_739_offset_calculated &-> (array_obj_ref_739_base_plus_offset)
          array_obj_ref_739_root_address_calculated <-& (array_obj_ref_739_base_plus_offset)
          ;;[array_obj_ref_739_word_addrgen] 
          {
            $T [root_register_req] $T [root_register_ack]
          }
          array_obj_ref_739_root_address_calculated &-> (array_obj_ref_739_word_addrgen)
          array_obj_ref_739_word_address_calculated <-& (array_obj_ref_739_word_addrgen)
          ;;[array_obj_ref_739_Sample] 
          {
            ;;[array_obj_ref_739_Split] 
            {
              $T [split_req] $T [split_ack]
            }
            ||[word_access_start] 
            {
              ;;[word_0] 
              {
                $T [rr] $T [ra] 
              }
            }
          }
          ;;[array_obj_ref_739_Update] 
          {
            ||[word_access_complete] 
            {
              ;;[word_0] 
              {
                $T [cr] $T [ca] 
              }
            }
          }
          array_obj_ref_739_sample_start_ <-& (array_obj_ref_739_word_address_calculated)
          // reenable-joins
          slice_680_update_start_ o<-& (array_obj_ref_739_sample_completed_ 0)
          array_obj_ref_739_sample_start_ &-> (array_obj_ref_739_Sample)
          array_obj_ref_739_sample_completed_ <-& (array_obj_ref_739_Sample)
          array_obj_ref_739_sample_completed_ &-> ($null)
          array_obj_ref_739_update_start_ &-> (array_obj_ref_739_Update)
          array_obj_ref_739_update_completed_ <-& (array_obj_ref_739_Update)
          // Guard dependency for expression array_obj_ref_739 with guard R_cTrue_737
          array_obj_ref_739_sample_start_ <-& (slice_676_update_completed_)
          // RAW reenables for cTrue
          slice_676_update_start_ o<-& (array_obj_ref_739_sample_completed_ 0)
          // self-release: 
          array_obj_ref_739_sample_start_ o<-& (array_obj_ref_739_sample_completed_ 1)
          $null &-> (array_obj_ref_739_update_start_)
          array_obj_ref_739_update_start_ o<-& (array_obj_ref_739_update_completed_ 0)
          // start: Forward dependencies from aval_695_delayed_1_0 to transition array_obj_ref_739_sample_start_
          array_obj_ref_739_sample_start_ <-& (assign_stmt_736_update_completed_)
          // done: Forward dependencies from aval_695_delayed_1_0 to transition array_obj_ref_739_sample_start_
          // RAW reenables for aval_695_delayed_1_0
          assign_stmt_736_update_start_ o<-& (array_obj_ref_739_sample_completed_ 0)
          // end:  			$guard (cTrue) x2[Index] := aval_695_delayed_1_0 $buffering 1// bits of buffering = 32. 
          // start:  			aval_706_delayed_1_0 := aval $buffering 1 $cut_through // bits of buffering = 32. 
          //  file .Aa/mvp.opt.aa, line 272
          $T[assign_stmt_750_sample_start_] 
          $T[assign_stmt_750_sample_completed_] 
          $T[assign_stmt_750_update_start_] 
          $T[assign_stmt_750_update_completed_] 
          // Source expression
          // aval
          // Target expression
          // (as target) aval_706_delayed_1_0
          // both source and target are implicit: use interlock 
          // Interlock 
          ;;[assign_stmt_750_Sample] 
          {
            $T [req] $T [ack] // interlock-sample.
          }
          ;;[assign_stmt_750_Update] 
          {
            $T [req] $T [ack] // interlock-update.
          }
          assign_stmt_750_sample_start_ &-> (assign_stmt_750_Sample)
          assign_stmt_750_sample_completed_ <-& (assign_stmt_750_Sample)
          assign_stmt_750_sample_completed_ &-> ($null)
          assign_stmt_750_update_start_ &-> (assign_stmt_750_Update)
          assign_stmt_750_update_completed_ <-& (assign_stmt_750_Update)
          // start: Forward dependencies from aval to transition assign_stmt_750_sample_start_
          assign_stmt_750_sample_start_ <-& (RPIPE_in_data_672_update_completed_)
          // done: Forward dependencies from aval to transition assign_stmt_750_sample_start_
          // RAW reenables for aval
          RPIPE_in_data_672_update_start_ o<-& (assign_stmt_750_sample_completed_ 0)
          // self-release: 
          assign_stmt_750_sample_start_ o<-& (assign_stmt_750_sample_completed_ 1)
          $null &-> (assign_stmt_750_update_start_)
          assign_stmt_750_update_start_ o<-& (assign_stmt_750_update_completed_ 0)
          // start: WAR dependencies for aval_706_delayed_1_0
          // done: WAR dependencies for aval_706_delayed_1_0
          // end:  			aval_706_delayed_1_0 := aval $buffering 1 $cut_through // bits of buffering = 32. 
          // start:  			$guard (dTrue) x3[Index] := aval_706_delayed_1_0 $buffering 1// bits of buffering = 32. 
          //  file .Aa/mvp.opt.aa, line 273
          // Guard expression 
          // dTrue
          // Source expression
          // aval_706_delayed_1_0
          // Target expression
          // x3[Index]
          $T[array_obj_ref_753_sample_start_] 
          $T[array_obj_ref_753_sample_completed_] 
          $T[array_obj_ref_753_update_start_] 
          $T[array_obj_ref_753_update_completed_] 
          $T[array_obj_ref_753_word_address_calculated] 
          $T[array_obj_ref_753_root_address_calculated] 
          $T[array_obj_ref_753_offset_calculated] 
          $T[array_obj_ref_753_index_resized_0] 
          $T[array_obj_ref_753_index_scaled_0] 
          $T[array_obj_ref_753_index_computed_0] 
          // Index
          // start: Forward dependencies from Index to transition array_obj_ref_753_index_computed_0
          array_obj_ref_753_index_computed_0 <-& (slice_680_update_completed_)
          // done: Forward dependencies from Index to transition array_obj_ref_753_index_computed_0
          ;;[array_obj_ref_753_index_resize_0] 
          {
            $T [index_resize_req] $T [index_resize_ack] // resize index to address-width
          }
          array_obj_ref_753_index_computed_0 &-> (array_obj_ref_753_index_resize_0)
          array_obj_ref_753_index_resized_0 <-& (array_obj_ref_753_index_resize_0)
          ;;[array_obj_ref_753_index_scale_0] 
          {
            $T [scale_rename_req] $T [scale_rename_ack] // rename 
          }
          array_obj_ref_753_index_resized_0 &-> (array_obj_ref_753_index_scale_0)
          array_obj_ref_753_index_scaled_0 <-& (array_obj_ref_753_index_scale_0)
          ;;[array_obj_ref_753_final_index_sum_regn] 
          {
            $T [req] $T [ack] // rename
          }
          array_obj_ref_753_index_scaled_0 &-> (array_obj_ref_753_final_index_sum_regn)
          array_obj_ref_753_offset_calculated <-& (array_obj_ref_753_final_index_sum_regn)
          ;;[array_obj_ref_753_base_plus_offset] 
          {
            $T [sum_rename_req] $T [sum_rename_ack] // one gets through 
          }
          array_obj_ref_753_offset_calculated &-> (array_obj_ref_753_base_plus_offset)
          array_obj_ref_753_root_address_calculated <-& (array_obj_ref_753_base_plus_offset)
          ;;[array_obj_ref_753_word_addrgen] 
          {
            $T [root_register_req] $T [root_register_ack]
          }
          array_obj_ref_753_root_address_calculated &-> (array_obj_ref_753_word_addrgen)
          array_obj_ref_753_word_address_calculated <-& (array_obj_ref_753_word_addrgen)
          ;;[array_obj_ref_753_Sample] 
          {
            ;;[array_obj_ref_753_Split] 
            {
              $T [split_req] $T [split_ack]
            }
            ||[word_access_start] 
            {
              ;;[word_0] 
              {
                $T [rr] $T [ra] 
              }
            }
          }
          ;;[array_obj_ref_753_Update] 
          {
            ||[word_access_complete] 
            {
              ;;[word_0] 
              {
                $T [cr] $T [ca] 
              }
            }
          }
          array_obj_ref_753_sample_start_ <-& (array_obj_ref_753_word_address_calculated)
          // reenable-joins
          slice_680_update_start_ o<-& (array_obj_ref_753_sample_completed_ 0)
          array_obj_ref_753_sample_start_ &-> (array_obj_ref_753_Sample)
          array_obj_ref_753_sample_completed_ <-& (array_obj_ref_753_Sample)
          array_obj_ref_753_sample_completed_ &-> ($null)
          array_obj_ref_753_update_start_ &-> (array_obj_ref_753_Update)
          array_obj_ref_753_update_completed_ <-& (array_obj_ref_753_Update)
          // Guard dependency for expression array_obj_ref_753 with guard R_dTrue_751
          array_obj_ref_753_sample_start_ <-& (slice_676_update_completed_)
          // RAW reenables for dTrue
          slice_676_update_start_ o<-& (array_obj_ref_753_sample_completed_ 0)
          // self-release: 
          array_obj_ref_753_sample_start_ o<-& (array_obj_ref_753_sample_completed_ 1)
          $null &-> (array_obj_ref_753_update_start_)
          array_obj_ref_753_update_start_ o<-& (array_obj_ref_753_update_completed_ 0)
          // start: Forward dependencies from aval_706_delayed_1_0 to transition array_obj_ref_753_sample_start_
          array_obj_ref_753_sample_start_ <-& (assign_stmt_750_update_completed_)
          // done: Forward dependencies from aval_706_delayed_1_0 to transition array_obj_ref_753_sample_start_
          // RAW reenables for aval_706_delayed_1_0
          assign_stmt_750_update_start_ o<-& (array_obj_ref_753_sample_completed_ 0)
          // end:  			$guard (dTrue) x3[Index] := aval_706_delayed_1_0 $buffering 1// bits of buffering = 32. 
          // start: WAR dependencies for nI
          // WAR dependency: Read: nI before Write: 			$volatile nI := (I + 1 ) $buffering 1
          //  WAR  PHI-PHI dependency ignored...
          // done: WAR dependencies for nI
          // start:  			$volatile nI := (I + 1 ) $buffering 1
          //  file .Aa/mvp.opt.aa, line 275
          // volatile! 
          // Source expression
          // (I + 1 )
          // I
          // Target expression
          // (as target) nI
          // start: WAR dependencies for nI
          // WAR dependency: Read: nI before Write: 			$volatile nI := (I + 1 ) $buffering 1
          //  WAR  PHI-PHI dependency ignored...
          // done: WAR dependencies for nI
          // end:  			$volatile nI := (I + 1 ) $buffering 1
          // (nI < 32 )
          // nI
          $T [loop_body_delay_to_condition_start] $delay
          loop_body_start &-> (loop_body_delay_to_condition_start)
          loop_body_delay_to_condition_start &-> (condition_evaluated)
          // start: Forward dependencies from (nI < 32 ) to transition condition_evaluated
          condition_evaluated <-& (phi_stmt_665_update_completed_)
          // done: Forward dependencies from (nI < 32 ) to transition condition_evaluated
          condition_evaluated &-> ($null)
          // load-store dependencies..
          // memory-space  memory_space_7
          //  array_obj_ref_753 store
          // reenable across ring for memory space memory_space_7
          // leading and trailing sets are the same... no ring dependency
          // memory-space  memory_space_6
          //  array_obj_ref_739 store
          // reenable across ring for memory space memory_space_6
          // leading and trailing sets are the same... no ring dependency
          // memory-space  memory_space_5
          //  array_obj_ref_725 store
          // reenable across ring for memory space memory_space_5
          // leading and trailing sets are the same... no ring dependency
          // memory-space  memory_space_4
          //  array_obj_ref_711 store
          // reenable across ring for memory space memory_space_4
          // leading and trailing sets are the same... no ring dependency
          // pipe read/write dependencies for pipe in_data
          // read-dependencies for pipe in_data
          // write-dependencies for pipe in_data
          // signal write dependencies for in_data
        }
        ( first_time_through_loop_body  back_edge_to_loop_body) 
        ( condition_evaluated )
        ;; [loop_exit] 
        {
          $T [ack] 
        }
        ;; [loop_taken] 
        {
          $T [ack] 
        }
        do_while_stmt_663__entry__ <-| ($entry)
        loop_body_done <-| ( do_while_stmt_663_loop_body ) 
        condition_done |-> (loop_exit loop_taken)
        do_while_stmt_663__exit__ |-> ($exit)
        $bind condition_done <= do_while_stmt_663_loop_body : condition_evaluated
        $bind do_while_stmt_663__entry__  => do_while_stmt_663_loop_body : first_time_through_loop_body 
        $bind loop_back  => do_while_stmt_663_loop_body : back_edge_to_loop_body 
        $terminate (loop_exit loop_taken loop_body_done) (loop_back do_while_stmt_663__exit__)
      }
      do_while_stmt_663__entry__ |-> (do_while_stmt_663)
      do_while_stmt_663__exit__ <-| (do_while_stmt_663)
      do_while_stmt_663__entry__ <-| (branch_block_stmt_662__entry__)
      do_while_stmt_663__exit__ |-> (branch_block_stmt_662__exit__)
    }
  }
  // end control-path
  $DP 
  {
    // begin data-path 
    // constant-object-declarations for block %readVector%loop%
    //  file .Aa/mvp.opt.aa, line 251
    // constant-object-declarations for block %readVector%loop
    //  file .Aa/mvp.opt.aa, line 247
    // constant-object-declarations for block %readVector
    //  file .Aa/mvp.opt.aa, line 242
    // constant-declarations for block %readVector%loop
    //  file .Aa/mvp.opt.aa, line 247
    // do-while statement  
    //  file .Aa/mvp.opt.aa, line 249
    // 32 
    $constant $W[konst_769_wire_constant] : $int<8> := _b00100000// 32
    // constant-declarations for block %readVector%loop%
    //  file .Aa/mvp.opt.aa, line 251
    // constant-declarations for phi:  			$phi I := 			  ($bitcast ($uint<8>) 0  ) $on   $entry 			  nI $on   $loopback 
    // type of target is $uint<8>
    //  file .Aa/mvp.opt.aa, line 252
    // ($bitcast ($uint<8>) 0  )
    $constant $W[type_cast_668_wire_constant] : $int<8> := _b00000000// 0
    // ZERO_2
    $constant $W[R_ZERO_2_688_wire_constant] : $int<2> := _b00// 0
    // ONE_2
    $constant $W[R_ONE_2_693_wire_constant] : $int<2> := _b01// 1
    // TWO_2
    $constant $W[R_TWO_2_698_wire_constant] : $int<2> := _b10// 2
    // THREE_2
    $constant $W[R_THREE_2_703_wire_constant] : $int<2> := _b11// 3
    // x0[Index]
    $constant $W[array_obj_ref_711_resized_base_address] : $int<3> := _b000// 0
    $constant $W[array_obj_ref_711_offset_scale_factor_0] : $int<3> := _b001// 1
    $constant $W[array_obj_ref_711_word_offset_0] : $int<3> := _b000// 0
    // x1[Index]
    $constant $W[array_obj_ref_725_resized_base_address] : $int<3> := _b000// 0
    $constant $W[array_obj_ref_725_offset_scale_factor_0] : $int<3> := _b001// 1
    $constant $W[array_obj_ref_725_word_offset_0] : $int<3> := _b000// 0
    // x2[Index]
    $constant $W[array_obj_ref_739_resized_base_address] : $int<3> := _b000// 0
    $constant $W[array_obj_ref_739_offset_scale_factor_0] : $int<3> := _b001// 1
    $constant $W[array_obj_ref_739_word_offset_0] : $int<3> := _b000// 0
    // x3[Index]
    $constant $W[array_obj_ref_753_resized_base_address] : $int<3> := _b000// 0
    $constant $W[array_obj_ref_753_offset_scale_factor_0] : $int<3> := _b001// 1
    $constant $W[array_obj_ref_753_word_offset_0] : $int<3> := _b000// 0
    // 1 
    $constant $W[konst_764_wire_constant] : $int<8> := _b00000001// 1
    // block %readVector%loop
    //  file .Aa/mvp.opt.aa, line 247
    // do-while statement  
    //  file .Aa/mvp.opt.aa, line 249
    // (nI < 32 )
    $intermediate $W[ULT_u8_u1_770_wire] : $int<1>
    // merge-statement  
    //  file .Aa/mvp.opt.aa, line 251
    // 			$phi I := 			  ($bitcast ($uint<8>) 0  ) $on   $entry 			  nI $on   $loopback 
    // type of target is $uint<8>
    //  file .Aa/mvp.opt.aa, line 252
    $W[nI_766_669_buffered] : $int<8>
    // I
    $W[I_665] : $int<8>
    // 			aval := in_data $buffering 1// bits of buffering = 32. 
    //  file .Aa/mvp.opt.aa, line 255
    // aval
    $W[aval_673] : $int<32>
    // 			i_val := ( $slice I 1 0 )  $buffering 1// bits of buffering = 2. 
    //  file .Aa/mvp.opt.aa, line 256
    // i_val
    $W[i_val_677] : $int<2>
    // 			Index := ( $slice I 7 2 )  $buffering 1// bits of buffering = 6. 
    //  file .Aa/mvp.opt.aa, line 257
    // Index
    $W[Index_681] : $int<6>
    // 			$volatile aTrue := (i_val == ZERO_2) $buffering 1
    //  file .Aa/mvp.opt.aa, line 259
    // aTrue
    $W[aTrue_690] : $int<1>
    // 			$volatile bTrue := (i_val == ONE_2) $buffering 1
    //  file .Aa/mvp.opt.aa, line 260
    // bTrue
    $W[bTrue_695] : $int<1>
    // 			$volatile cTrue := (i_val == TWO_2) $buffering 1
    //  file .Aa/mvp.opt.aa, line 261
    // cTrue
    $W[cTrue_700] : $int<1>
    // 			$volatile dTrue := (i_val == THREE_2) $buffering 1
    //  file .Aa/mvp.opt.aa, line 262
    // dTrue
    $W[dTrue_705] : $int<1>
    // 			aval_673_delayed_1_0 := aval $buffering 1 $cut_through // bits of buffering = 32. 
    //  file .Aa/mvp.opt.aa, line 263
    // aval_673_delayed_1_0
    $W[aval_673_delayed_1_0_708] : $int<32>
    // 			$guard (aTrue) x0[Index] := aval_673_delayed_1_0 $buffering 1// bits of buffering = 32. 
    //  file .Aa/mvp.opt.aa, line 264
    // x0[Index]
    $intermediate $W[R_Index_710_resized] : $int<3>
    $intermediate $W[R_Index_710_scaled] : $int<3>
    $intermediate $W[array_obj_ref_711_final_offset] : $int<3>
    $intermediate $W[array_obj_ref_711_root_address] : $int<3>
    $W[array_obj_ref_711_word_address_0] : $pointer<memory_space_4>
    $W[array_obj_ref_711_data_0] : $int<32>
    // 			aval_684_delayed_1_0 := aval $buffering 1 $cut_through // bits of buffering = 32. 
    //  file .Aa/mvp.opt.aa, line 266
    // aval_684_delayed_1_0
    $W[aval_684_delayed_1_0_722] : $int<32>
    // 			$guard (bTrue) x1[Index] := aval_684_delayed_1_0 $buffering 1// bits of buffering = 32. 
    //  file .Aa/mvp.opt.aa, line 267
    // x1[Index]
    $intermediate $W[R_Index_724_resized] : $int<3>
    $intermediate $W[R_Index_724_scaled] : $int<3>
    $intermediate $W[array_obj_ref_725_final_offset] : $int<3>
    $intermediate $W[array_obj_ref_725_root_address] : $int<3>
    $W[array_obj_ref_725_word_address_0] : $pointer<memory_space_5>
    $W[array_obj_ref_725_data_0] : $int<32>
    // 			aval_695_delayed_1_0 := aval $buffering 1 $cut_through // bits of buffering = 32. 
    //  file .Aa/mvp.opt.aa, line 269
    // aval_695_delayed_1_0
    $W[aval_695_delayed_1_0_736] : $int<32>
    // 			$guard (cTrue) x2[Index] := aval_695_delayed_1_0 $buffering 1// bits of buffering = 32. 
    //  file .Aa/mvp.opt.aa, line 270
    // x2[Index]
    $intermediate $W[R_Index_738_resized] : $int<3>
    $intermediate $W[R_Index_738_scaled] : $int<3>
    $intermediate $W[array_obj_ref_739_final_offset] : $int<3>
    $intermediate $W[array_obj_ref_739_root_address] : $int<3>
    $W[array_obj_ref_739_word_address_0] : $pointer<memory_space_6>
    $W[array_obj_ref_739_data_0] : $int<32>
    // 			aval_706_delayed_1_0 := aval $buffering 1 $cut_through // bits of buffering = 32. 
    //  file .Aa/mvp.opt.aa, line 272
    // aval_706_delayed_1_0
    $W[aval_706_delayed_1_0_750] : $int<32>
    // 			$guard (dTrue) x3[Index] := aval_706_delayed_1_0 $buffering 1// bits of buffering = 32. 
    //  file .Aa/mvp.opt.aa, line 273
    // x3[Index]
    $intermediate $W[R_Index_752_resized] : $int<3>
    $intermediate $W[R_Index_752_scaled] : $int<3>
    $intermediate $W[array_obj_ref_753_final_offset] : $int<3>
    $intermediate $W[array_obj_ref_753_root_address] : $int<3>
    $W[array_obj_ref_753_word_address_0] : $pointer<memory_space_7>
    $W[array_obj_ref_753_data_0] : $int<32>
    // 			$volatile nI := (I + 1 ) $buffering 1
    //  file .Aa/mvp.opt.aa, line 275
    // nI
    $W[nI_766] : $int<8>
    // datapath-instances for block %readVector%loop
    //  file .Aa/mvp.opt.aa, line 247
    // datapath-instances for do-while  
    //  file .Aa/mvp.opt.aa, line 249
    // (nI < 32 )
    <[ULT_u8_u1_770_inst] (nI_766 konst_769_wire_constant) (ULT_u8_u1_770_wire)   $flowthrough 
    $delay ULT_u8_u1_770_inst 0
    ==0? [do_while_stmt_663_branch] (ULT_u8_u1_770_wire)
    $flowthrough
    // data-path instances for merge  
    //  file .Aa/mvp.opt.aa, line 251
    // 			$phi I := 			  ($bitcast ($uint<8>) 0  ) $on   $entry 			  nI $on   $loopback 
    // type of target is $uint<8>
    //  file .Aa/mvp.opt.aa, line 252
    # := [nI_766_669_buf] (nI_766) (nI_766_669_buffered)     $fullrate
    $buffering $out nI_766_669_buf nI_766_669_buffered  1
    # $phi [phi_stmt_665] (type_cast_668_wire_constant nI_766_669_buffered) ( I_665 ) $fullrate
    // $buffering  $out phi_stmt_665 I_665 2
    // 			aval := in_data $buffering 1// bits of buffering = 32. 
    //  file .Aa/mvp.opt.aa, line 255
    // in_data
    $ioport $in [RPIPE_in_data_672_inst] (in_data) (aval_673)  $fullrate 
    $buffering $out RPIPE_in_data_672_inst aval_673 1
    // 			i_val := ( $slice I 1 0 )  $buffering 1// bits of buffering = 2. 
    //  file .Aa/mvp.opt.aa, line 256
    // ( $slice I 1 0 ) 
    [:] [slice_676_inst] (I_665 1 0) (i_val_677)  $fullrate
    $buffering  $out slice_676_inst i_val_677 1
    $delay slice_676_inst 1
    // 			Index := ( $slice I 7 2 )  $buffering 1// bits of buffering = 6. 
    //  file .Aa/mvp.opt.aa, line 257
    // ( $slice I 7 2 ) 
    [:] [slice_680_inst] (I_665 7 2) (Index_681)  $fullrate
    $buffering  $out slice_680_inst Index_681 1
    $delay slice_680_inst 1
    // 			$volatile aTrue := (i_val == ZERO_2) $buffering 1
    //  file .Aa/mvp.opt.aa, line 259
    // (i_val == ZERO_2)
    ==[EQ_u2_u1_689_inst] (i_val_677 R_ZERO_2_688_wire_constant) (aTrue_690)   $flowthrough 
    $delay EQ_u2_u1_689_inst 0
    // 			$volatile bTrue := (i_val == ONE_2) $buffering 1
    //  file .Aa/mvp.opt.aa, line 260
    // (i_val == ONE_2)
    ==[EQ_u2_u1_694_inst] (i_val_677 R_ONE_2_693_wire_constant) (bTrue_695)   $flowthrough 
    $delay EQ_u2_u1_694_inst 0
    // 			$volatile cTrue := (i_val == TWO_2) $buffering 1
    //  file .Aa/mvp.opt.aa, line 261
    // (i_val == TWO_2)
    ==[EQ_u2_u1_699_inst] (i_val_677 R_TWO_2_698_wire_constant) (cTrue_700)   $flowthrough 
    $delay EQ_u2_u1_699_inst 0
    // 			$volatile dTrue := (i_val == THREE_2) $buffering 1
    //  file .Aa/mvp.opt.aa, line 262
    // (i_val == THREE_2)
    ==[EQ_u2_u1_704_inst] (i_val_677 R_THREE_2_703_wire_constant) (dTrue_705)   $flowthrough 
    $delay EQ_u2_u1_704_inst 0
    // 			aval_673_delayed_1_0 := aval $buffering 1 $cut_through // bits of buffering = 32. 
    //  file .Aa/mvp.opt.aa, line 263
    # := [W_aval_673_delayed_1_0_706_inst] (aval_673) (aval_673_delayed_1_0_708)  $cut_through    $fullrate
    // 			$guard (aTrue) x0[Index] := aval_673_delayed_1_0 $buffering 1// bits of buffering = 32. 
    //  file .Aa/mvp.opt.aa, line 264
    // x0[Index]
    &/ [array_obj_ref_711_index_0_resize] (Index_681) (R_Index_710_resized) $guard ( aTrue_690 ) 
    $flowthrough 
    &/ [array_obj_ref_711_index_0_rename] (R_Index_710_resized) (R_Index_710_scaled) $guard ( aTrue_690 ) 
    $flowthrough 
    &/ [array_obj_ref_711_index_offset] (R_Index_710_scaled) (array_obj_ref_711_final_offset) $guard ( aTrue_690 ) 
    $flowthrough 
    &/ [array_obj_ref_711_root_address_inst] (array_obj_ref_711_final_offset) (array_obj_ref_711_root_address) $guard ( aTrue_690 ) 
    $flowthrough 
    &/ [array_obj_ref_711_addr_0] (array_obj_ref_711_root_address) (array_obj_ref_711_word_address_0) $guard ( aTrue_690 ) 
    $flowthrough 
    $store [array_obj_ref_711_store_0] $to memory_space_4 (array_obj_ref_711_word_address_0 array_obj_ref_711_data_0) $guard ( aTrue_690 ) 
    $buffering  $in array_obj_ref_711_store_0 array_obj_ref_711_word_address_0 2
    $buffering  $in array_obj_ref_711_store_0 array_obj_ref_711_data_0 2
    $delay array_obj_ref_711_store_0 4
    &/ [array_obj_ref_711_gather_scatter] (aval_673_delayed_1_0_708) (array_obj_ref_711_data_0) $guard ( aTrue_690 ) 
    $flowthrough 
    // 			aval_684_delayed_1_0 := aval $buffering 1 $cut_through // bits of buffering = 32. 
    //  file .Aa/mvp.opt.aa, line 266
    # := [W_aval_684_delayed_1_0_720_inst] (aval_673) (aval_684_delayed_1_0_722)  $cut_through    $fullrate
    // 			$guard (bTrue) x1[Index] := aval_684_delayed_1_0 $buffering 1// bits of buffering = 32. 
    //  file .Aa/mvp.opt.aa, line 267
    // x1[Index]
    &/ [array_obj_ref_725_index_0_resize] (Index_681) (R_Index_724_resized) $guard ( bTrue_695 ) 
    $flowthrough 
    &/ [array_obj_ref_725_index_0_rename] (R_Index_724_resized) (R_Index_724_scaled) $guard ( bTrue_695 ) 
    $flowthrough 
    &/ [array_obj_ref_725_index_offset] (R_Index_724_scaled) (array_obj_ref_725_final_offset) $guard ( bTrue_695 ) 
    $flowthrough 
    &/ [array_obj_ref_725_root_address_inst] (array_obj_ref_725_final_offset) (array_obj_ref_725_root_address) $guard ( bTrue_695 ) 
    $flowthrough 
    &/ [array_obj_ref_725_addr_0] (array_obj_ref_725_root_address) (array_obj_ref_725_word_address_0) $guard ( bTrue_695 ) 
    $flowthrough 
    $store [array_obj_ref_725_store_0] $to memory_space_5 (array_obj_ref_725_word_address_0 array_obj_ref_725_data_0) $guard ( bTrue_695 ) 
    $buffering  $in array_obj_ref_725_store_0 array_obj_ref_725_word_address_0 2
    $buffering  $in array_obj_ref_725_store_0 array_obj_ref_725_data_0 2
    $delay array_obj_ref_725_store_0 4
    &/ [array_obj_ref_725_gather_scatter] (aval_684_delayed_1_0_722) (array_obj_ref_725_data_0) $guard ( bTrue_695 ) 
    $flowthrough 
    // 			aval_695_delayed_1_0 := aval $buffering 1 $cut_through // bits of buffering = 32. 
    //  file .Aa/mvp.opt.aa, line 269
    # := [W_aval_695_delayed_1_0_734_inst] (aval_673) (aval_695_delayed_1_0_736)  $cut_through    $fullrate
    // 			$guard (cTrue) x2[Index] := aval_695_delayed_1_0 $buffering 1// bits of buffering = 32. 
    //  file .Aa/mvp.opt.aa, line 270
    // x2[Index]
    &/ [array_obj_ref_739_index_0_resize] (Index_681) (R_Index_738_resized) $guard ( cTrue_700 ) 
    $flowthrough 
    &/ [array_obj_ref_739_index_0_rename] (R_Index_738_resized) (R_Index_738_scaled) $guard ( cTrue_700 ) 
    $flowthrough 
    &/ [array_obj_ref_739_index_offset] (R_Index_738_scaled) (array_obj_ref_739_final_offset) $guard ( cTrue_700 ) 
    $flowthrough 
    &/ [array_obj_ref_739_root_address_inst] (array_obj_ref_739_final_offset) (array_obj_ref_739_root_address) $guard ( cTrue_700 ) 
    $flowthrough 
    &/ [array_obj_ref_739_addr_0] (array_obj_ref_739_root_address) (array_obj_ref_739_word_address_0) $guard ( cTrue_700 ) 
    $flowthrough 
    $store [array_obj_ref_739_store_0] $to memory_space_6 (array_obj_ref_739_word_address_0 array_obj_ref_739_data_0) $guard ( cTrue_700 ) 
    $buffering  $in array_obj_ref_739_store_0 array_obj_ref_739_word_address_0 2
    $buffering  $in array_obj_ref_739_store_0 array_obj_ref_739_data_0 2
    $delay array_obj_ref_739_store_0 4
    &/ [array_obj_ref_739_gather_scatter] (aval_695_delayed_1_0_736) (array_obj_ref_739_data_0) $guard ( cTrue_700 ) 
    $flowthrough 
    // 			aval_706_delayed_1_0 := aval $buffering 1 $cut_through // bits of buffering = 32. 
    //  file .Aa/mvp.opt.aa, line 272
    # := [W_aval_706_delayed_1_0_748_inst] (aval_673) (aval_706_delayed_1_0_750)  $cut_through    $fullrate
    // 			$guard (dTrue) x3[Index] := aval_706_delayed_1_0 $buffering 1// bits of buffering = 32. 
    //  file .Aa/mvp.opt.aa, line 273
    // x3[Index]
    &/ [array_obj_ref_753_index_0_resize] (Index_681) (R_Index_752_resized) $guard ( dTrue_705 ) 
    $flowthrough 
    &/ [array_obj_ref_753_index_0_rename] (R_Index_752_resized) (R_Index_752_scaled) $guard ( dTrue_705 ) 
    $flowthrough 
    &/ [array_obj_ref_753_index_offset] (R_Index_752_scaled) (array_obj_ref_753_final_offset) $guard ( dTrue_705 ) 
    $flowthrough 
    &/ [array_obj_ref_753_root_address_inst] (array_obj_ref_753_final_offset) (array_obj_ref_753_root_address) $guard ( dTrue_705 ) 
    $flowthrough 
    &/ [array_obj_ref_753_addr_0] (array_obj_ref_753_root_address) (array_obj_ref_753_word_address_0) $guard ( dTrue_705 ) 
    $flowthrough 
    $store [array_obj_ref_753_store_0] $to memory_space_7 (array_obj_ref_753_word_address_0 array_obj_ref_753_data_0) $guard ( dTrue_705 ) 
    $buffering  $in array_obj_ref_753_store_0 array_obj_ref_753_word_address_0 2
    $buffering  $in array_obj_ref_753_store_0 array_obj_ref_753_data_0 2
    $delay array_obj_ref_753_store_0 4
    &/ [array_obj_ref_753_gather_scatter] (aval_706_delayed_1_0_750) (array_obj_ref_753_data_0) $guard ( dTrue_705 ) 
    $flowthrough 
    // 			$volatile nI := (I + 1 ) $buffering 1
    //  file .Aa/mvp.opt.aa, line 275
    // (I + 1 )
    +[ADD_u8_u8_765_inst] (I_665 konst_764_wire_constant) (nI_766)   $flowthrough 
    $delay ADD_u8_u8_765_inst 0
  }
  // end data-path
  // CP-DP links for do-while  do_while_stmt_663
  //  file .Aa/mvp.opt.aa, line 249
  phi_stmt_665 <=> (branch_block_stmt_662/do_while_stmt_663/do_while_stmt_663_loop_body/phi_stmt_665_entry_sample_req branch_block_stmt_662/do_while_stmt_663/do_while_stmt_663_loop_body/phi_stmt_665_loopback_sample_req) (branch_block_stmt_662/do_while_stmt_663/do_while_stmt_663_loop_body/phi_stmt_665_phi_mux_ack)
  nI_766_669_buf <=> (branch_block_stmt_662/do_while_stmt_663/do_while_stmt_663_loop_body/R_nI_669_Sample/req branch_block_stmt_662/do_while_stmt_663/do_while_stmt_663_loop_body/R_nI_669_Update/req) (branch_block_stmt_662/do_while_stmt_663/do_while_stmt_663_loop_body/R_nI_669_Sample/ack branch_block_stmt_662/do_while_stmt_663/do_while_stmt_663_loop_body/R_nI_669_Update/ack)
  // 			aval := in_data $buffering 1// bits of buffering = 32. 
  //  file .Aa/mvp.opt.aa, line 255
  // in_data
  RPIPE_in_data_672_inst <=> (branch_block_stmt_662/do_while_stmt_663/do_while_stmt_663_loop_body/RPIPE_in_data_672_Sample/rr branch_block_stmt_662/do_while_stmt_663/do_while_stmt_663_loop_body/RPIPE_in_data_672_Update/cr) (branch_block_stmt_662/do_while_stmt_663/do_while_stmt_663_loop_body/RPIPE_in_data_672_Sample/ra branch_block_stmt_662/do_while_stmt_663/do_while_stmt_663_loop_body/RPIPE_in_data_672_Update/ca)
  // 			i_val := ( $slice I 1 0 )  $buffering 1// bits of buffering = 2. 
  //  file .Aa/mvp.opt.aa, line 256
  // I
  // ( $slice I 1 0 ) 
  slice_676_inst <=> (branch_block_stmt_662/do_while_stmt_663/do_while_stmt_663_loop_body/slice_676_Sample/rr branch_block_stmt_662/do_while_stmt_663/do_while_stmt_663_loop_body/slice_676_Update/cr) (branch_block_stmt_662/do_while_stmt_663/do_while_stmt_663_loop_body/slice_676_Sample/ra branch_block_stmt_662/do_while_stmt_663/do_while_stmt_663_loop_body/slice_676_Update/ca)
  // 			Index := ( $slice I 7 2 )  $buffering 1// bits of buffering = 6. 
  //  file .Aa/mvp.opt.aa, line 257
  // I
  // ( $slice I 7 2 ) 
  slice_680_inst <=> (branch_block_stmt_662/do_while_stmt_663/do_while_stmt_663_loop_body/slice_680_Sample/rr branch_block_stmt_662/do_while_stmt_663/do_while_stmt_663_loop_body/slice_680_Update/cr) (branch_block_stmt_662/do_while_stmt_663/do_while_stmt_663_loop_body/slice_680_Sample/ra branch_block_stmt_662/do_while_stmt_663/do_while_stmt_663_loop_body/slice_680_Update/ca)
  // 			$volatile aTrue := (i_val == ZERO_2) $buffering 1
  //  file .Aa/mvp.opt.aa, line 259
  // (i_val == ZERO_2)
  // i_val
  // 			$volatile bTrue := (i_val == ONE_2) $buffering 1
  //  file .Aa/mvp.opt.aa, line 260
  // (i_val == ONE_2)
  // i_val
  // 			$volatile cTrue := (i_val == TWO_2) $buffering 1
  //  file .Aa/mvp.opt.aa, line 261
  // (i_val == TWO_2)
  // i_val
  // 			$volatile dTrue := (i_val == THREE_2) $buffering 1
  //  file .Aa/mvp.opt.aa, line 262
  // (i_val == THREE_2)
  // i_val
  // 			aval_673_delayed_1_0 := aval $buffering 1 $cut_through // bits of buffering = 32. 
  //  file .Aa/mvp.opt.aa, line 263
  // aval
  W_aval_673_delayed_1_0_706_inst <=> (branch_block_stmt_662/do_while_stmt_663/do_while_stmt_663_loop_body/assign_stmt_708_Sample/req branch_block_stmt_662/do_while_stmt_663/do_while_stmt_663_loop_body/assign_stmt_708_Update/req) (branch_block_stmt_662/do_while_stmt_663/do_while_stmt_663_loop_body/assign_stmt_708_Sample/ack branch_block_stmt_662/do_while_stmt_663/do_while_stmt_663_loop_body/assign_stmt_708_Update/ack)
  // 			$guard (aTrue) x0[Index] := aval_673_delayed_1_0 $buffering 1// bits of buffering = 32. 
  //  file .Aa/mvp.opt.aa, line 264
  // aval_673_delayed_1_0
  // Index
  array_obj_ref_711_index_0_resize <=> (branch_block_stmt_662/do_while_stmt_663/do_while_stmt_663_loop_body/array_obj_ref_711_index_resize_0/index_resize_req) (branch_block_stmt_662/do_while_stmt_663/do_while_stmt_663_loop_body/array_obj_ref_711_index_resize_0/index_resize_ack)
  array_obj_ref_711_index_0_rename <=> (branch_block_stmt_662/do_while_stmt_663/do_while_stmt_663_loop_body/array_obj_ref_711_index_scale_0/scale_rename_req) (branch_block_stmt_662/do_while_stmt_663/do_while_stmt_663_loop_body/array_obj_ref_711_index_scale_0/scale_rename_ack)
  array_obj_ref_711_index_offset <=> (branch_block_stmt_662/do_while_stmt_663/do_while_stmt_663_loop_body/array_obj_ref_711_final_index_sum_regn/req) (branch_block_stmt_662/do_while_stmt_663/do_while_stmt_663_loop_body/array_obj_ref_711_final_index_sum_regn/ack)
  array_obj_ref_711_root_address_inst <=> (branch_block_stmt_662/do_while_stmt_663/do_while_stmt_663_loop_body/array_obj_ref_711_base_plus_offset/sum_rename_req) (branch_block_stmt_662/do_while_stmt_663/do_while_stmt_663_loop_body/array_obj_ref_711_base_plus_offset/sum_rename_ack)
  array_obj_ref_711_addr_0 <=> (branch_block_stmt_662/do_while_stmt_663/do_while_stmt_663_loop_body/array_obj_ref_711_word_addrgen/root_register_req) (branch_block_stmt_662/do_while_stmt_663/do_while_stmt_663_loop_body/array_obj_ref_711_word_addrgen/root_register_ack)
  array_obj_ref_711_gather_scatter <=> (branch_block_stmt_662/do_while_stmt_663/do_while_stmt_663_loop_body/array_obj_ref_711_Sample/array_obj_ref_711_Split/split_req) (branch_block_stmt_662/do_while_stmt_663/do_while_stmt_663_loop_body/array_obj_ref_711_Sample/array_obj_ref_711_Split/split_ack)
  array_obj_ref_711_store_0 <=> (branch_block_stmt_662/do_while_stmt_663/do_while_stmt_663_loop_body/array_obj_ref_711_Sample/word_access_start/word_0/rr branch_block_stmt_662/do_while_stmt_663/do_while_stmt_663_loop_body/array_obj_ref_711_Update/word_access_complete/word_0/cr) (branch_block_stmt_662/do_while_stmt_663/do_while_stmt_663_loop_body/array_obj_ref_711_Sample/word_access_start/word_0/ra branch_block_stmt_662/do_while_stmt_663/do_while_stmt_663_loop_body/array_obj_ref_711_Update/word_access_complete/word_0/ca)
  // 			aval_684_delayed_1_0 := aval $buffering 1 $cut_through // bits of buffering = 32. 
  //  file .Aa/mvp.opt.aa, line 266
  // aval
  W_aval_684_delayed_1_0_720_inst <=> (branch_block_stmt_662/do_while_stmt_663/do_while_stmt_663_loop_body/assign_stmt_722_Sample/req branch_block_stmt_662/do_while_stmt_663/do_while_stmt_663_loop_body/assign_stmt_722_Update/req) (branch_block_stmt_662/do_while_stmt_663/do_while_stmt_663_loop_body/assign_stmt_722_Sample/ack branch_block_stmt_662/do_while_stmt_663/do_while_stmt_663_loop_body/assign_stmt_722_Update/ack)
  // 			$guard (bTrue) x1[Index] := aval_684_delayed_1_0 $buffering 1// bits of buffering = 32. 
  //  file .Aa/mvp.opt.aa, line 267
  // aval_684_delayed_1_0
  // Index
  array_obj_ref_725_index_0_resize <=> (branch_block_stmt_662/do_while_stmt_663/do_while_stmt_663_loop_body/array_obj_ref_725_index_resize_0/index_resize_req) (branch_block_stmt_662/do_while_stmt_663/do_while_stmt_663_loop_body/array_obj_ref_725_index_resize_0/index_resize_ack)
  array_obj_ref_725_index_0_rename <=> (branch_block_stmt_662/do_while_stmt_663/do_while_stmt_663_loop_body/array_obj_ref_725_index_scale_0/scale_rename_req) (branch_block_stmt_662/do_while_stmt_663/do_while_stmt_663_loop_body/array_obj_ref_725_index_scale_0/scale_rename_ack)
  array_obj_ref_725_index_offset <=> (branch_block_stmt_662/do_while_stmt_663/do_while_stmt_663_loop_body/array_obj_ref_725_final_index_sum_regn/req) (branch_block_stmt_662/do_while_stmt_663/do_while_stmt_663_loop_body/array_obj_ref_725_final_index_sum_regn/ack)
  array_obj_ref_725_root_address_inst <=> (branch_block_stmt_662/do_while_stmt_663/do_while_stmt_663_loop_body/array_obj_ref_725_base_plus_offset/sum_rename_req) (branch_block_stmt_662/do_while_stmt_663/do_while_stmt_663_loop_body/array_obj_ref_725_base_plus_offset/sum_rename_ack)
  array_obj_ref_725_addr_0 <=> (branch_block_stmt_662/do_while_stmt_663/do_while_stmt_663_loop_body/array_obj_ref_725_word_addrgen/root_register_req) (branch_block_stmt_662/do_while_stmt_663/do_while_stmt_663_loop_body/array_obj_ref_725_word_addrgen/root_register_ack)
  array_obj_ref_725_gather_scatter <=> (branch_block_stmt_662/do_while_stmt_663/do_while_stmt_663_loop_body/array_obj_ref_725_Sample/array_obj_ref_725_Split/split_req) (branch_block_stmt_662/do_while_stmt_663/do_while_stmt_663_loop_body/array_obj_ref_725_Sample/array_obj_ref_725_Split/split_ack)
  array_obj_ref_725_store_0 <=> (branch_block_stmt_662/do_while_stmt_663/do_while_stmt_663_loop_body/array_obj_ref_725_Sample/word_access_start/word_0/rr branch_block_stmt_662/do_while_stmt_663/do_while_stmt_663_loop_body/array_obj_ref_725_Update/word_access_complete/word_0/cr) (branch_block_stmt_662/do_while_stmt_663/do_while_stmt_663_loop_body/array_obj_ref_725_Sample/word_access_start/word_0/ra branch_block_stmt_662/do_while_stmt_663/do_while_stmt_663_loop_body/array_obj_ref_725_Update/word_access_complete/word_0/ca)
  // 			aval_695_delayed_1_0 := aval $buffering 1 $cut_through // bits of buffering = 32. 
  //  file .Aa/mvp.opt.aa, line 269
  // aval
  W_aval_695_delayed_1_0_734_inst <=> (branch_block_stmt_662/do_while_stmt_663/do_while_stmt_663_loop_body/assign_stmt_736_Sample/req branch_block_stmt_662/do_while_stmt_663/do_while_stmt_663_loop_body/assign_stmt_736_Update/req) (branch_block_stmt_662/do_while_stmt_663/do_while_stmt_663_loop_body/assign_stmt_736_Sample/ack branch_block_stmt_662/do_while_stmt_663/do_while_stmt_663_loop_body/assign_stmt_736_Update/ack)
  // 			$guard (cTrue) x2[Index] := aval_695_delayed_1_0 $buffering 1// bits of buffering = 32. 
  //  file .Aa/mvp.opt.aa, line 270
  // aval_695_delayed_1_0
  // Index
  array_obj_ref_739_index_0_resize <=> (branch_block_stmt_662/do_while_stmt_663/do_while_stmt_663_loop_body/array_obj_ref_739_index_resize_0/index_resize_req) (branch_block_stmt_662/do_while_stmt_663/do_while_stmt_663_loop_body/array_obj_ref_739_index_resize_0/index_resize_ack)
  array_obj_ref_739_index_0_rename <=> (branch_block_stmt_662/do_while_stmt_663/do_while_stmt_663_loop_body/array_obj_ref_739_index_scale_0/scale_rename_req) (branch_block_stmt_662/do_while_stmt_663/do_while_stmt_663_loop_body/array_obj_ref_739_index_scale_0/scale_rename_ack)
  array_obj_ref_739_index_offset <=> (branch_block_stmt_662/do_while_stmt_663/do_while_stmt_663_loop_body/array_obj_ref_739_final_index_sum_regn/req) (branch_block_stmt_662/do_while_stmt_663/do_while_stmt_663_loop_body/array_obj_ref_739_final_index_sum_regn/ack)
  array_obj_ref_739_root_address_inst <=> (branch_block_stmt_662/do_while_stmt_663/do_while_stmt_663_loop_body/array_obj_ref_739_base_plus_offset/sum_rename_req) (branch_block_stmt_662/do_while_stmt_663/do_while_stmt_663_loop_body/array_obj_ref_739_base_plus_offset/sum_rename_ack)
  array_obj_ref_739_addr_0 <=> (branch_block_stmt_662/do_while_stmt_663/do_while_stmt_663_loop_body/array_obj_ref_739_word_addrgen/root_register_req) (branch_block_stmt_662/do_while_stmt_663/do_while_stmt_663_loop_body/array_obj_ref_739_word_addrgen/root_register_ack)
  array_obj_ref_739_gather_scatter <=> (branch_block_stmt_662/do_while_stmt_663/do_while_stmt_663_loop_body/array_obj_ref_739_Sample/array_obj_ref_739_Split/split_req) (branch_block_stmt_662/do_while_stmt_663/do_while_stmt_663_loop_body/array_obj_ref_739_Sample/array_obj_ref_739_Split/split_ack)
  array_obj_ref_739_store_0 <=> (branch_block_stmt_662/do_while_stmt_663/do_while_stmt_663_loop_body/array_obj_ref_739_Sample/word_access_start/word_0/rr branch_block_stmt_662/do_while_stmt_663/do_while_stmt_663_loop_body/array_obj_ref_739_Update/word_access_complete/word_0/cr) (branch_block_stmt_662/do_while_stmt_663/do_while_stmt_663_loop_body/array_obj_ref_739_Sample/word_access_start/word_0/ra branch_block_stmt_662/do_while_stmt_663/do_while_stmt_663_loop_body/array_obj_ref_739_Update/word_access_complete/word_0/ca)
  // 			aval_706_delayed_1_0 := aval $buffering 1 $cut_through // bits of buffering = 32. 
  //  file .Aa/mvp.opt.aa, line 272
  // aval
  W_aval_706_delayed_1_0_748_inst <=> (branch_block_stmt_662/do_while_stmt_663/do_while_stmt_663_loop_body/assign_stmt_750_Sample/req branch_block_stmt_662/do_while_stmt_663/do_while_stmt_663_loop_body/assign_stmt_750_Update/req) (branch_block_stmt_662/do_while_stmt_663/do_while_stmt_663_loop_body/assign_stmt_750_Sample/ack branch_block_stmt_662/do_while_stmt_663/do_while_stmt_663_loop_body/assign_stmt_750_Update/ack)
  // 			$guard (dTrue) x3[Index] := aval_706_delayed_1_0 $buffering 1// bits of buffering = 32. 
  //  file .Aa/mvp.opt.aa, line 273
  // aval_706_delayed_1_0
  // Index
  array_obj_ref_753_index_0_resize <=> (branch_block_stmt_662/do_while_stmt_663/do_while_stmt_663_loop_body/array_obj_ref_753_index_resize_0/index_resize_req) (branch_block_stmt_662/do_while_stmt_663/do_while_stmt_663_loop_body/array_obj_ref_753_index_resize_0/index_resize_ack)
  array_obj_ref_753_index_0_rename <=> (branch_block_stmt_662/do_while_stmt_663/do_while_stmt_663_loop_body/array_obj_ref_753_index_scale_0/scale_rename_req) (branch_block_stmt_662/do_while_stmt_663/do_while_stmt_663_loop_body/array_obj_ref_753_index_scale_0/scale_rename_ack)
  array_obj_ref_753_index_offset <=> (branch_block_stmt_662/do_while_stmt_663/do_while_stmt_663_loop_body/array_obj_ref_753_final_index_sum_regn/req) (branch_block_stmt_662/do_while_stmt_663/do_while_stmt_663_loop_body/array_obj_ref_753_final_index_sum_regn/ack)
  array_obj_ref_753_root_address_inst <=> (branch_block_stmt_662/do_while_stmt_663/do_while_stmt_663_loop_body/array_obj_ref_753_base_plus_offset/sum_rename_req) (branch_block_stmt_662/do_while_stmt_663/do_while_stmt_663_loop_body/array_obj_ref_753_base_plus_offset/sum_rename_ack)
  array_obj_ref_753_addr_0 <=> (branch_block_stmt_662/do_while_stmt_663/do_while_stmt_663_loop_body/array_obj_ref_753_word_addrgen/root_register_req) (branch_block_stmt_662/do_while_stmt_663/do_while_stmt_663_loop_body/array_obj_ref_753_word_addrgen/root_register_ack)
  array_obj_ref_753_gather_scatter <=> (branch_block_stmt_662/do_while_stmt_663/do_while_stmt_663_loop_body/array_obj_ref_753_Sample/array_obj_ref_753_Split/split_req) (branch_block_stmt_662/do_while_stmt_663/do_while_stmt_663_loop_body/array_obj_ref_753_Sample/array_obj_ref_753_Split/split_ack)
  array_obj_ref_753_store_0 <=> (branch_block_stmt_662/do_while_stmt_663/do_while_stmt_663_loop_body/array_obj_ref_753_Sample/word_access_start/word_0/rr branch_block_stmt_662/do_while_stmt_663/do_while_stmt_663_loop_body/array_obj_ref_753_Update/word_access_complete/word_0/cr) (branch_block_stmt_662/do_while_stmt_663/do_while_stmt_663_loop_body/array_obj_ref_753_Sample/word_access_start/word_0/ra branch_block_stmt_662/do_while_stmt_663/do_while_stmt_663_loop_body/array_obj_ref_753_Update/word_access_complete/word_0/ca)
  // 			$volatile nI := (I + 1 ) $buffering 1
  //  file .Aa/mvp.opt.aa, line 275
  // (I + 1 )
  // I
  // (nI < 32 )
  // nI
  do_while_stmt_663_branch <=> (branch_block_stmt_662/do_while_stmt_663/do_while_stmt_663_loop_body/condition_evaluated) (branch_block_stmt_662/do_while_stmt_663/loop_exit/ack branch_block_stmt_662/do_while_stmt_663/loop_taken/ack)
}
$module [mvp_daemon] 
{
  // pipe-declarations for block %mvp_daemon
  //  file .Aa/mvp.opt.aa, line 279
  // pipe-declarations for block %mvp_daemon%loop
  //  file .Aa/mvp.opt.aa, line 286
  // pipe-declarations for block %mvp_daemon%loop%
  //  file .Aa/mvp.opt.aa, line 288
  // there are no memory spaces local to this module.
  $CP 
  {
    // begin control-path 
    ::[call_stmt_774] 
    {
      // start: 	$call readMatrix () () 
      //  file .Aa/mvp.opt.aa, line 284
      $T[call_stmt_774_sample_start_] 
      $T[call_stmt_774_sample_completed_] 
      $T[call_stmt_774_update_start_] 
      $T[call_stmt_774_update_completed_] 
      ;;[call_stmt_774_Sample] 
      {
        $T [crr] $T [cra] 
      }
      ;;[call_stmt_774_Update] 
      {
        $T [ccr] $T [cca] 
      }
      call_stmt_774_sample_start_ &-> (call_stmt_774_Sample)
      call_stmt_774_sample_completed_ <-& (call_stmt_774_Sample)
      call_stmt_774_sample_completed_ &-> ($null)
      call_stmt_774_update_start_ &-> (call_stmt_774_Update)
      call_stmt_774_update_completed_ <-& (call_stmt_774_Update)
      // end: 	$call readMatrix () () 
      // load-store dependencies..
      // memory-space  memory_space_3
      //  call_stmt_774 store
      // memory-space  memory_space_2
      //  call_stmt_774 store
      // memory-space  memory_space_1
      //  call_stmt_774 store
      // memory-space  memory_space_0
      //  call_stmt_774 store
      // pipe read/write dependencies for pipe in_data
      // read-dependencies for pipe in_data
      // write-dependencies for pipe in_data
      // signal write dependencies for in_data
    }
    <>[branch_block_stmt_776] // Branch Block  file .Aa/mvp.opt.aa, line 286
    {
      $P [branch_block_stmt_776__entry__]
      branch_block_stmt_776__entry__ <-| ($entry)
      $P [branch_block_stmt_776__exit__]
      branch_block_stmt_776__exit__ |-> ($exit)
      $P [merge_stmt_777__entry__] 
      $P [merge_stmt_777__exit__] 
      $P [call_stmt_778_to_call_stmt_780__entry__] 
      $P [call_stmt_778_to_call_stmt_780__exit__] 
      $P [loopback]
      ::[call_stmt_778_to_call_stmt_780] 
      {
        // start: 		$call readVector () () 
        //  file .Aa/mvp.opt.aa, line 290
        $T[call_stmt_778_sample_start_] 
        $T[call_stmt_778_sample_completed_] 
        $T[call_stmt_778_update_start_] 
        $T[call_stmt_778_update_completed_] 
        ;;[call_stmt_778_Sample] 
        {
          $T [crr] $T [cra] 
        }
        ;;[call_stmt_778_Update] 
        {
          $T [ccr] $T [cca] 
        }
        call_stmt_778_sample_start_ &-> (call_stmt_778_Sample)
        call_stmt_778_sample_completed_ <-& (call_stmt_778_Sample)
        call_stmt_778_sample_completed_ &-> ($null)
        call_stmt_778_update_start_ &-> (call_stmt_778_Update)
        call_stmt_778_update_completed_ <-& (call_stmt_778_Update)
        // end: 		$call readVector () () 
        // start: 		$call multiplyMatrixVector () () 
        //  file .Aa/mvp.opt.aa, line 292
        $T[call_stmt_780_sample_start_] 
        $T[call_stmt_780_sample_completed_] 
        $T[call_stmt_780_update_start_] 
        $T[call_stmt_780_update_completed_] 
        ;;[call_stmt_780_Sample] 
        {
          $T [crr] $T [cra] 
        }
        ;;[call_stmt_780_Update] 
        {
          $T [ccr] $T [cca] 
        }
        call_stmt_780_sample_start_ &-> (call_stmt_780_Sample)
        call_stmt_780_sample_completed_ <-& (call_stmt_780_Sample)
        call_stmt_780_sample_completed_ &-> ($null)
        call_stmt_780_update_start_ &-> (call_stmt_780_Update)
        call_stmt_780_update_completed_ <-& (call_stmt_780_Update)
        // end: 		$call multiplyMatrixVector () () 
        // load-store dependencies..
        // memory-space  memory_space_7
        //  call_stmt_778 store
        //  call_stmt_780 load
        $T [call_stmt_778_call_stmt_780_delay] $delay
        // call_stmt_778(store) -> call_stmt_780(load)
        call_stmt_780_sample_start_ <-& (call_stmt_778_call_stmt_780_delay)
        call_stmt_778_call_stmt_780_delay <-& (call_stmt_778_update_completed_)
        // memory-space  memory_space_6
        //  call_stmt_778 store
        //  call_stmt_780 load
        $T [call_stmt_778_call_stmt_780_delay] $delay
        // call_stmt_778(store) -> call_stmt_780(load)
        call_stmt_780_sample_start_ <-& (call_stmt_778_call_stmt_780_delay)
        call_stmt_778_call_stmt_780_delay <-& (call_stmt_778_update_completed_)
        // memory-space  memory_space_5
        //  call_stmt_778 store
        //  call_stmt_780 load
        $T [call_stmt_778_call_stmt_780_delay] $delay
        // call_stmt_778(store) -> call_stmt_780(load)
        call_stmt_780_sample_start_ <-& (call_stmt_778_call_stmt_780_delay)
        call_stmt_778_call_stmt_780_delay <-& (call_stmt_778_update_completed_)
        // memory-space  memory_space_4
        //  call_stmt_778 store
        //  call_stmt_780 load
        $T [call_stmt_778_call_stmt_780_delay] $delay
        // call_stmt_778(store) -> call_stmt_780(load)
        call_stmt_780_sample_start_ <-& (call_stmt_778_call_stmt_780_delay)
        call_stmt_778_call_stmt_780_delay <-& (call_stmt_778_update_completed_)
        // memory-space  memory_space_3
        //  call_stmt_780 load
        // memory-space  memory_space_2
        //  call_stmt_780 load
        // memory-space  memory_space_1
        //  call_stmt_780 load
        // memory-space  memory_space_0
        //  call_stmt_780 load
        // pipe read/write dependencies for pipe in_data
        // read-dependencies for pipe in_data
        // write-dependencies for pipe in_data
        // signal write dependencies for in_data
        // pipe read/write dependencies for pipe out_data
        // read-dependencies for pipe out_data
        // write-dependencies for pipe out_data
        // signal write dependencies for out_data
      }
      call_stmt_778_to_call_stmt_780__entry__ |-> (call_stmt_778_to_call_stmt_780)
      call_stmt_778_to_call_stmt_780__exit__ <-| (call_stmt_778_to_call_stmt_780)
      // control-path for merge  
      //  file .Aa/mvp.opt.aa, line 288
      ;;[merge_stmt_777_dead_link] 
      {
        $T [dead_transition] $dead 
      }
      merge_stmt_777__entry__ |-> (merge_stmt_777_dead_link)
      merge_stmt_777__exit__ <-| (merge_stmt_777_dead_link)
      //---------------------   merge statement  file .Aa/mvp.opt.aa, line 288  --------------------------
      ||[merge_stmt_777__entry___PhiReq] 
      {
        // no phi statements in merge..
      }
      merge_stmt_777__entry__ |-> (merge_stmt_777__entry___PhiReq)
      ||[loopback_PhiReq] 
      {
        // no phi statements in merge..
      }
      loopback |-> (loopback_PhiReq)
      $P [merge_stmt_777_PhiReqMerge] 
      merge_stmt_777_PhiReqMerge <-| ( merge_stmt_777__entry___PhiReq  loopback_PhiReq )
      ||[merge_stmt_777_PhiAck] 
      {
        $T [dummy] 
      }
      merge_stmt_777_PhiReqMerge |-> (merge_stmt_777_PhiAck)
      merge_stmt_777__exit__  <-| (merge_stmt_777_PhiAck)
      //---------------------  end of merge statement  file .Aa/mvp.opt.aa, line 288  --------------------------
      merge_stmt_777__entry__ <-| (branch_block_stmt_776__entry__)
      call_stmt_778_to_call_stmt_780__entry__ <-| (merge_stmt_777__exit__)
      loopback <-| (call_stmt_778_to_call_stmt_780__exit__)
    }
  }
  // end control-path
  $DP 
  {
    // begin data-path 
    // constant-object-declarations for block %mvp_daemon%loop%
    //  file .Aa/mvp.opt.aa, line 288
    // constant-object-declarations for block %mvp_daemon%loop
    //  file .Aa/mvp.opt.aa, line 286
    // constant-object-declarations for block %mvp_daemon
    //  file .Aa/mvp.opt.aa, line 279
    // 	$call readMatrix () () 
    //  file .Aa/mvp.opt.aa, line 284
    // constant-declarations for block %mvp_daemon%loop
    //  file .Aa/mvp.opt.aa, line 286
    // constant-declarations for block %mvp_daemon%loop%
    //  file .Aa/mvp.opt.aa, line 288
    // 		$call readVector () () 
    //  file .Aa/mvp.opt.aa, line 290
    // 		$call multiplyMatrixVector () () 
    //  file .Aa/mvp.opt.aa, line 292
    // 	$call readMatrix () () 
    //  file .Aa/mvp.opt.aa, line 284
    // block %mvp_daemon%loop
    //  file .Aa/mvp.opt.aa, line 286
    // 		$call readVector () () 
    //  file .Aa/mvp.opt.aa, line 290
    // 		$call multiplyMatrixVector () () 
    //  file .Aa/mvp.opt.aa, line 292
    // 	$call readMatrix () () 
    //  file .Aa/mvp.opt.aa, line 284
    $call [call_stmt_774_call] $module readMatrix() ()  
    $delay call_stmt_774_call 4
    // datapath-instances for block %mvp_daemon%loop
    //  file .Aa/mvp.opt.aa, line 286
    // 		$call readVector () () 
    //  file .Aa/mvp.opt.aa, line 290
    $call [call_stmt_778_call] $module readVector() ()  
    $delay call_stmt_778_call 4
    // 		$call multiplyMatrixVector () () 
    //  file .Aa/mvp.opt.aa, line 292
    $call [call_stmt_780_call] $module multiplyMatrixVector() ()  
    $delay call_stmt_780_call 4
  }
  // end data-path
  // 	$call readMatrix () () 
  //  file .Aa/mvp.opt.aa, line 284
  call_stmt_774_call <=> (call_stmt_774/call_stmt_774_Sample/crr call_stmt_774/call_stmt_774_Update/ccr) (call_stmt_774/call_stmt_774_Sample/cra call_stmt_774/call_stmt_774_Update/cca)
  // CP-DP links for merge  
  //  file .Aa/mvp.opt.aa, line 288
  // 		$call readVector () () 
  //  file .Aa/mvp.opt.aa, line 290
  call_stmt_778_call <=> (branch_block_stmt_776/call_stmt_778_to_call_stmt_780/call_stmt_778_Sample/crr branch_block_stmt_776/call_stmt_778_to_call_stmt_780/call_stmt_778_Update/ccr) (branch_block_stmt_776/call_stmt_778_to_call_stmt_780/call_stmt_778_Sample/cra branch_block_stmt_776/call_stmt_778_to_call_stmt_780/call_stmt_778_Update/cca)
  // 		$call multiplyMatrixVector () () 
  //  file .Aa/mvp.opt.aa, line 292
  call_stmt_780_call <=> (branch_block_stmt_776/call_stmt_778_to_call_stmt_780/call_stmt_780_Sample/crr branch_block_stmt_776/call_stmt_778_to_call_stmt_780/call_stmt_780_Update/ccr) (branch_block_stmt_776/call_stmt_778_to_call_stmt_780/call_stmt_780_Sample/cra branch_block_stmt_776/call_stmt_778_to_call_stmt_780/call_stmt_780_Update/cca)
}

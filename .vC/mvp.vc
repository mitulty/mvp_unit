// Virtual circuit produced from Aa description by Aa2VC 
// $pipe  in_data : $uint<32>  $depth 2 
// can point into 
// in scope  top-level
$pipe [in_data] 32 $depth 2 
// $pipe  out_data : $uint<32>  $depth 2 
// can point into 
// in scope  top-level
$pipe [out_data] 32 $depth 2 
// $pipe  products_pipe : $uint<32>  $depth 32 
// can point into 
// in scope  top-level
$pipe [products_pipe] 32 $depth 32 
// load store constants for object A_MEM
$constant $W[A_MEM_base_address] : $int<8> := _b00000000
// load store constants for object B_MEM
$constant $W[B_MEM_base_address] : $int<8> := _b00000000
// load store constants for object C_MEM
$constant $W[C_MEM_base_address] : $int<8> := _b00000000
// load store constants for object D_MEM
$constant $W[D_MEM_base_address] : $int<8> := _b00000000
// load store constants for object PPSM
$constant $W[PPSM_base_address] : $int<10> := _b0000000000
$memoryspace [memory_space_0] 
{
  $capacity 256
  $datawidth 32
  $addrwidth 8
  $maxaccesswidth 32
  // $storage  A_MEM : $array[8][32] $of $uint<32> // memory space index = 0  base address = 0  word size = 32
  // can point into 
  // in scope  top-level
  $object [A_MEM] : $array[256] $of $int<32>
}
$memoryspace [memory_space_1] 
{
  $capacity 256
  $datawidth 32
  $addrwidth 8
  $maxaccesswidth 32
  // $storage  B_MEM : $array[8][32] $of $uint<32> // memory space index = 1  base address = 0  word size = 32
  // can point into 
  // in scope  top-level
  $object [B_MEM] : $array[256] $of $int<32>
}
$memoryspace [memory_space_2] 
{
  $capacity 256
  $datawidth 32
  $addrwidth 8
  $maxaccesswidth 32
  // $storage  C_MEM : $array[8][32] $of $uint<32> // memory space index = 2  base address = 0  word size = 32
  // can point into 
  // in scope  top-level
  $object [C_MEM] : $array[256] $of $int<32>
}
$memoryspace [memory_space_3] 
{
  $capacity 256
  $datawidth 32
  $addrwidth 8
  $maxaccesswidth 32
  // $storage  D_MEM : $array[8][32] $of $uint<32> // memory space index = 3  base address = 0  word size = 32
  // can point into 
  // in scope  top-level
  $object [D_MEM] : $array[256] $of $int<32>
}
$module [global_storage_initializer_] 
{
  // pipe-declarations for block %global_storage_initializer_
  //  file .Aa/mvp.opt.aa, line 17
  // there are no memory spaces local to this module.
  $CP 
  {
    // begin control-path 
  }
  // end control-path
  $DP 
  {
    // begin data-path 
    // constant-object-declarations for block %global_storage_initializer_
    //  file .Aa/mvp.opt.aa, line 17
  }
  // end data-path
}
$module [mem_init] 
{
  // pipe-declarations for block %mem_init
  //  file .Aa/mvp.opt.aa, line 24
  // pipe-declarations for block %mem_init%initloop
  //  file .Aa/mvp.opt.aa, line 29
  // there are no memory spaces local to this module.
  $CP 
  {
    // begin control-path 
    <>[branch_block_stmt_15] // Branch Block  file .Aa/mvp.opt.aa, line 29
    {
      $P [branch_block_stmt_15__entry__]
      branch_block_stmt_15__entry__ <-| ($entry)
      $P [branch_block_stmt_15__exit__]
      branch_block_stmt_15__exit__ |-> ($exit)
      $P [do_while_stmt_16__entry__] 
      $P [do_while_stmt_16__exit__] 
      // do-while-statement  
      //  file .Aa/mvp.opt.aa, line 31
      <o> [do_while_stmt_16]  $depth 8 $buffering 1 
      {
        $P[do_while_stmt_16__entry__] 
        $P[do_while_stmt_16__exit__] 
        $P[loop_back] 
        $P[condition_done] 
        $P[loop_body_done] 
        $pipeline [do_while_stmt_16_loop_body] 
        {
          // Pipelined!
          $T[back_edge_to_loop_body] 
          $T[first_time_through_loop_body] 
          $T[loop_body_start] 
          $T[condition_evaluated] 
          $transitionmerge [entry_tmerge] (back_edge_to_loop_body first_time_through_loop_body) (loop_body_start)
          $entry <-& (loop_body_start)
          $T[aggregated_phi_sample_req] 
          $T[aggregated_phi_sample_ack] 
          $T[aggregated_phi_update_req] 
          $T[aggregated_phi_update_ack] 
          // do not loop-back unless all phi's have used up their triggering tokens.
          condition_evaluated <-& (aggregated_phi_update_ack)
          aggregated_phi_sample_req o<-& (aggregated_phi_update_ack 0)
          // start:  PHI statement phi_stmt_18
          // 			$phi J := 			  ($bitcast ($uint<8>) 0  ) $on   $entry 			  nJ $on   $loopback 
          // type of target is $uint<8>
          $T[phi_stmt_18_sample_start_] 
          $T[phi_stmt_18_sample_completed_] 
          $T[phi_stmt_18_update_start_] 
          $T[phi_stmt_18_update_completed_] 
          $T[phi_stmt_18_sample_start__ps] 
          phi_stmt_18_sample_start__ps <-& (aggregated_phi_sample_req)
          $T[phi_stmt_18_sample_completed__ps] 
          phi_stmt_18_sample_completed__ps &-> (aggregated_phi_sample_ack)
          $T[phi_stmt_18_update_start__ps] 
          phi_stmt_18_update_start__ps <-& (aggregated_phi_update_req)
          $T[phi_stmt_18_update_completed__ps] 
          phi_stmt_18_update_completed_ <-& (phi_stmt_18_update_completed__ps)
          aggregated_phi_sample_req <-& (phi_stmt_18_sample_start_)
          aggregated_phi_sample_ack &-> (phi_stmt_18_sample_completed_)
          aggregated_phi_update_req <-& (phi_stmt_18_update_start_)
          $T[phi_stmt_18_loopback_trigger] 
          phi_stmt_18_loopback_trigger <-& (back_edge_to_loop_body)
          $T[phi_stmt_18_loopback_sample_req] 
          $T[phi_stmt_18_loopback_sample_req_ps] 
          phi_stmt_18_loopback_sample_req <-& (phi_stmt_18_loopback_sample_req_ps)
          phi_stmt_18_loopback_sample_req &-> ($null)
          $T[phi_stmt_18_entry_trigger] 
          phi_stmt_18_entry_trigger <-& (first_time_through_loop_body)
          $T[phi_stmt_18_entry_sample_req] 
          $T[phi_stmt_18_entry_sample_req_ps] 
          phi_stmt_18_entry_sample_req <-& (phi_stmt_18_entry_sample_req_ps)
          phi_stmt_18_entry_sample_req &-> ($null)
          phi_stmt_18_update_start_ o<-& (phi_stmt_18_update_completed_ 0)
          phi_stmt_18_sample_start_ o<-& (phi_stmt_18_sample_completed_ 1)
          $T[phi_stmt_18_merged_reqs] 
          $T[phi_stmt_18_phi_mux_ack] 
          $T[phi_stmt_18_phi_mux_ack_ps] 
          phi_stmt_18_phi_mux_ack_ps <-& (phi_stmt_18_phi_mux_ack)
          aggregated_phi_update_ack <-& (phi_stmt_18_update_completed_)
          $T[type_cast_22_sample_start__ps] 
          $T[type_cast_22_sample_completed__ps] 
          $T[type_cast_22_update_start__ps] 
          $T[type_cast_22_update_completed__ps] 
          // dummies for constant expression source for phi
          $T[type_cast_22_sample_start_] 
          $T[type_cast_22_sample_completed_] 
          type_cast_22_sample_completed_ <-& (type_cast_22_sample_start_)
          $T[type_cast_22_update_start_] 
          $T [type_cast_22_update_completed_] $delay 
          type_cast_22_update_completed_ <-& (type_cast_22_update_start_)
          // Phi start dependency for implicit/constant alternative.
          type_cast_22_sample_start_ <-& (type_cast_22_sample_start__ps)
          type_cast_22_update_start_ <-& (type_cast_22_update_start__ps)
          // Phi complete dependency.
          type_cast_22_sample_completed__ps <-& (type_cast_22_sample_completed_)
          type_cast_22_update_completed__ps <-& (type_cast_22_update_completed_)
          $T[R_nJ_23_sample_start__ps] 
          $T[R_nJ_23_sample_completed__ps] 
          $T[R_nJ_23_update_start__ps] 
          $T[R_nJ_23_update_completed__ps] 
          // interlock for implicit-variable-ref/signal-read in Phi alternative 1
          $T[R_nJ_23_sample_start_] 
          $T[R_nJ_23_sample_completed_] 
          $T[R_nJ_23_update_start_] 
          $T[R_nJ_23_update_completed_] 
          ;;[R_nJ_23_Sample] 
          {
            $T [req] $T [ack] // interlock-sample.
          }
          R_nJ_23_sample_start_ &-> (R_nJ_23_Sample)
          R_nJ_23_sample_completed_ <-& (R_nJ_23_Sample)
          ;;[R_nJ_23_Update] 
          {
            $T [req] $T [ack] // interlock-update.
          }
          R_nJ_23_update_start_ &-> (R_nJ_23_Update)
          R_nJ_23_update_completed_ <-& (R_nJ_23_Update)
          // RAW reenables for nJ
          // Phi start dependency for implicit/constant alternative.
          R_nJ_23_sample_start_ <-& (R_nJ_23_sample_start__ps)
          R_nJ_23_update_start_ <-& (R_nJ_23_update_start__ps)
          // Phi complete dependency.
          R_nJ_23_sample_completed__ps <-& (R_nJ_23_sample_completed_)
          R_nJ_23_update_completed__ps <-& (R_nJ_23_update_completed_)
          $phisequencer [ phi_stmt_18_phi_seq] : 
          phi_stmt_18_entry_trigger type_cast_22_sample_start__ps type_cast_22_sample_completed__ps type_cast_22_update_start__ps type_cast_22_update_completed__ps phi_stmt_18_loopback_trigger R_nJ_23_sample_start__ps R_nJ_23_sample_completed__ps R_nJ_23_update_start__ps R_nJ_23_update_completed__ps :
          phi_stmt_18_sample_start__ps phi_stmt_18_sample_completed__ps phi_stmt_18_update_start__ps phi_stmt_18_update_completed__ps :
          phi_stmt_18_entry_sample_req_ps phi_stmt_18_loopback_sample_req_ps : 
          phi_stmt_18_phi_mux_ack_ps
          // done: PHI Statement phi_stmt_18
          // start:  			products_pipe := 0  $buffering 1// bits of buffering = 32. 
          //  file .Aa/mvp.opt.aa, line 37
          // Target expression
          // (as target) products_pipe
          $T[WPIPE_products_pipe_25_sample_start_] 
          $T[WPIPE_products_pipe_25_sample_completed_] 
          $T[WPIPE_products_pipe_25_update_start_] 
          $T[WPIPE_products_pipe_25_update_completed_] 
          ;;[WPIPE_products_pipe_25_Sample] 
          {
            // pipe write sample-start products_pipe
            $T [req] $T [ack] 
          }
          ;;[WPIPE_products_pipe_25_Update] 
          {
            // pipe write update (complete) products_pipe
            $T [req] $T [ack] 
          }
          WPIPE_products_pipe_25_sample_start_ &-> (WPIPE_products_pipe_25_Sample)
          WPIPE_products_pipe_25_sample_completed_ <-& (WPIPE_products_pipe_25_Sample)
          WPIPE_products_pipe_25_update_start_ <-& (WPIPE_products_pipe_25_sample_completed_)
          WPIPE_products_pipe_25_update_start_ &-> (WPIPE_products_pipe_25_Update)
          WPIPE_products_pipe_25_update_completed_ <-& (WPIPE_products_pipe_25_Update)
          WPIPE_products_pipe_25_sample_start_ o<-& (WPIPE_products_pipe_25_update_completed_ 0)
          // end:  			products_pipe := 0  $buffering 1// bits of buffering = 32. 
          // start:  			nJ := (J + 1 ) $buffering 1// bits of buffering = 8. 
          //  file .Aa/mvp.opt.aa, line 39
          // Source expression
          // (J + 1 )
          $T[ADD_u8_u8_33_sample_start_] 
          $T[ADD_u8_u8_33_sample_completed_] 
          $T[ADD_u8_u8_33_update_start_] 
          $T[ADD_u8_u8_33_update_completed_] 
          // J
          // start: Forward dependencies from J to transition ADD_u8_u8_33_sample_start_
          ADD_u8_u8_33_sample_start_ <-& (phi_stmt_18_update_completed_)
          // done: Forward dependencies from J to transition ADD_u8_u8_33_sample_start_
          ;;[ADD_u8_u8_33_Sample] 
          {
            // binary expression 
            $T [rr] $T [ra]  // (split) binary operation 
          }
          ;;[ADD_u8_u8_33_Update] 
          {
            // binary expression 
            $T [cr] $T [ca] // (split) binary operation 
          }
          ADD_u8_u8_33_sample_start_ &-> (ADD_u8_u8_33_Sample)
          ADD_u8_u8_33_sample_completed_ <-& (ADD_u8_u8_33_Sample)
          ADD_u8_u8_33_sample_completed_ &-> ($null)
          ADD_u8_u8_33_update_start_ &-> (ADD_u8_u8_33_Update)
          ADD_u8_u8_33_update_completed_ <-& (ADD_u8_u8_33_Update)
          // RAW reenables for J
          phi_stmt_18_update_start_ o<-& (ADD_u8_u8_33_sample_completed_ 0)
          // self-release: 
          ADD_u8_u8_33_sample_start_ o<-& (ADD_u8_u8_33_sample_completed_ 1)
          $null &-> (ADD_u8_u8_33_update_start_)
          ADD_u8_u8_33_update_start_ o<-& (ADD_u8_u8_33_update_completed_ 0)
          // Target expression
          // (as target) nJ
          // start: WAR dependencies for nJ
          // WAR dependency: Read: nJ before Write: 			nJ := (J + 1 ) $buffering 1// bits of buffering = 8. 
          ADD_u8_u8_33_update_start_ <-& (phi_stmt_18_sample_completed_)
          phi_stmt_18_sample_start_ o<-& (ADD_u8_u8_33_update_completed_ 0)
          // WAR dependency: release  Read: nJ with Write: 			nJ := (J + 1 ) $buffering 1// bits of buffering = 8. 
          // done: WAR dependencies for nJ
          // end:  			nJ := (J + 1 ) $buffering 2// bits of buffering = 16. 
          // (nJ < 32 )
          // nJ
          $T [loop_body_delay_to_condition_start] $delay
          loop_body_start &-> (loop_body_delay_to_condition_start)
          loop_body_delay_to_condition_start &-> (condition_evaluated)
          // start: Forward dependencies from (nJ < 32 ) to transition condition_evaluated
          condition_evaluated <-& (ADD_u8_u8_33_update_completed_)
          // done: Forward dependencies from (nJ < 32 ) to transition condition_evaluated
          condition_evaluated &-> ($null)
          // load-store dependencies..
          // pipe read/write dependencies for pipe products_pipe
          // read-dependencies for pipe products_pipe
          // write-dependencies for pipe products_pipe
          // signal write dependencies for products_pipe
        }
        ( first_time_through_loop_body  back_edge_to_loop_body) 
        ( condition_evaluated )
        ;; [loop_exit] 
        {
          $T [ack] 
        }
        ;; [loop_taken] 
        {
          $T [ack] 
        }
        do_while_stmt_16__entry__ <-| ($entry)
        loop_body_done <-| ( do_while_stmt_16_loop_body ) 
        condition_done |-> (loop_exit loop_taken)
        do_while_stmt_16__exit__ |-> ($exit)
        $bind condition_done <= do_while_stmt_16_loop_body : condition_evaluated
        $bind do_while_stmt_16__entry__  => do_while_stmt_16_loop_body : first_time_through_loop_body 
        $bind loop_back  => do_while_stmt_16_loop_body : back_edge_to_loop_body 
        $terminate (loop_exit loop_taken loop_body_done) (loop_back do_while_stmt_16__exit__)
      }
      do_while_stmt_16__entry__ |-> (do_while_stmt_16)
      do_while_stmt_16__exit__ <-| (do_while_stmt_16)
      do_while_stmt_16__entry__ <-| (branch_block_stmt_15__entry__)
      do_while_stmt_16__exit__ |-> (branch_block_stmt_15__exit__)
    }
  }
  // end control-path
  $DP 
  {
    // begin data-path 
    // constant-object-declarations for block %mem_init%initloop%
    //  file .Aa/mvp.opt.aa, line 33
    // constant-object-declarations for block %mem_init%initloop
    //  file .Aa/mvp.opt.aa, line 29
    // constant-object-declarations for block %mem_init
    //  file .Aa/mvp.opt.aa, line 24
    // constant-declarations for block %mem_init%initloop
    //  file .Aa/mvp.opt.aa, line 29
    // do-while statement  
    //  file .Aa/mvp.opt.aa, line 31
    // 32 
    $constant $W[konst_37_wire_constant] : $int<8> := _b00100000// 32
    // constant-declarations for block %mem_init%initloop%
    //  file .Aa/mvp.opt.aa, line 33
    // constant-declarations for phi:  			$phi J := 			  ($bitcast ($uint<8>) 0  ) $on   $entry 			  nJ $on   $loopback 
    // type of target is $uint<8>
    //  file .Aa/mvp.opt.aa, line 34
    // ($bitcast ($uint<8>) 0  )
    $constant $W[type_cast_22_wire_constant] : $int<8> := _b00000000// 0
    // 0 
    $constant $W[konst_26_wire_constant] : $int<32> := _b00000000000000000000000000000000// 0
    // 1 
    $constant $W[konst_32_wire_constant] : $int<8> := _b00000001// 1
    // block %mem_init%initloop
    //  file .Aa/mvp.opt.aa, line 29
    // do-while statement  
    //  file .Aa/mvp.opt.aa, line 31
    // (nJ < 32 )
    $intermediate $W[ULT_u8_u1_38_wire] : $int<1>
    // merge-statement  
    //  file .Aa/mvp.opt.aa, line 33
    // 			$phi J := 			  ($bitcast ($uint<8>) 0  ) $on   $entry 			  nJ $on   $loopback 
    // type of target is $uint<8>
    //  file .Aa/mvp.opt.aa, line 34
    $W[nJ_34_23_buffered] : $int<8>
    // J
    $W[J_18] : $int<8>
    // 			products_pipe := 0  $buffering 1// bits of buffering = 32. 
    //  file .Aa/mvp.opt.aa, line 37
    // products_pipe
    // 			nJ := (J + 1 ) $buffering 2// bits of buffering = 16. 
    //  file .Aa/mvp.opt.aa, line 39
    // nJ
    $W[nJ_34] : $int<8>
    // datapath-instances for block %mem_init%initloop
    //  file .Aa/mvp.opt.aa, line 29
    // datapath-instances for do-while  
    //  file .Aa/mvp.opt.aa, line 31
    // (nJ < 32 )
    <[ULT_u8_u1_38_inst] (nJ_34 konst_37_wire_constant) (ULT_u8_u1_38_wire)   $flowthrough 
    $delay ULT_u8_u1_38_inst 0
    ==0? [do_while_stmt_16_branch] (ULT_u8_u1_38_wire)
    $flowthrough
    // data-path instances for merge  
    //  file .Aa/mvp.opt.aa, line 33
    // 			$phi J := 			  ($bitcast ($uint<8>) 0  ) $on   $entry 			  nJ $on   $loopback 
    // type of target is $uint<8>
    //  file .Aa/mvp.opt.aa, line 34
    # := [nJ_34_23_buf] (nJ_34) (nJ_34_23_buffered)     $fullrate
    $buffering $out nJ_34_23_buf nJ_34_23_buffered  1
    # $phi [phi_stmt_18] (type_cast_22_wire_constant nJ_34_23_buffered) ( J_18 ) $fullrate
    // $buffering  $out phi_stmt_18 J_18 2
    // 			products_pipe := 0  $buffering 1// bits of buffering = 32. 
    //  file .Aa/mvp.opt.aa, line 37
    // products_pipe
    $ioport $out [WPIPE_products_pipe_25_inst]  (konst_26_wire_constant) (products_pipe)  $fullrate 
    // 			nJ := (J + 1 ) $buffering 2// bits of buffering = 16. 
    //  file .Aa/mvp.opt.aa, line 39
    // (J + 1 )
    +[ADD_u8_u8_33_inst] (J_18 konst_32_wire_constant) (nJ_34)    $fullrate
    $buffering  $out ADD_u8_u8_33_inst nJ_34 2
    $delay ADD_u8_u8_33_inst 1
  }
  // end data-path
  // CP-DP links for do-while  do_while_stmt_16
  //  file .Aa/mvp.opt.aa, line 31
  phi_stmt_18 <=> (branch_block_stmt_15/do_while_stmt_16/do_while_stmt_16_loop_body/phi_stmt_18_entry_sample_req branch_block_stmt_15/do_while_stmt_16/do_while_stmt_16_loop_body/phi_stmt_18_loopback_sample_req) (branch_block_stmt_15/do_while_stmt_16/do_while_stmt_16_loop_body/phi_stmt_18_phi_mux_ack)
  nJ_34_23_buf <=> (branch_block_stmt_15/do_while_stmt_16/do_while_stmt_16_loop_body/R_nJ_23_Sample/req branch_block_stmt_15/do_while_stmt_16/do_while_stmt_16_loop_body/R_nJ_23_Update/req) (branch_block_stmt_15/do_while_stmt_16/do_while_stmt_16_loop_body/R_nJ_23_Sample/ack branch_block_stmt_15/do_while_stmt_16/do_while_stmt_16_loop_body/R_nJ_23_Update/ack)
  // 			products_pipe := 0  $buffering 1// bits of buffering = 32. 
  //  file .Aa/mvp.opt.aa, line 37
  // products_pipe
  WPIPE_products_pipe_25_inst <=> (branch_block_stmt_15/do_while_stmt_16/do_while_stmt_16_loop_body/WPIPE_products_pipe_25_Sample/req branch_block_stmt_15/do_while_stmt_16/do_while_stmt_16_loop_body/WPIPE_products_pipe_25_Update/req) (branch_block_stmt_15/do_while_stmt_16/do_while_stmt_16_loop_body/WPIPE_products_pipe_25_Sample/ack branch_block_stmt_15/do_while_stmt_16/do_while_stmt_16_loop_body/WPIPE_products_pipe_25_Update/ack)
  // 			nJ := (J + 1 ) $buffering 2// bits of buffering = 16. 
  //  file .Aa/mvp.opt.aa, line 39
  // (J + 1 )
  // J
  ADD_u8_u8_33_inst <=> (branch_block_stmt_15/do_while_stmt_16/do_while_stmt_16_loop_body/ADD_u8_u8_33_Sample/rr branch_block_stmt_15/do_while_stmt_16/do_while_stmt_16_loop_body/ADD_u8_u8_33_Update/cr) (branch_block_stmt_15/do_while_stmt_16/do_while_stmt_16_loop_body/ADD_u8_u8_33_Sample/ra branch_block_stmt_15/do_while_stmt_16/do_while_stmt_16_loop_body/ADD_u8_u8_33_Update/ca)
  // (nJ < 32 )
  // nJ
  do_while_stmt_16_branch <=> (branch_block_stmt_15/do_while_stmt_16/do_while_stmt_16_loop_body/condition_evaluated) (branch_block_stmt_15/do_while_stmt_16/loop_exit/ack branch_block_stmt_15/do_while_stmt_16/loop_taken/ack)
}
$module [readMatrix] 
{
  // pipe-declarations for block %readMatrix
  //  file .Aa/mvp.opt.aa, line 43
  // pipe-declarations for block %readMatrix%mRead
  //  file .Aa/mvp.opt.aa, line 48
  // pipe-declarations for block %readMatrix%mRead%
  //  file .Aa/mvp.opt.aa, line 50
  // pipe-declarations for block %readMatrix%mRead%cRead
  //  file .Aa/mvp.opt.aa, line 74
  // memory-space 1 is written into.
  // memory-space 2 is written into.
  // memory-space 3 is written into.
  // memory-space 0 is written into.
  // there are no memory spaces local to this module.
  $CP 
  {
    // begin control-path 
    <>[branch_block_stmt_43] // Branch Block  file .Aa/mvp.opt.aa, line 48
    {
      $P [branch_block_stmt_43__entry__]
      branch_block_stmt_43__entry__ <-| ($entry)
      $P [branch_block_stmt_43__exit__]
      branch_block_stmt_43__exit__ |-> ($exit)
      $P [merge_stmt_44__entry__] 
      $P [merge_stmt_44__exit__] 
      $P [assign_stmt_81_to_assign_stmt_159__entry__] 
      $P [assign_stmt_81_to_assign_stmt_159__exit__] 
      $P [branch_block_stmt_160__entry__] 
      $P [branch_block_stmt_160__exit__] 
      $P [if_stmt_206__entry__] 
      $P [if_stmt_206__exit__] 
      ::[assign_stmt_81_to_assign_stmt_159] 
      {
        // start:  		nI := (I + 1 ) $buffering 1// bits of buffering = 8. 
        //  file .Aa/mvp.opt.aa, line 64
        // Source expression
        // (I + 1 )
        $T[ADD_u8_u8_80_sample_start_] 
        $T[ADD_u8_u8_80_sample_completed_] 
        $T[ADD_u8_u8_80_update_start_] 
        $T[ADD_u8_u8_80_update_completed_] 
        // I
        // start: Forward dependencies from I to transition ADD_u8_u8_80_sample_start_
        // done: Forward dependencies from I to transition ADD_u8_u8_80_sample_start_
        ;;[ADD_u8_u8_80_Sample] 
        {
          // binary expression 
          $T [rr] $T [ra]  // (split) binary operation 
        }
        ;;[ADD_u8_u8_80_Update] 
        {
          // binary expression 
          $T [cr] $T [ca] // (split) binary operation 
        }
        ADD_u8_u8_80_sample_start_ &-> (ADD_u8_u8_80_Sample)
        ADD_u8_u8_80_sample_completed_ <-& (ADD_u8_u8_80_Sample)
        ADD_u8_u8_80_sample_completed_ &-> ($null)
        ADD_u8_u8_80_update_start_ &-> (ADD_u8_u8_80_Update)
        ADD_u8_u8_80_update_completed_ <-& (ADD_u8_u8_80_Update)
        // Target expression
        // (as target) nI
        // start: WAR dependencies for nI
        // done: WAR dependencies for nI
        // end:  		nI := (I + 1 ) $buffering 1// bits of buffering = 8. 
        // start: WAR dependencies for next_active_memory
        // ignored out-of-scope w_root 			$phi active_mem := 			  ($bitcast ($uint<2>) 0  ) $on   $entry 			  next_active_memory $on   outer_loopback 
        // type of target is $uint<2>
        // done: WAR dependencies for next_active_memory
        // start:  		$volatile next_active_memory := ( $mux (active_mem == 0 ) 1   ( $mux (active_mem == 1 ) 2   ( $mux (active_mem == 2 ) 3   0  )  )  )  $buffering 1
        //  file .Aa/mvp.opt.aa, line 65
        // volatile! 
        // Source expression
        // ( $mux (active_mem == 0 ) 1   ( $mux (active_mem == 1 ) 2   ( $mux (active_mem == 2 ) 3   0  )  )  ) 
        // (active_mem == 0 )
        // active_mem
        // ( $mux (active_mem == 1 ) 2   ( $mux (active_mem == 2 ) 3   0  )  ) 
        // (active_mem == 1 )
        // active_mem
        // ( $mux (active_mem == 2 ) 3   0  ) 
        // (active_mem == 2 )
        // active_mem
        // Target expression
        // (as target) next_active_memory
        // start: WAR dependencies for next_active_memory
        // ignored out-of-scope w_root 			$phi active_mem := 			  ($bitcast ($uint<2>) 0  ) $on   $entry 			  next_active_memory $on   outer_loopback 
        // type of target is $uint<2>
        // done: WAR dependencies for next_active_memory
        // end:  		$volatile next_active_memory := ( $mux (active_mem == 0 ) 1   ( $mux (active_mem == 1 ) 2   ( $mux (active_mem == 2 ) 3   0  )  )  )  $buffering 1
        // start: WAR dependencies for nia
        // ignored out-of-scope w_root 			$phi active_mem := 			  ($bitcast ($uint<2>) 0  ) $on   $entry 			  next_active_memory $on   outer_loopback 
        // type of target is $uint<2>
        // ignored out-of-scope w_root 			$phi ia := 			  ($bitcast ($uint<8>) 0  ) $on   $entry 			  nia $on   outer_loopback 
        // type of target is $uint<8>
        // done: WAR dependencies for nia
        // start:  		$volatile nia := ( $mux (active_mem == 0 ) (ia + 1 )  ia )  $buffering 1
        //  file .Aa/mvp.opt.aa, line 66
        // volatile! 
        // Source expression
        // ( $mux (active_mem == 0 ) (ia + 1 )  ia ) 
        // (active_mem == 0 )
        // active_mem
        // (ia + 1 )
        // ia
        // ia
        // Target expression
        // (as target) nia
        // start: WAR dependencies for nia
        // ignored out-of-scope w_root 			$phi active_mem := 			  ($bitcast ($uint<2>) 0  ) $on   $entry 			  next_active_memory $on   outer_loopback 
        // type of target is $uint<2>
        // ignored out-of-scope w_root 			$phi ia := 			  ($bitcast ($uint<8>) 0  ) $on   $entry 			  nia $on   outer_loopback 
        // type of target is $uint<8>
        // done: WAR dependencies for nia
        // end:  		$volatile nia := ( $mux (active_mem == 0 ) (ia + 1 )  ia )  $buffering 1
        // start: WAR dependencies for nib
        // ignored out-of-scope w_root 			$phi active_mem := 			  ($bitcast ($uint<2>) 0  ) $on   $entry 			  next_active_memory $on   outer_loopback 
        // type of target is $uint<2>
        // ignored out-of-scope w_root 			$phi ib := 			  ($bitcast ($uint<8>) 0  ) $on   $entry 			  nib $on   outer_loopback 
        // type of target is $uint<8>
        // done: WAR dependencies for nib
        // start:  		$volatile nib := ( $mux (active_mem == 1 ) (ib + 1 )  ib )  $buffering 1
        //  file .Aa/mvp.opt.aa, line 67
        // volatile! 
        // Source expression
        // ( $mux (active_mem == 1 ) (ib + 1 )  ib ) 
        // (active_mem == 1 )
        // active_mem
        // (ib + 1 )
        // ib
        // ib
        // Target expression
        // (as target) nib
        // start: WAR dependencies for nib
        // ignored out-of-scope w_root 			$phi active_mem := 			  ($bitcast ($uint<2>) 0  ) $on   $entry 			  next_active_memory $on   outer_loopback 
        // type of target is $uint<2>
        // ignored out-of-scope w_root 			$phi ib := 			  ($bitcast ($uint<8>) 0  ) $on   $entry 			  nib $on   outer_loopback 
        // type of target is $uint<8>
        // done: WAR dependencies for nib
        // end:  		$volatile nib := ( $mux (active_mem == 1 ) (ib + 1 )  ib )  $buffering 1
        // start: WAR dependencies for nic
        // ignored out-of-scope w_root 			$phi active_mem := 			  ($bitcast ($uint<2>) 0  ) $on   $entry 			  next_active_memory $on   outer_loopback 
        // type of target is $uint<2>
        // ignored out-of-scope w_root 			$phi ic := 			  ($bitcast ($uint<8>) 0  ) $on   $entry 			  nic $on   outer_loopback 
        // type of target is $uint<8>
        // done: WAR dependencies for nic
        // start:  		$volatile nic := ( $mux (active_mem == 2 ) (ic + 1 )  ic )  $buffering 1
        //  file .Aa/mvp.opt.aa, line 68
        // volatile! 
        // Source expression
        // ( $mux (active_mem == 2 ) (ic + 1 )  ic ) 
        // (active_mem == 2 )
        // active_mem
        // (ic + 1 )
        // ic
        // ic
        // Target expression
        // (as target) nic
        // start: WAR dependencies for nic
        // ignored out-of-scope w_root 			$phi active_mem := 			  ($bitcast ($uint<2>) 0  ) $on   $entry 			  next_active_memory $on   outer_loopback 
        // type of target is $uint<2>
        // ignored out-of-scope w_root 			$phi ic := 			  ($bitcast ($uint<8>) 0  ) $on   $entry 			  nic $on   outer_loopback 
        // type of target is $uint<8>
        // done: WAR dependencies for nic
        // end:  		$volatile nic := ( $mux (active_mem == 2 ) (ic + 1 )  ic )  $buffering 1
        // start: WAR dependencies for nid
        // ignored out-of-scope w_root 			$phi id := 			  ($bitcast ($uint<8>) 0  ) $on   $entry 			  nid $on   outer_loopback 
        // type of target is $uint<8>
        // ignored out-of-scope w_root 			$phi active_mem := 			  ($bitcast ($uint<2>) 0  ) $on   $entry 			  next_active_memory $on   outer_loopback 
        // type of target is $uint<2>
        // done: WAR dependencies for nid
        // start:  		$volatile nid := ( $mux (active_mem == 3 ) (id + 1 )  id )  $buffering 1
        //  file .Aa/mvp.opt.aa, line 69
        // volatile! 
        // Source expression
        // ( $mux (active_mem == 3 ) (id + 1 )  id ) 
        // (active_mem == 3 )
        // active_mem
        // (id + 1 )
        // id
        // id
        // Target expression
        // (as target) nid
        // start: WAR dependencies for nid
        // ignored out-of-scope w_root 			$phi id := 			  ($bitcast ($uint<8>) 0  ) $on   $entry 			  nid $on   outer_loopback 
        // type of target is $uint<8>
        // ignored out-of-scope w_root 			$phi active_mem := 			  ($bitcast ($uint<2>) 0  ) $on   $entry 			  next_active_memory $on   outer_loopback 
        // type of target is $uint<2>
        // done: WAR dependencies for nid
        // end:  		$volatile nid := ( $mux (active_mem == 3 ) (id + 1 )  id )  $buffering 1
        // start: WAR dependencies for aTrue
        // ignored out-of-scope w_root 			$phi active_mem := 			  ($bitcast ($uint<2>) 0  ) $on   $entry 			  next_active_memory $on   outer_loopback 
        // type of target is $uint<2>
        // done: WAR dependencies for aTrue
        // start:  		$volatile aTrue := (active_mem == 0 ) $buffering 1
        //  file .Aa/mvp.opt.aa, line 70
        // volatile! 
        // Source expression
        // (active_mem == 0 )
        // active_mem
        // Target expression
        // (as target) aTrue
        // start: WAR dependencies for aTrue
        // ignored out-of-scope w_root 			$phi active_mem := 			  ($bitcast ($uint<2>) 0  ) $on   $entry 			  next_active_memory $on   outer_loopback 
        // type of target is $uint<2>
        // done: WAR dependencies for aTrue
        // end:  		$volatile aTrue := (active_mem == 0 ) $buffering 1
        // start: WAR dependencies for bTrue
        // ignored out-of-scope w_root 			$phi active_mem := 			  ($bitcast ($uint<2>) 0  ) $on   $entry 			  next_active_memory $on   outer_loopback 
        // type of target is $uint<2>
        // done: WAR dependencies for bTrue
        // start:  		$volatile bTrue := (active_mem == 1 ) $buffering 1
        //  file .Aa/mvp.opt.aa, line 71
        // volatile! 
        // Source expression
        // (active_mem == 1 )
        // active_mem
        // Target expression
        // (as target) bTrue
        // start: WAR dependencies for bTrue
        // ignored out-of-scope w_root 			$phi active_mem := 			  ($bitcast ($uint<2>) 0  ) $on   $entry 			  next_active_memory $on   outer_loopback 
        // type of target is $uint<2>
        // done: WAR dependencies for bTrue
        // end:  		$volatile bTrue := (active_mem == 1 ) $buffering 1
        // start: WAR dependencies for cTrue
        // ignored out-of-scope w_root 			$phi active_mem := 			  ($bitcast ($uint<2>) 0  ) $on   $entry 			  next_active_memory $on   outer_loopback 
        // type of target is $uint<2>
        // done: WAR dependencies for cTrue
        // start:  		$volatile cTrue := (active_mem == 2 ) $buffering 1
        //  file .Aa/mvp.opt.aa, line 72
        // volatile! 
        // Source expression
        // (active_mem == 2 )
        // active_mem
        // Target expression
        // (as target) cTrue
        // start: WAR dependencies for cTrue
        // ignored out-of-scope w_root 			$phi active_mem := 			  ($bitcast ($uint<2>) 0  ) $on   $entry 			  next_active_memory $on   outer_loopback 
        // type of target is $uint<2>
        // done: WAR dependencies for cTrue
        // end:  		$volatile cTrue := (active_mem == 2 ) $buffering 1
        // start: WAR dependencies for dTrue
        // ignored out-of-scope w_root 			$phi active_mem := 			  ($bitcast ($uint<2>) 0  ) $on   $entry 			  next_active_memory $on   outer_loopback 
        // type of target is $uint<2>
        // done: WAR dependencies for dTrue
        // start:  		$volatile dTrue := (active_mem == 3 ) $buffering 1
        //  file .Aa/mvp.opt.aa, line 73
        // volatile! 
        // Source expression
        // (active_mem == 3 )
        // active_mem
        // Target expression
        // (as target) dTrue
        // start: WAR dependencies for dTrue
        // ignored out-of-scope w_root 			$phi active_mem := 			  ($bitcast ($uint<2>) 0  ) $on   $entry 			  next_active_memory $on   outer_loopback 
        // type of target is $uint<2>
        // done: WAR dependencies for dTrue
        // end:  		$volatile dTrue := (active_mem == 3 ) $buffering 1
        // load-store dependencies..
      }
      assign_stmt_81_to_assign_stmt_159__entry__ |-> (assign_stmt_81_to_assign_stmt_159)
      assign_stmt_81_to_assign_stmt_159__exit__ <-| (assign_stmt_81_to_assign_stmt_159)
      <>[branch_block_stmt_160] // Branch Block  file .Aa/mvp.opt.aa, line 74
      {
        $P [branch_block_stmt_160__entry__]
        branch_block_stmt_160__entry__ <-| ($entry)
        $P [branch_block_stmt_160__exit__]
        branch_block_stmt_160__exit__ |-> ($exit)
        $P [do_while_stmt_161__entry__] 
        $P [do_while_stmt_161__exit__] 
        // do-while-statement  
        //  file .Aa/mvp.opt.aa, line 76
        <o> [do_while_stmt_161]  $depth 7 $buffering 1 
        {
          $P[do_while_stmt_161__entry__] 
          $P[do_while_stmt_161__exit__] 
          $P[loop_back] 
          $P[condition_done] 
          $P[loop_body_done] 
          $pipeline [do_while_stmt_161_loop_body] 
          {
            // Pipelined!
            $T[back_edge_to_loop_body] 
            $T[first_time_through_loop_body] 
            $T[loop_body_start] 
            $T[condition_evaluated] 
            $transitionmerge [entry_tmerge] (back_edge_to_loop_body first_time_through_loop_body) (loop_body_start)
            $entry <-& (loop_body_start)
            $T[aggregated_phi_sample_req] 
            $T[aggregated_phi_sample_ack] 
            $T[aggregated_phi_update_req] 
            $T[aggregated_phi_update_ack] 
            // do not loop-back unless all phi's have used up their triggering tokens.
            condition_evaluated <-& (aggregated_phi_update_ack)
            aggregated_phi_sample_req o<-& (aggregated_phi_update_ack 0)
            // start:  PHI statement phi_stmt_163
            // 				$phi J := 				  ($bitcast ($uint<8>) 0  ) $on   $entry 				  nJ $on   $loopback 
            // type of target is $uint<8>
            $T[phi_stmt_163_sample_start_] 
            $T[phi_stmt_163_sample_completed_] 
            $T[phi_stmt_163_update_start_] 
            $T[phi_stmt_163_update_completed_] 
            $T[phi_stmt_163_sample_start__ps] 
            phi_stmt_163_sample_start__ps <-& (aggregated_phi_sample_req)
            $T[phi_stmt_163_sample_completed__ps] 
            phi_stmt_163_sample_completed__ps &-> (aggregated_phi_sample_ack)
            $T[phi_stmt_163_update_start__ps] 
            phi_stmt_163_update_start__ps <-& (aggregated_phi_update_req)
            $T[phi_stmt_163_update_completed__ps] 
            phi_stmt_163_update_completed_ <-& (phi_stmt_163_update_completed__ps)
            aggregated_phi_sample_req <-& (phi_stmt_163_sample_start_)
            aggregated_phi_sample_ack &-> (phi_stmt_163_sample_completed_)
            aggregated_phi_update_req <-& (phi_stmt_163_update_start_)
            $T[phi_stmt_163_loopback_trigger] 
            phi_stmt_163_loopback_trigger <-& (back_edge_to_loop_body)
            $T[phi_stmt_163_loopback_sample_req] 
            $T[phi_stmt_163_loopback_sample_req_ps] 
            phi_stmt_163_loopback_sample_req <-& (phi_stmt_163_loopback_sample_req_ps)
            phi_stmt_163_loopback_sample_req &-> ($null)
            $T[phi_stmt_163_entry_trigger] 
            phi_stmt_163_entry_trigger <-& (first_time_through_loop_body)
            $T[phi_stmt_163_entry_sample_req] 
            $T[phi_stmt_163_entry_sample_req_ps] 
            phi_stmt_163_entry_sample_req <-& (phi_stmt_163_entry_sample_req_ps)
            phi_stmt_163_entry_sample_req &-> ($null)
            phi_stmt_163_update_start_ o<-& (phi_stmt_163_update_completed_ 0)
            phi_stmt_163_sample_start_ o<-& (phi_stmt_163_sample_completed_ 1)
            $T[phi_stmt_163_merged_reqs] 
            $T[phi_stmt_163_phi_mux_ack] 
            $T[phi_stmt_163_phi_mux_ack_ps] 
            phi_stmt_163_phi_mux_ack_ps <-& (phi_stmt_163_phi_mux_ack)
            aggregated_phi_update_ack <-& (phi_stmt_163_update_completed_)
            $T[type_cast_166_sample_start__ps] 
            $T[type_cast_166_sample_completed__ps] 
            $T[type_cast_166_update_start__ps] 
            $T[type_cast_166_update_completed__ps] 
            // dummies for constant expression source for phi
            $T[type_cast_166_sample_start_] 
            $T[type_cast_166_sample_completed_] 
            type_cast_166_sample_completed_ <-& (type_cast_166_sample_start_)
            $T[type_cast_166_update_start_] 
            $T [type_cast_166_update_completed_] $delay 
            type_cast_166_update_completed_ <-& (type_cast_166_update_start_)
            // Phi start dependency for implicit/constant alternative.
            type_cast_166_sample_start_ <-& (type_cast_166_sample_start__ps)
            type_cast_166_update_start_ <-& (type_cast_166_update_start__ps)
            // Phi complete dependency.
            type_cast_166_sample_completed__ps <-& (type_cast_166_sample_completed_)
            type_cast_166_update_completed__ps <-& (type_cast_166_update_completed_)
            $T[R_nJ_167_sample_start__ps] 
            $T[R_nJ_167_sample_completed__ps] 
            $T[R_nJ_167_update_start__ps] 
            $T[R_nJ_167_update_completed__ps] 
            // interlock for implicit-variable-ref/signal-read in Phi alternative 1
            $T[R_nJ_167_sample_start_] 
            $T[R_nJ_167_sample_completed_] 
            $T[R_nJ_167_update_start_] 
            $T[R_nJ_167_update_completed_] 
            ;;[R_nJ_167_Sample] 
            {
              $T [req] $T [ack] // interlock-sample.
            }
            R_nJ_167_sample_start_ &-> (R_nJ_167_Sample)
            R_nJ_167_sample_completed_ <-& (R_nJ_167_Sample)
            ;;[R_nJ_167_Update] 
            {
              $T [req] $T [ack] // interlock-update.
            }
            R_nJ_167_update_start_ &-> (R_nJ_167_Update)
            R_nJ_167_update_completed_ <-& (R_nJ_167_Update)
            // RAW reenables for nJ
            // Phi start dependency for implicit/constant alternative.
            R_nJ_167_sample_start_ <-& (R_nJ_167_sample_start__ps)
            R_nJ_167_update_start_ <-& (R_nJ_167_update_start__ps)
            // Phi complete dependency.
            R_nJ_167_sample_completed__ps <-& (R_nJ_167_sample_completed_)
            R_nJ_167_update_completed__ps <-& (R_nJ_167_update_completed_)
            $phisequencer [ phi_stmt_163_phi_seq] : 
            phi_stmt_163_entry_trigger type_cast_166_sample_start__ps type_cast_166_sample_completed__ps type_cast_166_update_start__ps type_cast_166_update_completed__ps phi_stmt_163_loopback_trigger R_nJ_167_sample_start__ps R_nJ_167_sample_completed__ps R_nJ_167_update_start__ps R_nJ_167_update_completed__ps :
            phi_stmt_163_sample_start__ps phi_stmt_163_sample_completed__ps phi_stmt_163_update_start__ps phi_stmt_163_update_completed__ps :
            phi_stmt_163_entry_sample_req_ps phi_stmt_163_loopback_sample_req_ps : 
            phi_stmt_163_phi_mux_ack_ps
            // done: PHI Statement phi_stmt_163
            // start:  				nJ := (J + 1 ) $buffering 1// bits of buffering = 8. 
            //  file .Aa/mvp.opt.aa, line 82
            // Source expression
            // (J + 1 )
            $T[ADD_u8_u8_172_sample_start_] 
            $T[ADD_u8_u8_172_sample_completed_] 
            $T[ADD_u8_u8_172_update_start_] 
            $T[ADD_u8_u8_172_update_completed_] 
            // J
            // start: Forward dependencies from J to transition ADD_u8_u8_172_sample_start_
            ADD_u8_u8_172_sample_start_ <-& (phi_stmt_163_update_completed_)
            // done: Forward dependencies from J to transition ADD_u8_u8_172_sample_start_
            ;;[ADD_u8_u8_172_Sample] 
            {
              // binary expression 
              $T [rr] $T [ra]  // (split) binary operation 
            }
            ;;[ADD_u8_u8_172_Update] 
            {
              // binary expression 
              $T [cr] $T [ca] // (split) binary operation 
            }
            ADD_u8_u8_172_sample_start_ &-> (ADD_u8_u8_172_Sample)
            ADD_u8_u8_172_sample_completed_ <-& (ADD_u8_u8_172_Sample)
            ADD_u8_u8_172_sample_completed_ &-> ($null)
            ADD_u8_u8_172_update_start_ &-> (ADD_u8_u8_172_Update)
            ADD_u8_u8_172_update_completed_ <-& (ADD_u8_u8_172_Update)
            // RAW reenables for J
            phi_stmt_163_update_start_ o<-& (ADD_u8_u8_172_sample_completed_ 0)
            // self-release: 
            ADD_u8_u8_172_sample_start_ o<-& (ADD_u8_u8_172_sample_completed_ 1)
            $null &-> (ADD_u8_u8_172_update_start_)
            ADD_u8_u8_172_update_start_ o<-& (ADD_u8_u8_172_update_completed_ 0)
            // Target expression
            // (as target) nJ
            // start: WAR dependencies for nJ
            // WAR dependency: Read: nJ before Write: 				nJ := (J + 1 ) $buffering 1// bits of buffering = 8. 
            ADD_u8_u8_172_update_start_ <-& (phi_stmt_163_sample_completed_)
            phi_stmt_163_sample_start_ o<-& (ADD_u8_u8_172_update_completed_ 0)
            // WAR dependency: release  Read: nJ with Write: 				nJ := (J + 1 ) $buffering 1// bits of buffering = 8. 
            // done: WAR dependencies for nJ
            // end:  				nJ := (J + 1 ) $buffering 2// bits of buffering = 16. 
            // start:  				aval := in_data $buffering 1// bits of buffering = 32. 
            //  file .Aa/mvp.opt.aa, line 83
            // Source expression
            // in_data
            $T[RPIPE_in_data_175_sample_start_] 
            $T[RPIPE_in_data_175_sample_completed_] 
            $T[RPIPE_in_data_175_update_start_] 
            $T[RPIPE_in_data_175_update_completed_] 
            ;;[RPIPE_in_data_175_Sample] 
            {
              // pipe read sample
              $T [rr] $T [ra] 
            }
            ;;[RPIPE_in_data_175_Update] 
            {
              // pipe read update
              $T [cr] $T [ca] 
            }
            RPIPE_in_data_175_sample_start_ &-> (RPIPE_in_data_175_Sample)
            RPIPE_in_data_175_sample_completed_ <-& (RPIPE_in_data_175_Sample)
            RPIPE_in_data_175_update_start_ <-& (RPIPE_in_data_175_sample_completed_)
            RPIPE_in_data_175_update_start_ &-> (RPIPE_in_data_175_Update)
            RPIPE_in_data_175_update_completed_ <-& (RPIPE_in_data_175_Update)
            RPIPE_in_data_175_sample_start_ o<-& (RPIPE_in_data_175_update_completed_ 0)
            // Target expression
            // (as target) aval
            // start: WAR dependencies for aval
            // done: WAR dependencies for aval
            // end:  				aval := in_data $buffering 1// bits of buffering = 32. 
            // start:  				$guard (aTrue) A_MEM[ia][J] := aval $buffering 1// bits of buffering = 32. 
            //  file .Aa/mvp.opt.aa, line 84
            // Guard expression 
            // aTrue
            // Source expression
            // aval
            // Target expression
            // A_MEM[ia][J]
            $T[array_obj_ref_180_sample_start_] 
            $T[array_obj_ref_180_sample_completed_] 
            $T[array_obj_ref_180_update_start_] 
            $T[array_obj_ref_180_update_completed_] 
            $T[array_obj_ref_180_word_address_calculated] 
            $T[array_obj_ref_180_root_address_calculated] 
            $T[array_obj_ref_180_offset_calculated] 
            $T[array_obj_ref_180_index_resized_0] 
            $T[array_obj_ref_180_index_scaled_0] 
            $T[array_obj_ref_180_index_computed_0] 
            // ia
            // start: Forward dependencies from ia to transition array_obj_ref_180_index_computed_0
            // done: Forward dependencies from ia to transition array_obj_ref_180_index_computed_0
            ;;[array_obj_ref_180_index_resize_0] 
            {
              $T [index_resize_req] $T [index_resize_ack] // resize index to address-width
            }
            array_obj_ref_180_index_computed_0 &-> (array_obj_ref_180_index_resize_0)
            array_obj_ref_180_index_resized_0 <-& (array_obj_ref_180_index_resize_0)
            $T[array_obj_ref_180_index_scale_0_sample_start] 
            $T[array_obj_ref_180_index_scale_0_sample_complete] 
            $T[array_obj_ref_180_index_scale_0_update_start] 
            $T[array_obj_ref_180_index_scale_0_update_complete] 
            ;;[array_obj_ref_180_index_scale_0_Sample] 
            {
              $T [rr] $T [ra] 
            }
            ;;[array_obj_ref_180_index_scale_0_Update] 
            {
              $T [cr] $T [ca] 
            }
            array_obj_ref_180_index_resized_0 &-> (array_obj_ref_180_index_scale_0_sample_start)
            array_obj_ref_180_index_scale_0_sample_start &-> (array_obj_ref_180_index_scale_0_Sample)
            array_obj_ref_180_index_scale_0_sample_complete <-& (array_obj_ref_180_index_scale_0_Sample)
            array_obj_ref_180_index_scale_0_update_start &-> (array_obj_ref_180_index_scale_0_Update)
            array_obj_ref_180_index_scale_0_update_complete <-& (array_obj_ref_180_index_scale_0_Update)
            array_obj_ref_180_index_scaled_0 <-& (array_obj_ref_180_index_scale_0_update_complete)
            array_obj_ref_180_index_scale_0_sample_start o<-& (array_obj_ref_180_index_scale_0_sample_complete 1)
            array_obj_ref_180_index_scale_0_update_start o<-& (array_obj_ref_180_index_scale_0_update_complete 0)
            $T[array_obj_ref_180_index_resized_1] 
            $T[array_obj_ref_180_index_scaled_1] 
            $T[array_obj_ref_180_index_computed_1] 
            // J
            // start: Forward dependencies from J to transition array_obj_ref_180_index_computed_1
            array_obj_ref_180_index_computed_1 <-& (phi_stmt_163_update_completed_)
            // done: Forward dependencies from J to transition array_obj_ref_180_index_computed_1
            ;;[array_obj_ref_180_index_resize_1] 
            {
              $T [index_resize_req] $T [index_resize_ack] // resize index to address-width
            }
            array_obj_ref_180_index_computed_1 &-> (array_obj_ref_180_index_resize_1)
            array_obj_ref_180_index_resized_1 <-& (array_obj_ref_180_index_resize_1)
            ;;[array_obj_ref_180_index_scale_1] 
            {
              $T [scale_rename_req] $T [scale_rename_ack] // rename 
            }
            array_obj_ref_180_index_resized_1 &-> (array_obj_ref_180_index_scale_1)
            array_obj_ref_180_index_scaled_1 <-& (array_obj_ref_180_index_scale_1)
            $T[array_obj_ref_180_partial_sum_1_sample_start] 
            $T[array_obj_ref_180_partial_sum_1_sample_complete] 
            $T[array_obj_ref_180_partial_sum_1_update_start] 
            $T[array_obj_ref_180_partial_sum_1_update_complete] 
            ;;[array_obj_ref_180_partial_sum_1_Sample] 
            {
              $T [rr] $T [ra] 
            }
            ;;[array_obj_ref_180_partial_sum_1_Update] 
            {
              $T [cr] $T [ca] 
            }
            array_obj_ref_180_partial_sum_1_sample_start &-> (array_obj_ref_180_partial_sum_1_Sample)
            array_obj_ref_180_partial_sum_1_sample_complete <-& (array_obj_ref_180_partial_sum_1_Sample)
            array_obj_ref_180_partial_sum_1_update_start &-> (array_obj_ref_180_partial_sum_1_Update)
            array_obj_ref_180_partial_sum_1_update_complete <-& (array_obj_ref_180_partial_sum_1_Update)
            array_obj_ref_180_partial_sum_1_sample_start o<-& (array_obj_ref_180_partial_sum_1_sample_complete 1)
            array_obj_ref_180_partial_sum_1_update_start o<-& (array_obj_ref_180_partial_sum_1_update_complete 0)
            array_obj_ref_180_partial_sum_1_sample_start <-& (array_obj_ref_180_index_scaled_0)
            array_obj_ref_180_partial_sum_1_sample_start <-& (array_obj_ref_180_index_scaled_1)
            array_obj_ref_180_index_scaled_0 o<-& (array_obj_ref_180_partial_sum_1_sample_complete 1)
            phi_stmt_163_update_start_ o<-& (array_obj_ref_180_partial_sum_1_sample_complete 1)
            array_obj_ref_180_offset_calculated <-& (array_obj_ref_180_partial_sum_1_update_complete)
            ;;[array_obj_ref_180_final_index_sum_regn] 
            {
              $T [req] $T [ack] // rename
            }
            array_obj_ref_180_partial_sum_1_update_complete &-> (array_obj_ref_180_final_index_sum_regn)
            array_obj_ref_180_offset_calculated <-& (array_obj_ref_180_final_index_sum_regn)
            ;;[array_obj_ref_180_base_plus_offset] 
            {
              $T [sum_rename_req] $T [sum_rename_ack] // one gets through 
            }
            array_obj_ref_180_offset_calculated &-> (array_obj_ref_180_base_plus_offset)
            array_obj_ref_180_root_address_calculated <-& (array_obj_ref_180_base_plus_offset)
            ;;[array_obj_ref_180_word_addrgen] 
            {
              $T [root_register_req] $T [root_register_ack]
            }
            array_obj_ref_180_root_address_calculated &-> (array_obj_ref_180_word_addrgen)
            array_obj_ref_180_word_address_calculated <-& (array_obj_ref_180_word_addrgen)
            ;;[array_obj_ref_180_Sample] 
            {
              ;;[array_obj_ref_180_Split] 
              {
                $T [split_req] $T [split_ack]
              }
              ||[word_access_start] 
              {
                ;;[word_0] 
                {
                  $T [rr] $T [ra] 
                }
              }
            }
            ;;[array_obj_ref_180_Update] 
            {
              ||[word_access_complete] 
              {
                ;;[word_0] 
                {
                  $T [cr] $T [ca] 
                }
              }
            }
            array_obj_ref_180_sample_start_ <-& (array_obj_ref_180_word_address_calculated)
            // reenable-joins
            array_obj_ref_180_partial_sum_1_update_start o<-& (array_obj_ref_180_sample_completed_ 0)
            array_obj_ref_180_sample_start_ &-> (array_obj_ref_180_Sample)
            array_obj_ref_180_sample_completed_ <-& (array_obj_ref_180_Sample)
            array_obj_ref_180_sample_completed_ &-> ($null)
            array_obj_ref_180_update_start_ &-> (array_obj_ref_180_Update)
            array_obj_ref_180_update_completed_ <-& (array_obj_ref_180_Update)
            // Guard dependency for expression array_obj_ref_180 with guard R_aTrue_177
            // root phi_stmt_50 of guard-expression not in visited elements.
            // RAW reenables for aTrue
            // self-release: 
            array_obj_ref_180_sample_start_ o<-& (array_obj_ref_180_sample_completed_ 1)
            $null &-> (array_obj_ref_180_update_start_)
            array_obj_ref_180_update_start_ o<-& (array_obj_ref_180_update_completed_ 0)
            // start: Forward dependencies from aval to transition array_obj_ref_180_sample_start_
            array_obj_ref_180_sample_start_ <-& (RPIPE_in_data_175_update_completed_)
            // done: Forward dependencies from aval to transition array_obj_ref_180_sample_start_
            // RAW reenables for aval
            RPIPE_in_data_175_update_start_ o<-& (array_obj_ref_180_sample_completed_ 0)
            // end:  				$guard (aTrue) A_MEM[ia][J] := aval $buffering 1// bits of buffering = 32. 
            // start:  				$guard (bTrue) B_MEM[ib][J] := aval $buffering 1// bits of buffering = 32. 
            //  file .Aa/mvp.opt.aa, line 85
            // Guard expression 
            // bTrue
            // Source expression
            // aval
            // Target expression
            // B_MEM[ib][J]
            $T[array_obj_ref_186_sample_start_] 
            $T[array_obj_ref_186_sample_completed_] 
            $T[array_obj_ref_186_update_start_] 
            $T[array_obj_ref_186_update_completed_] 
            $T[array_obj_ref_186_word_address_calculated] 
            $T[array_obj_ref_186_root_address_calculated] 
            $T[array_obj_ref_186_offset_calculated] 
            $T[array_obj_ref_186_index_resized_0] 
            $T[array_obj_ref_186_index_scaled_0] 
            $T[array_obj_ref_186_index_computed_0] 
            // ib
            // start: Forward dependencies from ib to transition array_obj_ref_186_index_computed_0
            // done: Forward dependencies from ib to transition array_obj_ref_186_index_computed_0
            ;;[array_obj_ref_186_index_resize_0] 
            {
              $T [index_resize_req] $T [index_resize_ack] // resize index to address-width
            }
            array_obj_ref_186_index_computed_0 &-> (array_obj_ref_186_index_resize_0)
            array_obj_ref_186_index_resized_0 <-& (array_obj_ref_186_index_resize_0)
            $T[array_obj_ref_186_index_scale_0_sample_start] 
            $T[array_obj_ref_186_index_scale_0_sample_complete] 
            $T[array_obj_ref_186_index_scale_0_update_start] 
            $T[array_obj_ref_186_index_scale_0_update_complete] 
            ;;[array_obj_ref_186_index_scale_0_Sample] 
            {
              $T [rr] $T [ra] 
            }
            ;;[array_obj_ref_186_index_scale_0_Update] 
            {
              $T [cr] $T [ca] 
            }
            array_obj_ref_186_index_resized_0 &-> (array_obj_ref_186_index_scale_0_sample_start)
            array_obj_ref_186_index_scale_0_sample_start &-> (array_obj_ref_186_index_scale_0_Sample)
            array_obj_ref_186_index_scale_0_sample_complete <-& (array_obj_ref_186_index_scale_0_Sample)
            array_obj_ref_186_index_scale_0_update_start &-> (array_obj_ref_186_index_scale_0_Update)
            array_obj_ref_186_index_scale_0_update_complete <-& (array_obj_ref_186_index_scale_0_Update)
            array_obj_ref_186_index_scaled_0 <-& (array_obj_ref_186_index_scale_0_update_complete)
            array_obj_ref_186_index_scale_0_sample_start o<-& (array_obj_ref_186_index_scale_0_sample_complete 1)
            array_obj_ref_186_index_scale_0_update_start o<-& (array_obj_ref_186_index_scale_0_update_complete 0)
            $T[array_obj_ref_186_index_resized_1] 
            $T[array_obj_ref_186_index_scaled_1] 
            $T[array_obj_ref_186_index_computed_1] 
            // J
            // start: Forward dependencies from J to transition array_obj_ref_186_index_computed_1
            array_obj_ref_186_index_computed_1 <-& (phi_stmt_163_update_completed_)
            // done: Forward dependencies from J to transition array_obj_ref_186_index_computed_1
            ;;[array_obj_ref_186_index_resize_1] 
            {
              $T [index_resize_req] $T [index_resize_ack] // resize index to address-width
            }
            array_obj_ref_186_index_computed_1 &-> (array_obj_ref_186_index_resize_1)
            array_obj_ref_186_index_resized_1 <-& (array_obj_ref_186_index_resize_1)
            ;;[array_obj_ref_186_index_scale_1] 
            {
              $T [scale_rename_req] $T [scale_rename_ack] // rename 
            }
            array_obj_ref_186_index_resized_1 &-> (array_obj_ref_186_index_scale_1)
            array_obj_ref_186_index_scaled_1 <-& (array_obj_ref_186_index_scale_1)
            $T[array_obj_ref_186_partial_sum_1_sample_start] 
            $T[array_obj_ref_186_partial_sum_1_sample_complete] 
            $T[array_obj_ref_186_partial_sum_1_update_start] 
            $T[array_obj_ref_186_partial_sum_1_update_complete] 
            ;;[array_obj_ref_186_partial_sum_1_Sample] 
            {
              $T [rr] $T [ra] 
            }
            ;;[array_obj_ref_186_partial_sum_1_Update] 
            {
              $T [cr] $T [ca] 
            }
            array_obj_ref_186_partial_sum_1_sample_start &-> (array_obj_ref_186_partial_sum_1_Sample)
            array_obj_ref_186_partial_sum_1_sample_complete <-& (array_obj_ref_186_partial_sum_1_Sample)
            array_obj_ref_186_partial_sum_1_update_start &-> (array_obj_ref_186_partial_sum_1_Update)
            array_obj_ref_186_partial_sum_1_update_complete <-& (array_obj_ref_186_partial_sum_1_Update)
            array_obj_ref_186_partial_sum_1_sample_start o<-& (array_obj_ref_186_partial_sum_1_sample_complete 1)
            array_obj_ref_186_partial_sum_1_update_start o<-& (array_obj_ref_186_partial_sum_1_update_complete 0)
            array_obj_ref_186_partial_sum_1_sample_start <-& (array_obj_ref_186_index_scaled_0)
            array_obj_ref_186_partial_sum_1_sample_start <-& (array_obj_ref_186_index_scaled_1)
            array_obj_ref_186_index_scaled_0 o<-& (array_obj_ref_186_partial_sum_1_sample_complete 1)
            phi_stmt_163_update_start_ o<-& (array_obj_ref_186_partial_sum_1_sample_complete 1)
            array_obj_ref_186_offset_calculated <-& (array_obj_ref_186_partial_sum_1_update_complete)
            ;;[array_obj_ref_186_final_index_sum_regn] 
            {
              $T [req] $T [ack] // rename
            }
            array_obj_ref_186_partial_sum_1_update_complete &-> (array_obj_ref_186_final_index_sum_regn)
            array_obj_ref_186_offset_calculated <-& (array_obj_ref_186_final_index_sum_regn)
            ;;[array_obj_ref_186_base_plus_offset] 
            {
              $T [sum_rename_req] $T [sum_rename_ack] // one gets through 
            }
            array_obj_ref_186_offset_calculated &-> (array_obj_ref_186_base_plus_offset)
            array_obj_ref_186_root_address_calculated <-& (array_obj_ref_186_base_plus_offset)
            ;;[array_obj_ref_186_word_addrgen] 
            {
              $T [root_register_req] $T [root_register_ack]
            }
            array_obj_ref_186_root_address_calculated &-> (array_obj_ref_186_word_addrgen)
            array_obj_ref_186_word_address_calculated <-& (array_obj_ref_186_word_addrgen)
            ;;[array_obj_ref_186_Sample] 
            {
              ;;[array_obj_ref_186_Split] 
              {
                $T [split_req] $T [split_ack]
              }
              ||[word_access_start] 
              {
                ;;[word_0] 
                {
                  $T [rr] $T [ra] 
                }
              }
            }
            ;;[array_obj_ref_186_Update] 
            {
              ||[word_access_complete] 
              {
                ;;[word_0] 
                {
                  $T [cr] $T [ca] 
                }
              }
            }
            array_obj_ref_186_sample_start_ <-& (array_obj_ref_186_word_address_calculated)
            // reenable-joins
            array_obj_ref_186_partial_sum_1_update_start o<-& (array_obj_ref_186_sample_completed_ 0)
            array_obj_ref_186_sample_start_ &-> (array_obj_ref_186_Sample)
            array_obj_ref_186_sample_completed_ <-& (array_obj_ref_186_Sample)
            array_obj_ref_186_sample_completed_ &-> ($null)
            array_obj_ref_186_update_start_ &-> (array_obj_ref_186_Update)
            array_obj_ref_186_update_completed_ <-& (array_obj_ref_186_Update)
            // Guard dependency for expression array_obj_ref_186 with guard R_bTrue_183
            // root phi_stmt_50 of guard-expression not in visited elements.
            // RAW reenables for bTrue
            // self-release: 
            array_obj_ref_186_sample_start_ o<-& (array_obj_ref_186_sample_completed_ 1)
            $null &-> (array_obj_ref_186_update_start_)
            array_obj_ref_186_update_start_ o<-& (array_obj_ref_186_update_completed_ 0)
            // start: Forward dependencies from aval to transition array_obj_ref_186_sample_start_
            array_obj_ref_186_sample_start_ <-& (RPIPE_in_data_175_update_completed_)
            // done: Forward dependencies from aval to transition array_obj_ref_186_sample_start_
            // RAW reenables for aval
            RPIPE_in_data_175_update_start_ o<-& (array_obj_ref_186_sample_completed_ 0)
            // end:  				$guard (bTrue) B_MEM[ib][J] := aval $buffering 1// bits of buffering = 32. 
            // start:  				$guard (cTrue) C_MEM[ic][J] := aval $buffering 1// bits of buffering = 32. 
            //  file .Aa/mvp.opt.aa, line 86
            // Guard expression 
            // cTrue
            // Source expression
            // aval
            // Target expression
            // C_MEM[ic][J]
            $T[array_obj_ref_192_sample_start_] 
            $T[array_obj_ref_192_sample_completed_] 
            $T[array_obj_ref_192_update_start_] 
            $T[array_obj_ref_192_update_completed_] 
            $T[array_obj_ref_192_word_address_calculated] 
            $T[array_obj_ref_192_root_address_calculated] 
            $T[array_obj_ref_192_offset_calculated] 
            $T[array_obj_ref_192_index_resized_0] 
            $T[array_obj_ref_192_index_scaled_0] 
            $T[array_obj_ref_192_index_computed_0] 
            // ic
            // start: Forward dependencies from ic to transition array_obj_ref_192_index_computed_0
            // done: Forward dependencies from ic to transition array_obj_ref_192_index_computed_0
            ;;[array_obj_ref_192_index_resize_0] 
            {
              $T [index_resize_req] $T [index_resize_ack] // resize index to address-width
            }
            array_obj_ref_192_index_computed_0 &-> (array_obj_ref_192_index_resize_0)
            array_obj_ref_192_index_resized_0 <-& (array_obj_ref_192_index_resize_0)
            $T[array_obj_ref_192_index_scale_0_sample_start] 
            $T[array_obj_ref_192_index_scale_0_sample_complete] 
            $T[array_obj_ref_192_index_scale_0_update_start] 
            $T[array_obj_ref_192_index_scale_0_update_complete] 
            ;;[array_obj_ref_192_index_scale_0_Sample] 
            {
              $T [rr] $T [ra] 
            }
            ;;[array_obj_ref_192_index_scale_0_Update] 
            {
              $T [cr] $T [ca] 
            }
            array_obj_ref_192_index_resized_0 &-> (array_obj_ref_192_index_scale_0_sample_start)
            array_obj_ref_192_index_scale_0_sample_start &-> (array_obj_ref_192_index_scale_0_Sample)
            array_obj_ref_192_index_scale_0_sample_complete <-& (array_obj_ref_192_index_scale_0_Sample)
            array_obj_ref_192_index_scale_0_update_start &-> (array_obj_ref_192_index_scale_0_Update)
            array_obj_ref_192_index_scale_0_update_complete <-& (array_obj_ref_192_index_scale_0_Update)
            array_obj_ref_192_index_scaled_0 <-& (array_obj_ref_192_index_scale_0_update_complete)
            array_obj_ref_192_index_scale_0_sample_start o<-& (array_obj_ref_192_index_scale_0_sample_complete 1)
            array_obj_ref_192_index_scale_0_update_start o<-& (array_obj_ref_192_index_scale_0_update_complete 0)
            $T[array_obj_ref_192_index_resized_1] 
            $T[array_obj_ref_192_index_scaled_1] 
            $T[array_obj_ref_192_index_computed_1] 
            // J
            // start: Forward dependencies from J to transition array_obj_ref_192_index_computed_1
            array_obj_ref_192_index_computed_1 <-& (phi_stmt_163_update_completed_)
            // done: Forward dependencies from J to transition array_obj_ref_192_index_computed_1
            ;;[array_obj_ref_192_index_resize_1] 
            {
              $T [index_resize_req] $T [index_resize_ack] // resize index to address-width
            }
            array_obj_ref_192_index_computed_1 &-> (array_obj_ref_192_index_resize_1)
            array_obj_ref_192_index_resized_1 <-& (array_obj_ref_192_index_resize_1)
            ;;[array_obj_ref_192_index_scale_1] 
            {
              $T [scale_rename_req] $T [scale_rename_ack] // rename 
            }
            array_obj_ref_192_index_resized_1 &-> (array_obj_ref_192_index_scale_1)
            array_obj_ref_192_index_scaled_1 <-& (array_obj_ref_192_index_scale_1)
            $T[array_obj_ref_192_partial_sum_1_sample_start] 
            $T[array_obj_ref_192_partial_sum_1_sample_complete] 
            $T[array_obj_ref_192_partial_sum_1_update_start] 
            $T[array_obj_ref_192_partial_sum_1_update_complete] 
            ;;[array_obj_ref_192_partial_sum_1_Sample] 
            {
              $T [rr] $T [ra] 
            }
            ;;[array_obj_ref_192_partial_sum_1_Update] 
            {
              $T [cr] $T [ca] 
            }
            array_obj_ref_192_partial_sum_1_sample_start &-> (array_obj_ref_192_partial_sum_1_Sample)
            array_obj_ref_192_partial_sum_1_sample_complete <-& (array_obj_ref_192_partial_sum_1_Sample)
            array_obj_ref_192_partial_sum_1_update_start &-> (array_obj_ref_192_partial_sum_1_Update)
            array_obj_ref_192_partial_sum_1_update_complete <-& (array_obj_ref_192_partial_sum_1_Update)
            array_obj_ref_192_partial_sum_1_sample_start o<-& (array_obj_ref_192_partial_sum_1_sample_complete 1)
            array_obj_ref_192_partial_sum_1_update_start o<-& (array_obj_ref_192_partial_sum_1_update_complete 0)
            array_obj_ref_192_partial_sum_1_sample_start <-& (array_obj_ref_192_index_scaled_0)
            array_obj_ref_192_partial_sum_1_sample_start <-& (array_obj_ref_192_index_scaled_1)
            array_obj_ref_192_index_scaled_0 o<-& (array_obj_ref_192_partial_sum_1_sample_complete 1)
            phi_stmt_163_update_start_ o<-& (array_obj_ref_192_partial_sum_1_sample_complete 1)
            array_obj_ref_192_offset_calculated <-& (array_obj_ref_192_partial_sum_1_update_complete)
            ;;[array_obj_ref_192_final_index_sum_regn] 
            {
              $T [req] $T [ack] // rename
            }
            array_obj_ref_192_partial_sum_1_update_complete &-> (array_obj_ref_192_final_index_sum_regn)
            array_obj_ref_192_offset_calculated <-& (array_obj_ref_192_final_index_sum_regn)
            ;;[array_obj_ref_192_base_plus_offset] 
            {
              $T [sum_rename_req] $T [sum_rename_ack] // one gets through 
            }
            array_obj_ref_192_offset_calculated &-> (array_obj_ref_192_base_plus_offset)
            array_obj_ref_192_root_address_calculated <-& (array_obj_ref_192_base_plus_offset)
            ;;[array_obj_ref_192_word_addrgen] 
            {
              $T [root_register_req] $T [root_register_ack]
            }
            array_obj_ref_192_root_address_calculated &-> (array_obj_ref_192_word_addrgen)
            array_obj_ref_192_word_address_calculated <-& (array_obj_ref_192_word_addrgen)
            ;;[array_obj_ref_192_Sample] 
            {
              ;;[array_obj_ref_192_Split] 
              {
                $T [split_req] $T [split_ack]
              }
              ||[word_access_start] 
              {
                ;;[word_0] 
                {
                  $T [rr] $T [ra] 
                }
              }
            }
            ;;[array_obj_ref_192_Update] 
            {
              ||[word_access_complete] 
              {
                ;;[word_0] 
                {
                  $T [cr] $T [ca] 
                }
              }
            }
            array_obj_ref_192_sample_start_ <-& (array_obj_ref_192_word_address_calculated)
            // reenable-joins
            array_obj_ref_192_partial_sum_1_update_start o<-& (array_obj_ref_192_sample_completed_ 0)
            array_obj_ref_192_sample_start_ &-> (array_obj_ref_192_Sample)
            array_obj_ref_192_sample_completed_ <-& (array_obj_ref_192_Sample)
            array_obj_ref_192_sample_completed_ &-> ($null)
            array_obj_ref_192_update_start_ &-> (array_obj_ref_192_Update)
            array_obj_ref_192_update_completed_ <-& (array_obj_ref_192_Update)
            // Guard dependency for expression array_obj_ref_192 with guard R_cTrue_189
            // root phi_stmt_50 of guard-expression not in visited elements.
            // RAW reenables for cTrue
            // self-release: 
            array_obj_ref_192_sample_start_ o<-& (array_obj_ref_192_sample_completed_ 1)
            $null &-> (array_obj_ref_192_update_start_)
            array_obj_ref_192_update_start_ o<-& (array_obj_ref_192_update_completed_ 0)
            // start: Forward dependencies from aval to transition array_obj_ref_192_sample_start_
            array_obj_ref_192_sample_start_ <-& (RPIPE_in_data_175_update_completed_)
            // done: Forward dependencies from aval to transition array_obj_ref_192_sample_start_
            // RAW reenables for aval
            RPIPE_in_data_175_update_start_ o<-& (array_obj_ref_192_sample_completed_ 0)
            // end:  				$guard (cTrue) C_MEM[ic][J] := aval $buffering 1// bits of buffering = 32. 
            // start:  				$guard (dTrue) D_MEM[id][J] := aval $buffering 1// bits of buffering = 32. 
            //  file .Aa/mvp.opt.aa, line 87
            // Guard expression 
            // dTrue
            // Source expression
            // aval
            // Target expression
            // D_MEM[id][J]
            $T[array_obj_ref_198_sample_start_] 
            $T[array_obj_ref_198_sample_completed_] 
            $T[array_obj_ref_198_update_start_] 
            $T[array_obj_ref_198_update_completed_] 
            $T[array_obj_ref_198_word_address_calculated] 
            $T[array_obj_ref_198_root_address_calculated] 
            $T[array_obj_ref_198_offset_calculated] 
            $T[array_obj_ref_198_index_resized_0] 
            $T[array_obj_ref_198_index_scaled_0] 
            $T[array_obj_ref_198_index_computed_0] 
            // id
            // start: Forward dependencies from id to transition array_obj_ref_198_index_computed_0
            // done: Forward dependencies from id to transition array_obj_ref_198_index_computed_0
            ;;[array_obj_ref_198_index_resize_0] 
            {
              $T [index_resize_req] $T [index_resize_ack] // resize index to address-width
            }
            array_obj_ref_198_index_computed_0 &-> (array_obj_ref_198_index_resize_0)
            array_obj_ref_198_index_resized_0 <-& (array_obj_ref_198_index_resize_0)
            $T[array_obj_ref_198_index_scale_0_sample_start] 
            $T[array_obj_ref_198_index_scale_0_sample_complete] 
            $T[array_obj_ref_198_index_scale_0_update_start] 
            $T[array_obj_ref_198_index_scale_0_update_complete] 
            ;;[array_obj_ref_198_index_scale_0_Sample] 
            {
              $T [rr] $T [ra] 
            }
            ;;[array_obj_ref_198_index_scale_0_Update] 
            {
              $T [cr] $T [ca] 
            }
            array_obj_ref_198_index_resized_0 &-> (array_obj_ref_198_index_scale_0_sample_start)
            array_obj_ref_198_index_scale_0_sample_start &-> (array_obj_ref_198_index_scale_0_Sample)
            array_obj_ref_198_index_scale_0_sample_complete <-& (array_obj_ref_198_index_scale_0_Sample)
            array_obj_ref_198_index_scale_0_update_start &-> (array_obj_ref_198_index_scale_0_Update)
            array_obj_ref_198_index_scale_0_update_complete <-& (array_obj_ref_198_index_scale_0_Update)
            array_obj_ref_198_index_scaled_0 <-& (array_obj_ref_198_index_scale_0_update_complete)
            array_obj_ref_198_index_scale_0_sample_start o<-& (array_obj_ref_198_index_scale_0_sample_complete 1)
            array_obj_ref_198_index_scale_0_update_start o<-& (array_obj_ref_198_index_scale_0_update_complete 0)
            $T[array_obj_ref_198_index_resized_1] 
            $T[array_obj_ref_198_index_scaled_1] 
            $T[array_obj_ref_198_index_computed_1] 
            // J
            // start: Forward dependencies from J to transition array_obj_ref_198_index_computed_1
            array_obj_ref_198_index_computed_1 <-& (phi_stmt_163_update_completed_)
            // done: Forward dependencies from J to transition array_obj_ref_198_index_computed_1
            ;;[array_obj_ref_198_index_resize_1] 
            {
              $T [index_resize_req] $T [index_resize_ack] // resize index to address-width
            }
            array_obj_ref_198_index_computed_1 &-> (array_obj_ref_198_index_resize_1)
            array_obj_ref_198_index_resized_1 <-& (array_obj_ref_198_index_resize_1)
            ;;[array_obj_ref_198_index_scale_1] 
            {
              $T [scale_rename_req] $T [scale_rename_ack] // rename 
            }
            array_obj_ref_198_index_resized_1 &-> (array_obj_ref_198_index_scale_1)
            array_obj_ref_198_index_scaled_1 <-& (array_obj_ref_198_index_scale_1)
            $T[array_obj_ref_198_partial_sum_1_sample_start] 
            $T[array_obj_ref_198_partial_sum_1_sample_complete] 
            $T[array_obj_ref_198_partial_sum_1_update_start] 
            $T[array_obj_ref_198_partial_sum_1_update_complete] 
            ;;[array_obj_ref_198_partial_sum_1_Sample] 
            {
              $T [rr] $T [ra] 
            }
            ;;[array_obj_ref_198_partial_sum_1_Update] 
            {
              $T [cr] $T [ca] 
            }
            array_obj_ref_198_partial_sum_1_sample_start &-> (array_obj_ref_198_partial_sum_1_Sample)
            array_obj_ref_198_partial_sum_1_sample_complete <-& (array_obj_ref_198_partial_sum_1_Sample)
            array_obj_ref_198_partial_sum_1_update_start &-> (array_obj_ref_198_partial_sum_1_Update)
            array_obj_ref_198_partial_sum_1_update_complete <-& (array_obj_ref_198_partial_sum_1_Update)
            array_obj_ref_198_partial_sum_1_sample_start o<-& (array_obj_ref_198_partial_sum_1_sample_complete 1)
            array_obj_ref_198_partial_sum_1_update_start o<-& (array_obj_ref_198_partial_sum_1_update_complete 0)
            array_obj_ref_198_partial_sum_1_sample_start <-& (array_obj_ref_198_index_scaled_0)
            array_obj_ref_198_partial_sum_1_sample_start <-& (array_obj_ref_198_index_scaled_1)
            array_obj_ref_198_index_scaled_0 o<-& (array_obj_ref_198_partial_sum_1_sample_complete 1)
            phi_stmt_163_update_start_ o<-& (array_obj_ref_198_partial_sum_1_sample_complete 1)
            array_obj_ref_198_offset_calculated <-& (array_obj_ref_198_partial_sum_1_update_complete)
            ;;[array_obj_ref_198_final_index_sum_regn] 
            {
              $T [req] $T [ack] // rename
            }
            array_obj_ref_198_partial_sum_1_update_complete &-> (array_obj_ref_198_final_index_sum_regn)
            array_obj_ref_198_offset_calculated <-& (array_obj_ref_198_final_index_sum_regn)
            ;;[array_obj_ref_198_base_plus_offset] 
            {
              $T [sum_rename_req] $T [sum_rename_ack] // one gets through 
            }
            array_obj_ref_198_offset_calculated &-> (array_obj_ref_198_base_plus_offset)
            array_obj_ref_198_root_address_calculated <-& (array_obj_ref_198_base_plus_offset)
            ;;[array_obj_ref_198_word_addrgen] 
            {
              $T [root_register_req] $T [root_register_ack]
            }
            array_obj_ref_198_root_address_calculated &-> (array_obj_ref_198_word_addrgen)
            array_obj_ref_198_word_address_calculated <-& (array_obj_ref_198_word_addrgen)
            ;;[array_obj_ref_198_Sample] 
            {
              ;;[array_obj_ref_198_Split] 
              {
                $T [split_req] $T [split_ack]
              }
              ||[word_access_start] 
              {
                ;;[word_0] 
                {
                  $T [rr] $T [ra] 
                }
              }
            }
            ;;[array_obj_ref_198_Update] 
            {
              ||[word_access_complete] 
              {
                ;;[word_0] 
                {
                  $T [cr] $T [ca] 
                }
              }
            }
            array_obj_ref_198_sample_start_ <-& (array_obj_ref_198_word_address_calculated)
            // reenable-joins
            array_obj_ref_198_partial_sum_1_update_start o<-& (array_obj_ref_198_sample_completed_ 0)
            array_obj_ref_198_sample_start_ &-> (array_obj_ref_198_Sample)
            array_obj_ref_198_sample_completed_ <-& (array_obj_ref_198_Sample)
            array_obj_ref_198_sample_completed_ &-> ($null)
            array_obj_ref_198_update_start_ &-> (array_obj_ref_198_Update)
            array_obj_ref_198_update_completed_ <-& (array_obj_ref_198_Update)
            // Guard dependency for expression array_obj_ref_198 with guard R_dTrue_195
            // root phi_stmt_50 of guard-expression not in visited elements.
            // RAW reenables for dTrue
            // self-release: 
            array_obj_ref_198_sample_start_ o<-& (array_obj_ref_198_sample_completed_ 1)
            $null &-> (array_obj_ref_198_update_start_)
            array_obj_ref_198_update_start_ o<-& (array_obj_ref_198_update_completed_ 0)
            // start: Forward dependencies from aval to transition array_obj_ref_198_sample_start_
            array_obj_ref_198_sample_start_ <-& (RPIPE_in_data_175_update_completed_)
            // done: Forward dependencies from aval to transition array_obj_ref_198_sample_start_
            // RAW reenables for aval
            RPIPE_in_data_175_update_start_ o<-& (array_obj_ref_198_sample_completed_ 0)
            // end:  				$guard (dTrue) D_MEM[id][J] := aval $buffering 1// bits of buffering = 32. 
            // (nJ < 32 )
            // nJ
            $T [loop_body_delay_to_condition_start] $delay
            loop_body_start &-> (loop_body_delay_to_condition_start)
            loop_body_delay_to_condition_start &-> (condition_evaluated)
            // start: Forward dependencies from (nJ < 32 ) to transition condition_evaluated
            condition_evaluated <-& (ADD_u8_u8_172_update_completed_)
            // done: Forward dependencies from (nJ < 32 ) to transition condition_evaluated
            condition_evaluated &-> ($null)
            // load-store dependencies..
            // memory-space  memory_space_1
            //  array_obj_ref_186 store
            // reenable across ring for memory space memory_space_1
            // leading and trailing sets are the same... no ring dependency
            // memory-space  memory_space_2
            //  array_obj_ref_192 store
            // reenable across ring for memory space memory_space_2
            // leading and trailing sets are the same... no ring dependency
            // memory-space  memory_space_3
            //  array_obj_ref_198 store
            // reenable across ring for memory space memory_space_3
            // leading and trailing sets are the same... no ring dependency
            // memory-space  memory_space_0
            //  array_obj_ref_180 store
            // reenable across ring for memory space memory_space_0
            // leading and trailing sets are the same... no ring dependency
            // pipe read/write dependencies for pipe in_data
            // read-dependencies for pipe in_data
            // write-dependencies for pipe in_data
            // signal write dependencies for in_data
          }
          ( first_time_through_loop_body  back_edge_to_loop_body) 
          ( condition_evaluated )
          ;; [loop_exit] 
          {
            $T [ack] 
          }
          ;; [loop_taken] 
          {
            $T [ack] 
          }
          do_while_stmt_161__entry__ <-| ($entry)
          loop_body_done <-| ( do_while_stmt_161_loop_body ) 
          condition_done |-> (loop_exit loop_taken)
          do_while_stmt_161__exit__ |-> ($exit)
          $bind condition_done <= do_while_stmt_161_loop_body : condition_evaluated
          $bind do_while_stmt_161__entry__  => do_while_stmt_161_loop_body : first_time_through_loop_body 
          $bind loop_back  => do_while_stmt_161_loop_body : back_edge_to_loop_body 
          $terminate (loop_exit loop_taken loop_body_done) (loop_back do_while_stmt_161__exit__)
        }
        do_while_stmt_161__entry__ |-> (do_while_stmt_161)
        do_while_stmt_161__exit__ <-| (do_while_stmt_161)
        do_while_stmt_161__entry__ <-| (branch_block_stmt_160__entry__)
        do_while_stmt_161__exit__ |-> (branch_block_stmt_160__exit__)
      }
      branch_block_stmt_160__entry__ |-> (branch_block_stmt_160)
      branch_block_stmt_160__exit__ <-| (branch_block_stmt_160)
      // if-statement  
      //  file .Aa/mvp.opt.aa, line 0
      ;;[if_stmt_206_dead_link] 
      {
        $T [dead_transition] $dead 
      }
      if_stmt_206__entry__ |-> (if_stmt_206_dead_link)
      if_stmt_206__exit__ <-| (if_stmt_206_dead_link)
      ;;[if_stmt_206_eval_test] 
      {
        // test expression evaluate and trigger branch 
        // (nI < 32 )
        ;;[ULT_u8_u1_209] 
        {
          // binary expression 
          ||[ULT_u8_u1_209_inputs] 
          {
          }
          // flow-through
          ;;[SplitProtocol] 
          {
            ;;[Sample] 
            {
              $T [rr] $T [ra]
            }
            ;;[Update] 
            {
              $T [cr] $T [ca]
            }
          }
        }
        $T [branch_req] 
      }
      if_stmt_206__entry__ |-> (if_stmt_206_eval_test)
      $P [ULT_u8_u1_209_place]
      ULT_u8_u1_209_place <-| (if_stmt_206_eval_test)
      ;;[if_stmt_206_if_link] 
      {
        $T [if_choice_transition] 
      }
      ;;[if_stmt_206_else_link] 
      {
        $T [else_choice_transition] 
      }
      ULT_u8_u1_209_place |-> (if_stmt_206_if_link if_stmt_206_else_link)
      $P [outer_loopback]
      outer_loopback <-| (if_stmt_206_if_link)
      if_stmt_206__exit__ <-| (if_stmt_206_else_link)
      // control-path for merge  
      //  file .Aa/mvp.opt.aa, line 50
      ;;[merge_stmt_44_dead_link] 
      {
        $T [dead_transition] $dead 
      }
      merge_stmt_44__entry__ |-> (merge_stmt_44_dead_link)
      merge_stmt_44__exit__ <-| (merge_stmt_44_dead_link)
      //---------------------   merge statement  file .Aa/mvp.opt.aa, line 50  --------------------------
      ||[merge_stmt_44__entry___PhiReq] 
      {
        ;;[phi_stmt_71] 
        {
          ||[phi_stmt_71_sources] 
          {
            // sources for 			$phi id := 			  ($bitcast ($uint<8>) 0  ) $on   $entry 			  nid $on   outer_loopback 
            // type of target is $uint<8>
            // constant source .... delay transition 
            $T [type_cast_74_konst_delay_trans] $delay
          }
          $T [phi_stmt_71_req] 
        }
        ;;[phi_stmt_45] 
        {
          ||[phi_stmt_45_sources] 
          {
            // sources for 			$phi I := 			  ($bitcast ($uint<8>) 0  ) $on   $entry 			  nI $on   outer_loopback 
            // type of target is $uint<8>
            // constant source .... delay transition 
            $T [type_cast_48_konst_delay_trans] $delay
          }
          $T [phi_stmt_45_req] 
        }
        ;;[phi_stmt_50] 
        {
          ||[phi_stmt_50_sources] 
          {
            // sources for 			$phi active_mem := 			  ($bitcast ($uint<2>) 0  ) $on   $entry 			  next_active_memory $on   outer_loopback 
            // type of target is $uint<2>
            // constant source .... delay transition 
            $T [type_cast_54_konst_delay_trans] $delay
          }
          $T [phi_stmt_50_req] 
        }
        ;;[phi_stmt_56] 
        {
          ||[phi_stmt_56_sources] 
          {
            // sources for 			$phi ia := 			  ($bitcast ($uint<8>) 0  ) $on   $entry 			  nia $on   outer_loopback 
            // type of target is $uint<8>
            // constant source .... delay transition 
            $T [type_cast_60_konst_delay_trans] $delay
          }
          $T [phi_stmt_56_req] 
        }
        ;;[phi_stmt_61] 
        {
          ||[phi_stmt_61_sources] 
          {
            // sources for 			$phi ib := 			  ($bitcast ($uint<8>) 0  ) $on   $entry 			  nib $on   outer_loopback 
            // type of target is $uint<8>
            // constant source .... delay transition 
            $T [type_cast_64_konst_delay_trans] $delay
          }
          $T [phi_stmt_61_req] 
        }
        ;;[phi_stmt_66] 
        {
          ||[phi_stmt_66_sources] 
          {
            // sources for 			$phi ic := 			  ($bitcast ($uint<8>) 0  ) $on   $entry 			  nic $on   outer_loopback 
            // type of target is $uint<8>
            // constant source .... delay transition 
            $T [type_cast_69_konst_delay_trans] $delay
          }
          $T [phi_stmt_66_req] 
        }
      }
      merge_stmt_44__entry__ |-> (merge_stmt_44__entry___PhiReq)
      ||[outer_loopback_PhiReq] 
      {
        ;;[phi_stmt_71] 
        {
          ||[phi_stmt_71_sources] 
          {
            // sources for 			$phi id := 			  ($bitcast ($uint<8>) 0  ) $on   $entry 			  nid $on   outer_loopback 
            // type of target is $uint<8>
            // trivial non-constant source .... interlock-buffer introduced 
            || [Interlock] 
            {
              ;;[Sample] 
              {
                $T [req] $T [ack]
              }
              ;;[Update] 
              {
                $T [req] $T [ack]
              }
            }
          }
          $T [phi_stmt_71_req] 
        }
        ;;[phi_stmt_45] 
        {
          ||[phi_stmt_45_sources] 
          {
            // sources for 			$phi I := 			  ($bitcast ($uint<8>) 0  ) $on   $entry 			  nI $on   outer_loopback 
            // type of target is $uint<8>
            // trivial non-constant source .... interlock-buffer introduced 
            || [Interlock] 
            {
              ;;[Sample] 
              {
                $T [req] $T [ack]
              }
              ;;[Update] 
              {
                $T [req] $T [ack]
              }
            }
          }
          $T [phi_stmt_45_req] 
        }
        ;;[phi_stmt_50] 
        {
          ||[phi_stmt_50_sources] 
          {
            // sources for 			$phi active_mem := 			  ($bitcast ($uint<2>) 0  ) $on   $entry 			  next_active_memory $on   outer_loopback 
            // type of target is $uint<2>
            // trivial non-constant source .... interlock-buffer introduced 
            || [Interlock] 
            {
              ;;[Sample] 
              {
                $T [req] $T [ack]
              }
              ;;[Update] 
              {
                $T [req] $T [ack]
              }
            }
          }
          $T [phi_stmt_50_req] 
        }
        ;;[phi_stmt_56] 
        {
          ||[phi_stmt_56_sources] 
          {
            // sources for 			$phi ia := 			  ($bitcast ($uint<8>) 0  ) $on   $entry 			  nia $on   outer_loopback 
            // type of target is $uint<8>
            // trivial non-constant source .... interlock-buffer introduced 
            || [Interlock] 
            {
              ;;[Sample] 
              {
                $T [req] $T [ack]
              }
              ;;[Update] 
              {
                $T [req] $T [ack]
              }
            }
          }
          $T [phi_stmt_56_req] 
        }
        ;;[phi_stmt_61] 
        {
          ||[phi_stmt_61_sources] 
          {
            // sources for 			$phi ib := 			  ($bitcast ($uint<8>) 0  ) $on   $entry 			  nib $on   outer_loopback 
            // type of target is $uint<8>
            // trivial non-constant source .... interlock-buffer introduced 
            || [Interlock] 
            {
              ;;[Sample] 
              {
                $T [req] $T [ack]
              }
              ;;[Update] 
              {
                $T [req] $T [ack]
              }
            }
          }
          $T [phi_stmt_61_req] 
        }
        ;;[phi_stmt_66] 
        {
          ||[phi_stmt_66_sources] 
          {
            // sources for 			$phi ic := 			  ($bitcast ($uint<8>) 0  ) $on   $entry 			  nic $on   outer_loopback 
            // type of target is $uint<8>
            // trivial non-constant source .... interlock-buffer introduced 
            || [Interlock] 
            {
              ;;[Sample] 
              {
                $T [req] $T [ack]
              }
              ;;[Update] 
              {
                $T [req] $T [ack]
              }
            }
          }
          $T [phi_stmt_66_req] 
        }
      }
      outer_loopback |-> (outer_loopback_PhiReq)
      $P [merge_stmt_44_PhiReqMerge] 
      merge_stmt_44_PhiReqMerge <-| ( merge_stmt_44__entry___PhiReq  outer_loopback_PhiReq )
      ||[merge_stmt_44_PhiAck] 
      {
        $T [phi_stmt_45_ack] 
        $T [phi_stmt_50_ack] 
        $T [phi_stmt_56_ack] 
        $T [phi_stmt_61_ack] 
        $T [phi_stmt_66_ack] 
        $T [phi_stmt_71_ack] 
      }
      merge_stmt_44_PhiReqMerge |-> (merge_stmt_44_PhiAck)
      merge_stmt_44__exit__  <-| (merge_stmt_44_PhiAck)
      //---------------------  end of merge statement  file .Aa/mvp.opt.aa, line 50  --------------------------
      merge_stmt_44__entry__ <-| (branch_block_stmt_43__entry__)
      assign_stmt_81_to_assign_stmt_159__entry__ <-| (merge_stmt_44__exit__)
      branch_block_stmt_160__entry__ <-| (assign_stmt_81_to_assign_stmt_159__exit__)
      if_stmt_206__entry__ <-| (branch_block_stmt_160__exit__)
      if_stmt_206__exit__ |-> (branch_block_stmt_43__exit__)
    }
  }
  // end control-path
  $DP 
  {
    // begin data-path 
    // constant-object-declarations for block %readMatrix%mRead%
    //  file .Aa/mvp.opt.aa, line 50
    // constant-object-declarations for block %readMatrix%mRead%cRead%
    //  file .Aa/mvp.opt.aa, line 78
    // constant-object-declarations for block %readMatrix%mRead%cRead
    //  file .Aa/mvp.opt.aa, line 74
    // constant-object-declarations for block %readMatrix%mRead
    //  file .Aa/mvp.opt.aa, line 48
    // constant-object-declarations for block %readMatrix
    //  file .Aa/mvp.opt.aa, line 43
    // constant-declarations for block %readMatrix%mRead
    //  file .Aa/mvp.opt.aa, line 48
    // constant-declarations for block %readMatrix%mRead%
    //  file .Aa/mvp.opt.aa, line 50
    // constant-declarations for phi:  			$phi I := 			  ($bitcast ($uint<8>) 0  ) $on   $entry 			  nI $on   outer_loopback 
    // type of target is $uint<8>
    //  file .Aa/mvp.opt.aa, line 51
    // ($bitcast ($uint<8>) 0  )
    $constant $W[type_cast_48_wire_constant] : $int<8> := _b00000000// 0
    // constant-declarations for phi:  			$phi active_mem := 			  ($bitcast ($uint<2>) 0  ) $on   $entry 			  next_active_memory $on   outer_loopback 
    // type of target is $uint<2>
    //  file .Aa/mvp.opt.aa, line 53
    // ($bitcast ($uint<2>) 0  )
    $constant $W[type_cast_54_wire_constant] : $int<2> := _b00// 0
    // constant-declarations for phi:  			$phi ia := 			  ($bitcast ($uint<8>) 0  ) $on   $entry 			  nia $on   outer_loopback 
    // type of target is $uint<8>
    //  file .Aa/mvp.opt.aa, line 55
    // ($bitcast ($uint<8>) 0  )
    $constant $W[type_cast_60_wire_constant] : $int<8> := _b00000000// 0
    // constant-declarations for phi:  			$phi ib := 			  ($bitcast ($uint<8>) 0  ) $on   $entry 			  nib $on   outer_loopback 
    // type of target is $uint<8>
    //  file .Aa/mvp.opt.aa, line 57
    // ($bitcast ($uint<8>) 0  )
    $constant $W[type_cast_64_wire_constant] : $int<8> := _b00000000// 0
    // constant-declarations for phi:  			$phi ic := 			  ($bitcast ($uint<8>) 0  ) $on   $entry 			  nic $on   outer_loopback 
    // type of target is $uint<8>
    //  file .Aa/mvp.opt.aa, line 59
    // ($bitcast ($uint<8>) 0  )
    $constant $W[type_cast_69_wire_constant] : $int<8> := _b00000000// 0
    // constant-declarations for phi:  			$phi id := 			  ($bitcast ($uint<8>) 0  ) $on   $entry 			  nid $on   outer_loopback 
    // type of target is $uint<8>
    //  file .Aa/mvp.opt.aa, line 61
    // ($bitcast ($uint<8>) 0  )
    $constant $W[type_cast_74_wire_constant] : $int<8> := _b00000000// 0
    // 1 
    $constant $W[konst_79_wire_constant] : $int<8> := _b00000001// 1
    // ( $mux (active_mem == 0 ) 1   ( $mux (active_mem == 1 ) 2   ( $mux (active_mem == 2 ) 3   0  )  )  ) 
    // 0 
    $constant $W[konst_84_wire_constant] : $int<2> := _b00// 0
    // 1 
    $constant $W[konst_86_wire_constant] : $int<2> := _b01// 1
    // ( $mux (active_mem == 1 ) 2   ( $mux (active_mem == 2 ) 3   0  )  ) 
    // 1 
    $constant $W[konst_88_wire_constant] : $int<2> := _b01// 1
    // 2 
    $constant $W[konst_90_wire_constant] : $int<2> := _b10// 2
    // ( $mux (active_mem == 2 ) 3   0  ) 
    // 2 
    $constant $W[konst_92_wire_constant] : $int<2> := _b10// 2
    // 3 
    $constant $W[konst_94_wire_constant] : $int<2> := _b11// 3
    // 0 
    $constant $W[konst_95_wire_constant] : $int<2> := _b00// 0
    // ( $mux (active_mem == 0 ) (ia + 1 )  ia ) 
    // 0 
    $constant $W[konst_102_wire_constant] : $int<2> := _b00// 0
    // 1 
    $constant $W[konst_105_wire_constant] : $int<8> := _b00000001// 1
    // ( $mux (active_mem == 1 ) (ib + 1 )  ib ) 
    // 1 
    $constant $W[konst_112_wire_constant] : $int<2> := _b01// 1
    // 1 
    $constant $W[konst_115_wire_constant] : $int<8> := _b00000001// 1
    // ( $mux (active_mem == 2 ) (ic + 1 )  ic ) 
    // 2 
    $constant $W[konst_122_wire_constant] : $int<2> := _b10// 2
    // 1 
    $constant $W[konst_125_wire_constant] : $int<8> := _b00000001// 1
    // ( $mux (active_mem == 3 ) (id + 1 )  id ) 
    // 3 
    $constant $W[konst_132_wire_constant] : $int<2> := _b11// 3
    // 1 
    $constant $W[konst_135_wire_constant] : $int<8> := _b00000001// 1
    // 0 
    $constant $W[konst_142_wire_constant] : $int<2> := _b00// 0
    // 1 
    $constant $W[konst_147_wire_constant] : $int<2> := _b01// 1
    // 2 
    $constant $W[konst_152_wire_constant] : $int<2> := _b10// 2
    // 3 
    $constant $W[konst_157_wire_constant] : $int<2> := _b11// 3
    // constant-declarations for block %readMatrix%mRead%cRead
    //  file .Aa/mvp.opt.aa, line 74
    // do-while statement  
    //  file .Aa/mvp.opt.aa, line 76
    // 32 
    $constant $W[konst_203_wire_constant] : $int<8> := _b00100000// 32
    // constant-declarations for block %readMatrix%mRead%cRead%
    //  file .Aa/mvp.opt.aa, line 78
    // constant-declarations for phi:  				$phi J := 				  ($bitcast ($uint<8>) 0  ) $on   $entry 				  nJ $on   $loopback 
    // type of target is $uint<8>
    //  file .Aa/mvp.opt.aa, line 79
    // ($bitcast ($uint<8>) 0  )
    $constant $W[type_cast_166_wire_constant] : $int<8> := _b00000000// 0
    // 1 
    $constant $W[konst_171_wire_constant] : $int<8> := _b00000001// 1
    // A_MEM[ia][J]
    $constant $W[array_obj_ref_180_resized_base_address] : $int<8> := _b00000000// 0
    $constant $W[array_obj_ref_180_offset_scale_factor_0] : $int<8> := _b00100000// 32
    $constant $W[array_obj_ref_180_offset_scale_factor_1] : $int<8> := _b00000001// 1
    $constant $W[array_obj_ref_180_word_offset_0] : $int<8> := _b00000000// 0
    // B_MEM[ib][J]
    $constant $W[array_obj_ref_186_resized_base_address] : $int<8> := _b00000000// 0
    $constant $W[array_obj_ref_186_offset_scale_factor_0] : $int<8> := _b00100000// 32
    $constant $W[array_obj_ref_186_offset_scale_factor_1] : $int<8> := _b00000001// 1
    $constant $W[array_obj_ref_186_word_offset_0] : $int<8> := _b00000000// 0
    // C_MEM[ic][J]
    $constant $W[array_obj_ref_192_resized_base_address] : $int<8> := _b00000000// 0
    $constant $W[array_obj_ref_192_offset_scale_factor_0] : $int<8> := _b00100000// 32
    $constant $W[array_obj_ref_192_offset_scale_factor_1] : $int<8> := _b00000001// 1
    $constant $W[array_obj_ref_192_word_offset_0] : $int<8> := _b00000000// 0
    // D_MEM[id][J]
    $constant $W[array_obj_ref_198_resized_base_address] : $int<8> := _b00000000// 0
    $constant $W[array_obj_ref_198_offset_scale_factor_0] : $int<8> := _b00100000// 32
    $constant $W[array_obj_ref_198_offset_scale_factor_1] : $int<8> := _b00000001// 1
    $constant $W[array_obj_ref_198_word_offset_0] : $int<8> := _b00000000// 0
    // if-statement  
    //  file .Aa/mvp.opt.aa, line 0
    // 32 
    $constant $W[konst_208_wire_constant] : $int<8> := _b00100000// 32
    // block %readMatrix%mRead
    //  file .Aa/mvp.opt.aa, line 48
    // merge-statement  
    //  file .Aa/mvp.opt.aa, line 50
    // 			$phi I := 			  ($bitcast ($uint<8>) 0  ) $on   $entry 			  nI $on   outer_loopback 
    // type of target is $uint<8>
    //  file .Aa/mvp.opt.aa, line 51
    $W[nI_81_49_buffered] : $int<8>
    // I
    $W[I_45] : $int<8>
    // 			$phi active_mem := 			  ($bitcast ($uint<2>) 0  ) $on   $entry 			  next_active_memory $on   outer_loopback 
    // type of target is $uint<2>
    //  file .Aa/mvp.opt.aa, line 53
    $W[next_active_memory_99_55_buffered] : $int<2>
    // active_mem
    $W[active_mem_50] : $int<2>
    // 			$phi ia := 			  ($bitcast ($uint<8>) 0  ) $on   $entry 			  nia $on   outer_loopback 
    // type of target is $uint<8>
    //  file .Aa/mvp.opt.aa, line 55
    $W[nia_109_58_buffered] : $int<8>
    // ia
    $W[ia_56] : $int<8>
    // 			$phi ib := 			  ($bitcast ($uint<8>) 0  ) $on   $entry 			  nib $on   outer_loopback 
    // type of target is $uint<8>
    //  file .Aa/mvp.opt.aa, line 57
    $W[nib_119_65_buffered] : $int<8>
    // ib
    $W[ib_61] : $int<8>
    // 			$phi ic := 			  ($bitcast ($uint<8>) 0  ) $on   $entry 			  nic $on   outer_loopback 
    // type of target is $uint<8>
    //  file .Aa/mvp.opt.aa, line 59
    $W[nic_129_70_buffered] : $int<8>
    // ic
    $W[ic_66] : $int<8>
    // 			$phi id := 			  ($bitcast ($uint<8>) 0  ) $on   $entry 			  nid $on   outer_loopback 
    // type of target is $uint<8>
    //  file .Aa/mvp.opt.aa, line 61
    $W[nid_139_75_buffered] : $int<8>
    // id
    $W[id_71] : $int<8>
    // 		nI := (I + 1 ) $buffering 1// bits of buffering = 8. 
    //  file .Aa/mvp.opt.aa, line 64
    // nI
    $W[nI_81] : $int<8>
    // 		$volatile next_active_memory := ( $mux (active_mem == 0 ) 1   ( $mux (active_mem == 1 ) 2   ( $mux (active_mem == 2 ) 3   0  )  )  )  $buffering 1
    //  file .Aa/mvp.opt.aa, line 65
    // (active_mem == 0 )
    $intermediate $W[EQ_u2_u1_85_wire] : $int<1>
    // (active_mem == 1 )
    $intermediate $W[EQ_u2_u1_89_wire] : $int<1>
    // (active_mem == 2 )
    $intermediate $W[EQ_u2_u1_93_wire] : $int<1>
    // ( $mux (active_mem == 2 ) 3   0  ) 
    $intermediate $W[MUX_96_wire] : $int<2>
    // ( $mux (active_mem == 1 ) 2   ( $mux (active_mem == 2 ) 3   0  )  ) 
    $intermediate $W[MUX_97_wire] : $int<2>
    // next_active_memory
    $W[next_active_memory_99] : $int<2>
    // 		$volatile nia := ( $mux (active_mem == 0 ) (ia + 1 )  ia )  $buffering 1
    //  file .Aa/mvp.opt.aa, line 66
    // (active_mem == 0 )
    $intermediate $W[EQ_u2_u1_103_wire] : $int<1>
    // (ia + 1 )
    $intermediate $W[ADD_u8_u8_106_wire] : $int<8>
    // nia
    $W[nia_109] : $int<8>
    // 		$volatile nib := ( $mux (active_mem == 1 ) (ib + 1 )  ib )  $buffering 1
    //  file .Aa/mvp.opt.aa, line 67
    // (active_mem == 1 )
    $intermediate $W[EQ_u2_u1_113_wire] : $int<1>
    // (ib + 1 )
    $intermediate $W[ADD_u8_u8_116_wire] : $int<8>
    // nib
    $W[nib_119] : $int<8>
    // 		$volatile nic := ( $mux (active_mem == 2 ) (ic + 1 )  ic )  $buffering 1
    //  file .Aa/mvp.opt.aa, line 68
    // (active_mem == 2 )
    $intermediate $W[EQ_u2_u1_123_wire] : $int<1>
    // (ic + 1 )
    $intermediate $W[ADD_u8_u8_126_wire] : $int<8>
    // nic
    $W[nic_129] : $int<8>
    // 		$volatile nid := ( $mux (active_mem == 3 ) (id + 1 )  id )  $buffering 1
    //  file .Aa/mvp.opt.aa, line 69
    // (active_mem == 3 )
    $intermediate $W[EQ_u2_u1_133_wire] : $int<1>
    // (id + 1 )
    $intermediate $W[ADD_u8_u8_136_wire] : $int<8>
    // nid
    $W[nid_139] : $int<8>
    // 		$volatile aTrue := (active_mem == 0 ) $buffering 1
    //  file .Aa/mvp.opt.aa, line 70
    // aTrue
    $W[aTrue_144] : $int<1>
    // 		$volatile bTrue := (active_mem == 1 ) $buffering 1
    //  file .Aa/mvp.opt.aa, line 71
    // bTrue
    $W[bTrue_149] : $int<1>
    // 		$volatile cTrue := (active_mem == 2 ) $buffering 1
    //  file .Aa/mvp.opt.aa, line 72
    // cTrue
    $W[cTrue_154] : $int<1>
    // 		$volatile dTrue := (active_mem == 3 ) $buffering 1
    //  file .Aa/mvp.opt.aa, line 73
    // dTrue
    $W[dTrue_159] : $int<1>
    // block %readMatrix%mRead%cRead
    //  file .Aa/mvp.opt.aa, line 74
    // do-while statement  
    //  file .Aa/mvp.opt.aa, line 76
    // (nJ < 32 )
    $intermediate $W[ULT_u8_u1_204_wire] : $int<1>
    // merge-statement  
    //  file .Aa/mvp.opt.aa, line 78
    // 				$phi J := 				  ($bitcast ($uint<8>) 0  ) $on   $entry 				  nJ $on   $loopback 
    // type of target is $uint<8>
    //  file .Aa/mvp.opt.aa, line 79
    $W[nJ_173_167_buffered] : $int<8>
    // J
    $W[J_163] : $int<8>
    // 				nJ := (J + 1 ) $buffering 2// bits of buffering = 16. 
    //  file .Aa/mvp.opt.aa, line 82
    // nJ
    $W[nJ_173] : $int<8>
    // 				aval := in_data $buffering 1// bits of buffering = 32. 
    //  file .Aa/mvp.opt.aa, line 83
    // aval
    $W[aval_176] : $int<32>
    // 				$guard (aTrue) A_MEM[ia][J] := aval $buffering 1// bits of buffering = 32. 
    //  file .Aa/mvp.opt.aa, line 84
    // A_MEM[ia][J]
    $intermediate $W[R_ia_178_resized] : $int<8>
    $intermediate $W[R_ia_178_scaled] : $int<8>
    $intermediate $W[R_J_179_resized] : $int<8>
    $intermediate $W[R_J_179_scaled] : $int<8>
    $intermediate $W[array_obj_ref_180_index_partial_sum_1] : $int<8>
    $intermediate $W[array_obj_ref_180_final_offset] : $int<8>
    $intermediate $W[array_obj_ref_180_root_address] : $int<8>
    $W[array_obj_ref_180_word_address_0] : $pointer<memory_space_0>
    $W[array_obj_ref_180_data_0] : $int<32>
    // 				$guard (bTrue) B_MEM[ib][J] := aval $buffering 1// bits of buffering = 32. 
    //  file .Aa/mvp.opt.aa, line 85
    // B_MEM[ib][J]
    $intermediate $W[R_ib_184_resized] : $int<8>
    $intermediate $W[R_ib_184_scaled] : $int<8>
    $intermediate $W[R_J_185_resized] : $int<8>
    $intermediate $W[R_J_185_scaled] : $int<8>
    $intermediate $W[array_obj_ref_186_index_partial_sum_1] : $int<8>
    $intermediate $W[array_obj_ref_186_final_offset] : $int<8>
    $intermediate $W[array_obj_ref_186_root_address] : $int<8>
    $W[array_obj_ref_186_word_address_0] : $pointer<memory_space_1>
    $W[array_obj_ref_186_data_0] : $int<32>
    // 				$guard (cTrue) C_MEM[ic][J] := aval $buffering 1// bits of buffering = 32. 
    //  file .Aa/mvp.opt.aa, line 86
    // C_MEM[ic][J]
    $intermediate $W[R_ic_190_resized] : $int<8>
    $intermediate $W[R_ic_190_scaled] : $int<8>
    $intermediate $W[R_J_191_resized] : $int<8>
    $intermediate $W[R_J_191_scaled] : $int<8>
    $intermediate $W[array_obj_ref_192_index_partial_sum_1] : $int<8>
    $intermediate $W[array_obj_ref_192_final_offset] : $int<8>
    $intermediate $W[array_obj_ref_192_root_address] : $int<8>
    $W[array_obj_ref_192_word_address_0] : $pointer<memory_space_2>
    $W[array_obj_ref_192_data_0] : $int<32>
    // 				$guard (dTrue) D_MEM[id][J] := aval $buffering 1// bits of buffering = 32. 
    //  file .Aa/mvp.opt.aa, line 87
    // D_MEM[id][J]
    $intermediate $W[R_id_196_resized] : $int<8>
    $intermediate $W[R_id_196_scaled] : $int<8>
    $intermediate $W[R_J_197_resized] : $int<8>
    $intermediate $W[R_J_197_scaled] : $int<8>
    $intermediate $W[array_obj_ref_198_index_partial_sum_1] : $int<8>
    $intermediate $W[array_obj_ref_198_final_offset] : $int<8>
    $intermediate $W[array_obj_ref_198_root_address] : $int<8>
    $W[array_obj_ref_198_word_address_0] : $pointer<memory_space_3>
    $W[array_obj_ref_198_data_0] : $int<32>
    // if statement  
    //  file .Aa/mvp.opt.aa, line 0
    // (nI < 32 )
    $intermediate $W[ULT_u8_u1_209_wire] : $int<1>
    // datapath-instances for block %readMatrix%mRead
    //  file .Aa/mvp.opt.aa, line 48
    // data-path instances for merge  
    //  file .Aa/mvp.opt.aa, line 50
    // 			$phi I := 			  ($bitcast ($uint<8>) 0  ) $on   $entry 			  nI $on   outer_loopback 
    // type of target is $uint<8>
    //  file .Aa/mvp.opt.aa, line 51
    # := [nI_81_49_buf] (nI_81) (nI_81_49_buffered)    
    $phi [phi_stmt_45] (type_cast_48_wire_constant nI_81_49_buffered) ( I_45 ) 
    // 			$phi active_mem := 			  ($bitcast ($uint<2>) 0  ) $on   $entry 			  next_active_memory $on   outer_loopback 
    // type of target is $uint<2>
    //  file .Aa/mvp.opt.aa, line 53
    # := [next_active_memory_99_55_buf] (next_active_memory_99) (next_active_memory_99_55_buffered)    
    $phi [phi_stmt_50] (type_cast_54_wire_constant next_active_memory_99_55_buffered) ( active_mem_50 ) 
    // 			$phi ia := 			  ($bitcast ($uint<8>) 0  ) $on   $entry 			  nia $on   outer_loopback 
    // type of target is $uint<8>
    //  file .Aa/mvp.opt.aa, line 55
    # := [nia_109_58_buf] (nia_109) (nia_109_58_buffered)    
    $phi [phi_stmt_56] (nia_109_58_buffered type_cast_60_wire_constant) ( ia_56 ) 
    // 			$phi ib := 			  ($bitcast ($uint<8>) 0  ) $on   $entry 			  nib $on   outer_loopback 
    // type of target is $uint<8>
    //  file .Aa/mvp.opt.aa, line 57
    # := [nib_119_65_buf] (nib_119) (nib_119_65_buffered)    
    $phi [phi_stmt_61] (type_cast_64_wire_constant nib_119_65_buffered) ( ib_61 ) 
    // 			$phi ic := 			  ($bitcast ($uint<8>) 0  ) $on   $entry 			  nic $on   outer_loopback 
    // type of target is $uint<8>
    //  file .Aa/mvp.opt.aa, line 59
    # := [nic_129_70_buf] (nic_129) (nic_129_70_buffered)    
    $phi [phi_stmt_66] (type_cast_69_wire_constant nic_129_70_buffered) ( ic_66 ) 
    // 			$phi id := 			  ($bitcast ($uint<8>) 0  ) $on   $entry 			  nid $on   outer_loopback 
    // type of target is $uint<8>
    //  file .Aa/mvp.opt.aa, line 61
    # := [nid_139_75_buf] (nid_139) (nid_139_75_buffered)    
    $phi [phi_stmt_71] (type_cast_74_wire_constant nid_139_75_buffered) ( id_71 ) 
    // 		nI := (I + 1 ) $buffering 1// bits of buffering = 8. 
    //  file .Aa/mvp.opt.aa, line 64
    // (I + 1 )
    +[ADD_u8_u8_80_inst] (I_45 konst_79_wire_constant) (nI_81)   
    $buffering  $out ADD_u8_u8_80_inst nI_81 1
    $delay ADD_u8_u8_80_inst 1
    // 		$volatile next_active_memory := ( $mux (active_mem == 0 ) 1   ( $mux (active_mem == 1 ) 2   ( $mux (active_mem == 2 ) 3   0  )  )  )  $buffering 1
    //  file .Aa/mvp.opt.aa, line 65
    // (active_mem == 0 )
    ==[EQ_u2_u1_85_inst] (active_mem_50 konst_84_wire_constant) (EQ_u2_u1_85_wire)   $flowthrough 
    $delay EQ_u2_u1_85_inst 0
    // (active_mem == 1 )
    ==[EQ_u2_u1_89_inst] (active_mem_50 konst_88_wire_constant) (EQ_u2_u1_89_wire)   $flowthrough 
    $delay EQ_u2_u1_89_inst 0
    // (active_mem == 2 )
    ==[EQ_u2_u1_93_inst] (active_mem_50 konst_92_wire_constant) (EQ_u2_u1_93_wire)   $flowthrough 
    $delay EQ_u2_u1_93_inst 0
    // ( $mux (active_mem == 2 ) 3   0  ) 
    ? [MUX_96_inst] (EQ_u2_u1_93_wire konst_94_wire_constant konst_95_wire_constant) (MUX_96_wire)  $flowthrough
    // ( $mux (active_mem == 1 ) 2   ( $mux (active_mem == 2 ) 3   0  )  ) 
    ? [MUX_97_inst] (EQ_u2_u1_89_wire konst_90_wire_constant MUX_96_wire) (MUX_97_wire)  $flowthrough
    // ( $mux (active_mem == 0 ) 1   ( $mux (active_mem == 1 ) 2   ( $mux (active_mem == 2 ) 3   0  )  )  ) 
    ? [MUX_98_inst] (EQ_u2_u1_85_wire konst_86_wire_constant MUX_97_wire) (next_active_memory_99)  $flowthrough
    // 		$volatile nia := ( $mux (active_mem == 0 ) (ia + 1 )  ia )  $buffering 1
    //  file .Aa/mvp.opt.aa, line 66
    // (active_mem == 0 )
    ==[EQ_u2_u1_103_inst] (active_mem_50 konst_102_wire_constant) (EQ_u2_u1_103_wire)   $flowthrough 
    $delay EQ_u2_u1_103_inst 0
    // (ia + 1 )
    +[ADD_u8_u8_106_inst] (ia_56 konst_105_wire_constant) (ADD_u8_u8_106_wire)   $flowthrough 
    $delay ADD_u8_u8_106_inst 0
    // ( $mux (active_mem == 0 ) (ia + 1 )  ia ) 
    ? [MUX_108_inst] (EQ_u2_u1_103_wire ADD_u8_u8_106_wire ia_56) (nia_109)  $flowthrough
    // 		$volatile nib := ( $mux (active_mem == 1 ) (ib + 1 )  ib )  $buffering 1
    //  file .Aa/mvp.opt.aa, line 67
    // (active_mem == 1 )
    ==[EQ_u2_u1_113_inst] (active_mem_50 konst_112_wire_constant) (EQ_u2_u1_113_wire)   $flowthrough 
    $delay EQ_u2_u1_113_inst 0
    // (ib + 1 )
    +[ADD_u8_u8_116_inst] (ib_61 konst_115_wire_constant) (ADD_u8_u8_116_wire)   $flowthrough 
    $delay ADD_u8_u8_116_inst 0
    // ( $mux (active_mem == 1 ) (ib + 1 )  ib ) 
    ? [MUX_118_inst] (EQ_u2_u1_113_wire ADD_u8_u8_116_wire ib_61) (nib_119)  $flowthrough
    // 		$volatile nic := ( $mux (active_mem == 2 ) (ic + 1 )  ic )  $buffering 1
    //  file .Aa/mvp.opt.aa, line 68
    // (active_mem == 2 )
    ==[EQ_u2_u1_123_inst] (active_mem_50 konst_122_wire_constant) (EQ_u2_u1_123_wire)   $flowthrough 
    $delay EQ_u2_u1_123_inst 0
    // (ic + 1 )
    +[ADD_u8_u8_126_inst] (ic_66 konst_125_wire_constant) (ADD_u8_u8_126_wire)   $flowthrough 
    $delay ADD_u8_u8_126_inst 0
    // ( $mux (active_mem == 2 ) (ic + 1 )  ic ) 
    ? [MUX_128_inst] (EQ_u2_u1_123_wire ADD_u8_u8_126_wire ic_66) (nic_129)  $flowthrough
    // 		$volatile nid := ( $mux (active_mem == 3 ) (id + 1 )  id )  $buffering 1
    //  file .Aa/mvp.opt.aa, line 69
    // (active_mem == 3 )
    ==[EQ_u2_u1_133_inst] (active_mem_50 konst_132_wire_constant) (EQ_u2_u1_133_wire)   $flowthrough 
    $delay EQ_u2_u1_133_inst 0
    // (id + 1 )
    +[ADD_u8_u8_136_inst] (id_71 konst_135_wire_constant) (ADD_u8_u8_136_wire)   $flowthrough 
    $delay ADD_u8_u8_136_inst 0
    // ( $mux (active_mem == 3 ) (id + 1 )  id ) 
    ? [MUX_138_inst] (EQ_u2_u1_133_wire ADD_u8_u8_136_wire id_71) (nid_139)  $flowthrough
    // 		$volatile aTrue := (active_mem == 0 ) $buffering 1
    //  file .Aa/mvp.opt.aa, line 70
    // (active_mem == 0 )
    ==[EQ_u2_u1_143_inst] (active_mem_50 konst_142_wire_constant) (aTrue_144)   $flowthrough 
    $delay EQ_u2_u1_143_inst 0
    // 		$volatile bTrue := (active_mem == 1 ) $buffering 1
    //  file .Aa/mvp.opt.aa, line 71
    // (active_mem == 1 )
    ==[EQ_u2_u1_148_inst] (active_mem_50 konst_147_wire_constant) (bTrue_149)   $flowthrough 
    $delay EQ_u2_u1_148_inst 0
    // 		$volatile cTrue := (active_mem == 2 ) $buffering 1
    //  file .Aa/mvp.opt.aa, line 72
    // (active_mem == 2 )
    ==[EQ_u2_u1_153_inst] (active_mem_50 konst_152_wire_constant) (cTrue_154)   $flowthrough 
    $delay EQ_u2_u1_153_inst 0
    // 		$volatile dTrue := (active_mem == 3 ) $buffering 1
    //  file .Aa/mvp.opt.aa, line 73
    // (active_mem == 3 )
    ==[EQ_u2_u1_158_inst] (active_mem_50 konst_157_wire_constant) (dTrue_159)   $flowthrough 
    $delay EQ_u2_u1_158_inst 0
    // datapath-instances for block %readMatrix%mRead%cRead
    //  file .Aa/mvp.opt.aa, line 74
    // datapath-instances for do-while  
    //  file .Aa/mvp.opt.aa, line 76
    // (nJ < 32 )
    <[ULT_u8_u1_204_inst] (nJ_173 konst_203_wire_constant) (ULT_u8_u1_204_wire)   $flowthrough 
    $delay ULT_u8_u1_204_inst 0
    ==0? [do_while_stmt_161_branch] (ULT_u8_u1_204_wire)
    $flowthrough
    // data-path instances for merge  
    //  file .Aa/mvp.opt.aa, line 78
    // 				$phi J := 				  ($bitcast ($uint<8>) 0  ) $on   $entry 				  nJ $on   $loopback 
    // type of target is $uint<8>
    //  file .Aa/mvp.opt.aa, line 79
    # := [nJ_173_167_buf] (nJ_173) (nJ_173_167_buffered)     $fullrate
    $buffering $out nJ_173_167_buf nJ_173_167_buffered  1
    # $phi [phi_stmt_163] (type_cast_166_wire_constant nJ_173_167_buffered) ( J_163 ) $fullrate
    // $buffering  $out phi_stmt_163 J_163 2
    // 				nJ := (J + 1 ) $buffering 2// bits of buffering = 16. 
    //  file .Aa/mvp.opt.aa, line 82
    // (J + 1 )
    +[ADD_u8_u8_172_inst] (J_163 konst_171_wire_constant) (nJ_173)    $fullrate
    $buffering  $out ADD_u8_u8_172_inst nJ_173 2
    $delay ADD_u8_u8_172_inst 1
    // 				aval := in_data $buffering 1// bits of buffering = 32. 
    //  file .Aa/mvp.opt.aa, line 83
    // in_data
    $ioport $in [RPIPE_in_data_175_inst] (in_data) (aval_176)  $fullrate 
    $buffering $out RPIPE_in_data_175_inst aval_176 1
    // 				$guard (aTrue) A_MEM[ia][J] := aval $buffering 1// bits of buffering = 32. 
    //  file .Aa/mvp.opt.aa, line 84
    // A_MEM[ia][J]
    &/ [array_obj_ref_180_index_0_resize] (ia_56) (R_ia_178_resized) $guard ( aTrue_144 ) 
    $flowthrough 
    *[array_obj_ref_180_index_0_scale] (R_ia_178_resized array_obj_ref_180_offset_scale_factor_0) (R_ia_178_scaled) $guard ( aTrue_144 )    $fullrate
    $buffering  $in array_obj_ref_180_index_0_scale R_ia_178_resized 2
    $buffering  $in array_obj_ref_180_index_0_scale array_obj_ref_180_offset_scale_factor_0 2
    $buffering  $out array_obj_ref_180_index_0_scale R_ia_178_scaled 2
    $delay array_obj_ref_180_index_0_scale 2
    &/ [array_obj_ref_180_index_1_resize] (J_163) (R_J_179_resized) $guard ( aTrue_144 ) 
    $flowthrough 
    &/ [array_obj_ref_180_index_1_rename] (R_J_179_resized) (R_J_179_scaled) $guard ( aTrue_144 ) 
    $flowthrough 
    +[array_obj_ref_180_index_sum_1] (R_J_179_scaled R_ia_178_scaled) (array_obj_ref_180_index_partial_sum_1) $guard ( aTrue_144 )    $fullrate
    $buffering  $in array_obj_ref_180_index_sum_1 R_J_179_scaled 2
    $buffering  $in array_obj_ref_180_index_sum_1 R_ia_178_scaled 2
    $buffering  $out array_obj_ref_180_index_sum_1 array_obj_ref_180_index_partial_sum_1 2
    $delay array_obj_ref_180_index_sum_1 2
    &/ [array_obj_ref_180_index_offset] (array_obj_ref_180_index_partial_sum_1) (array_obj_ref_180_final_offset) $guard ( aTrue_144 ) 
    $flowthrough 
    &/ [array_obj_ref_180_root_address_inst] (array_obj_ref_180_final_offset) (array_obj_ref_180_root_address) $guard ( aTrue_144 ) 
    $flowthrough 
    &/ [array_obj_ref_180_addr_0] (array_obj_ref_180_root_address) (array_obj_ref_180_word_address_0) $guard ( aTrue_144 ) 
    $flowthrough 
    $store [array_obj_ref_180_store_0] $to memory_space_0 (array_obj_ref_180_word_address_0 array_obj_ref_180_data_0) $guard ( aTrue_144 ) 
    $buffering  $in array_obj_ref_180_store_0 array_obj_ref_180_word_address_0 2
    $buffering  $in array_obj_ref_180_store_0 array_obj_ref_180_data_0 2
    $delay array_obj_ref_180_store_0 4
    &/ [array_obj_ref_180_gather_scatter] (aval_176) (array_obj_ref_180_data_0) $guard ( aTrue_144 ) 
    $flowthrough 
    // 				$guard (bTrue) B_MEM[ib][J] := aval $buffering 1// bits of buffering = 32. 
    //  file .Aa/mvp.opt.aa, line 85
    // B_MEM[ib][J]
    &/ [array_obj_ref_186_index_0_resize] (ib_61) (R_ib_184_resized) $guard ( bTrue_149 ) 
    $flowthrough 
    *[array_obj_ref_186_index_0_scale] (R_ib_184_resized array_obj_ref_186_offset_scale_factor_0) (R_ib_184_scaled) $guard ( bTrue_149 )    $fullrate
    $buffering  $in array_obj_ref_186_index_0_scale R_ib_184_resized 2
    $buffering  $in array_obj_ref_186_index_0_scale array_obj_ref_186_offset_scale_factor_0 2
    $buffering  $out array_obj_ref_186_index_0_scale R_ib_184_scaled 2
    $delay array_obj_ref_186_index_0_scale 2
    &/ [array_obj_ref_186_index_1_resize] (J_163) (R_J_185_resized) $guard ( bTrue_149 ) 
    $flowthrough 
    &/ [array_obj_ref_186_index_1_rename] (R_J_185_resized) (R_J_185_scaled) $guard ( bTrue_149 ) 
    $flowthrough 
    +[array_obj_ref_186_index_sum_1] (R_J_185_scaled R_ib_184_scaled) (array_obj_ref_186_index_partial_sum_1) $guard ( bTrue_149 )    $fullrate
    $buffering  $in array_obj_ref_186_index_sum_1 R_J_185_scaled 2
    $buffering  $in array_obj_ref_186_index_sum_1 R_ib_184_scaled 2
    $buffering  $out array_obj_ref_186_index_sum_1 array_obj_ref_186_index_partial_sum_1 2
    $delay array_obj_ref_186_index_sum_1 2
    &/ [array_obj_ref_186_index_offset] (array_obj_ref_186_index_partial_sum_1) (array_obj_ref_186_final_offset) $guard ( bTrue_149 ) 
    $flowthrough 
    &/ [array_obj_ref_186_root_address_inst] (array_obj_ref_186_final_offset) (array_obj_ref_186_root_address) $guard ( bTrue_149 ) 
    $flowthrough 
    &/ [array_obj_ref_186_addr_0] (array_obj_ref_186_root_address) (array_obj_ref_186_word_address_0) $guard ( bTrue_149 ) 
    $flowthrough 
    $store [array_obj_ref_186_store_0] $to memory_space_1 (array_obj_ref_186_word_address_0 array_obj_ref_186_data_0) $guard ( bTrue_149 ) 
    $buffering  $in array_obj_ref_186_store_0 array_obj_ref_186_word_address_0 2
    $buffering  $in array_obj_ref_186_store_0 array_obj_ref_186_data_0 2
    $delay array_obj_ref_186_store_0 4
    &/ [array_obj_ref_186_gather_scatter] (aval_176) (array_obj_ref_186_data_0) $guard ( bTrue_149 ) 
    $flowthrough 
    // 				$guard (cTrue) C_MEM[ic][J] := aval $buffering 1// bits of buffering = 32. 
    //  file .Aa/mvp.opt.aa, line 86
    // C_MEM[ic][J]
    &/ [array_obj_ref_192_index_0_resize] (ic_66) (R_ic_190_resized) $guard ( cTrue_154 ) 
    $flowthrough 
    *[array_obj_ref_192_index_0_scale] (R_ic_190_resized array_obj_ref_192_offset_scale_factor_0) (R_ic_190_scaled) $guard ( cTrue_154 )    $fullrate
    $buffering  $in array_obj_ref_192_index_0_scale R_ic_190_resized 2
    $buffering  $in array_obj_ref_192_index_0_scale array_obj_ref_192_offset_scale_factor_0 2
    $buffering  $out array_obj_ref_192_index_0_scale R_ic_190_scaled 2
    $delay array_obj_ref_192_index_0_scale 2
    &/ [array_obj_ref_192_index_1_resize] (J_163) (R_J_191_resized) $guard ( cTrue_154 ) 
    $flowthrough 
    &/ [array_obj_ref_192_index_1_rename] (R_J_191_resized) (R_J_191_scaled) $guard ( cTrue_154 ) 
    $flowthrough 
    +[array_obj_ref_192_index_sum_1] (R_J_191_scaled R_ic_190_scaled) (array_obj_ref_192_index_partial_sum_1) $guard ( cTrue_154 )    $fullrate
    $buffering  $in array_obj_ref_192_index_sum_1 R_J_191_scaled 2
    $buffering  $in array_obj_ref_192_index_sum_1 R_ic_190_scaled 2
    $buffering  $out array_obj_ref_192_index_sum_1 array_obj_ref_192_index_partial_sum_1 2
    $delay array_obj_ref_192_index_sum_1 2
    &/ [array_obj_ref_192_index_offset] (array_obj_ref_192_index_partial_sum_1) (array_obj_ref_192_final_offset) $guard ( cTrue_154 ) 
    $flowthrough 
    &/ [array_obj_ref_192_root_address_inst] (array_obj_ref_192_final_offset) (array_obj_ref_192_root_address) $guard ( cTrue_154 ) 
    $flowthrough 
    &/ [array_obj_ref_192_addr_0] (array_obj_ref_192_root_address) (array_obj_ref_192_word_address_0) $guard ( cTrue_154 ) 
    $flowthrough 
    $store [array_obj_ref_192_store_0] $to memory_space_2 (array_obj_ref_192_word_address_0 array_obj_ref_192_data_0) $guard ( cTrue_154 ) 
    $buffering  $in array_obj_ref_192_store_0 array_obj_ref_192_word_address_0 2
    $buffering  $in array_obj_ref_192_store_0 array_obj_ref_192_data_0 2
    $delay array_obj_ref_192_store_0 4
    &/ [array_obj_ref_192_gather_scatter] (aval_176) (array_obj_ref_192_data_0) $guard ( cTrue_154 ) 
    $flowthrough 
    // 				$guard (dTrue) D_MEM[id][J] := aval $buffering 1// bits of buffering = 32. 
    //  file .Aa/mvp.opt.aa, line 87
    // D_MEM[id][J]
    &/ [array_obj_ref_198_index_0_resize] (id_71) (R_id_196_resized) $guard ( dTrue_159 ) 
    $flowthrough 
    *[array_obj_ref_198_index_0_scale] (R_id_196_resized array_obj_ref_198_offset_scale_factor_0) (R_id_196_scaled) $guard ( dTrue_159 )    $fullrate
    $buffering  $in array_obj_ref_198_index_0_scale R_id_196_resized 2
    $buffering  $in array_obj_ref_198_index_0_scale array_obj_ref_198_offset_scale_factor_0 2
    $buffering  $out array_obj_ref_198_index_0_scale R_id_196_scaled 2
    $delay array_obj_ref_198_index_0_scale 2
    &/ [array_obj_ref_198_index_1_resize] (J_163) (R_J_197_resized) $guard ( dTrue_159 ) 
    $flowthrough 
    &/ [array_obj_ref_198_index_1_rename] (R_J_197_resized) (R_J_197_scaled) $guard ( dTrue_159 ) 
    $flowthrough 
    +[array_obj_ref_198_index_sum_1] (R_J_197_scaled R_id_196_scaled) (array_obj_ref_198_index_partial_sum_1) $guard ( dTrue_159 )    $fullrate
    $buffering  $in array_obj_ref_198_index_sum_1 R_J_197_scaled 2
    $buffering  $in array_obj_ref_198_index_sum_1 R_id_196_scaled 2
    $buffering  $out array_obj_ref_198_index_sum_1 array_obj_ref_198_index_partial_sum_1 2
    $delay array_obj_ref_198_index_sum_1 2
    &/ [array_obj_ref_198_index_offset] (array_obj_ref_198_index_partial_sum_1) (array_obj_ref_198_final_offset) $guard ( dTrue_159 ) 
    $flowthrough 
    &/ [array_obj_ref_198_root_address_inst] (array_obj_ref_198_final_offset) (array_obj_ref_198_root_address) $guard ( dTrue_159 ) 
    $flowthrough 
    &/ [array_obj_ref_198_addr_0] (array_obj_ref_198_root_address) (array_obj_ref_198_word_address_0) $guard ( dTrue_159 ) 
    $flowthrough 
    $store [array_obj_ref_198_store_0] $to memory_space_3 (array_obj_ref_198_word_address_0 array_obj_ref_198_data_0) $guard ( dTrue_159 ) 
    $buffering  $in array_obj_ref_198_store_0 array_obj_ref_198_word_address_0 2
    $buffering  $in array_obj_ref_198_store_0 array_obj_ref_198_data_0 2
    $delay array_obj_ref_198_store_0 4
    &/ [array_obj_ref_198_gather_scatter] (aval_176) (array_obj_ref_198_data_0) $guard ( dTrue_159 ) 
    $flowthrough 
    // datapath-instances for if  
    //  file .Aa/mvp.opt.aa, line 0
    // (nI < 32 )
    <[ULT_u8_u1_209_inst] (nI_81 konst_208_wire_constant) (ULT_u8_u1_209_wire)   $flowthrough 
    $delay ULT_u8_u1_209_inst 0
    ==0? [if_stmt_206_branch] (ULT_u8_u1_209_wire)
  }
  // end data-path
  // CP-DP links for merge  
  //  file .Aa/mvp.opt.aa, line 50
  nI_81_49_buf <=> (branch_block_stmt_43/outer_loopback_PhiReq/phi_stmt_45/phi_stmt_45_sources/Interlock/Sample/req branch_block_stmt_43/outer_loopback_PhiReq/phi_stmt_45/phi_stmt_45_sources/Interlock/Update/req) (branch_block_stmt_43/outer_loopback_PhiReq/phi_stmt_45/phi_stmt_45_sources/Interlock/Sample/ack branch_block_stmt_43/outer_loopback_PhiReq/phi_stmt_45/phi_stmt_45_sources/Interlock/Update/ack)
  phi_stmt_45 <=> (branch_block_stmt_43/merge_stmt_44__entry___PhiReq/phi_stmt_45/phi_stmt_45_req branch_block_stmt_43/outer_loopback_PhiReq/phi_stmt_45/phi_stmt_45_req) (branch_block_stmt_43/merge_stmt_44_PhiAck/phi_stmt_45_ack)
  next_active_memory_99_55_buf <=> (branch_block_stmt_43/outer_loopback_PhiReq/phi_stmt_50/phi_stmt_50_sources/Interlock/Sample/req branch_block_stmt_43/outer_loopback_PhiReq/phi_stmt_50/phi_stmt_50_sources/Interlock/Update/req) (branch_block_stmt_43/outer_loopback_PhiReq/phi_stmt_50/phi_stmt_50_sources/Interlock/Sample/ack branch_block_stmt_43/outer_loopback_PhiReq/phi_stmt_50/phi_stmt_50_sources/Interlock/Update/ack)
  phi_stmt_50 <=> (branch_block_stmt_43/merge_stmt_44__entry___PhiReq/phi_stmt_50/phi_stmt_50_req branch_block_stmt_43/outer_loopback_PhiReq/phi_stmt_50/phi_stmt_50_req) (branch_block_stmt_43/merge_stmt_44_PhiAck/phi_stmt_50_ack)
  nia_109_58_buf <=> (branch_block_stmt_43/outer_loopback_PhiReq/phi_stmt_56/phi_stmt_56_sources/Interlock/Sample/req branch_block_stmt_43/outer_loopback_PhiReq/phi_stmt_56/phi_stmt_56_sources/Interlock/Update/req) (branch_block_stmt_43/outer_loopback_PhiReq/phi_stmt_56/phi_stmt_56_sources/Interlock/Sample/ack branch_block_stmt_43/outer_loopback_PhiReq/phi_stmt_56/phi_stmt_56_sources/Interlock/Update/ack)
  phi_stmt_56 <=> (branch_block_stmt_43/outer_loopback_PhiReq/phi_stmt_56/phi_stmt_56_req branch_block_stmt_43/merge_stmt_44__entry___PhiReq/phi_stmt_56/phi_stmt_56_req) (branch_block_stmt_43/merge_stmt_44_PhiAck/phi_stmt_56_ack)
  nib_119_65_buf <=> (branch_block_stmt_43/outer_loopback_PhiReq/phi_stmt_61/phi_stmt_61_sources/Interlock/Sample/req branch_block_stmt_43/outer_loopback_PhiReq/phi_stmt_61/phi_stmt_61_sources/Interlock/Update/req) (branch_block_stmt_43/outer_loopback_PhiReq/phi_stmt_61/phi_stmt_61_sources/Interlock/Sample/ack branch_block_stmt_43/outer_loopback_PhiReq/phi_stmt_61/phi_stmt_61_sources/Interlock/Update/ack)
  phi_stmt_61 <=> (branch_block_stmt_43/merge_stmt_44__entry___PhiReq/phi_stmt_61/phi_stmt_61_req branch_block_stmt_43/outer_loopback_PhiReq/phi_stmt_61/phi_stmt_61_req) (branch_block_stmt_43/merge_stmt_44_PhiAck/phi_stmt_61_ack)
  nic_129_70_buf <=> (branch_block_stmt_43/outer_loopback_PhiReq/phi_stmt_66/phi_stmt_66_sources/Interlock/Sample/req branch_block_stmt_43/outer_loopback_PhiReq/phi_stmt_66/phi_stmt_66_sources/Interlock/Update/req) (branch_block_stmt_43/outer_loopback_PhiReq/phi_stmt_66/phi_stmt_66_sources/Interlock/Sample/ack branch_block_stmt_43/outer_loopback_PhiReq/phi_stmt_66/phi_stmt_66_sources/Interlock/Update/ack)
  phi_stmt_66 <=> (branch_block_stmt_43/merge_stmt_44__entry___PhiReq/phi_stmt_66/phi_stmt_66_req branch_block_stmt_43/outer_loopback_PhiReq/phi_stmt_66/phi_stmt_66_req) (branch_block_stmt_43/merge_stmt_44_PhiAck/phi_stmt_66_ack)
  nid_139_75_buf <=> (branch_block_stmt_43/outer_loopback_PhiReq/phi_stmt_71/phi_stmt_71_sources/Interlock/Sample/req branch_block_stmt_43/outer_loopback_PhiReq/phi_stmt_71/phi_stmt_71_sources/Interlock/Update/req) (branch_block_stmt_43/outer_loopback_PhiReq/phi_stmt_71/phi_stmt_71_sources/Interlock/Sample/ack branch_block_stmt_43/outer_loopback_PhiReq/phi_stmt_71/phi_stmt_71_sources/Interlock/Update/ack)
  phi_stmt_71 <=> (branch_block_stmt_43/merge_stmt_44__entry___PhiReq/phi_stmt_71/phi_stmt_71_req branch_block_stmt_43/outer_loopback_PhiReq/phi_stmt_71/phi_stmt_71_req) (branch_block_stmt_43/merge_stmt_44_PhiAck/phi_stmt_71_ack)
  // 		nI := (I + 1 ) $buffering 1// bits of buffering = 8. 
  //  file .Aa/mvp.opt.aa, line 64
  // (I + 1 )
  // I
  ADD_u8_u8_80_inst <=> (branch_block_stmt_43/assign_stmt_81_to_assign_stmt_159/ADD_u8_u8_80_Sample/rr branch_block_stmt_43/assign_stmt_81_to_assign_stmt_159/ADD_u8_u8_80_Update/cr) (branch_block_stmt_43/assign_stmt_81_to_assign_stmt_159/ADD_u8_u8_80_Sample/ra branch_block_stmt_43/assign_stmt_81_to_assign_stmt_159/ADD_u8_u8_80_Update/ca)
  // 		$volatile next_active_memory := ( $mux (active_mem == 0 ) 1   ( $mux (active_mem == 1 ) 2   ( $mux (active_mem == 2 ) 3   0  )  )  )  $buffering 1
  //  file .Aa/mvp.opt.aa, line 65
  // (active_mem == 0 )
  // active_mem
  // (active_mem == 1 )
  // active_mem
  // (active_mem == 2 )
  // active_mem
  // ( $mux (active_mem == 2 ) 3   0  ) 
  // ( $mux (active_mem == 1 ) 2   ( $mux (active_mem == 2 ) 3   0  )  ) 
  // ( $mux (active_mem == 0 ) 1   ( $mux (active_mem == 1 ) 2   ( $mux (active_mem == 2 ) 3   0  )  )  ) 
  // 		$volatile nia := ( $mux (active_mem == 0 ) (ia + 1 )  ia )  $buffering 1
  //  file .Aa/mvp.opt.aa, line 66
  // (active_mem == 0 )
  // active_mem
  // (ia + 1 )
  // ia
  // ia
  // ( $mux (active_mem == 0 ) (ia + 1 )  ia ) 
  // 		$volatile nib := ( $mux (active_mem == 1 ) (ib + 1 )  ib )  $buffering 1
  //  file .Aa/mvp.opt.aa, line 67
  // (active_mem == 1 )
  // active_mem
  // (ib + 1 )
  // ib
  // ib
  // ( $mux (active_mem == 1 ) (ib + 1 )  ib ) 
  // 		$volatile nic := ( $mux (active_mem == 2 ) (ic + 1 )  ic )  $buffering 1
  //  file .Aa/mvp.opt.aa, line 68
  // (active_mem == 2 )
  // active_mem
  // (ic + 1 )
  // ic
  // ic
  // ( $mux (active_mem == 2 ) (ic + 1 )  ic ) 
  // 		$volatile nid := ( $mux (active_mem == 3 ) (id + 1 )  id )  $buffering 1
  //  file .Aa/mvp.opt.aa, line 69
  // (active_mem == 3 )
  // active_mem
  // (id + 1 )
  // id
  // id
  // ( $mux (active_mem == 3 ) (id + 1 )  id ) 
  // 		$volatile aTrue := (active_mem == 0 ) $buffering 1
  //  file .Aa/mvp.opt.aa, line 70
  // (active_mem == 0 )
  // active_mem
  // 		$volatile bTrue := (active_mem == 1 ) $buffering 1
  //  file .Aa/mvp.opt.aa, line 71
  // (active_mem == 1 )
  // active_mem
  // 		$volatile cTrue := (active_mem == 2 ) $buffering 1
  //  file .Aa/mvp.opt.aa, line 72
  // (active_mem == 2 )
  // active_mem
  // 		$volatile dTrue := (active_mem == 3 ) $buffering 1
  //  file .Aa/mvp.opt.aa, line 73
  // (active_mem == 3 )
  // active_mem
  // CP-DP links for do-while  do_while_stmt_161
  //  file .Aa/mvp.opt.aa, line 76
  phi_stmt_163 <=> (branch_block_stmt_43/branch_block_stmt_160/do_while_stmt_161/do_while_stmt_161_loop_body/phi_stmt_163_entry_sample_req branch_block_stmt_43/branch_block_stmt_160/do_while_stmt_161/do_while_stmt_161_loop_body/phi_stmt_163_loopback_sample_req) (branch_block_stmt_43/branch_block_stmt_160/do_while_stmt_161/do_while_stmt_161_loop_body/phi_stmt_163_phi_mux_ack)
  nJ_173_167_buf <=> (branch_block_stmt_43/branch_block_stmt_160/do_while_stmt_161/do_while_stmt_161_loop_body/R_nJ_167_Sample/req branch_block_stmt_43/branch_block_stmt_160/do_while_stmt_161/do_while_stmt_161_loop_body/R_nJ_167_Update/req) (branch_block_stmt_43/branch_block_stmt_160/do_while_stmt_161/do_while_stmt_161_loop_body/R_nJ_167_Sample/ack branch_block_stmt_43/branch_block_stmt_160/do_while_stmt_161/do_while_stmt_161_loop_body/R_nJ_167_Update/ack)
  // 				nJ := (J + 1 ) $buffering 2// bits of buffering = 16. 
  //  file .Aa/mvp.opt.aa, line 82
  // (J + 1 )
  // J
  ADD_u8_u8_172_inst <=> (branch_block_stmt_43/branch_block_stmt_160/do_while_stmt_161/do_while_stmt_161_loop_body/ADD_u8_u8_172_Sample/rr branch_block_stmt_43/branch_block_stmt_160/do_while_stmt_161/do_while_stmt_161_loop_body/ADD_u8_u8_172_Update/cr) (branch_block_stmt_43/branch_block_stmt_160/do_while_stmt_161/do_while_stmt_161_loop_body/ADD_u8_u8_172_Sample/ra branch_block_stmt_43/branch_block_stmt_160/do_while_stmt_161/do_while_stmt_161_loop_body/ADD_u8_u8_172_Update/ca)
  // 				aval := in_data $buffering 1// bits of buffering = 32. 
  //  file .Aa/mvp.opt.aa, line 83
  // in_data
  RPIPE_in_data_175_inst <=> (branch_block_stmt_43/branch_block_stmt_160/do_while_stmt_161/do_while_stmt_161_loop_body/RPIPE_in_data_175_Sample/rr branch_block_stmt_43/branch_block_stmt_160/do_while_stmt_161/do_while_stmt_161_loop_body/RPIPE_in_data_175_Update/cr) (branch_block_stmt_43/branch_block_stmt_160/do_while_stmt_161/do_while_stmt_161_loop_body/RPIPE_in_data_175_Sample/ra branch_block_stmt_43/branch_block_stmt_160/do_while_stmt_161/do_while_stmt_161_loop_body/RPIPE_in_data_175_Update/ca)
  // 				$guard (aTrue) A_MEM[ia][J] := aval $buffering 1// bits of buffering = 32. 
  //  file .Aa/mvp.opt.aa, line 84
  // aval
  // ia
  array_obj_ref_180_index_0_resize <=> (branch_block_stmt_43/branch_block_stmt_160/do_while_stmt_161/do_while_stmt_161_loop_body/array_obj_ref_180_index_resize_0/index_resize_req) (branch_block_stmt_43/branch_block_stmt_160/do_while_stmt_161/do_while_stmt_161_loop_body/array_obj_ref_180_index_resize_0/index_resize_ack)
  array_obj_ref_180_index_0_scale <=> (branch_block_stmt_43/branch_block_stmt_160/do_while_stmt_161/do_while_stmt_161_loop_body/array_obj_ref_180_index_scale_0_Sample/rr branch_block_stmt_43/branch_block_stmt_160/do_while_stmt_161/do_while_stmt_161_loop_body/array_obj_ref_180_index_scale_0_Update/cr) (branch_block_stmt_43/branch_block_stmt_160/do_while_stmt_161/do_while_stmt_161_loop_body/array_obj_ref_180_index_scale_0_Sample/ra branch_block_stmt_43/branch_block_stmt_160/do_while_stmt_161/do_while_stmt_161_loop_body/array_obj_ref_180_index_scale_0_Update/ca)
  // J
  array_obj_ref_180_index_1_resize <=> (branch_block_stmt_43/branch_block_stmt_160/do_while_stmt_161/do_while_stmt_161_loop_body/array_obj_ref_180_index_resize_1/index_resize_req) (branch_block_stmt_43/branch_block_stmt_160/do_while_stmt_161/do_while_stmt_161_loop_body/array_obj_ref_180_index_resize_1/index_resize_ack)
  array_obj_ref_180_index_1_rename <=> (branch_block_stmt_43/branch_block_stmt_160/do_while_stmt_161/do_while_stmt_161_loop_body/array_obj_ref_180_index_scale_1/scale_rename_req) (branch_block_stmt_43/branch_block_stmt_160/do_while_stmt_161/do_while_stmt_161_loop_body/array_obj_ref_180_index_scale_1/scale_rename_ack)
  array_obj_ref_180_index_sum_1 <=> (branch_block_stmt_43/branch_block_stmt_160/do_while_stmt_161/do_while_stmt_161_loop_body/array_obj_ref_180_partial_sum_1_Sample/rr branch_block_stmt_43/branch_block_stmt_160/do_while_stmt_161/do_while_stmt_161_loop_body/array_obj_ref_180_partial_sum_1_Update/cr) (branch_block_stmt_43/branch_block_stmt_160/do_while_stmt_161/do_while_stmt_161_loop_body/array_obj_ref_180_partial_sum_1_Sample/ra branch_block_stmt_43/branch_block_stmt_160/do_while_stmt_161/do_while_stmt_161_loop_body/array_obj_ref_180_partial_sum_1_Update/ca)
  array_obj_ref_180_index_offset <=> (branch_block_stmt_43/branch_block_stmt_160/do_while_stmt_161/do_while_stmt_161_loop_body/array_obj_ref_180_final_index_sum_regn/req) (branch_block_stmt_43/branch_block_stmt_160/do_while_stmt_161/do_while_stmt_161_loop_body/array_obj_ref_180_final_index_sum_regn/ack)
  array_obj_ref_180_root_address_inst <=> (branch_block_stmt_43/branch_block_stmt_160/do_while_stmt_161/do_while_stmt_161_loop_body/array_obj_ref_180_base_plus_offset/sum_rename_req) (branch_block_stmt_43/branch_block_stmt_160/do_while_stmt_161/do_while_stmt_161_loop_body/array_obj_ref_180_base_plus_offset/sum_rename_ack)
  array_obj_ref_180_addr_0 <=> (branch_block_stmt_43/branch_block_stmt_160/do_while_stmt_161/do_while_stmt_161_loop_body/array_obj_ref_180_word_addrgen/root_register_req) (branch_block_stmt_43/branch_block_stmt_160/do_while_stmt_161/do_while_stmt_161_loop_body/array_obj_ref_180_word_addrgen/root_register_ack)
  array_obj_ref_180_gather_scatter <=> (branch_block_stmt_43/branch_block_stmt_160/do_while_stmt_161/do_while_stmt_161_loop_body/array_obj_ref_180_Sample/array_obj_ref_180_Split/split_req) (branch_block_stmt_43/branch_block_stmt_160/do_while_stmt_161/do_while_stmt_161_loop_body/array_obj_ref_180_Sample/array_obj_ref_180_Split/split_ack)
  array_obj_ref_180_store_0 <=> (branch_block_stmt_43/branch_block_stmt_160/do_while_stmt_161/do_while_stmt_161_loop_body/array_obj_ref_180_Sample/word_access_start/word_0/rr branch_block_stmt_43/branch_block_stmt_160/do_while_stmt_161/do_while_stmt_161_loop_body/array_obj_ref_180_Update/word_access_complete/word_0/cr) (branch_block_stmt_43/branch_block_stmt_160/do_while_stmt_161/do_while_stmt_161_loop_body/array_obj_ref_180_Sample/word_access_start/word_0/ra branch_block_stmt_43/branch_block_stmt_160/do_while_stmt_161/do_while_stmt_161_loop_body/array_obj_ref_180_Update/word_access_complete/word_0/ca)
  // 				$guard (bTrue) B_MEM[ib][J] := aval $buffering 1// bits of buffering = 32. 
  //  file .Aa/mvp.opt.aa, line 85
  // aval
  // ib
  array_obj_ref_186_index_0_resize <=> (branch_block_stmt_43/branch_block_stmt_160/do_while_stmt_161/do_while_stmt_161_loop_body/array_obj_ref_186_index_resize_0/index_resize_req) (branch_block_stmt_43/branch_block_stmt_160/do_while_stmt_161/do_while_stmt_161_loop_body/array_obj_ref_186_index_resize_0/index_resize_ack)
  array_obj_ref_186_index_0_scale <=> (branch_block_stmt_43/branch_block_stmt_160/do_while_stmt_161/do_while_stmt_161_loop_body/array_obj_ref_186_index_scale_0_Sample/rr branch_block_stmt_43/branch_block_stmt_160/do_while_stmt_161/do_while_stmt_161_loop_body/array_obj_ref_186_index_scale_0_Update/cr) (branch_block_stmt_43/branch_block_stmt_160/do_while_stmt_161/do_while_stmt_161_loop_body/array_obj_ref_186_index_scale_0_Sample/ra branch_block_stmt_43/branch_block_stmt_160/do_while_stmt_161/do_while_stmt_161_loop_body/array_obj_ref_186_index_scale_0_Update/ca)
  // J
  array_obj_ref_186_index_1_resize <=> (branch_block_stmt_43/branch_block_stmt_160/do_while_stmt_161/do_while_stmt_161_loop_body/array_obj_ref_186_index_resize_1/index_resize_req) (branch_block_stmt_43/branch_block_stmt_160/do_while_stmt_161/do_while_stmt_161_loop_body/array_obj_ref_186_index_resize_1/index_resize_ack)
  array_obj_ref_186_index_1_rename <=> (branch_block_stmt_43/branch_block_stmt_160/do_while_stmt_161/do_while_stmt_161_loop_body/array_obj_ref_186_index_scale_1/scale_rename_req) (branch_block_stmt_43/branch_block_stmt_160/do_while_stmt_161/do_while_stmt_161_loop_body/array_obj_ref_186_index_scale_1/scale_rename_ack)
  array_obj_ref_186_index_sum_1 <=> (branch_block_stmt_43/branch_block_stmt_160/do_while_stmt_161/do_while_stmt_161_loop_body/array_obj_ref_186_partial_sum_1_Sample/rr branch_block_stmt_43/branch_block_stmt_160/do_while_stmt_161/do_while_stmt_161_loop_body/array_obj_ref_186_partial_sum_1_Update/cr) (branch_block_stmt_43/branch_block_stmt_160/do_while_stmt_161/do_while_stmt_161_loop_body/array_obj_ref_186_partial_sum_1_Sample/ra branch_block_stmt_43/branch_block_stmt_160/do_while_stmt_161/do_while_stmt_161_loop_body/array_obj_ref_186_partial_sum_1_Update/ca)
  array_obj_ref_186_index_offset <=> (branch_block_stmt_43/branch_block_stmt_160/do_while_stmt_161/do_while_stmt_161_loop_body/array_obj_ref_186_final_index_sum_regn/req) (branch_block_stmt_43/branch_block_stmt_160/do_while_stmt_161/do_while_stmt_161_loop_body/array_obj_ref_186_final_index_sum_regn/ack)
  array_obj_ref_186_root_address_inst <=> (branch_block_stmt_43/branch_block_stmt_160/do_while_stmt_161/do_while_stmt_161_loop_body/array_obj_ref_186_base_plus_offset/sum_rename_req) (branch_block_stmt_43/branch_block_stmt_160/do_while_stmt_161/do_while_stmt_161_loop_body/array_obj_ref_186_base_plus_offset/sum_rename_ack)
  array_obj_ref_186_addr_0 <=> (branch_block_stmt_43/branch_block_stmt_160/do_while_stmt_161/do_while_stmt_161_loop_body/array_obj_ref_186_word_addrgen/root_register_req) (branch_block_stmt_43/branch_block_stmt_160/do_while_stmt_161/do_while_stmt_161_loop_body/array_obj_ref_186_word_addrgen/root_register_ack)
  array_obj_ref_186_gather_scatter <=> (branch_block_stmt_43/branch_block_stmt_160/do_while_stmt_161/do_while_stmt_161_loop_body/array_obj_ref_186_Sample/array_obj_ref_186_Split/split_req) (branch_block_stmt_43/branch_block_stmt_160/do_while_stmt_161/do_while_stmt_161_loop_body/array_obj_ref_186_Sample/array_obj_ref_186_Split/split_ack)
  array_obj_ref_186_store_0 <=> (branch_block_stmt_43/branch_block_stmt_160/do_while_stmt_161/do_while_stmt_161_loop_body/array_obj_ref_186_Sample/word_access_start/word_0/rr branch_block_stmt_43/branch_block_stmt_160/do_while_stmt_161/do_while_stmt_161_loop_body/array_obj_ref_186_Update/word_access_complete/word_0/cr) (branch_block_stmt_43/branch_block_stmt_160/do_while_stmt_161/do_while_stmt_161_loop_body/array_obj_ref_186_Sample/word_access_start/word_0/ra branch_block_stmt_43/branch_block_stmt_160/do_while_stmt_161/do_while_stmt_161_loop_body/array_obj_ref_186_Update/word_access_complete/word_0/ca)
  // 				$guard (cTrue) C_MEM[ic][J] := aval $buffering 1// bits of buffering = 32. 
  //  file .Aa/mvp.opt.aa, line 86
  // aval
  // ic
  array_obj_ref_192_index_0_resize <=> (branch_block_stmt_43/branch_block_stmt_160/do_while_stmt_161/do_while_stmt_161_loop_body/array_obj_ref_192_index_resize_0/index_resize_req) (branch_block_stmt_43/branch_block_stmt_160/do_while_stmt_161/do_while_stmt_161_loop_body/array_obj_ref_192_index_resize_0/index_resize_ack)
  array_obj_ref_192_index_0_scale <=> (branch_block_stmt_43/branch_block_stmt_160/do_while_stmt_161/do_while_stmt_161_loop_body/array_obj_ref_192_index_scale_0_Sample/rr branch_block_stmt_43/branch_block_stmt_160/do_while_stmt_161/do_while_stmt_161_loop_body/array_obj_ref_192_index_scale_0_Update/cr) (branch_block_stmt_43/branch_block_stmt_160/do_while_stmt_161/do_while_stmt_161_loop_body/array_obj_ref_192_index_scale_0_Sample/ra branch_block_stmt_43/branch_block_stmt_160/do_while_stmt_161/do_while_stmt_161_loop_body/array_obj_ref_192_index_scale_0_Update/ca)
  // J
  array_obj_ref_192_index_1_resize <=> (branch_block_stmt_43/branch_block_stmt_160/do_while_stmt_161/do_while_stmt_161_loop_body/array_obj_ref_192_index_resize_1/index_resize_req) (branch_block_stmt_43/branch_block_stmt_160/do_while_stmt_161/do_while_stmt_161_loop_body/array_obj_ref_192_index_resize_1/index_resize_ack)
  array_obj_ref_192_index_1_rename <=> (branch_block_stmt_43/branch_block_stmt_160/do_while_stmt_161/do_while_stmt_161_loop_body/array_obj_ref_192_index_scale_1/scale_rename_req) (branch_block_stmt_43/branch_block_stmt_160/do_while_stmt_161/do_while_stmt_161_loop_body/array_obj_ref_192_index_scale_1/scale_rename_ack)
  array_obj_ref_192_index_sum_1 <=> (branch_block_stmt_43/branch_block_stmt_160/do_while_stmt_161/do_while_stmt_161_loop_body/array_obj_ref_192_partial_sum_1_Sample/rr branch_block_stmt_43/branch_block_stmt_160/do_while_stmt_161/do_while_stmt_161_loop_body/array_obj_ref_192_partial_sum_1_Update/cr) (branch_block_stmt_43/branch_block_stmt_160/do_while_stmt_161/do_while_stmt_161_loop_body/array_obj_ref_192_partial_sum_1_Sample/ra branch_block_stmt_43/branch_block_stmt_160/do_while_stmt_161/do_while_stmt_161_loop_body/array_obj_ref_192_partial_sum_1_Update/ca)
  array_obj_ref_192_index_offset <=> (branch_block_stmt_43/branch_block_stmt_160/do_while_stmt_161/do_while_stmt_161_loop_body/array_obj_ref_192_final_index_sum_regn/req) (branch_block_stmt_43/branch_block_stmt_160/do_while_stmt_161/do_while_stmt_161_loop_body/array_obj_ref_192_final_index_sum_regn/ack)
  array_obj_ref_192_root_address_inst <=> (branch_block_stmt_43/branch_block_stmt_160/do_while_stmt_161/do_while_stmt_161_loop_body/array_obj_ref_192_base_plus_offset/sum_rename_req) (branch_block_stmt_43/branch_block_stmt_160/do_while_stmt_161/do_while_stmt_161_loop_body/array_obj_ref_192_base_plus_offset/sum_rename_ack)
  array_obj_ref_192_addr_0 <=> (branch_block_stmt_43/branch_block_stmt_160/do_while_stmt_161/do_while_stmt_161_loop_body/array_obj_ref_192_word_addrgen/root_register_req) (branch_block_stmt_43/branch_block_stmt_160/do_while_stmt_161/do_while_stmt_161_loop_body/array_obj_ref_192_word_addrgen/root_register_ack)
  array_obj_ref_192_gather_scatter <=> (branch_block_stmt_43/branch_block_stmt_160/do_while_stmt_161/do_while_stmt_161_loop_body/array_obj_ref_192_Sample/array_obj_ref_192_Split/split_req) (branch_block_stmt_43/branch_block_stmt_160/do_while_stmt_161/do_while_stmt_161_loop_body/array_obj_ref_192_Sample/array_obj_ref_192_Split/split_ack)
  array_obj_ref_192_store_0 <=> (branch_block_stmt_43/branch_block_stmt_160/do_while_stmt_161/do_while_stmt_161_loop_body/array_obj_ref_192_Sample/word_access_start/word_0/rr branch_block_stmt_43/branch_block_stmt_160/do_while_stmt_161/do_while_stmt_161_loop_body/array_obj_ref_192_Update/word_access_complete/word_0/cr) (branch_block_stmt_43/branch_block_stmt_160/do_while_stmt_161/do_while_stmt_161_loop_body/array_obj_ref_192_Sample/word_access_start/word_0/ra branch_block_stmt_43/branch_block_stmt_160/do_while_stmt_161/do_while_stmt_161_loop_body/array_obj_ref_192_Update/word_access_complete/word_0/ca)
  // 				$guard (dTrue) D_MEM[id][J] := aval $buffering 1// bits of buffering = 32. 
  //  file .Aa/mvp.opt.aa, line 87
  // aval
  // id
  array_obj_ref_198_index_0_resize <=> (branch_block_stmt_43/branch_block_stmt_160/do_while_stmt_161/do_while_stmt_161_loop_body/array_obj_ref_198_index_resize_0/index_resize_req) (branch_block_stmt_43/branch_block_stmt_160/do_while_stmt_161/do_while_stmt_161_loop_body/array_obj_ref_198_index_resize_0/index_resize_ack)
  array_obj_ref_198_index_0_scale <=> (branch_block_stmt_43/branch_block_stmt_160/do_while_stmt_161/do_while_stmt_161_loop_body/array_obj_ref_198_index_scale_0_Sample/rr branch_block_stmt_43/branch_block_stmt_160/do_while_stmt_161/do_while_stmt_161_loop_body/array_obj_ref_198_index_scale_0_Update/cr) (branch_block_stmt_43/branch_block_stmt_160/do_while_stmt_161/do_while_stmt_161_loop_body/array_obj_ref_198_index_scale_0_Sample/ra branch_block_stmt_43/branch_block_stmt_160/do_while_stmt_161/do_while_stmt_161_loop_body/array_obj_ref_198_index_scale_0_Update/ca)
  // J
  array_obj_ref_198_index_1_resize <=> (branch_block_stmt_43/branch_block_stmt_160/do_while_stmt_161/do_while_stmt_161_loop_body/array_obj_ref_198_index_resize_1/index_resize_req) (branch_block_stmt_43/branch_block_stmt_160/do_while_stmt_161/do_while_stmt_161_loop_body/array_obj_ref_198_index_resize_1/index_resize_ack)
  array_obj_ref_198_index_1_rename <=> (branch_block_stmt_43/branch_block_stmt_160/do_while_stmt_161/do_while_stmt_161_loop_body/array_obj_ref_198_index_scale_1/scale_rename_req) (branch_block_stmt_43/branch_block_stmt_160/do_while_stmt_161/do_while_stmt_161_loop_body/array_obj_ref_198_index_scale_1/scale_rename_ack)
  array_obj_ref_198_index_sum_1 <=> (branch_block_stmt_43/branch_block_stmt_160/do_while_stmt_161/do_while_stmt_161_loop_body/array_obj_ref_198_partial_sum_1_Sample/rr branch_block_stmt_43/branch_block_stmt_160/do_while_stmt_161/do_while_stmt_161_loop_body/array_obj_ref_198_partial_sum_1_Update/cr) (branch_block_stmt_43/branch_block_stmt_160/do_while_stmt_161/do_while_stmt_161_loop_body/array_obj_ref_198_partial_sum_1_Sample/ra branch_block_stmt_43/branch_block_stmt_160/do_while_stmt_161/do_while_stmt_161_loop_body/array_obj_ref_198_partial_sum_1_Update/ca)
  array_obj_ref_198_index_offset <=> (branch_block_stmt_43/branch_block_stmt_160/do_while_stmt_161/do_while_stmt_161_loop_body/array_obj_ref_198_final_index_sum_regn/req) (branch_block_stmt_43/branch_block_stmt_160/do_while_stmt_161/do_while_stmt_161_loop_body/array_obj_ref_198_final_index_sum_regn/ack)
  array_obj_ref_198_root_address_inst <=> (branch_block_stmt_43/branch_block_stmt_160/do_while_stmt_161/do_while_stmt_161_loop_body/array_obj_ref_198_base_plus_offset/sum_rename_req) (branch_block_stmt_43/branch_block_stmt_160/do_while_stmt_161/do_while_stmt_161_loop_body/array_obj_ref_198_base_plus_offset/sum_rename_ack)
  array_obj_ref_198_addr_0 <=> (branch_block_stmt_43/branch_block_stmt_160/do_while_stmt_161/do_while_stmt_161_loop_body/array_obj_ref_198_word_addrgen/root_register_req) (branch_block_stmt_43/branch_block_stmt_160/do_while_stmt_161/do_while_stmt_161_loop_body/array_obj_ref_198_word_addrgen/root_register_ack)
  array_obj_ref_198_gather_scatter <=> (branch_block_stmt_43/branch_block_stmt_160/do_while_stmt_161/do_while_stmt_161_loop_body/array_obj_ref_198_Sample/array_obj_ref_198_Split/split_req) (branch_block_stmt_43/branch_block_stmt_160/do_while_stmt_161/do_while_stmt_161_loop_body/array_obj_ref_198_Sample/array_obj_ref_198_Split/split_ack)
  array_obj_ref_198_store_0 <=> (branch_block_stmt_43/branch_block_stmt_160/do_while_stmt_161/do_while_stmt_161_loop_body/array_obj_ref_198_Sample/word_access_start/word_0/rr branch_block_stmt_43/branch_block_stmt_160/do_while_stmt_161/do_while_stmt_161_loop_body/array_obj_ref_198_Update/word_access_complete/word_0/cr) (branch_block_stmt_43/branch_block_stmt_160/do_while_stmt_161/do_while_stmt_161_loop_body/array_obj_ref_198_Sample/word_access_start/word_0/ra branch_block_stmt_43/branch_block_stmt_160/do_while_stmt_161/do_while_stmt_161_loop_body/array_obj_ref_198_Update/word_access_complete/word_0/ca)
  // (nJ < 32 )
  // nJ
  do_while_stmt_161_branch <=> (branch_block_stmt_43/branch_block_stmt_160/do_while_stmt_161/do_while_stmt_161_loop_body/condition_evaluated) (branch_block_stmt_43/branch_block_stmt_160/do_while_stmt_161/loop_exit/ack branch_block_stmt_43/branch_block_stmt_160/do_while_stmt_161/loop_taken/ack)
  // CP-DP links for if  
  //  file .Aa/mvp.opt.aa, line 0
  // (nI < 32 )
  if_stmt_206_branch <=> (branch_block_stmt_43/if_stmt_206_eval_test/branch_req) (branch_block_stmt_43/if_stmt_206_else_link/else_choice_transition branch_block_stmt_43/if_stmt_206_if_link/if_choice_transition)
}
$module [mvp_unit] 
{
  // pipe-declarations for block %mvp_unit
  //  file .Aa/mvp.opt.aa, line 95
  // pipe-declarations for block %mvp_unit%fetchloop
  //  file .Aa/mvp.opt.aa, line 100
  // pipe-declarations for block %mvp_unit%fetchloop%
  //  file .Aa/mvp.opt.aa, line 102
  // pipe-declarations for block %mvp_unit%fetchloop%productloop
  //  file .Aa/mvp.opt.aa, line 108
  // pipe-declarations for block %mvp_unit%sendloop
  //  file .Aa/mvp.opt.aa, line 142
  // memory-space 1 is read from.
  // memory-space 2 is read from.
  // memory-space 3 is read from.
  // memory-space 0 is read from.
  // there are no memory spaces local to this module.
  $CP 
  {
    // begin control-path 
    <>[branch_block_stmt_215] // Branch Block  file .Aa/mvp.opt.aa, line 100
    {
      $P [branch_block_stmt_215__entry__]
      branch_block_stmt_215__entry__ <-| ($entry)
      $P [branch_block_stmt_215__exit__]
      branch_block_stmt_215__exit__ |-> ($exit)
      $P [merge_stmt_216__entry__] 
      $P [merge_stmt_216__exit__] 
      $P [branch_block_stmt_227__entry__] 
      $P [branch_block_stmt_227__exit__] 
      $P [assign_stmt_331__entry__] 
      $P [assign_stmt_331__exit__] 
      $P [if_stmt_332__entry__] 
      $P [if_stmt_332__exit__] 
      <>[branch_block_stmt_227] // Branch Block  file .Aa/mvp.opt.aa, line 108
      {
        $P [branch_block_stmt_227__entry__]
        branch_block_stmt_227__entry__ <-| ($entry)
        $P [branch_block_stmt_227__exit__]
        branch_block_stmt_227__exit__ |-> ($exit)
        $P [do_while_stmt_228__entry__] 
        $P [do_while_stmt_228__exit__] 
        // do-while-statement  
        //  file .Aa/mvp.opt.aa, line 110
        <o> [do_while_stmt_228]  $depth 8 $buffering 1 
        {
          $P[do_while_stmt_228__entry__] 
          $P[do_while_stmt_228__exit__] 
          $P[loop_back] 
          $P[condition_done] 
          $P[loop_body_done] 
          $pipeline [do_while_stmt_228_loop_body] 
          {
            // Pipelined!
            $T[back_edge_to_loop_body] 
            $T[first_time_through_loop_body] 
            $T[loop_body_start] 
            $T[condition_evaluated] 
            $transitionmerge [entry_tmerge] (back_edge_to_loop_body first_time_through_loop_body) (loop_body_start)
            $entry <-& (loop_body_start)
            $T[aggregated_phi_sample_req] 
            $T[aggregated_phi_sample_ack] 
            $T[aggregated_phi_update_req] 
            $T[aggregated_phi_update_ack] 
            // do not loop-back unless all phi's have used up their triggering tokens.
            condition_evaluated <-& (aggregated_phi_update_ack)
            aggregated_phi_sample_req o<-& (aggregated_phi_update_ack 0)
            // start:  PHI statement phi_stmt_230
            // 				$phi R := 				  ($bitcast ($uint<8>) 0  ) $on   $entry 				  NR $on   $loopback 
            // type of target is $uint<8>
            $T[phi_stmt_230_sample_start_] 
            $T[phi_stmt_230_sample_completed_] 
            $T[phi_stmt_230_update_start_] 
            $T[phi_stmt_230_update_completed_] 
            $T[phi_stmt_230_sample_start__ps] 
            phi_stmt_230_sample_start__ps <-& (aggregated_phi_sample_req)
            $T[phi_stmt_230_sample_completed__ps] 
            phi_stmt_230_sample_completed__ps &-> (aggregated_phi_sample_ack)
            $T[phi_stmt_230_update_start__ps] 
            phi_stmt_230_update_start__ps <-& (aggregated_phi_update_req)
            $T[phi_stmt_230_update_completed__ps] 
            phi_stmt_230_update_completed_ <-& (phi_stmt_230_update_completed__ps)
            aggregated_phi_sample_req <-& (phi_stmt_230_sample_start_)
            aggregated_phi_sample_ack &-> (phi_stmt_230_sample_completed_)
            aggregated_phi_update_req <-& (phi_stmt_230_update_start_)
            $T[phi_stmt_230_loopback_trigger] 
            phi_stmt_230_loopback_trigger <-& (back_edge_to_loop_body)
            $T[phi_stmt_230_loopback_sample_req] 
            $T[phi_stmt_230_loopback_sample_req_ps] 
            phi_stmt_230_loopback_sample_req <-& (phi_stmt_230_loopback_sample_req_ps)
            phi_stmt_230_loopback_sample_req &-> ($null)
            $T[phi_stmt_230_entry_trigger] 
            phi_stmt_230_entry_trigger <-& (first_time_through_loop_body)
            $T[phi_stmt_230_entry_sample_req] 
            $T[phi_stmt_230_entry_sample_req_ps] 
            phi_stmt_230_entry_sample_req <-& (phi_stmt_230_entry_sample_req_ps)
            phi_stmt_230_entry_sample_req &-> ($null)
            phi_stmt_230_update_start_ o<-& (phi_stmt_230_update_completed_ 0)
            phi_stmt_230_sample_start_ o<-& (phi_stmt_230_sample_completed_ 1)
            $T[phi_stmt_230_merged_reqs] 
            $T[phi_stmt_230_phi_mux_ack] 
            $T[phi_stmt_230_phi_mux_ack_ps] 
            phi_stmt_230_phi_mux_ack_ps <-& (phi_stmt_230_phi_mux_ack)
            aggregated_phi_update_ack <-& (phi_stmt_230_update_completed_)
            $T[type_cast_233_sample_start__ps] 
            $T[type_cast_233_sample_completed__ps] 
            $T[type_cast_233_update_start__ps] 
            $T[type_cast_233_update_completed__ps] 
            // dummies for constant expression source for phi
            $T[type_cast_233_sample_start_] 
            $T[type_cast_233_sample_completed_] 
            type_cast_233_sample_completed_ <-& (type_cast_233_sample_start_)
            $T[type_cast_233_update_start_] 
            $T [type_cast_233_update_completed_] $delay 
            type_cast_233_update_completed_ <-& (type_cast_233_update_start_)
            // Phi start dependency for implicit/constant alternative.
            type_cast_233_sample_start_ <-& (type_cast_233_sample_start__ps)
            type_cast_233_update_start_ <-& (type_cast_233_update_start__ps)
            // Phi complete dependency.
            type_cast_233_sample_completed__ps <-& (type_cast_233_sample_completed_)
            type_cast_233_update_completed__ps <-& (type_cast_233_update_completed_)
            $T[R_NR_234_sample_start__ps] 
            $T[R_NR_234_sample_completed__ps] 
            $T[R_NR_234_update_start__ps] 
            $T[R_NR_234_update_completed__ps] 
            // interlock for implicit-variable-ref/signal-read in Phi alternative 1
            $T[R_NR_234_sample_start_] 
            $T[R_NR_234_sample_completed_] 
            $T[R_NR_234_update_start_] 
            $T[R_NR_234_update_completed_] 
            ;;[R_NR_234_Sample] 
            {
              $T [req] $T [ack] // interlock-sample.
            }
            R_NR_234_sample_start_ &-> (R_NR_234_Sample)
            R_NR_234_sample_completed_ <-& (R_NR_234_Sample)
            ;;[R_NR_234_Update] 
            {
              $T [req] $T [ack] // interlock-update.
            }
            R_NR_234_update_start_ &-> (R_NR_234_Update)
            R_NR_234_update_completed_ <-& (R_NR_234_Update)
            // RAW reenables for NR
            // Phi start dependency for implicit/constant alternative.
            R_NR_234_sample_start_ <-& (R_NR_234_sample_start__ps)
            R_NR_234_update_start_ <-& (R_NR_234_update_start__ps)
            // Phi complete dependency.
            R_NR_234_sample_completed__ps <-& (R_NR_234_sample_completed_)
            R_NR_234_update_completed__ps <-& (R_NR_234_update_completed_)
            $phisequencer [ phi_stmt_230_phi_seq] : 
            phi_stmt_230_entry_trigger type_cast_233_sample_start__ps type_cast_233_sample_completed__ps type_cast_233_update_start__ps type_cast_233_update_completed__ps phi_stmt_230_loopback_trigger R_NR_234_sample_start__ps R_NR_234_sample_completed__ps R_NR_234_update_start__ps R_NR_234_update_completed__ps :
            phi_stmt_230_sample_start__ps phi_stmt_230_sample_completed__ps phi_stmt_230_update_start__ps phi_stmt_230_update_completed__ps :
            phi_stmt_230_entry_sample_req_ps phi_stmt_230_loopback_sample_req_ps : 
            phi_stmt_230_phi_mux_ack_ps
            // done: PHI Statement phi_stmt_230
            // start:  				NR := (R + 4 ) $buffering 1// bits of buffering = 8. 
            //  file .Aa/mvp.opt.aa, line 117
            // Source expression
            // (R + 4 )
            $T[ADD_u8_u8_243_sample_start_] 
            $T[ADD_u8_u8_243_sample_completed_] 
            $T[ADD_u8_u8_243_update_start_] 
            $T[ADD_u8_u8_243_update_completed_] 
            // R
            // start: Forward dependencies from R to transition ADD_u8_u8_243_sample_start_
            ADD_u8_u8_243_sample_start_ <-& (phi_stmt_230_update_completed_)
            // done: Forward dependencies from R to transition ADD_u8_u8_243_sample_start_
            ;;[ADD_u8_u8_243_Sample] 
            {
              // binary expression 
              $T [rr] $T [ra]  // (split) binary operation 
            }
            ;;[ADD_u8_u8_243_Update] 
            {
              // binary expression 
              $T [cr] $T [ca] // (split) binary operation 
            }
            ADD_u8_u8_243_sample_start_ &-> (ADD_u8_u8_243_Sample)
            ADD_u8_u8_243_sample_completed_ <-& (ADD_u8_u8_243_Sample)
            ADD_u8_u8_243_sample_completed_ &-> ($null)
            ADD_u8_u8_243_update_start_ &-> (ADD_u8_u8_243_Update)
            ADD_u8_u8_243_update_completed_ <-& (ADD_u8_u8_243_Update)
            // RAW reenables for R
            phi_stmt_230_update_start_ o<-& (ADD_u8_u8_243_sample_completed_ 0)
            // self-release: 
            ADD_u8_u8_243_sample_start_ o<-& (ADD_u8_u8_243_sample_completed_ 1)
            $null &-> (ADD_u8_u8_243_update_start_)
            ADD_u8_u8_243_update_start_ o<-& (ADD_u8_u8_243_update_completed_ 0)
            // Target expression
            // (as target) NR
            // start: WAR dependencies for NR
            // WAR dependency: Read: NR before Write: 				NR := (R + 4 ) $buffering 1// bits of buffering = 8. 
            ADD_u8_u8_243_update_start_ <-& (phi_stmt_230_sample_completed_)
            phi_stmt_230_sample_start_ o<-& (ADD_u8_u8_243_update_completed_ 0)
            // WAR dependency: release  Read: NR with Write: 				NR := (R + 4 ) $buffering 1// bits of buffering = 8. 
            // done: WAR dependencies for NR
            // end:  				NR := (R + 4 ) $buffering 2// bits of buffering = 16. 
            // start:  				index := (R >> 2 ) $buffering 1// bits of buffering = 8. 
            //  file .Aa/mvp.opt.aa, line 118
            // Source expression
            // (R >> 2 )
            $T[LSHR_u8_u8_248_sample_start_] 
            $T[LSHR_u8_u8_248_sample_completed_] 
            $T[LSHR_u8_u8_248_update_start_] 
            $T[LSHR_u8_u8_248_update_completed_] 
            // R
            // start: Forward dependencies from R to transition LSHR_u8_u8_248_sample_start_
            LSHR_u8_u8_248_sample_start_ <-& (phi_stmt_230_update_completed_)
            // done: Forward dependencies from R to transition LSHR_u8_u8_248_sample_start_
            ;;[LSHR_u8_u8_248_Sample] 
            {
              // binary expression 
              $T [rr] $T [ra]  // (split) binary operation 
            }
            ;;[LSHR_u8_u8_248_Update] 
            {
              // binary expression 
              $T [cr] $T [ca] // (split) binary operation 
            }
            LSHR_u8_u8_248_sample_start_ &-> (LSHR_u8_u8_248_Sample)
            LSHR_u8_u8_248_sample_completed_ <-& (LSHR_u8_u8_248_Sample)
            LSHR_u8_u8_248_sample_completed_ &-> ($null)
            LSHR_u8_u8_248_update_start_ &-> (LSHR_u8_u8_248_Update)
            LSHR_u8_u8_248_update_completed_ <-& (LSHR_u8_u8_248_Update)
            // RAW reenables for R
            phi_stmt_230_update_start_ o<-& (LSHR_u8_u8_248_sample_completed_ 0)
            // self-release: 
            LSHR_u8_u8_248_sample_start_ o<-& (LSHR_u8_u8_248_sample_completed_ 1)
            $null &-> (LSHR_u8_u8_248_update_start_)
            LSHR_u8_u8_248_update_start_ o<-& (LSHR_u8_u8_248_update_completed_ 0)
            // Target expression
            // (as target) index
            // start: WAR dependencies for index
            // done: WAR dependencies for index
            // end:  				index := (R >> 2 ) $buffering 1// bits of buffering = 8. 
            // start:  				p := A_MEM[index][C] $buffering 1// bits of buffering = 32. 
            //  file .Aa/mvp.opt.aa, line 119
            // Source expression
            // A_MEM[index][C]
            $T[array_obj_ref_253_base_address_calculated] 
            $T[array_obj_ref_253_sample_start_] 
            $T[array_obj_ref_253_sample_completed_] 
            $T[array_obj_ref_253_update_start_] 
            $T[array_obj_ref_253_update_completed_] 
            $T[array_obj_ref_253_word_address_calculated] 
            $T[array_obj_ref_253_root_address_calculated] 
            $T[array_obj_ref_253_offset_calculated] 
            $T[array_obj_ref_253_index_resized_0] 
            $T[array_obj_ref_253_index_scaled_0] 
            $T[array_obj_ref_253_index_computed_0] 
            // index
            // start: Forward dependencies from index to transition array_obj_ref_253_index_computed_0
            array_obj_ref_253_index_computed_0 <-& (LSHR_u8_u8_248_update_completed_)
            // done: Forward dependencies from index to transition array_obj_ref_253_index_computed_0
            ;;[array_obj_ref_253_index_resize_0] 
            {
              $T [index_resize_req] $T [index_resize_ack] // resize index to address-width
            }
            array_obj_ref_253_index_computed_0 &-> (array_obj_ref_253_index_resize_0)
            array_obj_ref_253_index_resized_0 <-& (array_obj_ref_253_index_resize_0)
            $T[array_obj_ref_253_index_scale_0_sample_start] 
            $T[array_obj_ref_253_index_scale_0_sample_complete] 
            $T[array_obj_ref_253_index_scale_0_update_start] 
            $T[array_obj_ref_253_index_scale_0_update_complete] 
            ;;[array_obj_ref_253_index_scale_0_Sample] 
            {
              $T [rr] $T [ra] 
            }
            ;;[array_obj_ref_253_index_scale_0_Update] 
            {
              $T [cr] $T [ca] 
            }
            array_obj_ref_253_index_resized_0 &-> (array_obj_ref_253_index_scale_0_sample_start)
            array_obj_ref_253_index_scale_0_sample_start &-> (array_obj_ref_253_index_scale_0_Sample)
            array_obj_ref_253_index_scale_0_sample_complete <-& (array_obj_ref_253_index_scale_0_Sample)
            array_obj_ref_253_index_scale_0_update_start &-> (array_obj_ref_253_index_scale_0_Update)
            array_obj_ref_253_index_scale_0_update_complete <-& (array_obj_ref_253_index_scale_0_Update)
            array_obj_ref_253_index_scaled_0 <-& (array_obj_ref_253_index_scale_0_update_complete)
            LSHR_u8_u8_248_update_start_ o<-& (array_obj_ref_253_index_scaled_0 0)
            array_obj_ref_253_index_scale_0_sample_start o<-& (array_obj_ref_253_index_scale_0_sample_complete 1)
            array_obj_ref_253_index_scale_0_update_start o<-& (array_obj_ref_253_index_scale_0_update_complete 0)
            $T[array_obj_ref_253_index_resized_1] 
            $T[array_obj_ref_253_index_scaled_1] 
            $T[array_obj_ref_253_index_computed_1] 
            // C
            // start: Forward dependencies from C to transition array_obj_ref_253_index_computed_1
            // done: Forward dependencies from C to transition array_obj_ref_253_index_computed_1
            ;;[array_obj_ref_253_index_resize_1] 
            {
              $T [index_resize_req] $T [index_resize_ack] // resize index to address-width
            }
            array_obj_ref_253_index_computed_1 &-> (array_obj_ref_253_index_resize_1)
            array_obj_ref_253_index_resized_1 <-& (array_obj_ref_253_index_resize_1)
            ;;[array_obj_ref_253_index_scale_1] 
            {
              $T [scale_rename_req] $T [scale_rename_ack] // rename 
            }
            array_obj_ref_253_index_resized_1 &-> (array_obj_ref_253_index_scale_1)
            array_obj_ref_253_index_scaled_1 <-& (array_obj_ref_253_index_scale_1)
            $T[array_obj_ref_253_partial_sum_1_sample_start] 
            $T[array_obj_ref_253_partial_sum_1_sample_complete] 
            $T[array_obj_ref_253_partial_sum_1_update_start] 
            $T[array_obj_ref_253_partial_sum_1_update_complete] 
            ;;[array_obj_ref_253_partial_sum_1_Sample] 
            {
              $T [rr] $T [ra] 
            }
            ;;[array_obj_ref_253_partial_sum_1_Update] 
            {
              $T [cr] $T [ca] 
            }
            array_obj_ref_253_partial_sum_1_sample_start &-> (array_obj_ref_253_partial_sum_1_Sample)
            array_obj_ref_253_partial_sum_1_sample_complete <-& (array_obj_ref_253_partial_sum_1_Sample)
            array_obj_ref_253_partial_sum_1_update_start &-> (array_obj_ref_253_partial_sum_1_Update)
            array_obj_ref_253_partial_sum_1_update_complete <-& (array_obj_ref_253_partial_sum_1_Update)
            array_obj_ref_253_partial_sum_1_sample_start o<-& (array_obj_ref_253_partial_sum_1_sample_complete 1)
            array_obj_ref_253_partial_sum_1_update_start o<-& (array_obj_ref_253_partial_sum_1_update_complete 0)
            array_obj_ref_253_partial_sum_1_sample_start <-& (array_obj_ref_253_index_scaled_0)
            array_obj_ref_253_partial_sum_1_sample_start <-& (array_obj_ref_253_index_scaled_1)
            array_obj_ref_253_index_scaled_0 o<-& (array_obj_ref_253_partial_sum_1_sample_complete 1)
            array_obj_ref_253_offset_calculated <-& (array_obj_ref_253_partial_sum_1_update_complete)
            ;;[array_obj_ref_253_final_index_sum_regn] 
            {
              $T [req] $T [ack] // rename
            }
            array_obj_ref_253_partial_sum_1_update_complete &-> (array_obj_ref_253_final_index_sum_regn)
            array_obj_ref_253_offset_calculated <-& (array_obj_ref_253_final_index_sum_regn)
            ;;[array_obj_ref_253_base_plus_offset] 
            {
              $T [sum_rename_req] $T [sum_rename_ack] // one gets through 
            }
            array_obj_ref_253_offset_calculated &-> (array_obj_ref_253_base_plus_offset)
            array_obj_ref_253_root_address_calculated <-& (array_obj_ref_253_base_plus_offset)
            ;;[array_obj_ref_253_word_addrgen] 
            {
              $T [root_register_req] $T [root_register_ack]
            }
            array_obj_ref_253_root_address_calculated &-> (array_obj_ref_253_word_addrgen)
            array_obj_ref_253_word_address_calculated <-& (array_obj_ref_253_word_addrgen)
            ;;[array_obj_ref_253_Sample] 
            {
              ||[word_access_start] 
              {
                ;;[word_0] 
                {
                  $T [rr] $T [ra] 
                }
              }
            }
            ;;[array_obj_ref_253_Update] 
            {
              ||[word_access_complete] 
              {
                ;;[word_0] 
                {
                  $T [cr] $T [ca] 
                }
              }
              ;;[array_obj_ref_253_Merge] 
              {
                $T [merge_req] $T [merge_ack]
              }
            }
            array_obj_ref_253_sample_start_ <-& (array_obj_ref_253_word_address_calculated)
            // reenable-joins
            array_obj_ref_253_partial_sum_1_update_start o<-& (array_obj_ref_253_sample_completed_ 0)
            array_obj_ref_253_sample_start_ &-> (array_obj_ref_253_Sample)
            array_obj_ref_253_sample_completed_ <-& (array_obj_ref_253_Sample)
            array_obj_ref_253_sample_completed_ &-> ($null)
            array_obj_ref_253_update_start_ &-> (array_obj_ref_253_Update)
            array_obj_ref_253_update_completed_ <-& (array_obj_ref_253_Update)
            // self-release: 
            array_obj_ref_253_sample_start_ o<-& (array_obj_ref_253_sample_completed_ 1)
            $null &-> (array_obj_ref_253_update_start_)
            array_obj_ref_253_update_start_ o<-& (array_obj_ref_253_update_completed_ 0)
            // Target expression
            // (as target) p
            // start: WAR dependencies for p
            // done: WAR dependencies for p
            // end:  				p := A_MEM[index][C] $buffering 1// bits of buffering = 32. 
            // start:  				pp := B_MEM[index][C] $buffering 1// bits of buffering = 32. 
            //  file .Aa/mvp.opt.aa, line 120
            // Source expression
            // B_MEM[index][C]
            $T[array_obj_ref_258_base_address_calculated] 
            $T[array_obj_ref_258_sample_start_] 
            $T[array_obj_ref_258_sample_completed_] 
            $T[array_obj_ref_258_update_start_] 
            $T[array_obj_ref_258_update_completed_] 
            $T[array_obj_ref_258_word_address_calculated] 
            $T[array_obj_ref_258_root_address_calculated] 
            $T[array_obj_ref_258_offset_calculated] 
            $T[array_obj_ref_258_index_resized_0] 
            $T[array_obj_ref_258_index_scaled_0] 
            $T[array_obj_ref_258_index_computed_0] 
            // index
            // start: Forward dependencies from index to transition array_obj_ref_258_index_computed_0
            array_obj_ref_258_index_computed_0 <-& (LSHR_u8_u8_248_update_completed_)
            // done: Forward dependencies from index to transition array_obj_ref_258_index_computed_0
            ;;[array_obj_ref_258_index_resize_0] 
            {
              $T [index_resize_req] $T [index_resize_ack] // resize index to address-width
            }
            array_obj_ref_258_index_computed_0 &-> (array_obj_ref_258_index_resize_0)
            array_obj_ref_258_index_resized_0 <-& (array_obj_ref_258_index_resize_0)
            $T[array_obj_ref_258_index_scale_0_sample_start] 
            $T[array_obj_ref_258_index_scale_0_sample_complete] 
            $T[array_obj_ref_258_index_scale_0_update_start] 
            $T[array_obj_ref_258_index_scale_0_update_complete] 
            ;;[array_obj_ref_258_index_scale_0_Sample] 
            {
              $T [rr] $T [ra] 
            }
            ;;[array_obj_ref_258_index_scale_0_Update] 
            {
              $T [cr] $T [ca] 
            }
            array_obj_ref_258_index_resized_0 &-> (array_obj_ref_258_index_scale_0_sample_start)
            array_obj_ref_258_index_scale_0_sample_start &-> (array_obj_ref_258_index_scale_0_Sample)
            array_obj_ref_258_index_scale_0_sample_complete <-& (array_obj_ref_258_index_scale_0_Sample)
            array_obj_ref_258_index_scale_0_update_start &-> (array_obj_ref_258_index_scale_0_Update)
            array_obj_ref_258_index_scale_0_update_complete <-& (array_obj_ref_258_index_scale_0_Update)
            array_obj_ref_258_index_scaled_0 <-& (array_obj_ref_258_index_scale_0_update_complete)
            LSHR_u8_u8_248_update_start_ o<-& (array_obj_ref_258_index_scaled_0 0)
            array_obj_ref_258_index_scale_0_sample_start o<-& (array_obj_ref_258_index_scale_0_sample_complete 1)
            array_obj_ref_258_index_scale_0_update_start o<-& (array_obj_ref_258_index_scale_0_update_complete 0)
            $T[array_obj_ref_258_index_resized_1] 
            $T[array_obj_ref_258_index_scaled_1] 
            $T[array_obj_ref_258_index_computed_1] 
            // C
            // start: Forward dependencies from C to transition array_obj_ref_258_index_computed_1
            // done: Forward dependencies from C to transition array_obj_ref_258_index_computed_1
            ;;[array_obj_ref_258_index_resize_1] 
            {
              $T [index_resize_req] $T [index_resize_ack] // resize index to address-width
            }
            array_obj_ref_258_index_computed_1 &-> (array_obj_ref_258_index_resize_1)
            array_obj_ref_258_index_resized_1 <-& (array_obj_ref_258_index_resize_1)
            ;;[array_obj_ref_258_index_scale_1] 
            {
              $T [scale_rename_req] $T [scale_rename_ack] // rename 
            }
            array_obj_ref_258_index_resized_1 &-> (array_obj_ref_258_index_scale_1)
            array_obj_ref_258_index_scaled_1 <-& (array_obj_ref_258_index_scale_1)
            $T[array_obj_ref_258_partial_sum_1_sample_start] 
            $T[array_obj_ref_258_partial_sum_1_sample_complete] 
            $T[array_obj_ref_258_partial_sum_1_update_start] 
            $T[array_obj_ref_258_partial_sum_1_update_complete] 
            ;;[array_obj_ref_258_partial_sum_1_Sample] 
            {
              $T [rr] $T [ra] 
            }
            ;;[array_obj_ref_258_partial_sum_1_Update] 
            {
              $T [cr] $T [ca] 
            }
            array_obj_ref_258_partial_sum_1_sample_start &-> (array_obj_ref_258_partial_sum_1_Sample)
            array_obj_ref_258_partial_sum_1_sample_complete <-& (array_obj_ref_258_partial_sum_1_Sample)
            array_obj_ref_258_partial_sum_1_update_start &-> (array_obj_ref_258_partial_sum_1_Update)
            array_obj_ref_258_partial_sum_1_update_complete <-& (array_obj_ref_258_partial_sum_1_Update)
            array_obj_ref_258_partial_sum_1_sample_start o<-& (array_obj_ref_258_partial_sum_1_sample_complete 1)
            array_obj_ref_258_partial_sum_1_update_start o<-& (array_obj_ref_258_partial_sum_1_update_complete 0)
            array_obj_ref_258_partial_sum_1_sample_start <-& (array_obj_ref_258_index_scaled_0)
            array_obj_ref_258_partial_sum_1_sample_start <-& (array_obj_ref_258_index_scaled_1)
            array_obj_ref_258_index_scaled_0 o<-& (array_obj_ref_258_partial_sum_1_sample_complete 1)
            array_obj_ref_258_offset_calculated <-& (array_obj_ref_258_partial_sum_1_update_complete)
            ;;[array_obj_ref_258_final_index_sum_regn] 
            {
              $T [req] $T [ack] // rename
            }
            array_obj_ref_258_partial_sum_1_update_complete &-> (array_obj_ref_258_final_index_sum_regn)
            array_obj_ref_258_offset_calculated <-& (array_obj_ref_258_final_index_sum_regn)
            ;;[array_obj_ref_258_base_plus_offset] 
            {
              $T [sum_rename_req] $T [sum_rename_ack] // one gets through 
            }
            array_obj_ref_258_offset_calculated &-> (array_obj_ref_258_base_plus_offset)
            array_obj_ref_258_root_address_calculated <-& (array_obj_ref_258_base_plus_offset)
            ;;[array_obj_ref_258_word_addrgen] 
            {
              $T [root_register_req] $T [root_register_ack]
            }
            array_obj_ref_258_root_address_calculated &-> (array_obj_ref_258_word_addrgen)
            array_obj_ref_258_word_address_calculated <-& (array_obj_ref_258_word_addrgen)
            ;;[array_obj_ref_258_Sample] 
            {
              ||[word_access_start] 
              {
                ;;[word_0] 
                {
                  $T [rr] $T [ra] 
                }
              }
            }
            ;;[array_obj_ref_258_Update] 
            {
              ||[word_access_complete] 
              {
                ;;[word_0] 
                {
                  $T [cr] $T [ca] 
                }
              }
              ;;[array_obj_ref_258_Merge] 
              {
                $T [merge_req] $T [merge_ack]
              }
            }
            array_obj_ref_258_sample_start_ <-& (array_obj_ref_258_word_address_calculated)
            // reenable-joins
            array_obj_ref_258_partial_sum_1_update_start o<-& (array_obj_ref_258_sample_completed_ 0)
            array_obj_ref_258_sample_start_ &-> (array_obj_ref_258_Sample)
            array_obj_ref_258_sample_completed_ <-& (array_obj_ref_258_Sample)
            array_obj_ref_258_sample_completed_ &-> ($null)
            array_obj_ref_258_update_start_ &-> (array_obj_ref_258_Update)
            array_obj_ref_258_update_completed_ <-& (array_obj_ref_258_Update)
            // self-release: 
            array_obj_ref_258_sample_start_ o<-& (array_obj_ref_258_sample_completed_ 1)
            $null &-> (array_obj_ref_258_update_start_)
            array_obj_ref_258_update_start_ o<-& (array_obj_ref_258_update_completed_ 0)
            // Target expression
            // (as target) pp
            // start: WAR dependencies for pp
            // done: WAR dependencies for pp
            // end:  				pp := B_MEM[index][C] $buffering 1// bits of buffering = 32. 
            // start:  				ppp := C_MEM[index][C] $buffering 1// bits of buffering = 32. 
            //  file .Aa/mvp.opt.aa, line 121
            // Source expression
            // C_MEM[index][C]
            $T[array_obj_ref_263_base_address_calculated] 
            $T[array_obj_ref_263_sample_start_] 
            $T[array_obj_ref_263_sample_completed_] 
            $T[array_obj_ref_263_update_start_] 
            $T[array_obj_ref_263_update_completed_] 
            $T[array_obj_ref_263_word_address_calculated] 
            $T[array_obj_ref_263_root_address_calculated] 
            $T[array_obj_ref_263_offset_calculated] 
            $T[array_obj_ref_263_index_resized_0] 
            $T[array_obj_ref_263_index_scaled_0] 
            $T[array_obj_ref_263_index_computed_0] 
            // index
            // start: Forward dependencies from index to transition array_obj_ref_263_index_computed_0
            array_obj_ref_263_index_computed_0 <-& (LSHR_u8_u8_248_update_completed_)
            // done: Forward dependencies from index to transition array_obj_ref_263_index_computed_0
            ;;[array_obj_ref_263_index_resize_0] 
            {
              $T [index_resize_req] $T [index_resize_ack] // resize index to address-width
            }
            array_obj_ref_263_index_computed_0 &-> (array_obj_ref_263_index_resize_0)
            array_obj_ref_263_index_resized_0 <-& (array_obj_ref_263_index_resize_0)
            $T[array_obj_ref_263_index_scale_0_sample_start] 
            $T[array_obj_ref_263_index_scale_0_sample_complete] 
            $T[array_obj_ref_263_index_scale_0_update_start] 
            $T[array_obj_ref_263_index_scale_0_update_complete] 
            ;;[array_obj_ref_263_index_scale_0_Sample] 
            {
              $T [rr] $T [ra] 
            }
            ;;[array_obj_ref_263_index_scale_0_Update] 
            {
              $T [cr] $T [ca] 
            }
            array_obj_ref_263_index_resized_0 &-> (array_obj_ref_263_index_scale_0_sample_start)
            array_obj_ref_263_index_scale_0_sample_start &-> (array_obj_ref_263_index_scale_0_Sample)
            array_obj_ref_263_index_scale_0_sample_complete <-& (array_obj_ref_263_index_scale_0_Sample)
            array_obj_ref_263_index_scale_0_update_start &-> (array_obj_ref_263_index_scale_0_Update)
            array_obj_ref_263_index_scale_0_update_complete <-& (array_obj_ref_263_index_scale_0_Update)
            array_obj_ref_263_index_scaled_0 <-& (array_obj_ref_263_index_scale_0_update_complete)
            LSHR_u8_u8_248_update_start_ o<-& (array_obj_ref_263_index_scaled_0 0)
            array_obj_ref_263_index_scale_0_sample_start o<-& (array_obj_ref_263_index_scale_0_sample_complete 1)
            array_obj_ref_263_index_scale_0_update_start o<-& (array_obj_ref_263_index_scale_0_update_complete 0)
            $T[array_obj_ref_263_index_resized_1] 
            $T[array_obj_ref_263_index_scaled_1] 
            $T[array_obj_ref_263_index_computed_1] 
            // C
            // start: Forward dependencies from C to transition array_obj_ref_263_index_computed_1
            // done: Forward dependencies from C to transition array_obj_ref_263_index_computed_1
            ;;[array_obj_ref_263_index_resize_1] 
            {
              $T [index_resize_req] $T [index_resize_ack] // resize index to address-width
            }
            array_obj_ref_263_index_computed_1 &-> (array_obj_ref_263_index_resize_1)
            array_obj_ref_263_index_resized_1 <-& (array_obj_ref_263_index_resize_1)
            ;;[array_obj_ref_263_index_scale_1] 
            {
              $T [scale_rename_req] $T [scale_rename_ack] // rename 
            }
            array_obj_ref_263_index_resized_1 &-> (array_obj_ref_263_index_scale_1)
            array_obj_ref_263_index_scaled_1 <-& (array_obj_ref_263_index_scale_1)
            $T[array_obj_ref_263_partial_sum_1_sample_start] 
            $T[array_obj_ref_263_partial_sum_1_sample_complete] 
            $T[array_obj_ref_263_partial_sum_1_update_start] 
            $T[array_obj_ref_263_partial_sum_1_update_complete] 
            ;;[array_obj_ref_263_partial_sum_1_Sample] 
            {
              $T [rr] $T [ra] 
            }
            ;;[array_obj_ref_263_partial_sum_1_Update] 
            {
              $T [cr] $T [ca] 
            }
            array_obj_ref_263_partial_sum_1_sample_start &-> (array_obj_ref_263_partial_sum_1_Sample)
            array_obj_ref_263_partial_sum_1_sample_complete <-& (array_obj_ref_263_partial_sum_1_Sample)
            array_obj_ref_263_partial_sum_1_update_start &-> (array_obj_ref_263_partial_sum_1_Update)
            array_obj_ref_263_partial_sum_1_update_complete <-& (array_obj_ref_263_partial_sum_1_Update)
            array_obj_ref_263_partial_sum_1_sample_start o<-& (array_obj_ref_263_partial_sum_1_sample_complete 1)
            array_obj_ref_263_partial_sum_1_update_start o<-& (array_obj_ref_263_partial_sum_1_update_complete 0)
            array_obj_ref_263_partial_sum_1_sample_start <-& (array_obj_ref_263_index_scaled_0)
            array_obj_ref_263_partial_sum_1_sample_start <-& (array_obj_ref_263_index_scaled_1)
            array_obj_ref_263_index_scaled_0 o<-& (array_obj_ref_263_partial_sum_1_sample_complete 1)
            array_obj_ref_263_offset_calculated <-& (array_obj_ref_263_partial_sum_1_update_complete)
            ;;[array_obj_ref_263_final_index_sum_regn] 
            {
              $T [req] $T [ack] // rename
            }
            array_obj_ref_263_partial_sum_1_update_complete &-> (array_obj_ref_263_final_index_sum_regn)
            array_obj_ref_263_offset_calculated <-& (array_obj_ref_263_final_index_sum_regn)
            ;;[array_obj_ref_263_base_plus_offset] 
            {
              $T [sum_rename_req] $T [sum_rename_ack] // one gets through 
            }
            array_obj_ref_263_offset_calculated &-> (array_obj_ref_263_base_plus_offset)
            array_obj_ref_263_root_address_calculated <-& (array_obj_ref_263_base_plus_offset)
            ;;[array_obj_ref_263_word_addrgen] 
            {
              $T [root_register_req] $T [root_register_ack]
            }
            array_obj_ref_263_root_address_calculated &-> (array_obj_ref_263_word_addrgen)
            array_obj_ref_263_word_address_calculated <-& (array_obj_ref_263_word_addrgen)
            ;;[array_obj_ref_263_Sample] 
            {
              ||[word_access_start] 
              {
                ;;[word_0] 
                {
                  $T [rr] $T [ra] 
                }
              }
            }
            ;;[array_obj_ref_263_Update] 
            {
              ||[word_access_complete] 
              {
                ;;[word_0] 
                {
                  $T [cr] $T [ca] 
                }
              }
              ;;[array_obj_ref_263_Merge] 
              {
                $T [merge_req] $T [merge_ack]
              }
            }
            array_obj_ref_263_sample_start_ <-& (array_obj_ref_263_word_address_calculated)
            // reenable-joins
            array_obj_ref_263_partial_sum_1_update_start o<-& (array_obj_ref_263_sample_completed_ 0)
            array_obj_ref_263_sample_start_ &-> (array_obj_ref_263_Sample)
            array_obj_ref_263_sample_completed_ <-& (array_obj_ref_263_Sample)
            array_obj_ref_263_sample_completed_ &-> ($null)
            array_obj_ref_263_update_start_ &-> (array_obj_ref_263_Update)
            array_obj_ref_263_update_completed_ <-& (array_obj_ref_263_Update)
            // self-release: 
            array_obj_ref_263_sample_start_ o<-& (array_obj_ref_263_sample_completed_ 1)
            $null &-> (array_obj_ref_263_update_start_)
            array_obj_ref_263_update_start_ o<-& (array_obj_ref_263_update_completed_ 0)
            // Target expression
            // (as target) ppp
            // start: WAR dependencies for ppp
            // done: WAR dependencies for ppp
            // end:  				ppp := C_MEM[index][C] $buffering 1// bits of buffering = 32. 
            // start:  				pppp := D_MEM[index][C] $buffering 1// bits of buffering = 32. 
            //  file .Aa/mvp.opt.aa, line 122
            // Source expression
            // D_MEM[index][C]
            $T[array_obj_ref_268_base_address_calculated] 
            $T[array_obj_ref_268_sample_start_] 
            $T[array_obj_ref_268_sample_completed_] 
            $T[array_obj_ref_268_update_start_] 
            $T[array_obj_ref_268_update_completed_] 
            $T[array_obj_ref_268_word_address_calculated] 
            $T[array_obj_ref_268_root_address_calculated] 
            $T[array_obj_ref_268_offset_calculated] 
            $T[array_obj_ref_268_index_resized_0] 
            $T[array_obj_ref_268_index_scaled_0] 
            $T[array_obj_ref_268_index_computed_0] 
            // index
            // start: Forward dependencies from index to transition array_obj_ref_268_index_computed_0
            array_obj_ref_268_index_computed_0 <-& (LSHR_u8_u8_248_update_completed_)
            // done: Forward dependencies from index to transition array_obj_ref_268_index_computed_0
            ;;[array_obj_ref_268_index_resize_0] 
            {
              $T [index_resize_req] $T [index_resize_ack] // resize index to address-width
            }
            array_obj_ref_268_index_computed_0 &-> (array_obj_ref_268_index_resize_0)
            array_obj_ref_268_index_resized_0 <-& (array_obj_ref_268_index_resize_0)
            $T[array_obj_ref_268_index_scale_0_sample_start] 
            $T[array_obj_ref_268_index_scale_0_sample_complete] 
            $T[array_obj_ref_268_index_scale_0_update_start] 
            $T[array_obj_ref_268_index_scale_0_update_complete] 
            ;;[array_obj_ref_268_index_scale_0_Sample] 
            {
              $T [rr] $T [ra] 
            }
            ;;[array_obj_ref_268_index_scale_0_Update] 
            {
              $T [cr] $T [ca] 
            }
            array_obj_ref_268_index_resized_0 &-> (array_obj_ref_268_index_scale_0_sample_start)
            array_obj_ref_268_index_scale_0_sample_start &-> (array_obj_ref_268_index_scale_0_Sample)
            array_obj_ref_268_index_scale_0_sample_complete <-& (array_obj_ref_268_index_scale_0_Sample)
            array_obj_ref_268_index_scale_0_update_start &-> (array_obj_ref_268_index_scale_0_Update)
            array_obj_ref_268_index_scale_0_update_complete <-& (array_obj_ref_268_index_scale_0_Update)
            array_obj_ref_268_index_scaled_0 <-& (array_obj_ref_268_index_scale_0_update_complete)
            LSHR_u8_u8_248_update_start_ o<-& (array_obj_ref_268_index_scaled_0 0)
            array_obj_ref_268_index_scale_0_sample_start o<-& (array_obj_ref_268_index_scale_0_sample_complete 1)
            array_obj_ref_268_index_scale_0_update_start o<-& (array_obj_ref_268_index_scale_0_update_complete 0)
            $T[array_obj_ref_268_index_resized_1] 
            $T[array_obj_ref_268_index_scaled_1] 
            $T[array_obj_ref_268_index_computed_1] 
            // C
            // start: Forward dependencies from C to transition array_obj_ref_268_index_computed_1
            // done: Forward dependencies from C to transition array_obj_ref_268_index_computed_1
            ;;[array_obj_ref_268_index_resize_1] 
            {
              $T [index_resize_req] $T [index_resize_ack] // resize index to address-width
            }
            array_obj_ref_268_index_computed_1 &-> (array_obj_ref_268_index_resize_1)
            array_obj_ref_268_index_resized_1 <-& (array_obj_ref_268_index_resize_1)
            ;;[array_obj_ref_268_index_scale_1] 
            {
              $T [scale_rename_req] $T [scale_rename_ack] // rename 
            }
            array_obj_ref_268_index_resized_1 &-> (array_obj_ref_268_index_scale_1)
            array_obj_ref_268_index_scaled_1 <-& (array_obj_ref_268_index_scale_1)
            $T[array_obj_ref_268_partial_sum_1_sample_start] 
            $T[array_obj_ref_268_partial_sum_1_sample_complete] 
            $T[array_obj_ref_268_partial_sum_1_update_start] 
            $T[array_obj_ref_268_partial_sum_1_update_complete] 
            ;;[array_obj_ref_268_partial_sum_1_Sample] 
            {
              $T [rr] $T [ra] 
            }
            ;;[array_obj_ref_268_partial_sum_1_Update] 
            {
              $T [cr] $T [ca] 
            }
            array_obj_ref_268_partial_sum_1_sample_start &-> (array_obj_ref_268_partial_sum_1_Sample)
            array_obj_ref_268_partial_sum_1_sample_complete <-& (array_obj_ref_268_partial_sum_1_Sample)
            array_obj_ref_268_partial_sum_1_update_start &-> (array_obj_ref_268_partial_sum_1_Update)
            array_obj_ref_268_partial_sum_1_update_complete <-& (array_obj_ref_268_partial_sum_1_Update)
            array_obj_ref_268_partial_sum_1_sample_start o<-& (array_obj_ref_268_partial_sum_1_sample_complete 1)
            array_obj_ref_268_partial_sum_1_update_start o<-& (array_obj_ref_268_partial_sum_1_update_complete 0)
            array_obj_ref_268_partial_sum_1_sample_start <-& (array_obj_ref_268_index_scaled_0)
            array_obj_ref_268_partial_sum_1_sample_start <-& (array_obj_ref_268_index_scaled_1)
            array_obj_ref_268_index_scaled_0 o<-& (array_obj_ref_268_partial_sum_1_sample_complete 1)
            array_obj_ref_268_offset_calculated <-& (array_obj_ref_268_partial_sum_1_update_complete)
            ;;[array_obj_ref_268_final_index_sum_regn] 
            {
              $T [req] $T [ack] // rename
            }
            array_obj_ref_268_partial_sum_1_update_complete &-> (array_obj_ref_268_final_index_sum_regn)
            array_obj_ref_268_offset_calculated <-& (array_obj_ref_268_final_index_sum_regn)
            ;;[array_obj_ref_268_base_plus_offset] 
            {
              $T [sum_rename_req] $T [sum_rename_ack] // one gets through 
            }
            array_obj_ref_268_offset_calculated &-> (array_obj_ref_268_base_plus_offset)
            array_obj_ref_268_root_address_calculated <-& (array_obj_ref_268_base_plus_offset)
            ;;[array_obj_ref_268_word_addrgen] 
            {
              $T [root_register_req] $T [root_register_ack]
            }
            array_obj_ref_268_root_address_calculated &-> (array_obj_ref_268_word_addrgen)
            array_obj_ref_268_word_address_calculated <-& (array_obj_ref_268_word_addrgen)
            ;;[array_obj_ref_268_Sample] 
            {
              ||[word_access_start] 
              {
                ;;[word_0] 
                {
                  $T [rr] $T [ra] 
                }
              }
            }
            ;;[array_obj_ref_268_Update] 
            {
              ||[word_access_complete] 
              {
                ;;[word_0] 
                {
                  $T [cr] $T [ca] 
                }
              }
              ;;[array_obj_ref_268_Merge] 
              {
                $T [merge_req] $T [merge_ack]
              }
            }
            array_obj_ref_268_sample_start_ <-& (array_obj_ref_268_word_address_calculated)
            // reenable-joins
            array_obj_ref_268_partial_sum_1_update_start o<-& (array_obj_ref_268_sample_completed_ 0)
            array_obj_ref_268_sample_start_ &-> (array_obj_ref_268_Sample)
            array_obj_ref_268_sample_completed_ <-& (array_obj_ref_268_Sample)
            array_obj_ref_268_sample_completed_ &-> ($null)
            array_obj_ref_268_update_start_ &-> (array_obj_ref_268_Update)
            array_obj_ref_268_update_completed_ <-& (array_obj_ref_268_Update)
            // self-release: 
            array_obj_ref_268_sample_start_ o<-& (array_obj_ref_268_sample_completed_ 1)
            $null &-> (array_obj_ref_268_update_start_)
            array_obj_ref_268_update_start_ o<-& (array_obj_ref_268_update_completed_ 0)
            // Target expression
            // (as target) pppp
            // start: WAR dependencies for pppp
            // done: WAR dependencies for pppp
            // end:  				pppp := D_MEM[index][C] $buffering 1// bits of buffering = 32. 
            // start:  				mp := products_pipe $buffering 1// bits of buffering = 32. 
            //  file .Aa/mvp.opt.aa, line 123
            // Source expression
            // products_pipe
            $T[RPIPE_products_pipe_271_sample_start_] 
            $T[RPIPE_products_pipe_271_sample_completed_] 
            $T[RPIPE_products_pipe_271_update_start_] 
            $T[RPIPE_products_pipe_271_update_completed_] 
            ;;[RPIPE_products_pipe_271_Sample] 
            {
              // pipe read sample
              $T [rr] $T [ra] 
            }
            ;;[RPIPE_products_pipe_271_Update] 
            {
              // pipe read update
              $T [cr] $T [ca] 
            }
            RPIPE_products_pipe_271_sample_start_ &-> (RPIPE_products_pipe_271_Sample)
            RPIPE_products_pipe_271_sample_completed_ <-& (RPIPE_products_pipe_271_Sample)
            RPIPE_products_pipe_271_update_start_ <-& (RPIPE_products_pipe_271_sample_completed_)
            RPIPE_products_pipe_271_update_start_ &-> (RPIPE_products_pipe_271_Update)
            RPIPE_products_pipe_271_update_completed_ <-& (RPIPE_products_pipe_271_Update)
            RPIPE_products_pipe_271_sample_start_ o<-& (RPIPE_products_pipe_271_update_completed_ 0)
            // Target expression
            // (as target) mp
            // start: WAR dependencies for mp
            // done: WAR dependencies for mp
            // end:  				mp := products_pipe $buffering 1// bits of buffering = 32. 
            // start:  				mp1 := products_pipe $buffering 1// bits of buffering = 32. 
            //  file .Aa/mvp.opt.aa, line 124
            // Source expression
            // products_pipe
            $T[RPIPE_products_pipe_274_sample_start_] 
            $T[RPIPE_products_pipe_274_sample_completed_] 
            $T[RPIPE_products_pipe_274_update_start_] 
            $T[RPIPE_products_pipe_274_update_completed_] 
            ;;[RPIPE_products_pipe_274_Sample] 
            {
              // pipe read sample
              $T [rr] $T [ra] 
            }
            ;;[RPIPE_products_pipe_274_Update] 
            {
              // pipe read update
              $T [cr] $T [ca] 
            }
            RPIPE_products_pipe_274_sample_start_ &-> (RPIPE_products_pipe_274_Sample)
            RPIPE_products_pipe_274_sample_completed_ <-& (RPIPE_products_pipe_274_Sample)
            RPIPE_products_pipe_274_update_start_ <-& (RPIPE_products_pipe_274_sample_completed_)
            RPIPE_products_pipe_274_update_start_ &-> (RPIPE_products_pipe_274_Update)
            RPIPE_products_pipe_274_update_completed_ <-& (RPIPE_products_pipe_274_Update)
            RPIPE_products_pipe_274_sample_start_ o<-& (RPIPE_products_pipe_274_update_completed_ 0)
            // Target expression
            // (as target) mp1
            // start: WAR dependencies for mp1
            // done: WAR dependencies for mp1
            // end:  				mp1 := products_pipe $buffering 1// bits of buffering = 32. 
            // start:  				mp2 := products_pipe $buffering 1// bits of buffering = 32. 
            //  file .Aa/mvp.opt.aa, line 125
            // Source expression
            // products_pipe
            $T[RPIPE_products_pipe_277_sample_start_] 
            $T[RPIPE_products_pipe_277_sample_completed_] 
            $T[RPIPE_products_pipe_277_update_start_] 
            $T[RPIPE_products_pipe_277_update_completed_] 
            ;;[RPIPE_products_pipe_277_Sample] 
            {
              // pipe read sample
              $T [rr] $T [ra] 
            }
            ;;[RPIPE_products_pipe_277_Update] 
            {
              // pipe read update
              $T [cr] $T [ca] 
            }
            RPIPE_products_pipe_277_sample_start_ &-> (RPIPE_products_pipe_277_Sample)
            RPIPE_products_pipe_277_sample_completed_ <-& (RPIPE_products_pipe_277_Sample)
            RPIPE_products_pipe_277_update_start_ <-& (RPIPE_products_pipe_277_sample_completed_)
            RPIPE_products_pipe_277_update_start_ &-> (RPIPE_products_pipe_277_Update)
            RPIPE_products_pipe_277_update_completed_ <-& (RPIPE_products_pipe_277_Update)
            RPIPE_products_pipe_277_sample_start_ o<-& (RPIPE_products_pipe_277_update_completed_ 0)
            // Target expression
            // (as target) mp2
            // start: WAR dependencies for mp2
            // done: WAR dependencies for mp2
            // end:  				mp2 := products_pipe $buffering 1// bits of buffering = 32. 
            // start:  				mp3 := products_pipe $buffering 1// bits of buffering = 32. 
            //  file .Aa/mvp.opt.aa, line 126
            // Source expression
            // products_pipe
            $T[RPIPE_products_pipe_280_sample_start_] 
            $T[RPIPE_products_pipe_280_sample_completed_] 
            $T[RPIPE_products_pipe_280_update_start_] 
            $T[RPIPE_products_pipe_280_update_completed_] 
            ;;[RPIPE_products_pipe_280_Sample] 
            {
              // pipe read sample
              $T [rr] $T [ra] 
            }
            ;;[RPIPE_products_pipe_280_Update] 
            {
              // pipe read update
              $T [cr] $T [ca] 
            }
            RPIPE_products_pipe_280_sample_start_ &-> (RPIPE_products_pipe_280_Sample)
            RPIPE_products_pipe_280_sample_completed_ <-& (RPIPE_products_pipe_280_Sample)
            RPIPE_products_pipe_280_update_start_ <-& (RPIPE_products_pipe_280_sample_completed_)
            RPIPE_products_pipe_280_update_start_ &-> (RPIPE_products_pipe_280_Update)
            RPIPE_products_pipe_280_update_completed_ <-& (RPIPE_products_pipe_280_Update)
            RPIPE_products_pipe_280_sample_start_ o<-& (RPIPE_products_pipe_280_update_completed_ 0)
            // Target expression
            // (as target) mp3
            // start: WAR dependencies for mp3
            // done: WAR dependencies for mp3
            // end:  				mp3 := products_pipe $buffering 1// bits of buffering = 32. 
            // start:  				mp_298_delayed_5_0 := mp $buffering 5 $cut_through // bits of buffering = 160. 
            //  file .Aa/mvp.opt.aa, line 127
            $T[assign_stmt_284_sample_start_] 
            $T[assign_stmt_284_sample_completed_] 
            $T[assign_stmt_284_update_start_] 
            $T[assign_stmt_284_update_completed_] 
            // Source expression
            // mp
            // Target expression
            // (as target) mp_298_delayed_5_0
            // both source and target are implicit: use interlock 
            // Interlock 
            ;;[assign_stmt_284_Sample] 
            {
              $T [req] $T [ack] // interlock-sample.
            }
            ;;[assign_stmt_284_Update] 
            {
              $T [req] $T [ack] // interlock-update.
            }
            assign_stmt_284_sample_start_ &-> (assign_stmt_284_Sample)
            assign_stmt_284_sample_completed_ <-& (assign_stmt_284_Sample)
            assign_stmt_284_sample_completed_ &-> ($null)
            assign_stmt_284_update_start_ &-> (assign_stmt_284_Update)
            assign_stmt_284_update_completed_ <-& (assign_stmt_284_Update)
            // start: Forward dependencies from mp to transition assign_stmt_284_sample_start_
            assign_stmt_284_sample_start_ <-& (RPIPE_products_pipe_271_update_completed_)
            // done: Forward dependencies from mp to transition assign_stmt_284_sample_start_
            // RAW reenables for mp
            RPIPE_products_pipe_271_update_start_ o<-& (assign_stmt_284_sample_completed_ 0)
            // self-release: 
            assign_stmt_284_sample_start_ o<-& (assign_stmt_284_sample_completed_ 1)
            $null &-> (assign_stmt_284_update_start_)
            assign_stmt_284_update_start_ o<-& (assign_stmt_284_update_completed_ 0)
            // start: WAR dependencies for mp_298_delayed_5_0
            // done: WAR dependencies for mp_298_delayed_5_0
            // end:  				mp_298_delayed_5_0 := mp $buffering 5 $cut_through // bits of buffering = 160. 
            // start:  				products_pipe := (mp_298_delayed_5_0 + (p * x)) $buffering 1// bits of buffering = 32. 
            //  file .Aa/mvp.opt.aa, line 128
            // Source expression
            // (mp_298_delayed_5_0 + (p * x))
            $T[ADD_u32_u32_290_sample_start_] 
            $T[ADD_u32_u32_290_sample_completed_] 
            $T[ADD_u32_u32_290_update_start_] 
            $T[ADD_u32_u32_290_update_completed_] 
            // mp_298_delayed_5_0
            // (p * x)
            // p
            // x
            // start: Forward dependencies from mp_298_delayed_5_0 to transition ADD_u32_u32_290_sample_start_
            ADD_u32_u32_290_sample_start_ <-& (assign_stmt_284_update_completed_)
            // done: Forward dependencies from mp_298_delayed_5_0 to transition ADD_u32_u32_290_sample_start_
            // start: Forward dependencies from (p * x) to transition ADD_u32_u32_290_sample_start_
            ADD_u32_u32_290_sample_start_ <-& (array_obj_ref_253_update_completed_)
            // done: Forward dependencies from (p * x) to transition ADD_u32_u32_290_sample_start_
            ;;[ADD_u32_u32_290_Sample] 
            {
              // binary expression 
              $T [rr] $T [ra]  // (split) binary operation 
            }
            ;;[ADD_u32_u32_290_Update] 
            {
              // binary expression 
              $T [cr] $T [ca] // (split) binary operation 
            }
            ADD_u32_u32_290_sample_start_ &-> (ADD_u32_u32_290_Sample)
            ADD_u32_u32_290_sample_completed_ <-& (ADD_u32_u32_290_Sample)
            ADD_u32_u32_290_sample_completed_ &-> ($null)
            ADD_u32_u32_290_update_start_ &-> (ADD_u32_u32_290_Update)
            ADD_u32_u32_290_update_completed_ <-& (ADD_u32_u32_290_Update)
            // RAW reenables for mp_298_delayed_5_0
            assign_stmt_284_update_start_ o<-& (ADD_u32_u32_290_sample_completed_ 0)
            // RAW reenables for (p * x)
            array_obj_ref_253_update_start_ o<-& (ADD_u32_u32_290_sample_completed_ 0)
            // self-release: 
            ADD_u32_u32_290_sample_start_ o<-& (ADD_u32_u32_290_sample_completed_ 1)
            $null &-> (ADD_u32_u32_290_update_start_)
            ADD_u32_u32_290_update_start_ o<-& (ADD_u32_u32_290_update_completed_ 0)
            // Target expression
            // (as target) products_pipe
            $T[WPIPE_products_pipe_285_sample_start_] 
            $T[WPIPE_products_pipe_285_sample_completed_] 
            $T[WPIPE_products_pipe_285_update_start_] 
            $T[WPIPE_products_pipe_285_update_completed_] 
            ;;[WPIPE_products_pipe_285_Sample] 
            {
              // pipe write sample-start products_pipe
              $T [req] $T [ack] 
            }
            ;;[WPIPE_products_pipe_285_Update] 
            {
              // pipe write update (complete) products_pipe
              $T [req] $T [ack] 
            }
            WPIPE_products_pipe_285_sample_start_ &-> (WPIPE_products_pipe_285_Sample)
            WPIPE_products_pipe_285_sample_completed_ <-& (WPIPE_products_pipe_285_Sample)
            WPIPE_products_pipe_285_update_start_ <-& (WPIPE_products_pipe_285_sample_completed_)
            WPIPE_products_pipe_285_update_start_ &-> (WPIPE_products_pipe_285_Update)
            WPIPE_products_pipe_285_update_completed_ <-& (WPIPE_products_pipe_285_Update)
            WPIPE_products_pipe_285_sample_start_ o<-& (WPIPE_products_pipe_285_update_completed_ 0)
            // start: Forward dependencies from (mp_298_delayed_5_0 + (p * x)) to transition WPIPE_products_pipe_285_sample_start_
            WPIPE_products_pipe_285_sample_start_ <-& (ADD_u32_u32_290_update_completed_)
            // done: Forward dependencies from (mp_298_delayed_5_0 + (p * x)) to transition WPIPE_products_pipe_285_sample_start_
            // RAW reenables for (mp_298_delayed_5_0 + (p * x))
            ADD_u32_u32_290_update_start_ o<-& (WPIPE_products_pipe_285_sample_completed_ 0)
            // end:  				products_pipe := (mp_298_delayed_5_0 + (p * x)) $buffering 1// bits of buffering = 32. 
            // start:  				mp1_305_delayed_5_0 := mp1 $buffering 5 $cut_through // bits of buffering = 160. 
            //  file .Aa/mvp.opt.aa, line 129
            $T[assign_stmt_294_sample_start_] 
            $T[assign_stmt_294_sample_completed_] 
            $T[assign_stmt_294_update_start_] 
            $T[assign_stmt_294_update_completed_] 
            // Source expression
            // mp1
            // Target expression
            // (as target) mp1_305_delayed_5_0
            // both source and target are implicit: use interlock 
            // Interlock 
            ;;[assign_stmt_294_Sample] 
            {
              $T [req] $T [ack] // interlock-sample.
            }
            ;;[assign_stmt_294_Update] 
            {
              $T [req] $T [ack] // interlock-update.
            }
            assign_stmt_294_sample_start_ &-> (assign_stmt_294_Sample)
            assign_stmt_294_sample_completed_ <-& (assign_stmt_294_Sample)
            assign_stmt_294_sample_completed_ &-> ($null)
            assign_stmt_294_update_start_ &-> (assign_stmt_294_Update)
            assign_stmt_294_update_completed_ <-& (assign_stmt_294_Update)
            // start: Forward dependencies from mp1 to transition assign_stmt_294_sample_start_
            assign_stmt_294_sample_start_ <-& (RPIPE_products_pipe_274_update_completed_)
            // done: Forward dependencies from mp1 to transition assign_stmt_294_sample_start_
            // RAW reenables for mp1
            RPIPE_products_pipe_274_update_start_ o<-& (assign_stmt_294_sample_completed_ 0)
            // self-release: 
            assign_stmt_294_sample_start_ o<-& (assign_stmt_294_sample_completed_ 1)
            $null &-> (assign_stmt_294_update_start_)
            assign_stmt_294_update_start_ o<-& (assign_stmt_294_update_completed_ 0)
            // start: WAR dependencies for mp1_305_delayed_5_0
            // done: WAR dependencies for mp1_305_delayed_5_0
            // end:  				mp1_305_delayed_5_0 := mp1 $buffering 5 $cut_through // bits of buffering = 160. 
            // start:  				products_pipe := (mp1_305_delayed_5_0 + (pp * x)) $buffering 1// bits of buffering = 32. 
            //  file .Aa/mvp.opt.aa, line 130
            // Source expression
            // (mp1_305_delayed_5_0 + (pp * x))
            $T[ADD_u32_u32_300_sample_start_] 
            $T[ADD_u32_u32_300_sample_completed_] 
            $T[ADD_u32_u32_300_update_start_] 
            $T[ADD_u32_u32_300_update_completed_] 
            // mp1_305_delayed_5_0
            // (pp * x)
            // pp
            // x
            // start: Forward dependencies from mp1_305_delayed_5_0 to transition ADD_u32_u32_300_sample_start_
            ADD_u32_u32_300_sample_start_ <-& (assign_stmt_294_update_completed_)
            // done: Forward dependencies from mp1_305_delayed_5_0 to transition ADD_u32_u32_300_sample_start_
            // start: Forward dependencies from (pp * x) to transition ADD_u32_u32_300_sample_start_
            ADD_u32_u32_300_sample_start_ <-& (array_obj_ref_258_update_completed_)
            // done: Forward dependencies from (pp * x) to transition ADD_u32_u32_300_sample_start_
            ;;[ADD_u32_u32_300_Sample] 
            {
              // binary expression 
              $T [rr] $T [ra]  // (split) binary operation 
            }
            ;;[ADD_u32_u32_300_Update] 
            {
              // binary expression 
              $T [cr] $T [ca] // (split) binary operation 
            }
            ADD_u32_u32_300_sample_start_ &-> (ADD_u32_u32_300_Sample)
            ADD_u32_u32_300_sample_completed_ <-& (ADD_u32_u32_300_Sample)
            ADD_u32_u32_300_sample_completed_ &-> ($null)
            ADD_u32_u32_300_update_start_ &-> (ADD_u32_u32_300_Update)
            ADD_u32_u32_300_update_completed_ <-& (ADD_u32_u32_300_Update)
            // RAW reenables for mp1_305_delayed_5_0
            assign_stmt_294_update_start_ o<-& (ADD_u32_u32_300_sample_completed_ 0)
            // RAW reenables for (pp * x)
            array_obj_ref_258_update_start_ o<-& (ADD_u32_u32_300_sample_completed_ 0)
            // self-release: 
            ADD_u32_u32_300_sample_start_ o<-& (ADD_u32_u32_300_sample_completed_ 1)
            $null &-> (ADD_u32_u32_300_update_start_)
            ADD_u32_u32_300_update_start_ o<-& (ADD_u32_u32_300_update_completed_ 0)
            // Target expression
            // (as target) products_pipe
            $T[WPIPE_products_pipe_295_sample_start_] 
            $T[WPIPE_products_pipe_295_sample_completed_] 
            $T[WPIPE_products_pipe_295_update_start_] 
            $T[WPIPE_products_pipe_295_update_completed_] 
            ;;[WPIPE_products_pipe_295_Sample] 
            {
              // pipe write sample-start products_pipe
              $T [req] $T [ack] 
            }
            ;;[WPIPE_products_pipe_295_Update] 
            {
              // pipe write update (complete) products_pipe
              $T [req] $T [ack] 
            }
            WPIPE_products_pipe_295_sample_start_ &-> (WPIPE_products_pipe_295_Sample)
            WPIPE_products_pipe_295_sample_completed_ <-& (WPIPE_products_pipe_295_Sample)
            WPIPE_products_pipe_295_update_start_ <-& (WPIPE_products_pipe_295_sample_completed_)
            WPIPE_products_pipe_295_update_start_ &-> (WPIPE_products_pipe_295_Update)
            WPIPE_products_pipe_295_update_completed_ <-& (WPIPE_products_pipe_295_Update)
            WPIPE_products_pipe_295_sample_start_ o<-& (WPIPE_products_pipe_295_update_completed_ 0)
            // start: Forward dependencies from (mp1_305_delayed_5_0 + (pp * x)) to transition WPIPE_products_pipe_295_sample_start_
            WPIPE_products_pipe_295_sample_start_ <-& (ADD_u32_u32_300_update_completed_)
            // done: Forward dependencies from (mp1_305_delayed_5_0 + (pp * x)) to transition WPIPE_products_pipe_295_sample_start_
            // RAW reenables for (mp1_305_delayed_5_0 + (pp * x))
            ADD_u32_u32_300_update_start_ o<-& (WPIPE_products_pipe_295_sample_completed_ 0)
            // end:  				products_pipe := (mp1_305_delayed_5_0 + (pp * x)) $buffering 1// bits of buffering = 32. 
            // start:  				mp2_312_delayed_5_0 := mp2 $buffering 5 $cut_through // bits of buffering = 160. 
            //  file .Aa/mvp.opt.aa, line 131
            $T[assign_stmt_304_sample_start_] 
            $T[assign_stmt_304_sample_completed_] 
            $T[assign_stmt_304_update_start_] 
            $T[assign_stmt_304_update_completed_] 
            // Source expression
            // mp2
            // Target expression
            // (as target) mp2_312_delayed_5_0
            // both source and target are implicit: use interlock 
            // Interlock 
            ;;[assign_stmt_304_Sample] 
            {
              $T [req] $T [ack] // interlock-sample.
            }
            ;;[assign_stmt_304_Update] 
            {
              $T [req] $T [ack] // interlock-update.
            }
            assign_stmt_304_sample_start_ &-> (assign_stmt_304_Sample)
            assign_stmt_304_sample_completed_ <-& (assign_stmt_304_Sample)
            assign_stmt_304_sample_completed_ &-> ($null)
            assign_stmt_304_update_start_ &-> (assign_stmt_304_Update)
            assign_stmt_304_update_completed_ <-& (assign_stmt_304_Update)
            // start: Forward dependencies from mp2 to transition assign_stmt_304_sample_start_
            assign_stmt_304_sample_start_ <-& (RPIPE_products_pipe_277_update_completed_)
            // done: Forward dependencies from mp2 to transition assign_stmt_304_sample_start_
            // RAW reenables for mp2
            RPIPE_products_pipe_277_update_start_ o<-& (assign_stmt_304_sample_completed_ 0)
            // self-release: 
            assign_stmt_304_sample_start_ o<-& (assign_stmt_304_sample_completed_ 1)
            $null &-> (assign_stmt_304_update_start_)
            assign_stmt_304_update_start_ o<-& (assign_stmt_304_update_completed_ 0)
            // start: WAR dependencies for mp2_312_delayed_5_0
            // done: WAR dependencies for mp2_312_delayed_5_0
            // end:  				mp2_312_delayed_5_0 := mp2 $buffering 5 $cut_through // bits of buffering = 160. 
            // start:  				products_pipe := (mp2_312_delayed_5_0 + (ppp * x)) $buffering 1// bits of buffering = 32. 
            //  file .Aa/mvp.opt.aa, line 132
            // Source expression
            // (mp2_312_delayed_5_0 + (ppp * x))
            $T[ADD_u32_u32_310_sample_start_] 
            $T[ADD_u32_u32_310_sample_completed_] 
            $T[ADD_u32_u32_310_update_start_] 
            $T[ADD_u32_u32_310_update_completed_] 
            // mp2_312_delayed_5_0
            // (ppp * x)
            // ppp
            // x
            // start: Forward dependencies from mp2_312_delayed_5_0 to transition ADD_u32_u32_310_sample_start_
            ADD_u32_u32_310_sample_start_ <-& (assign_stmt_304_update_completed_)
            // done: Forward dependencies from mp2_312_delayed_5_0 to transition ADD_u32_u32_310_sample_start_
            // start: Forward dependencies from (ppp * x) to transition ADD_u32_u32_310_sample_start_
            ADD_u32_u32_310_sample_start_ <-& (array_obj_ref_263_update_completed_)
            // done: Forward dependencies from (ppp * x) to transition ADD_u32_u32_310_sample_start_
            ;;[ADD_u32_u32_310_Sample] 
            {
              // binary expression 
              $T [rr] $T [ra]  // (split) binary operation 
            }
            ;;[ADD_u32_u32_310_Update] 
            {
              // binary expression 
              $T [cr] $T [ca] // (split) binary operation 
            }
            ADD_u32_u32_310_sample_start_ &-> (ADD_u32_u32_310_Sample)
            ADD_u32_u32_310_sample_completed_ <-& (ADD_u32_u32_310_Sample)
            ADD_u32_u32_310_sample_completed_ &-> ($null)
            ADD_u32_u32_310_update_start_ &-> (ADD_u32_u32_310_Update)
            ADD_u32_u32_310_update_completed_ <-& (ADD_u32_u32_310_Update)
            // RAW reenables for mp2_312_delayed_5_0
            assign_stmt_304_update_start_ o<-& (ADD_u32_u32_310_sample_completed_ 0)
            // RAW reenables for (ppp * x)
            array_obj_ref_263_update_start_ o<-& (ADD_u32_u32_310_sample_completed_ 0)
            // self-release: 
            ADD_u32_u32_310_sample_start_ o<-& (ADD_u32_u32_310_sample_completed_ 1)
            $null &-> (ADD_u32_u32_310_update_start_)
            ADD_u32_u32_310_update_start_ o<-& (ADD_u32_u32_310_update_completed_ 0)
            // Target expression
            // (as target) products_pipe
            $T[WPIPE_products_pipe_305_sample_start_] 
            $T[WPIPE_products_pipe_305_sample_completed_] 
            $T[WPIPE_products_pipe_305_update_start_] 
            $T[WPIPE_products_pipe_305_update_completed_] 
            ;;[WPIPE_products_pipe_305_Sample] 
            {
              // pipe write sample-start products_pipe
              $T [req] $T [ack] 
            }
            ;;[WPIPE_products_pipe_305_Update] 
            {
              // pipe write update (complete) products_pipe
              $T [req] $T [ack] 
            }
            WPIPE_products_pipe_305_sample_start_ &-> (WPIPE_products_pipe_305_Sample)
            WPIPE_products_pipe_305_sample_completed_ <-& (WPIPE_products_pipe_305_Sample)
            WPIPE_products_pipe_305_update_start_ <-& (WPIPE_products_pipe_305_sample_completed_)
            WPIPE_products_pipe_305_update_start_ &-> (WPIPE_products_pipe_305_Update)
            WPIPE_products_pipe_305_update_completed_ <-& (WPIPE_products_pipe_305_Update)
            WPIPE_products_pipe_305_sample_start_ o<-& (WPIPE_products_pipe_305_update_completed_ 0)
            // start: Forward dependencies from (mp2_312_delayed_5_0 + (ppp * x)) to transition WPIPE_products_pipe_305_sample_start_
            WPIPE_products_pipe_305_sample_start_ <-& (ADD_u32_u32_310_update_completed_)
            // done: Forward dependencies from (mp2_312_delayed_5_0 + (ppp * x)) to transition WPIPE_products_pipe_305_sample_start_
            // RAW reenables for (mp2_312_delayed_5_0 + (ppp * x))
            ADD_u32_u32_310_update_start_ o<-& (WPIPE_products_pipe_305_sample_completed_ 0)
            // end:  				products_pipe := (mp2_312_delayed_5_0 + (ppp * x)) $buffering 1// bits of buffering = 32. 
            // start:  				mp3_319_delayed_5_0 := mp3 $buffering 5 $cut_through // bits of buffering = 160. 
            //  file .Aa/mvp.opt.aa, line 133
            $T[assign_stmt_314_sample_start_] 
            $T[assign_stmt_314_sample_completed_] 
            $T[assign_stmt_314_update_start_] 
            $T[assign_stmt_314_update_completed_] 
            // Source expression
            // mp3
            // Target expression
            // (as target) mp3_319_delayed_5_0
            // both source and target are implicit: use interlock 
            // Interlock 
            ;;[assign_stmt_314_Sample] 
            {
              $T [req] $T [ack] // interlock-sample.
            }
            ;;[assign_stmt_314_Update] 
            {
              $T [req] $T [ack] // interlock-update.
            }
            assign_stmt_314_sample_start_ &-> (assign_stmt_314_Sample)
            assign_stmt_314_sample_completed_ <-& (assign_stmt_314_Sample)
            assign_stmt_314_sample_completed_ &-> ($null)
            assign_stmt_314_update_start_ &-> (assign_stmt_314_Update)
            assign_stmt_314_update_completed_ <-& (assign_stmt_314_Update)
            // start: Forward dependencies from mp3 to transition assign_stmt_314_sample_start_
            assign_stmt_314_sample_start_ <-& (RPIPE_products_pipe_280_update_completed_)
            // done: Forward dependencies from mp3 to transition assign_stmt_314_sample_start_
            // RAW reenables for mp3
            RPIPE_products_pipe_280_update_start_ o<-& (assign_stmt_314_sample_completed_ 0)
            // self-release: 
            assign_stmt_314_sample_start_ o<-& (assign_stmt_314_sample_completed_ 1)
            $null &-> (assign_stmt_314_update_start_)
            assign_stmt_314_update_start_ o<-& (assign_stmt_314_update_completed_ 0)
            // start: WAR dependencies for mp3_319_delayed_5_0
            // done: WAR dependencies for mp3_319_delayed_5_0
            // end:  				mp3_319_delayed_5_0 := mp3 $buffering 5 $cut_through // bits of buffering = 160. 
            // start:  				products_pipe := (mp3_319_delayed_5_0 + (pppp * x)) $buffering 1// bits of buffering = 32. 
            //  file .Aa/mvp.opt.aa, line 134
            // Source expression
            // (mp3_319_delayed_5_0 + (pppp * x))
            $T[ADD_u32_u32_320_sample_start_] 
            $T[ADD_u32_u32_320_sample_completed_] 
            $T[ADD_u32_u32_320_update_start_] 
            $T[ADD_u32_u32_320_update_completed_] 
            // mp3_319_delayed_5_0
            // (pppp * x)
            // pppp
            // x
            // start: Forward dependencies from mp3_319_delayed_5_0 to transition ADD_u32_u32_320_sample_start_
            ADD_u32_u32_320_sample_start_ <-& (assign_stmt_314_update_completed_)
            // done: Forward dependencies from mp3_319_delayed_5_0 to transition ADD_u32_u32_320_sample_start_
            // start: Forward dependencies from (pppp * x) to transition ADD_u32_u32_320_sample_start_
            ADD_u32_u32_320_sample_start_ <-& (array_obj_ref_268_update_completed_)
            // done: Forward dependencies from (pppp * x) to transition ADD_u32_u32_320_sample_start_
            ;;[ADD_u32_u32_320_Sample] 
            {
              // binary expression 
              $T [rr] $T [ra]  // (split) binary operation 
            }
            ;;[ADD_u32_u32_320_Update] 
            {
              // binary expression 
              $T [cr] $T [ca] // (split) binary operation 
            }
            ADD_u32_u32_320_sample_start_ &-> (ADD_u32_u32_320_Sample)
            ADD_u32_u32_320_sample_completed_ <-& (ADD_u32_u32_320_Sample)
            ADD_u32_u32_320_sample_completed_ &-> ($null)
            ADD_u32_u32_320_update_start_ &-> (ADD_u32_u32_320_Update)
            ADD_u32_u32_320_update_completed_ <-& (ADD_u32_u32_320_Update)
            // RAW reenables for mp3_319_delayed_5_0
            assign_stmt_314_update_start_ o<-& (ADD_u32_u32_320_sample_completed_ 0)
            // RAW reenables for (pppp * x)
            array_obj_ref_268_update_start_ o<-& (ADD_u32_u32_320_sample_completed_ 0)
            // self-release: 
            ADD_u32_u32_320_sample_start_ o<-& (ADD_u32_u32_320_sample_completed_ 1)
            $null &-> (ADD_u32_u32_320_update_start_)
            ADD_u32_u32_320_update_start_ o<-& (ADD_u32_u32_320_update_completed_ 0)
            // Target expression
            // (as target) products_pipe
            $T[WPIPE_products_pipe_315_sample_start_] 
            $T[WPIPE_products_pipe_315_sample_completed_] 
            $T[WPIPE_products_pipe_315_update_start_] 
            $T[WPIPE_products_pipe_315_update_completed_] 
            ;;[WPIPE_products_pipe_315_Sample] 
            {
              // pipe write sample-start products_pipe
              $T [req] $T [ack] 
            }
            ;;[WPIPE_products_pipe_315_Update] 
            {
              // pipe write update (complete) products_pipe
              $T [req] $T [ack] 
            }
            WPIPE_products_pipe_315_sample_start_ &-> (WPIPE_products_pipe_315_Sample)
            WPIPE_products_pipe_315_sample_completed_ <-& (WPIPE_products_pipe_315_Sample)
            WPIPE_products_pipe_315_update_start_ <-& (WPIPE_products_pipe_315_sample_completed_)
            WPIPE_products_pipe_315_update_start_ &-> (WPIPE_products_pipe_315_Update)
            WPIPE_products_pipe_315_update_completed_ <-& (WPIPE_products_pipe_315_Update)
            WPIPE_products_pipe_315_sample_start_ o<-& (WPIPE_products_pipe_315_update_completed_ 0)
            // start: Forward dependencies from (mp3_319_delayed_5_0 + (pppp * x)) to transition WPIPE_products_pipe_315_sample_start_
            WPIPE_products_pipe_315_sample_start_ <-& (ADD_u32_u32_320_update_completed_)
            // done: Forward dependencies from (mp3_319_delayed_5_0 + (pppp * x)) to transition WPIPE_products_pipe_315_sample_start_
            // RAW reenables for (mp3_319_delayed_5_0 + (pppp * x))
            ADD_u32_u32_320_update_start_ o<-& (WPIPE_products_pipe_315_sample_completed_ 0)
            // end:  				products_pipe := (mp3_319_delayed_5_0 + (pppp * x)) $buffering 1// bits of buffering = 32. 
            // (NR < 32 )
            // NR
            $T [loop_body_delay_to_condition_start] $delay
            loop_body_start &-> (loop_body_delay_to_condition_start)
            loop_body_delay_to_condition_start &-> (condition_evaluated)
            // start: Forward dependencies from (NR < 32 ) to transition condition_evaluated
            condition_evaluated <-& (ADD_u8_u8_243_update_completed_)
            // done: Forward dependencies from (NR < 32 ) to transition condition_evaluated
            condition_evaluated &-> ($null)
            // load-store dependencies..
            // memory-space  memory_space_1
            //  array_obj_ref_258 load
            // reenable across ring for memory space memory_space_1
            // leading and trailing sets are the same... no ring dependency
            // memory-space  memory_space_2
            //  array_obj_ref_263 load
            // reenable across ring for memory space memory_space_2
            // leading and trailing sets are the same... no ring dependency
            // memory-space  memory_space_3
            //  array_obj_ref_268 load
            // reenable across ring for memory space memory_space_3
            // leading and trailing sets are the same... no ring dependency
            // memory-space  memory_space_0
            //  array_obj_ref_253 load
            // reenable across ring for memory space memory_space_0
            // leading and trailing sets are the same... no ring dependency
            // pipe read/write dependencies for pipe products_pipe
            // read-dependencies for pipe products_pipe
            RPIPE_products_pipe_274_sample_start_ <-& (RPIPE_products_pipe_271_update_completed_)
            RPIPE_products_pipe_277_sample_start_ <-& (RPIPE_products_pipe_274_update_completed_)
            RPIPE_products_pipe_280_sample_start_ <-& (RPIPE_products_pipe_277_update_completed_)
            // ring dependency in pipeline.
            RPIPE_products_pipe_271_update_start_ o<-& (RPIPE_products_pipe_280_update_completed_ 0)
            // write-dependencies for pipe products_pipe
            WPIPE_products_pipe_295_sample_start_ <-& (WPIPE_products_pipe_285_update_completed_)
            WPIPE_products_pipe_305_sample_start_ <-& (WPIPE_products_pipe_295_update_completed_)
            WPIPE_products_pipe_315_sample_start_ <-& (WPIPE_products_pipe_305_update_completed_)
            // ring dependency in pipeline.
            WPIPE_products_pipe_285_sample_start_ o<-& (WPIPE_products_pipe_315_update_completed_ 0)
            // signal write dependencies for products_pipe
          }
          ( first_time_through_loop_body  back_edge_to_loop_body) 
          ( condition_evaluated )
          ;; [loop_exit] 
          {
            $T [ack] 
          }
          ;; [loop_taken] 
          {
            $T [ack] 
          }
          do_while_stmt_228__entry__ <-| ($entry)
          loop_body_done <-| ( do_while_stmt_228_loop_body ) 
          condition_done |-> (loop_exit loop_taken)
          do_while_stmt_228__exit__ |-> ($exit)
          $bind condition_done <= do_while_stmt_228_loop_body : condition_evaluated
          $bind do_while_stmt_228__entry__  => do_while_stmt_228_loop_body : first_time_through_loop_body 
          $bind loop_back  => do_while_stmt_228_loop_body : back_edge_to_loop_body 
          $terminate (loop_exit loop_taken loop_body_done) (loop_back do_while_stmt_228__exit__)
        }
        do_while_stmt_228__entry__ |-> (do_while_stmt_228)
        do_while_stmt_228__exit__ <-| (do_while_stmt_228)
        do_while_stmt_228__entry__ <-| (branch_block_stmt_227__entry__)
        do_while_stmt_228__exit__ |-> (branch_block_stmt_227__exit__)
      }
      branch_block_stmt_227__entry__ |-> (branch_block_stmt_227)
      branch_block_stmt_227__exit__ <-| (branch_block_stmt_227)
      ::[assign_stmt_331] 
      {
        // start:  		NC := (C + 1 ) $buffering 1// bits of buffering = 8. 
        //  file .Aa/mvp.opt.aa, line 137
        // Source expression
        // (C + 1 )
        $T[ADD_u8_u8_330_sample_start_] 
        $T[ADD_u8_u8_330_sample_completed_] 
        $T[ADD_u8_u8_330_update_start_] 
        $T[ADD_u8_u8_330_update_completed_] 
        // C
        // start: Forward dependencies from C to transition ADD_u8_u8_330_sample_start_
        // done: Forward dependencies from C to transition ADD_u8_u8_330_sample_start_
        ;;[ADD_u8_u8_330_Sample] 
        {
          // binary expression 
          $T [rr] $T [ra]  // (split) binary operation 
        }
        ;;[ADD_u8_u8_330_Update] 
        {
          // binary expression 
          $T [cr] $T [ca] // (split) binary operation 
        }
        ADD_u8_u8_330_sample_start_ &-> (ADD_u8_u8_330_Sample)
        ADD_u8_u8_330_sample_completed_ <-& (ADD_u8_u8_330_Sample)
        ADD_u8_u8_330_sample_completed_ &-> ($null)
        ADD_u8_u8_330_update_start_ &-> (ADD_u8_u8_330_Update)
        ADD_u8_u8_330_update_completed_ <-& (ADD_u8_u8_330_Update)
        // Target expression
        // (as target) NC
        // start: WAR dependencies for NC
        // done: WAR dependencies for NC
        // end:  		NC := (C + 1 ) $buffering 1// bits of buffering = 8. 
        // load-store dependencies..
      }
      assign_stmt_331__entry__ |-> (assign_stmt_331)
      assign_stmt_331__exit__ <-| (assign_stmt_331)
      // if-statement  
      //  file .Aa/mvp.opt.aa, line 0
      ;;[if_stmt_332_dead_link] 
      {
        $T [dead_transition] $dead 
      }
      if_stmt_332__entry__ |-> (if_stmt_332_dead_link)
      if_stmt_332__exit__ <-| (if_stmt_332_dead_link)
      ;;[if_stmt_332_eval_test] 
      {
        // test expression evaluate and trigger branch 
        // (NC < 32 )
        ;;[ULT_u8_u1_335] 
        {
          // binary expression 
          ||[ULT_u8_u1_335_inputs] 
          {
          }
          // flow-through
          ;;[SplitProtocol] 
          {
            ;;[Sample] 
            {
              $T [rr] $T [ra]
            }
            ;;[Update] 
            {
              $T [cr] $T [ca]
            }
          }
        }
        $T [branch_req] 
      }
      if_stmt_332__entry__ |-> (if_stmt_332_eval_test)
      $P [ULT_u8_u1_335_place]
      ULT_u8_u1_335_place <-| (if_stmt_332_eval_test)
      ;;[if_stmt_332_if_link] 
      {
        $T [if_choice_transition] 
      }
      ;;[if_stmt_332_else_link] 
      {
        $T [else_choice_transition] 
      }
      ULT_u8_u1_335_place |-> (if_stmt_332_if_link if_stmt_332_else_link)
      $P [loopback_outer]
      loopback_outer <-| (if_stmt_332_if_link)
      if_stmt_332__exit__ <-| (if_stmt_332_else_link)
      // control-path for merge  
      //  file .Aa/mvp.opt.aa, line 102
      ;;[merge_stmt_216_dead_link] 
      {
        $T [dead_transition] $dead 
      }
      merge_stmt_216__entry__ |-> (merge_stmt_216_dead_link)
      merge_stmt_216__exit__ <-| (merge_stmt_216_dead_link)
      //---------------------   merge statement  file .Aa/mvp.opt.aa, line 102  --------------------------
      ||[merge_stmt_216__entry___PhiReq] 
      {
        ;;[phi_stmt_217] 
        {
          ||[phi_stmt_217_sources] 
          {
            // sources for 			$phi C := 			  ($bitcast ($uint<8>) 0  ) $on   $entry 			  NC $on   loopback_outer 
            // type of target is $uint<8>
            // constant source .... delay transition 
            $T [type_cast_220_konst_delay_trans] $delay
          }
          $T [phi_stmt_217_req] 
        }
        ;;[phi_stmt_222] 
        {
          ||[phi_stmt_222_sources] 
          {
            // sources for 			$phi x := 			  in_data $on   $entry 			  in_data $on   loopback_outer 
            // type of target is $uint<32>
            // trivial non-constant source .... interlock-buffer introduced 
            // in_data
            ;;[RPIPE_in_data_224] 
            {
              // pipe read
              ;;[Sample] 
              {
                $T [req] $T [ack] 
              }
              ;;[Update] 
              {
                $T [req] $T [ack] 
              }
            }
          }
          $T [phi_stmt_222_req] 
        }
      }
      merge_stmt_216__entry__ |-> (merge_stmt_216__entry___PhiReq)
      ||[loopback_outer_PhiReq] 
      {
        ;;[phi_stmt_217] 
        {
          ||[phi_stmt_217_sources] 
          {
            // sources for 			$phi C := 			  ($bitcast ($uint<8>) 0  ) $on   $entry 			  NC $on   loopback_outer 
            // type of target is $uint<8>
            // trivial non-constant source .... interlock-buffer introduced 
            || [Interlock] 
            {
              ;;[Sample] 
              {
                $T [req] $T [ack]
              }
              ;;[Update] 
              {
                $T [req] $T [ack]
              }
            }
          }
          $T [phi_stmt_217_req] 
        }
        ;;[phi_stmt_222] 
        {
          ||[phi_stmt_222_sources] 
          {
            // sources for 			$phi x := 			  in_data $on   $entry 			  in_data $on   loopback_outer 
            // type of target is $uint<32>
            // trivial non-constant source .... interlock-buffer introduced 
            // in_data
            ;;[RPIPE_in_data_225] 
            {
              // pipe read
              ;;[Sample] 
              {
                $T [req] $T [ack] 
              }
              ;;[Update] 
              {
                $T [req] $T [ack] 
              }
            }
          }
          $T [phi_stmt_222_req] 
        }
      }
      loopback_outer |-> (loopback_outer_PhiReq)
      $P [merge_stmt_216_PhiReqMerge] 
      merge_stmt_216_PhiReqMerge <-| ( merge_stmt_216__entry___PhiReq  loopback_outer_PhiReq )
      ||[merge_stmt_216_PhiAck] 
      {
        $T [phi_stmt_217_ack] 
        $T [phi_stmt_222_ack] 
      }
      merge_stmt_216_PhiReqMerge |-> (merge_stmt_216_PhiAck)
      merge_stmt_216__exit__  <-| (merge_stmt_216_PhiAck)
      //---------------------  end of merge statement  file .Aa/mvp.opt.aa, line 102  --------------------------
      merge_stmt_216__entry__ <-| (branch_block_stmt_215__entry__)
      branch_block_stmt_227__entry__ <-| (merge_stmt_216__exit__)
      assign_stmt_331__entry__ <-| (branch_block_stmt_227__exit__)
      if_stmt_332__entry__ <-| (assign_stmt_331__exit__)
      if_stmt_332__exit__ |-> (branch_block_stmt_215__exit__)
    }
    <>[branch_block_stmt_339] // Branch Block  file .Aa/mvp.opt.aa, line 142
    {
      $P [branch_block_stmt_339__entry__]
      branch_block_stmt_339__entry__ <-| ($entry)
      $P [branch_block_stmt_339__exit__]
      branch_block_stmt_339__exit__ |-> ($exit)
      $P [do_while_stmt_340__entry__] 
      $P [do_while_stmt_340__exit__] 
      // do-while-statement  
      //  file .Aa/mvp.opt.aa, line 144
      <o> [do_while_stmt_340]  $depth 15 $buffering 1 
      {
        $P[do_while_stmt_340__entry__] 
        $P[do_while_stmt_340__exit__] 
        $P[loop_back] 
        $P[condition_done] 
        $P[loop_body_done] 
        $pipeline [do_while_stmt_340_loop_body] 
        {
          // Pipelined!
          $T[back_edge_to_loop_body] 
          $T[first_time_through_loop_body] 
          $T[loop_body_start] 
          $T[condition_evaluated] 
          $transitionmerge [entry_tmerge] (back_edge_to_loop_body first_time_through_loop_body) (loop_body_start)
          $entry <-& (loop_body_start)
          $T[aggregated_phi_sample_req] 
          $T[aggregated_phi_sample_ack] 
          $T[aggregated_phi_update_req] 
          $T[aggregated_phi_update_ack] 
          // do not loop-back unless all phi's have used up their triggering tokens.
          condition_evaluated <-& (aggregated_phi_update_ack)
          aggregated_phi_sample_req o<-& (aggregated_phi_update_ack 0)
          // start:  PHI statement phi_stmt_342
          // 			$phi K := 			  ($bitcast ($uint<8>) 0  ) $on   $entry 			  nK $on   $loopback 
          // type of target is $uint<8>
          $T[phi_stmt_342_sample_start_] 
          $T[phi_stmt_342_sample_completed_] 
          $T[phi_stmt_342_update_start_] 
          $T[phi_stmt_342_update_completed_] 
          $T[phi_stmt_342_sample_start__ps] 
          phi_stmt_342_sample_start__ps <-& (aggregated_phi_sample_req)
          $T[phi_stmt_342_sample_completed__ps] 
          phi_stmt_342_sample_completed__ps &-> (aggregated_phi_sample_ack)
          $T[phi_stmt_342_update_start__ps] 
          phi_stmt_342_update_start__ps <-& (aggregated_phi_update_req)
          $T[phi_stmt_342_update_completed__ps] 
          phi_stmt_342_update_completed_ <-& (phi_stmt_342_update_completed__ps)
          aggregated_phi_sample_req <-& (phi_stmt_342_sample_start_)
          aggregated_phi_sample_ack &-> (phi_stmt_342_sample_completed_)
          aggregated_phi_update_req <-& (phi_stmt_342_update_start_)
          $T[phi_stmt_342_loopback_trigger] 
          phi_stmt_342_loopback_trigger <-& (back_edge_to_loop_body)
          $T[phi_stmt_342_loopback_sample_req] 
          $T[phi_stmt_342_loopback_sample_req_ps] 
          phi_stmt_342_loopback_sample_req <-& (phi_stmt_342_loopback_sample_req_ps)
          phi_stmt_342_loopback_sample_req &-> ($null)
          $T[phi_stmt_342_entry_trigger] 
          phi_stmt_342_entry_trigger <-& (first_time_through_loop_body)
          $T[phi_stmt_342_entry_sample_req] 
          $T[phi_stmt_342_entry_sample_req_ps] 
          phi_stmt_342_entry_sample_req <-& (phi_stmt_342_entry_sample_req_ps)
          phi_stmt_342_entry_sample_req &-> ($null)
          phi_stmt_342_update_start_ o<-& (phi_stmt_342_update_completed_ 0)
          phi_stmt_342_sample_start_ o<-& (phi_stmt_342_sample_completed_ 1)
          $T[phi_stmt_342_merged_reqs] 
          $T[phi_stmt_342_phi_mux_ack] 
          $T[phi_stmt_342_phi_mux_ack_ps] 
          phi_stmt_342_phi_mux_ack_ps <-& (phi_stmt_342_phi_mux_ack)
          aggregated_phi_update_ack <-& (phi_stmt_342_update_completed_)
          $T[type_cast_345_sample_start__ps] 
          $T[type_cast_345_sample_completed__ps] 
          $T[type_cast_345_update_start__ps] 
          $T[type_cast_345_update_completed__ps] 
          // dummies for constant expression source for phi
          $T[type_cast_345_sample_start_] 
          $T[type_cast_345_sample_completed_] 
          type_cast_345_sample_completed_ <-& (type_cast_345_sample_start_)
          $T[type_cast_345_update_start_] 
          $T [type_cast_345_update_completed_] $delay 
          type_cast_345_update_completed_ <-& (type_cast_345_update_start_)
          // Phi start dependency for implicit/constant alternative.
          type_cast_345_sample_start_ <-& (type_cast_345_sample_start__ps)
          type_cast_345_update_start_ <-& (type_cast_345_update_start__ps)
          // Phi complete dependency.
          type_cast_345_sample_completed__ps <-& (type_cast_345_sample_completed_)
          type_cast_345_update_completed__ps <-& (type_cast_345_update_completed_)
          $T[R_nK_346_sample_start__ps] 
          $T[R_nK_346_sample_completed__ps] 
          $T[R_nK_346_update_start__ps] 
          $T[R_nK_346_update_completed__ps] 
          // interlock for implicit-variable-ref/signal-read in Phi alternative 1
          $T[R_nK_346_sample_start_] 
          $T[R_nK_346_sample_completed_] 
          $T[R_nK_346_update_start_] 
          $T[R_nK_346_update_completed_] 
          ;;[R_nK_346_Sample] 
          {
            $T [req] $T [ack] // interlock-sample.
          }
          R_nK_346_sample_start_ &-> (R_nK_346_Sample)
          R_nK_346_sample_completed_ <-& (R_nK_346_Sample)
          ;;[R_nK_346_Update] 
          {
            $T [req] $T [ack] // interlock-update.
          }
          R_nK_346_update_start_ &-> (R_nK_346_Update)
          R_nK_346_update_completed_ <-& (R_nK_346_Update)
          // RAW reenables for nK
          // Phi start dependency for implicit/constant alternative.
          R_nK_346_sample_start_ <-& (R_nK_346_sample_start__ps)
          R_nK_346_update_start_ <-& (R_nK_346_update_start__ps)
          // Phi complete dependency.
          R_nK_346_sample_completed__ps <-& (R_nK_346_sample_completed_)
          R_nK_346_update_completed__ps <-& (R_nK_346_update_completed_)
          $phisequencer [ phi_stmt_342_phi_seq] : 
          phi_stmt_342_entry_trigger type_cast_345_sample_start__ps type_cast_345_sample_completed__ps type_cast_345_update_start__ps type_cast_345_update_completed__ps phi_stmt_342_loopback_trigger R_nK_346_sample_start__ps R_nK_346_sample_completed__ps R_nK_346_update_start__ps R_nK_346_update_completed__ps :
          phi_stmt_342_sample_start__ps phi_stmt_342_sample_completed__ps phi_stmt_342_update_start__ps phi_stmt_342_update_completed__ps :
          phi_stmt_342_entry_sample_req_ps phi_stmt_342_loopback_sample_req_ps : 
          phi_stmt_342_phi_mux_ack_ps
          // done: PHI Statement phi_stmt_342
          // start:  			out_data := products_pipe $buffering 1// bits of buffering = 32. 
          //  file .Aa/mvp.opt.aa, line 151
          // Source expression
          // products_pipe
          $T[RPIPE_products_pipe_351_sample_start_] 
          $T[RPIPE_products_pipe_351_sample_completed_] 
          $T[RPIPE_products_pipe_351_update_start_] 
          $T[RPIPE_products_pipe_351_update_completed_] 
          ;;[RPIPE_products_pipe_351_Sample] 
          {
            // pipe read sample
            $T [rr] $T [ra] 
          }
          ;;[RPIPE_products_pipe_351_Update] 
          {
            // pipe read update
            $T [cr] $T [ca] 
          }
          RPIPE_products_pipe_351_sample_start_ &-> (RPIPE_products_pipe_351_Sample)
          RPIPE_products_pipe_351_sample_completed_ <-& (RPIPE_products_pipe_351_Sample)
          RPIPE_products_pipe_351_update_start_ <-& (RPIPE_products_pipe_351_sample_completed_)
          RPIPE_products_pipe_351_update_start_ &-> (RPIPE_products_pipe_351_Update)
          RPIPE_products_pipe_351_update_completed_ <-& (RPIPE_products_pipe_351_Update)
          RPIPE_products_pipe_351_sample_start_ o<-& (RPIPE_products_pipe_351_update_completed_ 0)
          // Target expression
          // (as target) out_data
          $T[WPIPE_out_data_350_sample_start_] 
          $T[WPIPE_out_data_350_sample_completed_] 
          $T[WPIPE_out_data_350_update_start_] 
          $T[WPIPE_out_data_350_update_completed_] 
          ;;[WPIPE_out_data_350_Sample] 
          {
            // pipe write sample-start out_data
            $T [req] $T [ack] 
          }
          ;;[WPIPE_out_data_350_Update] 
          {
            // pipe write update (complete) out_data
            $T [req] $T [ack] 
          }
          WPIPE_out_data_350_sample_start_ &-> (WPIPE_out_data_350_Sample)
          WPIPE_out_data_350_sample_completed_ <-& (WPIPE_out_data_350_Sample)
          WPIPE_out_data_350_update_start_ <-& (WPIPE_out_data_350_sample_completed_)
          WPIPE_out_data_350_update_start_ &-> (WPIPE_out_data_350_Update)
          WPIPE_out_data_350_update_completed_ <-& (WPIPE_out_data_350_Update)
          WPIPE_out_data_350_sample_start_ o<-& (WPIPE_out_data_350_update_completed_ 0)
          // start: Forward dependencies from products_pipe to transition WPIPE_out_data_350_sample_start_
          WPIPE_out_data_350_sample_start_ <-& (RPIPE_products_pipe_351_update_completed_)
          // done: Forward dependencies from products_pipe to transition WPIPE_out_data_350_sample_start_
          // RAW reenables for products_pipe
          RPIPE_products_pipe_351_update_start_ o<-& (WPIPE_out_data_350_sample_completed_ 0)
          // end:  			out_data := products_pipe $buffering 1// bits of buffering = 32. 
          // start:  			products_pipe := 0  $buffering 1// bits of buffering = 32. 
          //  file .Aa/mvp.opt.aa, line 152
          // Target expression
          // (as target) products_pipe
          $T[WPIPE_products_pipe_353_sample_start_] 
          $T[WPIPE_products_pipe_353_sample_completed_] 
          $T[WPIPE_products_pipe_353_update_start_] 
          $T[WPIPE_products_pipe_353_update_completed_] 
          ;;[WPIPE_products_pipe_353_Sample] 
          {
            // pipe write sample-start products_pipe
            $T [req] $T [ack] 
          }
          ;;[WPIPE_products_pipe_353_Update] 
          {
            // pipe write update (complete) products_pipe
            $T [req] $T [ack] 
          }
          WPIPE_products_pipe_353_sample_start_ &-> (WPIPE_products_pipe_353_Sample)
          WPIPE_products_pipe_353_sample_completed_ <-& (WPIPE_products_pipe_353_Sample)
          WPIPE_products_pipe_353_update_start_ <-& (WPIPE_products_pipe_353_sample_completed_)
          WPIPE_products_pipe_353_update_start_ &-> (WPIPE_products_pipe_353_Update)
          WPIPE_products_pipe_353_update_completed_ <-& (WPIPE_products_pipe_353_Update)
          WPIPE_products_pipe_353_sample_start_ o<-& (WPIPE_products_pipe_353_update_completed_ 0)
          // end:  			products_pipe := 0  $buffering 1// bits of buffering = 32. 
          // start: WAR dependencies for nK
          // WAR dependency: Read: nK before Write: 			$volatile nK := (K + 1 ) $buffering 1
          //  WAR  PHI-PHI dependency ignored...
          // done: WAR dependencies for nK
          // start:  			$volatile nK := (K + 1 ) $buffering 1
          //  file .Aa/mvp.opt.aa, line 153
          // volatile! 
          // Source expression
          // (K + 1 )
          // K
          // Target expression
          // (as target) nK
          // start: WAR dependencies for nK
          // WAR dependency: Read: nK before Write: 			$volatile nK := (K + 1 ) $buffering 1
          //  WAR  PHI-PHI dependency ignored...
          // done: WAR dependencies for nK
          // end:  			$volatile nK := (K + 1 ) $buffering 1
          // (nK < 32 )
          // nK
          $T [loop_body_delay_to_condition_start] $delay
          loop_body_start &-> (loop_body_delay_to_condition_start)
          loop_body_delay_to_condition_start &-> (condition_evaluated)
          // start: Forward dependencies from (nK < 32 ) to transition condition_evaluated
          condition_evaluated <-& (phi_stmt_342_update_completed_)
          // done: Forward dependencies from (nK < 32 ) to transition condition_evaluated
          condition_evaluated &-> ($null)
          // load-store dependencies..
          // pipe read/write dependencies for pipe out_data
          // read-dependencies for pipe out_data
          // write-dependencies for pipe out_data
          // signal write dependencies for out_data
          // pipe read/write dependencies for pipe products_pipe
          // read-dependencies for pipe products_pipe
          // write-dependencies for pipe products_pipe
          // signal write dependencies for products_pipe
        }
        ( first_time_through_loop_body  back_edge_to_loop_body) 
        ( condition_evaluated )
        ;; [loop_exit] 
        {
          $T [ack] 
        }
        ;; [loop_taken] 
        {
          $T [ack] 
        }
        do_while_stmt_340__entry__ <-| ($entry)
        loop_body_done <-| ( do_while_stmt_340_loop_body ) 
        condition_done |-> (loop_exit loop_taken)
        do_while_stmt_340__exit__ |-> ($exit)
        $bind condition_done <= do_while_stmt_340_loop_body : condition_evaluated
        $bind do_while_stmt_340__entry__  => do_while_stmt_340_loop_body : first_time_through_loop_body 
        $bind loop_back  => do_while_stmt_340_loop_body : back_edge_to_loop_body 
        $terminate (loop_exit loop_taken loop_body_done) (loop_back do_while_stmt_340__exit__)
      }
      do_while_stmt_340__entry__ |-> (do_while_stmt_340)
      do_while_stmt_340__exit__ <-| (do_while_stmt_340)
      do_while_stmt_340__entry__ <-| (branch_block_stmt_339__entry__)
      do_while_stmt_340__exit__ |-> (branch_block_stmt_339__exit__)
    }
  }
  // end control-path
  $DP 
  {
    // begin data-path 
    // constant-object-declarations for block %mvp_unit%fetchloop%
    //  file .Aa/mvp.opt.aa, line 102
    // constant-object-declarations for block %mvp_unit%fetchloop%productloop%
    //  file .Aa/mvp.opt.aa, line 112
    // constant-object-declarations for block %mvp_unit%fetchloop%productloop
    //  file .Aa/mvp.opt.aa, line 108
    // constant-object-declarations for block %mvp_unit%fetchloop
    //  file .Aa/mvp.opt.aa, line 100
    // constant-object-declarations for block %mvp_unit%sendloop%
    //  file .Aa/mvp.opt.aa, line 146
    // constant-object-declarations for block %mvp_unit%sendloop
    //  file .Aa/mvp.opt.aa, line 142
    // constant-object-declarations for block %mvp_unit
    //  file .Aa/mvp.opt.aa, line 95
    // constant-declarations for block %mvp_unit%fetchloop
    //  file .Aa/mvp.opt.aa, line 100
    // constant-declarations for block %mvp_unit%fetchloop%
    //  file .Aa/mvp.opt.aa, line 102
    // constant-declarations for phi:  			$phi C := 			  ($bitcast ($uint<8>) 0  ) $on   $entry 			  NC $on   loopback_outer 
    // type of target is $uint<8>
    //  file .Aa/mvp.opt.aa, line 103
    // ($bitcast ($uint<8>) 0  )
    $constant $W[type_cast_220_wire_constant] : $int<8> := _b00000000// 0
    // constant-declarations for phi:  			$phi x := 			  in_data $on   $entry 			  in_data $on   loopback_outer 
    // type of target is $uint<32>
    //  file .Aa/mvp.opt.aa, line 105
    // constant-declarations for block %mvp_unit%fetchloop%productloop
    //  file .Aa/mvp.opt.aa, line 108
    // do-while statement  
    //  file .Aa/mvp.opt.aa, line 110
    // 32 
    $constant $W[konst_324_wire_constant] : $int<8> := _b00100000// 32
    // constant-declarations for block %mvp_unit%fetchloop%productloop%
    //  file .Aa/mvp.opt.aa, line 112
    // constant-declarations for phi:  				$phi R := 				  ($bitcast ($uint<8>) 0  ) $on   $entry 				  NR $on   $loopback 
    // type of target is $uint<8>
    //  file .Aa/mvp.opt.aa, line 113
    // ($bitcast ($uint<8>) 0  )
    $constant $W[type_cast_233_wire_constant] : $int<8> := _b00000000// 0
    // 4 
    $constant $W[konst_242_wire_constant] : $int<8> := _b00000100// 4
    // 2 
    $constant $W[konst_247_wire_constant] : $int<8> := _b00000010// 2
    // A_MEM[index][C]
    $constant $W[array_obj_ref_253_resized_base_address] : $int<8> := _b00000000// 0
    $constant $W[array_obj_ref_253_offset_scale_factor_0] : $int<8> := _b00100000// 32
    $constant $W[array_obj_ref_253_offset_scale_factor_1] : $int<8> := _b00000001// 1
    $constant $W[array_obj_ref_253_word_offset_0] : $int<8> := _b00000000// 0
    // B_MEM[index][C]
    $constant $W[array_obj_ref_258_resized_base_address] : $int<8> := _b00000000// 0
    $constant $W[array_obj_ref_258_offset_scale_factor_0] : $int<8> := _b00100000// 32
    $constant $W[array_obj_ref_258_offset_scale_factor_1] : $int<8> := _b00000001// 1
    $constant $W[array_obj_ref_258_word_offset_0] : $int<8> := _b00000000// 0
    // C_MEM[index][C]
    $constant $W[array_obj_ref_263_resized_base_address] : $int<8> := _b00000000// 0
    $constant $W[array_obj_ref_263_offset_scale_factor_0] : $int<8> := _b00100000// 32
    $constant $W[array_obj_ref_263_offset_scale_factor_1] : $int<8> := _b00000001// 1
    $constant $W[array_obj_ref_263_word_offset_0] : $int<8> := _b00000000// 0
    // D_MEM[index][C]
    $constant $W[array_obj_ref_268_resized_base_address] : $int<8> := _b00000000// 0
    $constant $W[array_obj_ref_268_offset_scale_factor_0] : $int<8> := _b00100000// 32
    $constant $W[array_obj_ref_268_offset_scale_factor_1] : $int<8> := _b00000001// 1
    $constant $W[array_obj_ref_268_word_offset_0] : $int<8> := _b00000000// 0
    // 1 
    $constant $W[konst_329_wire_constant] : $int<8> := _b00000001// 1
    // if-statement  
    //  file .Aa/mvp.opt.aa, line 0
    // 32 
    $constant $W[konst_334_wire_constant] : $int<8> := _b00100000// 32
    // constant-declarations for block %mvp_unit%sendloop
    //  file .Aa/mvp.opt.aa, line 142
    // do-while statement  
    //  file .Aa/mvp.opt.aa, line 144
    // 32 
    $constant $W[konst_363_wire_constant] : $int<8> := _b00100000// 32
    // constant-declarations for block %mvp_unit%sendloop%
    //  file .Aa/mvp.opt.aa, line 146
    // constant-declarations for phi:  			$phi K := 			  ($bitcast ($uint<8>) 0  ) $on   $entry 			  nK $on   $loopback 
    // type of target is $uint<8>
    //  file .Aa/mvp.opt.aa, line 147
    // ($bitcast ($uint<8>) 0  )
    $constant $W[type_cast_345_wire_constant] : $int<8> := _b00000000// 0
    // 0 
    $constant $W[konst_354_wire_constant] : $int<32> := _b00000000000000000000000000000000// 0
    // 1 
    $constant $W[konst_358_wire_constant] : $int<8> := _b00000001// 1
    // block %mvp_unit%fetchloop
    //  file .Aa/mvp.opt.aa, line 100
    // merge-statement  
    //  file .Aa/mvp.opt.aa, line 102
    // 			$phi C := 			  ($bitcast ($uint<8>) 0  ) $on   $entry 			  NC $on   loopback_outer 
    // type of target is $uint<8>
    //  file .Aa/mvp.opt.aa, line 103
    $W[NC_331_221_buffered] : $int<8>
    // C
    $W[C_217] : $int<8>
    // 			$phi x := 			  in_data $on   $entry 			  in_data $on   loopback_outer 
    // type of target is $uint<32>
    //  file .Aa/mvp.opt.aa, line 105
    // in_data
    $W[RPIPE_in_data_224_wire] : $int<32>
    // in_data
    $W[RPIPE_in_data_225_wire] : $int<32>
    // x
    $W[x_222] : $int<32>
    // block %mvp_unit%fetchloop%productloop
    //  file .Aa/mvp.opt.aa, line 108
    // do-while statement  
    //  file .Aa/mvp.opt.aa, line 110
    // (NR < 32 )
    $intermediate $W[ULT_u8_u1_325_wire] : $int<1>
    // merge-statement  
    //  file .Aa/mvp.opt.aa, line 112
    // 				$phi R := 				  ($bitcast ($uint<8>) 0  ) $on   $entry 				  NR $on   $loopback 
    // type of target is $uint<8>
    //  file .Aa/mvp.opt.aa, line 113
    $W[NR_244_234_buffered] : $int<8>
    // R
    $W[R_230] : $int<8>
    // 				NR := (R + 4 ) $buffering 2// bits of buffering = 16. 
    //  file .Aa/mvp.opt.aa, line 117
    // NR
    $W[NR_244] : $int<8>
    // 				index := (R >> 2 ) $buffering 1// bits of buffering = 8. 
    //  file .Aa/mvp.opt.aa, line 118
    // index
    $W[index_249] : $int<8>
    // 				p := A_MEM[index][C] $buffering 1// bits of buffering = 32. 
    //  file .Aa/mvp.opt.aa, line 119
    // A_MEM[index][C]
    $intermediate $W[R_index_251_resized] : $int<8>
    $intermediate $W[R_index_251_scaled] : $int<8>
    $intermediate $W[R_C_252_resized] : $int<8>
    $intermediate $W[R_C_252_scaled] : $int<8>
    $intermediate $W[array_obj_ref_253_index_partial_sum_1] : $int<8>
    $intermediate $W[array_obj_ref_253_final_offset] : $int<8>
    $intermediate $W[array_obj_ref_253_root_address] : $int<8>
    $W[array_obj_ref_253_word_address_0] : $pointer<memory_space_0>
    $W[array_obj_ref_253_data_0] : $int<32>
    // p
    $W[p_254] : $int<32>
    // 				pp := B_MEM[index][C] $buffering 1// bits of buffering = 32. 
    //  file .Aa/mvp.opt.aa, line 120
    // B_MEM[index][C]
    $intermediate $W[R_index_256_resized] : $int<8>
    $intermediate $W[R_index_256_scaled] : $int<8>
    $intermediate $W[R_C_257_resized] : $int<8>
    $intermediate $W[R_C_257_scaled] : $int<8>
    $intermediate $W[array_obj_ref_258_index_partial_sum_1] : $int<8>
    $intermediate $W[array_obj_ref_258_final_offset] : $int<8>
    $intermediate $W[array_obj_ref_258_root_address] : $int<8>
    $W[array_obj_ref_258_word_address_0] : $pointer<memory_space_1>
    $W[array_obj_ref_258_data_0] : $int<32>
    // pp
    $W[pp_259] : $int<32>
    // 				ppp := C_MEM[index][C] $buffering 1// bits of buffering = 32. 
    //  file .Aa/mvp.opt.aa, line 121
    // C_MEM[index][C]
    $intermediate $W[R_index_261_resized] : $int<8>
    $intermediate $W[R_index_261_scaled] : $int<8>
    $intermediate $W[R_C_262_resized] : $int<8>
    $intermediate $W[R_C_262_scaled] : $int<8>
    $intermediate $W[array_obj_ref_263_index_partial_sum_1] : $int<8>
    $intermediate $W[array_obj_ref_263_final_offset] : $int<8>
    $intermediate $W[array_obj_ref_263_root_address] : $int<8>
    $W[array_obj_ref_263_word_address_0] : $pointer<memory_space_2>
    $W[array_obj_ref_263_data_0] : $int<32>
    // ppp
    $W[ppp_264] : $int<32>
    // 				pppp := D_MEM[index][C] $buffering 1// bits of buffering = 32. 
    //  file .Aa/mvp.opt.aa, line 122
    // D_MEM[index][C]
    $intermediate $W[R_index_266_resized] : $int<8>
    $intermediate $W[R_index_266_scaled] : $int<8>
    $intermediate $W[R_C_267_resized] : $int<8>
    $intermediate $W[R_C_267_scaled] : $int<8>
    $intermediate $W[array_obj_ref_268_index_partial_sum_1] : $int<8>
    $intermediate $W[array_obj_ref_268_final_offset] : $int<8>
    $intermediate $W[array_obj_ref_268_root_address] : $int<8>
    $W[array_obj_ref_268_word_address_0] : $pointer<memory_space_3>
    $W[array_obj_ref_268_data_0] : $int<32>
    // pppp
    $W[pppp_269] : $int<32>
    // 				mp := products_pipe $buffering 1// bits of buffering = 32. 
    //  file .Aa/mvp.opt.aa, line 123
    // mp
    $W[mp_272] : $int<32>
    // 				mp1 := products_pipe $buffering 1// bits of buffering = 32. 
    //  file .Aa/mvp.opt.aa, line 124
    // mp1
    $W[mp1_275] : $int<32>
    // 				mp2 := products_pipe $buffering 1// bits of buffering = 32. 
    //  file .Aa/mvp.opt.aa, line 125
    // mp2
    $W[mp2_278] : $int<32>
    // 				mp3 := products_pipe $buffering 1// bits of buffering = 32. 
    //  file .Aa/mvp.opt.aa, line 126
    // mp3
    $W[mp3_281] : $int<32>
    // 				mp_298_delayed_5_0 := mp $buffering 5 $cut_through // bits of buffering = 160. 
    //  file .Aa/mvp.opt.aa, line 127
    // mp_298_delayed_5_0
    $W[mp_298_delayed_5_0_284] : $int<32>
    // 				products_pipe := (mp_298_delayed_5_0 + (p * x)) $buffering 1// bits of buffering = 32. 
    //  file .Aa/mvp.opt.aa, line 128
    // (p * x)
    $intermediate $W[MUL_u32_u32_289_wire] : $int<32>
    // (mp_298_delayed_5_0 + (p * x))
    $intermediate $W[ADD_u32_u32_290_wire] : $int<32>
    // products_pipe
    // 				mp1_305_delayed_5_0 := mp1 $buffering 5 $cut_through // bits of buffering = 160. 
    //  file .Aa/mvp.opt.aa, line 129
    // mp1_305_delayed_5_0
    $W[mp1_305_delayed_5_0_294] : $int<32>
    // 				products_pipe := (mp1_305_delayed_5_0 + (pp * x)) $buffering 1// bits of buffering = 32. 
    //  file .Aa/mvp.opt.aa, line 130
    // (pp * x)
    $intermediate $W[MUL_u32_u32_299_wire] : $int<32>
    // (mp1_305_delayed_5_0 + (pp * x))
    $intermediate $W[ADD_u32_u32_300_wire] : $int<32>
    // products_pipe
    // 				mp2_312_delayed_5_0 := mp2 $buffering 5 $cut_through // bits of buffering = 160. 
    //  file .Aa/mvp.opt.aa, line 131
    // mp2_312_delayed_5_0
    $W[mp2_312_delayed_5_0_304] : $int<32>
    // 				products_pipe := (mp2_312_delayed_5_0 + (ppp * x)) $buffering 1// bits of buffering = 32. 
    //  file .Aa/mvp.opt.aa, line 132
    // (ppp * x)
    $intermediate $W[MUL_u32_u32_309_wire] : $int<32>
    // (mp2_312_delayed_5_0 + (ppp * x))
    $intermediate $W[ADD_u32_u32_310_wire] : $int<32>
    // products_pipe
    // 				mp3_319_delayed_5_0 := mp3 $buffering 5 $cut_through // bits of buffering = 160. 
    //  file .Aa/mvp.opt.aa, line 133
    // mp3_319_delayed_5_0
    $W[mp3_319_delayed_5_0_314] : $int<32>
    // 				products_pipe := (mp3_319_delayed_5_0 + (pppp * x)) $buffering 1// bits of buffering = 32. 
    //  file .Aa/mvp.opt.aa, line 134
    // (pppp * x)
    $intermediate $W[MUL_u32_u32_319_wire] : $int<32>
    // (mp3_319_delayed_5_0 + (pppp * x))
    $intermediate $W[ADD_u32_u32_320_wire] : $int<32>
    // products_pipe
    // 		NC := (C + 1 ) $buffering 1// bits of buffering = 8. 
    //  file .Aa/mvp.opt.aa, line 137
    // NC
    $W[NC_331] : $int<8>
    // if statement  
    //  file .Aa/mvp.opt.aa, line 0
    // (NC < 32 )
    $intermediate $W[ULT_u8_u1_335_wire] : $int<1>
    // block %mvp_unit%sendloop
    //  file .Aa/mvp.opt.aa, line 142
    // do-while statement  
    //  file .Aa/mvp.opt.aa, line 144
    // (nK < 32 )
    $intermediate $W[ULT_u8_u1_364_wire] : $int<1>
    // merge-statement  
    //  file .Aa/mvp.opt.aa, line 146
    // 			$phi K := 			  ($bitcast ($uint<8>) 0  ) $on   $entry 			  nK $on   $loopback 
    // type of target is $uint<8>
    //  file .Aa/mvp.opt.aa, line 147
    $W[nK_360_346_buffered] : $int<8>
    // K
    $W[K_342] : $int<8>
    // 			out_data := products_pipe $buffering 1// bits of buffering = 32. 
    //  file .Aa/mvp.opt.aa, line 151
    // products_pipe
    $W[RPIPE_products_pipe_351_wire] : $int<32>
    // out_data
    // 			products_pipe := 0  $buffering 1// bits of buffering = 32. 
    //  file .Aa/mvp.opt.aa, line 152
    // products_pipe
    // 			$volatile nK := (K + 1 ) $buffering 1
    //  file .Aa/mvp.opt.aa, line 153
    // nK
    $W[nK_360] : $int<8>
    // datapath-instances for block %mvp_unit%fetchloop
    //  file .Aa/mvp.opt.aa, line 100
    // data-path instances for merge  
    //  file .Aa/mvp.opt.aa, line 102
    // 			$phi C := 			  ($bitcast ($uint<8>) 0  ) $on   $entry 			  NC $on   loopback_outer 
    // type of target is $uint<8>
    //  file .Aa/mvp.opt.aa, line 103
    # := [NC_331_221_buf] (NC_331) (NC_331_221_buffered)    
    $phi [phi_stmt_217] (type_cast_220_wire_constant NC_331_221_buffered) ( C_217 ) 
    // 			$phi x := 			  in_data $on   $entry 			  in_data $on   loopback_outer 
    // type of target is $uint<32>
    //  file .Aa/mvp.opt.aa, line 105
    // in_data
    $ioport $in [RPIPE_in_data_224_inst] (in_data) (RPIPE_in_data_224_wire) 
    $buffering $out RPIPE_in_data_224_inst RPIPE_in_data_224_wire 1
    // in_data
    $ioport $in [RPIPE_in_data_225_inst] (in_data) (RPIPE_in_data_225_wire) 
    $buffering $out RPIPE_in_data_225_inst RPIPE_in_data_225_wire 1
    $phi [phi_stmt_222] (RPIPE_in_data_224_wire RPIPE_in_data_225_wire) ( x_222 ) 
    // datapath-instances for block %mvp_unit%fetchloop%productloop
    //  file .Aa/mvp.opt.aa, line 108
    // datapath-instances for do-while  
    //  file .Aa/mvp.opt.aa, line 110
    // (NR < 32 )
    <[ULT_u8_u1_325_inst] (NR_244 konst_324_wire_constant) (ULT_u8_u1_325_wire)   $flowthrough 
    $delay ULT_u8_u1_325_inst 0
    ==0? [do_while_stmt_228_branch] (ULT_u8_u1_325_wire)
    $flowthrough
    // data-path instances for merge  
    //  file .Aa/mvp.opt.aa, line 112
    // 				$phi R := 				  ($bitcast ($uint<8>) 0  ) $on   $entry 				  NR $on   $loopback 
    // type of target is $uint<8>
    //  file .Aa/mvp.opt.aa, line 113
    # := [NR_244_234_buf] (NR_244) (NR_244_234_buffered)     $fullrate
    $buffering $out NR_244_234_buf NR_244_234_buffered  1
    # $phi [phi_stmt_230] (type_cast_233_wire_constant NR_244_234_buffered) ( R_230 ) $fullrate
    // $buffering  $out phi_stmt_230 R_230 2
    // 				NR := (R + 4 ) $buffering 2// bits of buffering = 16. 
    //  file .Aa/mvp.opt.aa, line 117
    // (R + 4 )
    +[ADD_u8_u8_243_inst] (R_230 konst_242_wire_constant) (NR_244)    $fullrate
    $buffering  $out ADD_u8_u8_243_inst NR_244 2
    $delay ADD_u8_u8_243_inst 1
    // 				index := (R >> 2 ) $buffering 1// bits of buffering = 8. 
    //  file .Aa/mvp.opt.aa, line 118
    // (R >> 2 )
    >>[LSHR_u8_u8_248_inst] (R_230 konst_247_wire_constant) (index_249)    $fullrate
    $buffering  $out LSHR_u8_u8_248_inst index_249 1
    $delay LSHR_u8_u8_248_inst 1
    // 				p := A_MEM[index][C] $buffering 1// bits of buffering = 32. 
    //  file .Aa/mvp.opt.aa, line 119
    // A_MEM[index][C]
    &/ [array_obj_ref_253_index_0_resize] (index_249) (R_index_251_resized) 
    $flowthrough 
    *[array_obj_ref_253_index_0_scale] (R_index_251_resized array_obj_ref_253_offset_scale_factor_0) (R_index_251_scaled)    $fullrate
    $buffering  $in array_obj_ref_253_index_0_scale R_index_251_resized 2
    $buffering  $in array_obj_ref_253_index_0_scale array_obj_ref_253_offset_scale_factor_0 2
    $buffering  $out array_obj_ref_253_index_0_scale R_index_251_scaled 2
    $delay array_obj_ref_253_index_0_scale 2
    &/ [array_obj_ref_253_index_1_resize] (C_217) (R_C_252_resized) 
    $flowthrough 
    &/ [array_obj_ref_253_index_1_rename] (R_C_252_resized) (R_C_252_scaled) 
    $flowthrough 
    +[array_obj_ref_253_index_sum_1] (R_C_252_scaled R_index_251_scaled) (array_obj_ref_253_index_partial_sum_1)    $fullrate
    $buffering  $in array_obj_ref_253_index_sum_1 R_C_252_scaled 2
    $buffering  $in array_obj_ref_253_index_sum_1 R_index_251_scaled 2
    $buffering  $out array_obj_ref_253_index_sum_1 array_obj_ref_253_index_partial_sum_1 2
    $delay array_obj_ref_253_index_sum_1 2
    &/ [array_obj_ref_253_index_offset] (array_obj_ref_253_index_partial_sum_1) (array_obj_ref_253_final_offset) 
    $flowthrough 
    &/ [array_obj_ref_253_root_address_inst] (array_obj_ref_253_final_offset) (array_obj_ref_253_root_address) 
    $flowthrough 
    &/ [array_obj_ref_253_addr_0] (array_obj_ref_253_root_address) (array_obj_ref_253_word_address_0) 
    $flowthrough 
    $load [array_obj_ref_253_load_0] $from memory_space_0 (array_obj_ref_253_word_address_0) (array_obj_ref_253_data_0) 
    $buffering  $in array_obj_ref_253_load_0 array_obj_ref_253_word_address_0 2
    $buffering  $out array_obj_ref_253_load_0 array_obj_ref_253_data_0 2
    $delay array_obj_ref_253_load_0 4
    &/ [array_obj_ref_253_gather_scatter] (array_obj_ref_253_data_0) (p_254) 
    $flowthrough 
    // 				pp := B_MEM[index][C] $buffering 1// bits of buffering = 32. 
    //  file .Aa/mvp.opt.aa, line 120
    // B_MEM[index][C]
    &/ [array_obj_ref_258_index_0_resize] (index_249) (R_index_256_resized) 
    $flowthrough 
    *[array_obj_ref_258_index_0_scale] (R_index_256_resized array_obj_ref_258_offset_scale_factor_0) (R_index_256_scaled)    $fullrate
    $buffering  $in array_obj_ref_258_index_0_scale R_index_256_resized 2
    $buffering  $in array_obj_ref_258_index_0_scale array_obj_ref_258_offset_scale_factor_0 2
    $buffering  $out array_obj_ref_258_index_0_scale R_index_256_scaled 2
    $delay array_obj_ref_258_index_0_scale 2
    &/ [array_obj_ref_258_index_1_resize] (C_217) (R_C_257_resized) 
    $flowthrough 
    &/ [array_obj_ref_258_index_1_rename] (R_C_257_resized) (R_C_257_scaled) 
    $flowthrough 
    +[array_obj_ref_258_index_sum_1] (R_C_257_scaled R_index_256_scaled) (array_obj_ref_258_index_partial_sum_1)    $fullrate
    $buffering  $in array_obj_ref_258_index_sum_1 R_C_257_scaled 2
    $buffering  $in array_obj_ref_258_index_sum_1 R_index_256_scaled 2
    $buffering  $out array_obj_ref_258_index_sum_1 array_obj_ref_258_index_partial_sum_1 2
    $delay array_obj_ref_258_index_sum_1 2
    &/ [array_obj_ref_258_index_offset] (array_obj_ref_258_index_partial_sum_1) (array_obj_ref_258_final_offset) 
    $flowthrough 
    &/ [array_obj_ref_258_root_address_inst] (array_obj_ref_258_final_offset) (array_obj_ref_258_root_address) 
    $flowthrough 
    &/ [array_obj_ref_258_addr_0] (array_obj_ref_258_root_address) (array_obj_ref_258_word_address_0) 
    $flowthrough 
    $load [array_obj_ref_258_load_0] $from memory_space_1 (array_obj_ref_258_word_address_0) (array_obj_ref_258_data_0) 
    $buffering  $in array_obj_ref_258_load_0 array_obj_ref_258_word_address_0 2
    $buffering  $out array_obj_ref_258_load_0 array_obj_ref_258_data_0 2
    $delay array_obj_ref_258_load_0 4
    &/ [array_obj_ref_258_gather_scatter] (array_obj_ref_258_data_0) (pp_259) 
    $flowthrough 
    // 				ppp := C_MEM[index][C] $buffering 1// bits of buffering = 32. 
    //  file .Aa/mvp.opt.aa, line 121
    // C_MEM[index][C]
    &/ [array_obj_ref_263_index_0_resize] (index_249) (R_index_261_resized) 
    $flowthrough 
    *[array_obj_ref_263_index_0_scale] (R_index_261_resized array_obj_ref_263_offset_scale_factor_0) (R_index_261_scaled)    $fullrate
    $buffering  $in array_obj_ref_263_index_0_scale R_index_261_resized 2
    $buffering  $in array_obj_ref_263_index_0_scale array_obj_ref_263_offset_scale_factor_0 2
    $buffering  $out array_obj_ref_263_index_0_scale R_index_261_scaled 2
    $delay array_obj_ref_263_index_0_scale 2
    &/ [array_obj_ref_263_index_1_resize] (C_217) (R_C_262_resized) 
    $flowthrough 
    &/ [array_obj_ref_263_index_1_rename] (R_C_262_resized) (R_C_262_scaled) 
    $flowthrough 
    +[array_obj_ref_263_index_sum_1] (R_C_262_scaled R_index_261_scaled) (array_obj_ref_263_index_partial_sum_1)    $fullrate
    $buffering  $in array_obj_ref_263_index_sum_1 R_C_262_scaled 2
    $buffering  $in array_obj_ref_263_index_sum_1 R_index_261_scaled 2
    $buffering  $out array_obj_ref_263_index_sum_1 array_obj_ref_263_index_partial_sum_1 2
    $delay array_obj_ref_263_index_sum_1 2
    &/ [array_obj_ref_263_index_offset] (array_obj_ref_263_index_partial_sum_1) (array_obj_ref_263_final_offset) 
    $flowthrough 
    &/ [array_obj_ref_263_root_address_inst] (array_obj_ref_263_final_offset) (array_obj_ref_263_root_address) 
    $flowthrough 
    &/ [array_obj_ref_263_addr_0] (array_obj_ref_263_root_address) (array_obj_ref_263_word_address_0) 
    $flowthrough 
    $load [array_obj_ref_263_load_0] $from memory_space_2 (array_obj_ref_263_word_address_0) (array_obj_ref_263_data_0) 
    $buffering  $in array_obj_ref_263_load_0 array_obj_ref_263_word_address_0 2
    $buffering  $out array_obj_ref_263_load_0 array_obj_ref_263_data_0 2
    $delay array_obj_ref_263_load_0 4
    &/ [array_obj_ref_263_gather_scatter] (array_obj_ref_263_data_0) (ppp_264) 
    $flowthrough 
    // 				pppp := D_MEM[index][C] $buffering 1// bits of buffering = 32. 
    //  file .Aa/mvp.opt.aa, line 122
    // D_MEM[index][C]
    &/ [array_obj_ref_268_index_0_resize] (index_249) (R_index_266_resized) 
    $flowthrough 
    *[array_obj_ref_268_index_0_scale] (R_index_266_resized array_obj_ref_268_offset_scale_factor_0) (R_index_266_scaled)    $fullrate
    $buffering  $in array_obj_ref_268_index_0_scale R_index_266_resized 2
    $buffering  $in array_obj_ref_268_index_0_scale array_obj_ref_268_offset_scale_factor_0 2
    $buffering  $out array_obj_ref_268_index_0_scale R_index_266_scaled 2
    $delay array_obj_ref_268_index_0_scale 2
    &/ [array_obj_ref_268_index_1_resize] (C_217) (R_C_267_resized) 
    $flowthrough 
    &/ [array_obj_ref_268_index_1_rename] (R_C_267_resized) (R_C_267_scaled) 
    $flowthrough 
    +[array_obj_ref_268_index_sum_1] (R_C_267_scaled R_index_266_scaled) (array_obj_ref_268_index_partial_sum_1)    $fullrate
    $buffering  $in array_obj_ref_268_index_sum_1 R_C_267_scaled 2
    $buffering  $in array_obj_ref_268_index_sum_1 R_index_266_scaled 2
    $buffering  $out array_obj_ref_268_index_sum_1 array_obj_ref_268_index_partial_sum_1 2
    $delay array_obj_ref_268_index_sum_1 2
    &/ [array_obj_ref_268_index_offset] (array_obj_ref_268_index_partial_sum_1) (array_obj_ref_268_final_offset) 
    $flowthrough 
    &/ [array_obj_ref_268_root_address_inst] (array_obj_ref_268_final_offset) (array_obj_ref_268_root_address) 
    $flowthrough 
    &/ [array_obj_ref_268_addr_0] (array_obj_ref_268_root_address) (array_obj_ref_268_word_address_0) 
    $flowthrough 
    $load [array_obj_ref_268_load_0] $from memory_space_3 (array_obj_ref_268_word_address_0) (array_obj_ref_268_data_0) 
    $buffering  $in array_obj_ref_268_load_0 array_obj_ref_268_word_address_0 2
    $buffering  $out array_obj_ref_268_load_0 array_obj_ref_268_data_0 2
    $delay array_obj_ref_268_load_0 4
    &/ [array_obj_ref_268_gather_scatter] (array_obj_ref_268_data_0) (pppp_269) 
    $flowthrough 
    // 				mp := products_pipe $buffering 1// bits of buffering = 32. 
    //  file .Aa/mvp.opt.aa, line 123
    // products_pipe
    $ioport $in [RPIPE_products_pipe_271_inst] (products_pipe) (mp_272)  $fullrate 
    $buffering $out RPIPE_products_pipe_271_inst mp_272 1
    // 				mp1 := products_pipe $buffering 1// bits of buffering = 32. 
    //  file .Aa/mvp.opt.aa, line 124
    // products_pipe
    $ioport $in [RPIPE_products_pipe_274_inst] (products_pipe) (mp1_275)  $fullrate 
    $buffering $out RPIPE_products_pipe_274_inst mp1_275 1
    // 				mp2 := products_pipe $buffering 1// bits of buffering = 32. 
    //  file .Aa/mvp.opt.aa, line 125
    // products_pipe
    $ioport $in [RPIPE_products_pipe_277_inst] (products_pipe) (mp2_278)  $fullrate 
    $buffering $out RPIPE_products_pipe_277_inst mp2_278 1
    // 				mp3 := products_pipe $buffering 1// bits of buffering = 32. 
    //  file .Aa/mvp.opt.aa, line 126
    // products_pipe
    $ioport $in [RPIPE_products_pipe_280_inst] (products_pipe) (mp3_281)  $fullrate 
    $buffering $out RPIPE_products_pipe_280_inst mp3_281 1
    // 				mp_298_delayed_5_0 := mp $buffering 5 $cut_through // bits of buffering = 160. 
    //  file .Aa/mvp.opt.aa, line 127
    # := [W_mp_298_delayed_5_0_282_inst] (mp_272) (mp_298_delayed_5_0_284)  $cut_through    $fullrate
    $buffering  $out W_mp_298_delayed_5_0_282_inst mp_298_delayed_5_0_284 5
    // 				products_pipe := (mp_298_delayed_5_0 + (p * x)) $buffering 1// bits of buffering = 32. 
    //  file .Aa/mvp.opt.aa, line 128
    // (p * x)
    *[MUL_u32_u32_289_inst] (p_254 x_222) (MUL_u32_u32_289_wire)   $flowthrough 
    $delay MUL_u32_u32_289_inst 0
    // (mp_298_delayed_5_0 + (p * x))
    +[ADD_u32_u32_290_inst] (mp_298_delayed_5_0_284 MUL_u32_u32_289_wire) (ADD_u32_u32_290_wire)    $fullrate
    $buffering  $out ADD_u32_u32_290_inst ADD_u32_u32_290_wire 1
    $delay ADD_u32_u32_290_inst 1
    // products_pipe
    $ioport $out [WPIPE_products_pipe_285_inst]  (ADD_u32_u32_290_wire) (products_pipe)  $fullrate 
    // 				mp1_305_delayed_5_0 := mp1 $buffering 5 $cut_through // bits of buffering = 160. 
    //  file .Aa/mvp.opt.aa, line 129
    # := [W_mp1_305_delayed_5_0_292_inst] (mp1_275) (mp1_305_delayed_5_0_294)  $cut_through    $fullrate
    $buffering  $out W_mp1_305_delayed_5_0_292_inst mp1_305_delayed_5_0_294 5
    // 				products_pipe := (mp1_305_delayed_5_0 + (pp * x)) $buffering 1// bits of buffering = 32. 
    //  file .Aa/mvp.opt.aa, line 130
    // (pp * x)
    *[MUL_u32_u32_299_inst] (pp_259 x_222) (MUL_u32_u32_299_wire)   $flowthrough 
    $delay MUL_u32_u32_299_inst 0
    // (mp1_305_delayed_5_0 + (pp * x))
    +[ADD_u32_u32_300_inst] (mp1_305_delayed_5_0_294 MUL_u32_u32_299_wire) (ADD_u32_u32_300_wire)    $fullrate
    $buffering  $out ADD_u32_u32_300_inst ADD_u32_u32_300_wire 1
    $delay ADD_u32_u32_300_inst 1
    // products_pipe
    $ioport $out [WPIPE_products_pipe_295_inst]  (ADD_u32_u32_300_wire) (products_pipe)  $fullrate 
    // 				mp2_312_delayed_5_0 := mp2 $buffering 5 $cut_through // bits of buffering = 160. 
    //  file .Aa/mvp.opt.aa, line 131
    # := [W_mp2_312_delayed_5_0_302_inst] (mp2_278) (mp2_312_delayed_5_0_304)  $cut_through    $fullrate
    $buffering  $out W_mp2_312_delayed_5_0_302_inst mp2_312_delayed_5_0_304 5
    // 				products_pipe := (mp2_312_delayed_5_0 + (ppp * x)) $buffering 1// bits of buffering = 32. 
    //  file .Aa/mvp.opt.aa, line 132
    // (ppp * x)
    *[MUL_u32_u32_309_inst] (ppp_264 x_222) (MUL_u32_u32_309_wire)   $flowthrough 
    $delay MUL_u32_u32_309_inst 0
    // (mp2_312_delayed_5_0 + (ppp * x))
    +[ADD_u32_u32_310_inst] (mp2_312_delayed_5_0_304 MUL_u32_u32_309_wire) (ADD_u32_u32_310_wire)    $fullrate
    $buffering  $out ADD_u32_u32_310_inst ADD_u32_u32_310_wire 1
    $delay ADD_u32_u32_310_inst 1
    // products_pipe
    $ioport $out [WPIPE_products_pipe_305_inst]  (ADD_u32_u32_310_wire) (products_pipe)  $fullrate 
    // 				mp3_319_delayed_5_0 := mp3 $buffering 5 $cut_through // bits of buffering = 160. 
    //  file .Aa/mvp.opt.aa, line 133
    # := [W_mp3_319_delayed_5_0_312_inst] (mp3_281) (mp3_319_delayed_5_0_314)  $cut_through    $fullrate
    $buffering  $out W_mp3_319_delayed_5_0_312_inst mp3_319_delayed_5_0_314 5
    // 				products_pipe := (mp3_319_delayed_5_0 + (pppp * x)) $buffering 1// bits of buffering = 32. 
    //  file .Aa/mvp.opt.aa, line 134
    // (pppp * x)
    *[MUL_u32_u32_319_inst] (pppp_269 x_222) (MUL_u32_u32_319_wire)   $flowthrough 
    $delay MUL_u32_u32_319_inst 0
    // (mp3_319_delayed_5_0 + (pppp * x))
    +[ADD_u32_u32_320_inst] (mp3_319_delayed_5_0_314 MUL_u32_u32_319_wire) (ADD_u32_u32_320_wire)    $fullrate
    $buffering  $out ADD_u32_u32_320_inst ADD_u32_u32_320_wire 1
    $delay ADD_u32_u32_320_inst 1
    // products_pipe
    $ioport $out [WPIPE_products_pipe_315_inst]  (ADD_u32_u32_320_wire) (products_pipe)  $fullrate 
    // 		NC := (C + 1 ) $buffering 1// bits of buffering = 8. 
    //  file .Aa/mvp.opt.aa, line 137
    // (C + 1 )
    +[ADD_u8_u8_330_inst] (C_217 konst_329_wire_constant) (NC_331)   
    $buffering  $out ADD_u8_u8_330_inst NC_331 1
    $delay ADD_u8_u8_330_inst 1
    // datapath-instances for if  
    //  file .Aa/mvp.opt.aa, line 0
    // (NC < 32 )
    <[ULT_u8_u1_335_inst] (NC_331 konst_334_wire_constant) (ULT_u8_u1_335_wire)   $flowthrough 
    $delay ULT_u8_u1_335_inst 0
    ==0? [if_stmt_332_branch] (ULT_u8_u1_335_wire)
    // datapath-instances for block %mvp_unit%sendloop
    //  file .Aa/mvp.opt.aa, line 142
    // datapath-instances for do-while  
    //  file .Aa/mvp.opt.aa, line 144
    // (nK < 32 )
    <[ULT_u8_u1_364_inst] (nK_360 konst_363_wire_constant) (ULT_u8_u1_364_wire)   $flowthrough 
    $delay ULT_u8_u1_364_inst 0
    ==0? [do_while_stmt_340_branch] (ULT_u8_u1_364_wire)
    $flowthrough
    // data-path instances for merge  
    //  file .Aa/mvp.opt.aa, line 146
    // 			$phi K := 			  ($bitcast ($uint<8>) 0  ) $on   $entry 			  nK $on   $loopback 
    // type of target is $uint<8>
    //  file .Aa/mvp.opt.aa, line 147
    # := [nK_360_346_buf] (nK_360) (nK_360_346_buffered)     $fullrate
    $buffering $out nK_360_346_buf nK_360_346_buffered  1
    # $phi [phi_stmt_342] (type_cast_345_wire_constant nK_360_346_buffered) ( K_342 ) $fullrate
    // $buffering  $out phi_stmt_342 K_342 2
    // 			out_data := products_pipe $buffering 1// bits of buffering = 32. 
    //  file .Aa/mvp.opt.aa, line 151
    // products_pipe
    $ioport $in [RPIPE_products_pipe_351_inst] (products_pipe) (RPIPE_products_pipe_351_wire)  $fullrate 
    $buffering $out RPIPE_products_pipe_351_inst RPIPE_products_pipe_351_wire 1
    // out_data
    $ioport $out [WPIPE_out_data_350_inst]  (RPIPE_products_pipe_351_wire) (out_data)  $fullrate 
    // 			products_pipe := 0  $buffering 1// bits of buffering = 32. 
    //  file .Aa/mvp.opt.aa, line 152
    // products_pipe
    $ioport $out [WPIPE_products_pipe_353_inst]  (konst_354_wire_constant) (products_pipe)  $fullrate 
    // 			$volatile nK := (K + 1 ) $buffering 1
    //  file .Aa/mvp.opt.aa, line 153
    // (K + 1 )
    +[ADD_u8_u8_359_inst] (K_342 konst_358_wire_constant) (nK_360)   $flowthrough 
    $delay ADD_u8_u8_359_inst 0
  }
  // end data-path
  // CP-DP links for merge  
  //  file .Aa/mvp.opt.aa, line 102
  NC_331_221_buf <=> (branch_block_stmt_215/loopback_outer_PhiReq/phi_stmt_217/phi_stmt_217_sources/Interlock/Sample/req branch_block_stmt_215/loopback_outer_PhiReq/phi_stmt_217/phi_stmt_217_sources/Interlock/Update/req) (branch_block_stmt_215/loopback_outer_PhiReq/phi_stmt_217/phi_stmt_217_sources/Interlock/Sample/ack branch_block_stmt_215/loopback_outer_PhiReq/phi_stmt_217/phi_stmt_217_sources/Interlock/Update/ack)
  phi_stmt_217 <=> (branch_block_stmt_215/merge_stmt_216__entry___PhiReq/phi_stmt_217/phi_stmt_217_req branch_block_stmt_215/loopback_outer_PhiReq/phi_stmt_217/phi_stmt_217_req) (branch_block_stmt_215/merge_stmt_216_PhiAck/phi_stmt_217_ack)
  // in_data
  RPIPE_in_data_224_inst <=> (branch_block_stmt_215/merge_stmt_216__entry___PhiReq/phi_stmt_222/phi_stmt_222_sources/RPIPE_in_data_224/Sample/req branch_block_stmt_215/merge_stmt_216__entry___PhiReq/phi_stmt_222/phi_stmt_222_sources/RPIPE_in_data_224/Update/req) (branch_block_stmt_215/merge_stmt_216__entry___PhiReq/phi_stmt_222/phi_stmt_222_sources/RPIPE_in_data_224/Sample/ack branch_block_stmt_215/merge_stmt_216__entry___PhiReq/phi_stmt_222/phi_stmt_222_sources/RPIPE_in_data_224/Update/ack)
  // in_data
  RPIPE_in_data_225_inst <=> (branch_block_stmt_215/loopback_outer_PhiReq/phi_stmt_222/phi_stmt_222_sources/RPIPE_in_data_225/Sample/req branch_block_stmt_215/loopback_outer_PhiReq/phi_stmt_222/phi_stmt_222_sources/RPIPE_in_data_225/Update/req) (branch_block_stmt_215/loopback_outer_PhiReq/phi_stmt_222/phi_stmt_222_sources/RPIPE_in_data_225/Sample/ack branch_block_stmt_215/loopback_outer_PhiReq/phi_stmt_222/phi_stmt_222_sources/RPIPE_in_data_225/Update/ack)
  phi_stmt_222 <=> (branch_block_stmt_215/merge_stmt_216__entry___PhiReq/phi_stmt_222/phi_stmt_222_req branch_block_stmt_215/loopback_outer_PhiReq/phi_stmt_222/phi_stmt_222_req) (branch_block_stmt_215/merge_stmt_216_PhiAck/phi_stmt_222_ack)
  // CP-DP links for do-while  do_while_stmt_228
  //  file .Aa/mvp.opt.aa, line 110
  phi_stmt_230 <=> (branch_block_stmt_215/branch_block_stmt_227/do_while_stmt_228/do_while_stmt_228_loop_body/phi_stmt_230_entry_sample_req branch_block_stmt_215/branch_block_stmt_227/do_while_stmt_228/do_while_stmt_228_loop_body/phi_stmt_230_loopback_sample_req) (branch_block_stmt_215/branch_block_stmt_227/do_while_stmt_228/do_while_stmt_228_loop_body/phi_stmt_230_phi_mux_ack)
  NR_244_234_buf <=> (branch_block_stmt_215/branch_block_stmt_227/do_while_stmt_228/do_while_stmt_228_loop_body/R_NR_234_Sample/req branch_block_stmt_215/branch_block_stmt_227/do_while_stmt_228/do_while_stmt_228_loop_body/R_NR_234_Update/req) (branch_block_stmt_215/branch_block_stmt_227/do_while_stmt_228/do_while_stmt_228_loop_body/R_NR_234_Sample/ack branch_block_stmt_215/branch_block_stmt_227/do_while_stmt_228/do_while_stmt_228_loop_body/R_NR_234_Update/ack)
  // 				NR := (R + 4 ) $buffering 2// bits of buffering = 16. 
  //  file .Aa/mvp.opt.aa, line 117
  // (R + 4 )
  // R
  ADD_u8_u8_243_inst <=> (branch_block_stmt_215/branch_block_stmt_227/do_while_stmt_228/do_while_stmt_228_loop_body/ADD_u8_u8_243_Sample/rr branch_block_stmt_215/branch_block_stmt_227/do_while_stmt_228/do_while_stmt_228_loop_body/ADD_u8_u8_243_Update/cr) (branch_block_stmt_215/branch_block_stmt_227/do_while_stmt_228/do_while_stmt_228_loop_body/ADD_u8_u8_243_Sample/ra branch_block_stmt_215/branch_block_stmt_227/do_while_stmt_228/do_while_stmt_228_loop_body/ADD_u8_u8_243_Update/ca)
  // 				index := (R >> 2 ) $buffering 1// bits of buffering = 8. 
  //  file .Aa/mvp.opt.aa, line 118
  // (R >> 2 )
  // R
  LSHR_u8_u8_248_inst <=> (branch_block_stmt_215/branch_block_stmt_227/do_while_stmt_228/do_while_stmt_228_loop_body/LSHR_u8_u8_248_Sample/rr branch_block_stmt_215/branch_block_stmt_227/do_while_stmt_228/do_while_stmt_228_loop_body/LSHR_u8_u8_248_Update/cr) (branch_block_stmt_215/branch_block_stmt_227/do_while_stmt_228/do_while_stmt_228_loop_body/LSHR_u8_u8_248_Sample/ra branch_block_stmt_215/branch_block_stmt_227/do_while_stmt_228/do_while_stmt_228_loop_body/LSHR_u8_u8_248_Update/ca)
  // 				p := A_MEM[index][C] $buffering 1// bits of buffering = 32. 
  //  file .Aa/mvp.opt.aa, line 119
  // A_MEM[index][C]
  // index
  array_obj_ref_253_index_0_resize <=> (branch_block_stmt_215/branch_block_stmt_227/do_while_stmt_228/do_while_stmt_228_loop_body/array_obj_ref_253_index_resize_0/index_resize_req) (branch_block_stmt_215/branch_block_stmt_227/do_while_stmt_228/do_while_stmt_228_loop_body/array_obj_ref_253_index_resize_0/index_resize_ack)
  array_obj_ref_253_index_0_scale <=> (branch_block_stmt_215/branch_block_stmt_227/do_while_stmt_228/do_while_stmt_228_loop_body/array_obj_ref_253_index_scale_0_Sample/rr branch_block_stmt_215/branch_block_stmt_227/do_while_stmt_228/do_while_stmt_228_loop_body/array_obj_ref_253_index_scale_0_Update/cr) (branch_block_stmt_215/branch_block_stmt_227/do_while_stmt_228/do_while_stmt_228_loop_body/array_obj_ref_253_index_scale_0_Sample/ra branch_block_stmt_215/branch_block_stmt_227/do_while_stmt_228/do_while_stmt_228_loop_body/array_obj_ref_253_index_scale_0_Update/ca)
  // C
  array_obj_ref_253_index_1_resize <=> (branch_block_stmt_215/branch_block_stmt_227/do_while_stmt_228/do_while_stmt_228_loop_body/array_obj_ref_253_index_resize_1/index_resize_req) (branch_block_stmt_215/branch_block_stmt_227/do_while_stmt_228/do_while_stmt_228_loop_body/array_obj_ref_253_index_resize_1/index_resize_ack)
  array_obj_ref_253_index_1_rename <=> (branch_block_stmt_215/branch_block_stmt_227/do_while_stmt_228/do_while_stmt_228_loop_body/array_obj_ref_253_index_scale_1/scale_rename_req) (branch_block_stmt_215/branch_block_stmt_227/do_while_stmt_228/do_while_stmt_228_loop_body/array_obj_ref_253_index_scale_1/scale_rename_ack)
  array_obj_ref_253_index_sum_1 <=> (branch_block_stmt_215/branch_block_stmt_227/do_while_stmt_228/do_while_stmt_228_loop_body/array_obj_ref_253_partial_sum_1_Sample/rr branch_block_stmt_215/branch_block_stmt_227/do_while_stmt_228/do_while_stmt_228_loop_body/array_obj_ref_253_partial_sum_1_Update/cr) (branch_block_stmt_215/branch_block_stmt_227/do_while_stmt_228/do_while_stmt_228_loop_body/array_obj_ref_253_partial_sum_1_Sample/ra branch_block_stmt_215/branch_block_stmt_227/do_while_stmt_228/do_while_stmt_228_loop_body/array_obj_ref_253_partial_sum_1_Update/ca)
  array_obj_ref_253_index_offset <=> (branch_block_stmt_215/branch_block_stmt_227/do_while_stmt_228/do_while_stmt_228_loop_body/array_obj_ref_253_final_index_sum_regn/req) (branch_block_stmt_215/branch_block_stmt_227/do_while_stmt_228/do_while_stmt_228_loop_body/array_obj_ref_253_final_index_sum_regn/ack)
  array_obj_ref_253_root_address_inst <=> (branch_block_stmt_215/branch_block_stmt_227/do_while_stmt_228/do_while_stmt_228_loop_body/array_obj_ref_253_base_plus_offset/sum_rename_req) (branch_block_stmt_215/branch_block_stmt_227/do_while_stmt_228/do_while_stmt_228_loop_body/array_obj_ref_253_base_plus_offset/sum_rename_ack)
  array_obj_ref_253_addr_0 <=> (branch_block_stmt_215/branch_block_stmt_227/do_while_stmt_228/do_while_stmt_228_loop_body/array_obj_ref_253_word_addrgen/root_register_req) (branch_block_stmt_215/branch_block_stmt_227/do_while_stmt_228/do_while_stmt_228_loop_body/array_obj_ref_253_word_addrgen/root_register_ack)
  array_obj_ref_253_gather_scatter <=> (branch_block_stmt_215/branch_block_stmt_227/do_while_stmt_228/do_while_stmt_228_loop_body/array_obj_ref_253_Update/array_obj_ref_253_Merge/merge_req) (branch_block_stmt_215/branch_block_stmt_227/do_while_stmt_228/do_while_stmt_228_loop_body/array_obj_ref_253_Update/array_obj_ref_253_Merge/merge_ack)
  array_obj_ref_253_load_0 <=> (branch_block_stmt_215/branch_block_stmt_227/do_while_stmt_228/do_while_stmt_228_loop_body/array_obj_ref_253_Sample/word_access_start/word_0/rr branch_block_stmt_215/branch_block_stmt_227/do_while_stmt_228/do_while_stmt_228_loop_body/array_obj_ref_253_Update/word_access_complete/word_0/cr) (branch_block_stmt_215/branch_block_stmt_227/do_while_stmt_228/do_while_stmt_228_loop_body/array_obj_ref_253_Sample/word_access_start/word_0/ra branch_block_stmt_215/branch_block_stmt_227/do_while_stmt_228/do_while_stmt_228_loop_body/array_obj_ref_253_Update/word_access_complete/word_0/ca)
  // 				pp := B_MEM[index][C] $buffering 1// bits of buffering = 32. 
  //  file .Aa/mvp.opt.aa, line 120
  // B_MEM[index][C]
  // index
  array_obj_ref_258_index_0_resize <=> (branch_block_stmt_215/branch_block_stmt_227/do_while_stmt_228/do_while_stmt_228_loop_body/array_obj_ref_258_index_resize_0/index_resize_req) (branch_block_stmt_215/branch_block_stmt_227/do_while_stmt_228/do_while_stmt_228_loop_body/array_obj_ref_258_index_resize_0/index_resize_ack)
  array_obj_ref_258_index_0_scale <=> (branch_block_stmt_215/branch_block_stmt_227/do_while_stmt_228/do_while_stmt_228_loop_body/array_obj_ref_258_index_scale_0_Sample/rr branch_block_stmt_215/branch_block_stmt_227/do_while_stmt_228/do_while_stmt_228_loop_body/array_obj_ref_258_index_scale_0_Update/cr) (branch_block_stmt_215/branch_block_stmt_227/do_while_stmt_228/do_while_stmt_228_loop_body/array_obj_ref_258_index_scale_0_Sample/ra branch_block_stmt_215/branch_block_stmt_227/do_while_stmt_228/do_while_stmt_228_loop_body/array_obj_ref_258_index_scale_0_Update/ca)
  // C
  array_obj_ref_258_index_1_resize <=> (branch_block_stmt_215/branch_block_stmt_227/do_while_stmt_228/do_while_stmt_228_loop_body/array_obj_ref_258_index_resize_1/index_resize_req) (branch_block_stmt_215/branch_block_stmt_227/do_while_stmt_228/do_while_stmt_228_loop_body/array_obj_ref_258_index_resize_1/index_resize_ack)
  array_obj_ref_258_index_1_rename <=> (branch_block_stmt_215/branch_block_stmt_227/do_while_stmt_228/do_while_stmt_228_loop_body/array_obj_ref_258_index_scale_1/scale_rename_req) (branch_block_stmt_215/branch_block_stmt_227/do_while_stmt_228/do_while_stmt_228_loop_body/array_obj_ref_258_index_scale_1/scale_rename_ack)
  array_obj_ref_258_index_sum_1 <=> (branch_block_stmt_215/branch_block_stmt_227/do_while_stmt_228/do_while_stmt_228_loop_body/array_obj_ref_258_partial_sum_1_Sample/rr branch_block_stmt_215/branch_block_stmt_227/do_while_stmt_228/do_while_stmt_228_loop_body/array_obj_ref_258_partial_sum_1_Update/cr) (branch_block_stmt_215/branch_block_stmt_227/do_while_stmt_228/do_while_stmt_228_loop_body/array_obj_ref_258_partial_sum_1_Sample/ra branch_block_stmt_215/branch_block_stmt_227/do_while_stmt_228/do_while_stmt_228_loop_body/array_obj_ref_258_partial_sum_1_Update/ca)
  array_obj_ref_258_index_offset <=> (branch_block_stmt_215/branch_block_stmt_227/do_while_stmt_228/do_while_stmt_228_loop_body/array_obj_ref_258_final_index_sum_regn/req) (branch_block_stmt_215/branch_block_stmt_227/do_while_stmt_228/do_while_stmt_228_loop_body/array_obj_ref_258_final_index_sum_regn/ack)
  array_obj_ref_258_root_address_inst <=> (branch_block_stmt_215/branch_block_stmt_227/do_while_stmt_228/do_while_stmt_228_loop_body/array_obj_ref_258_base_plus_offset/sum_rename_req) (branch_block_stmt_215/branch_block_stmt_227/do_while_stmt_228/do_while_stmt_228_loop_body/array_obj_ref_258_base_plus_offset/sum_rename_ack)
  array_obj_ref_258_addr_0 <=> (branch_block_stmt_215/branch_block_stmt_227/do_while_stmt_228/do_while_stmt_228_loop_body/array_obj_ref_258_word_addrgen/root_register_req) (branch_block_stmt_215/branch_block_stmt_227/do_while_stmt_228/do_while_stmt_228_loop_body/array_obj_ref_258_word_addrgen/root_register_ack)
  array_obj_ref_258_gather_scatter <=> (branch_block_stmt_215/branch_block_stmt_227/do_while_stmt_228/do_while_stmt_228_loop_body/array_obj_ref_258_Update/array_obj_ref_258_Merge/merge_req) (branch_block_stmt_215/branch_block_stmt_227/do_while_stmt_228/do_while_stmt_228_loop_body/array_obj_ref_258_Update/array_obj_ref_258_Merge/merge_ack)
  array_obj_ref_258_load_0 <=> (branch_block_stmt_215/branch_block_stmt_227/do_while_stmt_228/do_while_stmt_228_loop_body/array_obj_ref_258_Sample/word_access_start/word_0/rr branch_block_stmt_215/branch_block_stmt_227/do_while_stmt_228/do_while_stmt_228_loop_body/array_obj_ref_258_Update/word_access_complete/word_0/cr) (branch_block_stmt_215/branch_block_stmt_227/do_while_stmt_228/do_while_stmt_228_loop_body/array_obj_ref_258_Sample/word_access_start/word_0/ra branch_block_stmt_215/branch_block_stmt_227/do_while_stmt_228/do_while_stmt_228_loop_body/array_obj_ref_258_Update/word_access_complete/word_0/ca)
  // 				ppp := C_MEM[index][C] $buffering 1// bits of buffering = 32. 
  //  file .Aa/mvp.opt.aa, line 121
  // C_MEM[index][C]
  // index
  array_obj_ref_263_index_0_resize <=> (branch_block_stmt_215/branch_block_stmt_227/do_while_stmt_228/do_while_stmt_228_loop_body/array_obj_ref_263_index_resize_0/index_resize_req) (branch_block_stmt_215/branch_block_stmt_227/do_while_stmt_228/do_while_stmt_228_loop_body/array_obj_ref_263_index_resize_0/index_resize_ack)
  array_obj_ref_263_index_0_scale <=> (branch_block_stmt_215/branch_block_stmt_227/do_while_stmt_228/do_while_stmt_228_loop_body/array_obj_ref_263_index_scale_0_Sample/rr branch_block_stmt_215/branch_block_stmt_227/do_while_stmt_228/do_while_stmt_228_loop_body/array_obj_ref_263_index_scale_0_Update/cr) (branch_block_stmt_215/branch_block_stmt_227/do_while_stmt_228/do_while_stmt_228_loop_body/array_obj_ref_263_index_scale_0_Sample/ra branch_block_stmt_215/branch_block_stmt_227/do_while_stmt_228/do_while_stmt_228_loop_body/array_obj_ref_263_index_scale_0_Update/ca)
  // C
  array_obj_ref_263_index_1_resize <=> (branch_block_stmt_215/branch_block_stmt_227/do_while_stmt_228/do_while_stmt_228_loop_body/array_obj_ref_263_index_resize_1/index_resize_req) (branch_block_stmt_215/branch_block_stmt_227/do_while_stmt_228/do_while_stmt_228_loop_body/array_obj_ref_263_index_resize_1/index_resize_ack)
  array_obj_ref_263_index_1_rename <=> (branch_block_stmt_215/branch_block_stmt_227/do_while_stmt_228/do_while_stmt_228_loop_body/array_obj_ref_263_index_scale_1/scale_rename_req) (branch_block_stmt_215/branch_block_stmt_227/do_while_stmt_228/do_while_stmt_228_loop_body/array_obj_ref_263_index_scale_1/scale_rename_ack)
  array_obj_ref_263_index_sum_1 <=> (branch_block_stmt_215/branch_block_stmt_227/do_while_stmt_228/do_while_stmt_228_loop_body/array_obj_ref_263_partial_sum_1_Sample/rr branch_block_stmt_215/branch_block_stmt_227/do_while_stmt_228/do_while_stmt_228_loop_body/array_obj_ref_263_partial_sum_1_Update/cr) (branch_block_stmt_215/branch_block_stmt_227/do_while_stmt_228/do_while_stmt_228_loop_body/array_obj_ref_263_partial_sum_1_Sample/ra branch_block_stmt_215/branch_block_stmt_227/do_while_stmt_228/do_while_stmt_228_loop_body/array_obj_ref_263_partial_sum_1_Update/ca)
  array_obj_ref_263_index_offset <=> (branch_block_stmt_215/branch_block_stmt_227/do_while_stmt_228/do_while_stmt_228_loop_body/array_obj_ref_263_final_index_sum_regn/req) (branch_block_stmt_215/branch_block_stmt_227/do_while_stmt_228/do_while_stmt_228_loop_body/array_obj_ref_263_final_index_sum_regn/ack)
  array_obj_ref_263_root_address_inst <=> (branch_block_stmt_215/branch_block_stmt_227/do_while_stmt_228/do_while_stmt_228_loop_body/array_obj_ref_263_base_plus_offset/sum_rename_req) (branch_block_stmt_215/branch_block_stmt_227/do_while_stmt_228/do_while_stmt_228_loop_body/array_obj_ref_263_base_plus_offset/sum_rename_ack)
  array_obj_ref_263_addr_0 <=> (branch_block_stmt_215/branch_block_stmt_227/do_while_stmt_228/do_while_stmt_228_loop_body/array_obj_ref_263_word_addrgen/root_register_req) (branch_block_stmt_215/branch_block_stmt_227/do_while_stmt_228/do_while_stmt_228_loop_body/array_obj_ref_263_word_addrgen/root_register_ack)
  array_obj_ref_263_gather_scatter <=> (branch_block_stmt_215/branch_block_stmt_227/do_while_stmt_228/do_while_stmt_228_loop_body/array_obj_ref_263_Update/array_obj_ref_263_Merge/merge_req) (branch_block_stmt_215/branch_block_stmt_227/do_while_stmt_228/do_while_stmt_228_loop_body/array_obj_ref_263_Update/array_obj_ref_263_Merge/merge_ack)
  array_obj_ref_263_load_0 <=> (branch_block_stmt_215/branch_block_stmt_227/do_while_stmt_228/do_while_stmt_228_loop_body/array_obj_ref_263_Sample/word_access_start/word_0/rr branch_block_stmt_215/branch_block_stmt_227/do_while_stmt_228/do_while_stmt_228_loop_body/array_obj_ref_263_Update/word_access_complete/word_0/cr) (branch_block_stmt_215/branch_block_stmt_227/do_while_stmt_228/do_while_stmt_228_loop_body/array_obj_ref_263_Sample/word_access_start/word_0/ra branch_block_stmt_215/branch_block_stmt_227/do_while_stmt_228/do_while_stmt_228_loop_body/array_obj_ref_263_Update/word_access_complete/word_0/ca)
  // 				pppp := D_MEM[index][C] $buffering 1// bits of buffering = 32. 
  //  file .Aa/mvp.opt.aa, line 122
  // D_MEM[index][C]
  // index
  array_obj_ref_268_index_0_resize <=> (branch_block_stmt_215/branch_block_stmt_227/do_while_stmt_228/do_while_stmt_228_loop_body/array_obj_ref_268_index_resize_0/index_resize_req) (branch_block_stmt_215/branch_block_stmt_227/do_while_stmt_228/do_while_stmt_228_loop_body/array_obj_ref_268_index_resize_0/index_resize_ack)
  array_obj_ref_268_index_0_scale <=> (branch_block_stmt_215/branch_block_stmt_227/do_while_stmt_228/do_while_stmt_228_loop_body/array_obj_ref_268_index_scale_0_Sample/rr branch_block_stmt_215/branch_block_stmt_227/do_while_stmt_228/do_while_stmt_228_loop_body/array_obj_ref_268_index_scale_0_Update/cr) (branch_block_stmt_215/branch_block_stmt_227/do_while_stmt_228/do_while_stmt_228_loop_body/array_obj_ref_268_index_scale_0_Sample/ra branch_block_stmt_215/branch_block_stmt_227/do_while_stmt_228/do_while_stmt_228_loop_body/array_obj_ref_268_index_scale_0_Update/ca)
  // C
  array_obj_ref_268_index_1_resize <=> (branch_block_stmt_215/branch_block_stmt_227/do_while_stmt_228/do_while_stmt_228_loop_body/array_obj_ref_268_index_resize_1/index_resize_req) (branch_block_stmt_215/branch_block_stmt_227/do_while_stmt_228/do_while_stmt_228_loop_body/array_obj_ref_268_index_resize_1/index_resize_ack)
  array_obj_ref_268_index_1_rename <=> (branch_block_stmt_215/branch_block_stmt_227/do_while_stmt_228/do_while_stmt_228_loop_body/array_obj_ref_268_index_scale_1/scale_rename_req) (branch_block_stmt_215/branch_block_stmt_227/do_while_stmt_228/do_while_stmt_228_loop_body/array_obj_ref_268_index_scale_1/scale_rename_ack)
  array_obj_ref_268_index_sum_1 <=> (branch_block_stmt_215/branch_block_stmt_227/do_while_stmt_228/do_while_stmt_228_loop_body/array_obj_ref_268_partial_sum_1_Sample/rr branch_block_stmt_215/branch_block_stmt_227/do_while_stmt_228/do_while_stmt_228_loop_body/array_obj_ref_268_partial_sum_1_Update/cr) (branch_block_stmt_215/branch_block_stmt_227/do_while_stmt_228/do_while_stmt_228_loop_body/array_obj_ref_268_partial_sum_1_Sample/ra branch_block_stmt_215/branch_block_stmt_227/do_while_stmt_228/do_while_stmt_228_loop_body/array_obj_ref_268_partial_sum_1_Update/ca)
  array_obj_ref_268_index_offset <=> (branch_block_stmt_215/branch_block_stmt_227/do_while_stmt_228/do_while_stmt_228_loop_body/array_obj_ref_268_final_index_sum_regn/req) (branch_block_stmt_215/branch_block_stmt_227/do_while_stmt_228/do_while_stmt_228_loop_body/array_obj_ref_268_final_index_sum_regn/ack)
  array_obj_ref_268_root_address_inst <=> (branch_block_stmt_215/branch_block_stmt_227/do_while_stmt_228/do_while_stmt_228_loop_body/array_obj_ref_268_base_plus_offset/sum_rename_req) (branch_block_stmt_215/branch_block_stmt_227/do_while_stmt_228/do_while_stmt_228_loop_body/array_obj_ref_268_base_plus_offset/sum_rename_ack)
  array_obj_ref_268_addr_0 <=> (branch_block_stmt_215/branch_block_stmt_227/do_while_stmt_228/do_while_stmt_228_loop_body/array_obj_ref_268_word_addrgen/root_register_req) (branch_block_stmt_215/branch_block_stmt_227/do_while_stmt_228/do_while_stmt_228_loop_body/array_obj_ref_268_word_addrgen/root_register_ack)
  array_obj_ref_268_gather_scatter <=> (branch_block_stmt_215/branch_block_stmt_227/do_while_stmt_228/do_while_stmt_228_loop_body/array_obj_ref_268_Update/array_obj_ref_268_Merge/merge_req) (branch_block_stmt_215/branch_block_stmt_227/do_while_stmt_228/do_while_stmt_228_loop_body/array_obj_ref_268_Update/array_obj_ref_268_Merge/merge_ack)
  array_obj_ref_268_load_0 <=> (branch_block_stmt_215/branch_block_stmt_227/do_while_stmt_228/do_while_stmt_228_loop_body/array_obj_ref_268_Sample/word_access_start/word_0/rr branch_block_stmt_215/branch_block_stmt_227/do_while_stmt_228/do_while_stmt_228_loop_body/array_obj_ref_268_Update/word_access_complete/word_0/cr) (branch_block_stmt_215/branch_block_stmt_227/do_while_stmt_228/do_while_stmt_228_loop_body/array_obj_ref_268_Sample/word_access_start/word_0/ra branch_block_stmt_215/branch_block_stmt_227/do_while_stmt_228/do_while_stmt_228_loop_body/array_obj_ref_268_Update/word_access_complete/word_0/ca)
  // 				mp := products_pipe $buffering 1// bits of buffering = 32. 
  //  file .Aa/mvp.opt.aa, line 123
  // products_pipe
  RPIPE_products_pipe_271_inst <=> (branch_block_stmt_215/branch_block_stmt_227/do_while_stmt_228/do_while_stmt_228_loop_body/RPIPE_products_pipe_271_Sample/rr branch_block_stmt_215/branch_block_stmt_227/do_while_stmt_228/do_while_stmt_228_loop_body/RPIPE_products_pipe_271_Update/cr) (branch_block_stmt_215/branch_block_stmt_227/do_while_stmt_228/do_while_stmt_228_loop_body/RPIPE_products_pipe_271_Sample/ra branch_block_stmt_215/branch_block_stmt_227/do_while_stmt_228/do_while_stmt_228_loop_body/RPIPE_products_pipe_271_Update/ca)
  // 				mp1 := products_pipe $buffering 1// bits of buffering = 32. 
  //  file .Aa/mvp.opt.aa, line 124
  // products_pipe
  RPIPE_products_pipe_274_inst <=> (branch_block_stmt_215/branch_block_stmt_227/do_while_stmt_228/do_while_stmt_228_loop_body/RPIPE_products_pipe_274_Sample/rr branch_block_stmt_215/branch_block_stmt_227/do_while_stmt_228/do_while_stmt_228_loop_body/RPIPE_products_pipe_274_Update/cr) (branch_block_stmt_215/branch_block_stmt_227/do_while_stmt_228/do_while_stmt_228_loop_body/RPIPE_products_pipe_274_Sample/ra branch_block_stmt_215/branch_block_stmt_227/do_while_stmt_228/do_while_stmt_228_loop_body/RPIPE_products_pipe_274_Update/ca)
  // 				mp2 := products_pipe $buffering 1// bits of buffering = 32. 
  //  file .Aa/mvp.opt.aa, line 125
  // products_pipe
  RPIPE_products_pipe_277_inst <=> (branch_block_stmt_215/branch_block_stmt_227/do_while_stmt_228/do_while_stmt_228_loop_body/RPIPE_products_pipe_277_Sample/rr branch_block_stmt_215/branch_block_stmt_227/do_while_stmt_228/do_while_stmt_228_loop_body/RPIPE_products_pipe_277_Update/cr) (branch_block_stmt_215/branch_block_stmt_227/do_while_stmt_228/do_while_stmt_228_loop_body/RPIPE_products_pipe_277_Sample/ra branch_block_stmt_215/branch_block_stmt_227/do_while_stmt_228/do_while_stmt_228_loop_body/RPIPE_products_pipe_277_Update/ca)
  // 				mp3 := products_pipe $buffering 1// bits of buffering = 32. 
  //  file .Aa/mvp.opt.aa, line 126
  // products_pipe
  RPIPE_products_pipe_280_inst <=> (branch_block_stmt_215/branch_block_stmt_227/do_while_stmt_228/do_while_stmt_228_loop_body/RPIPE_products_pipe_280_Sample/rr branch_block_stmt_215/branch_block_stmt_227/do_while_stmt_228/do_while_stmt_228_loop_body/RPIPE_products_pipe_280_Update/cr) (branch_block_stmt_215/branch_block_stmt_227/do_while_stmt_228/do_while_stmt_228_loop_body/RPIPE_products_pipe_280_Sample/ra branch_block_stmt_215/branch_block_stmt_227/do_while_stmt_228/do_while_stmt_228_loop_body/RPIPE_products_pipe_280_Update/ca)
  // 				mp_298_delayed_5_0 := mp $buffering 5 $cut_through // bits of buffering = 160. 
  //  file .Aa/mvp.opt.aa, line 127
  // mp
  W_mp_298_delayed_5_0_282_inst <=> (branch_block_stmt_215/branch_block_stmt_227/do_while_stmt_228/do_while_stmt_228_loop_body/assign_stmt_284_Sample/req branch_block_stmt_215/branch_block_stmt_227/do_while_stmt_228/do_while_stmt_228_loop_body/assign_stmt_284_Update/req) (branch_block_stmt_215/branch_block_stmt_227/do_while_stmt_228/do_while_stmt_228_loop_body/assign_stmt_284_Sample/ack branch_block_stmt_215/branch_block_stmt_227/do_while_stmt_228/do_while_stmt_228_loop_body/assign_stmt_284_Update/ack)
  // 				products_pipe := (mp_298_delayed_5_0 + (p * x)) $buffering 1// bits of buffering = 32. 
  //  file .Aa/mvp.opt.aa, line 128
  // (mp_298_delayed_5_0 + (p * x))
  // mp_298_delayed_5_0
  // (p * x)
  // p
  // x
  ADD_u32_u32_290_inst <=> (branch_block_stmt_215/branch_block_stmt_227/do_while_stmt_228/do_while_stmt_228_loop_body/ADD_u32_u32_290_Sample/rr branch_block_stmt_215/branch_block_stmt_227/do_while_stmt_228/do_while_stmt_228_loop_body/ADD_u32_u32_290_Update/cr) (branch_block_stmt_215/branch_block_stmt_227/do_while_stmt_228/do_while_stmt_228_loop_body/ADD_u32_u32_290_Sample/ra branch_block_stmt_215/branch_block_stmt_227/do_while_stmt_228/do_while_stmt_228_loop_body/ADD_u32_u32_290_Update/ca)
  // products_pipe
  WPIPE_products_pipe_285_inst <=> (branch_block_stmt_215/branch_block_stmt_227/do_while_stmt_228/do_while_stmt_228_loop_body/WPIPE_products_pipe_285_Sample/req branch_block_stmt_215/branch_block_stmt_227/do_while_stmt_228/do_while_stmt_228_loop_body/WPIPE_products_pipe_285_Update/req) (branch_block_stmt_215/branch_block_stmt_227/do_while_stmt_228/do_while_stmt_228_loop_body/WPIPE_products_pipe_285_Sample/ack branch_block_stmt_215/branch_block_stmt_227/do_while_stmt_228/do_while_stmt_228_loop_body/WPIPE_products_pipe_285_Update/ack)
  // 				mp1_305_delayed_5_0 := mp1 $buffering 5 $cut_through // bits of buffering = 160. 
  //  file .Aa/mvp.opt.aa, line 129
  // mp1
  W_mp1_305_delayed_5_0_292_inst <=> (branch_block_stmt_215/branch_block_stmt_227/do_while_stmt_228/do_while_stmt_228_loop_body/assign_stmt_294_Sample/req branch_block_stmt_215/branch_block_stmt_227/do_while_stmt_228/do_while_stmt_228_loop_body/assign_stmt_294_Update/req) (branch_block_stmt_215/branch_block_stmt_227/do_while_stmt_228/do_while_stmt_228_loop_body/assign_stmt_294_Sample/ack branch_block_stmt_215/branch_block_stmt_227/do_while_stmt_228/do_while_stmt_228_loop_body/assign_stmt_294_Update/ack)
  // 				products_pipe := (mp1_305_delayed_5_0 + (pp * x)) $buffering 1// bits of buffering = 32. 
  //  file .Aa/mvp.opt.aa, line 130
  // (mp1_305_delayed_5_0 + (pp * x))
  // mp1_305_delayed_5_0
  // (pp * x)
  // pp
  // x
  ADD_u32_u32_300_inst <=> (branch_block_stmt_215/branch_block_stmt_227/do_while_stmt_228/do_while_stmt_228_loop_body/ADD_u32_u32_300_Sample/rr branch_block_stmt_215/branch_block_stmt_227/do_while_stmt_228/do_while_stmt_228_loop_body/ADD_u32_u32_300_Update/cr) (branch_block_stmt_215/branch_block_stmt_227/do_while_stmt_228/do_while_stmt_228_loop_body/ADD_u32_u32_300_Sample/ra branch_block_stmt_215/branch_block_stmt_227/do_while_stmt_228/do_while_stmt_228_loop_body/ADD_u32_u32_300_Update/ca)
  // products_pipe
  WPIPE_products_pipe_295_inst <=> (branch_block_stmt_215/branch_block_stmt_227/do_while_stmt_228/do_while_stmt_228_loop_body/WPIPE_products_pipe_295_Sample/req branch_block_stmt_215/branch_block_stmt_227/do_while_stmt_228/do_while_stmt_228_loop_body/WPIPE_products_pipe_295_Update/req) (branch_block_stmt_215/branch_block_stmt_227/do_while_stmt_228/do_while_stmt_228_loop_body/WPIPE_products_pipe_295_Sample/ack branch_block_stmt_215/branch_block_stmt_227/do_while_stmt_228/do_while_stmt_228_loop_body/WPIPE_products_pipe_295_Update/ack)
  // 				mp2_312_delayed_5_0 := mp2 $buffering 5 $cut_through // bits of buffering = 160. 
  //  file .Aa/mvp.opt.aa, line 131
  // mp2
  W_mp2_312_delayed_5_0_302_inst <=> (branch_block_stmt_215/branch_block_stmt_227/do_while_stmt_228/do_while_stmt_228_loop_body/assign_stmt_304_Sample/req branch_block_stmt_215/branch_block_stmt_227/do_while_stmt_228/do_while_stmt_228_loop_body/assign_stmt_304_Update/req) (branch_block_stmt_215/branch_block_stmt_227/do_while_stmt_228/do_while_stmt_228_loop_body/assign_stmt_304_Sample/ack branch_block_stmt_215/branch_block_stmt_227/do_while_stmt_228/do_while_stmt_228_loop_body/assign_stmt_304_Update/ack)
  // 				products_pipe := (mp2_312_delayed_5_0 + (ppp * x)) $buffering 1// bits of buffering = 32. 
  //  file .Aa/mvp.opt.aa, line 132
  // (mp2_312_delayed_5_0 + (ppp * x))
  // mp2_312_delayed_5_0
  // (ppp * x)
  // ppp
  // x
  ADD_u32_u32_310_inst <=> (branch_block_stmt_215/branch_block_stmt_227/do_while_stmt_228/do_while_stmt_228_loop_body/ADD_u32_u32_310_Sample/rr branch_block_stmt_215/branch_block_stmt_227/do_while_stmt_228/do_while_stmt_228_loop_body/ADD_u32_u32_310_Update/cr) (branch_block_stmt_215/branch_block_stmt_227/do_while_stmt_228/do_while_stmt_228_loop_body/ADD_u32_u32_310_Sample/ra branch_block_stmt_215/branch_block_stmt_227/do_while_stmt_228/do_while_stmt_228_loop_body/ADD_u32_u32_310_Update/ca)
  // products_pipe
  WPIPE_products_pipe_305_inst <=> (branch_block_stmt_215/branch_block_stmt_227/do_while_stmt_228/do_while_stmt_228_loop_body/WPIPE_products_pipe_305_Sample/req branch_block_stmt_215/branch_block_stmt_227/do_while_stmt_228/do_while_stmt_228_loop_body/WPIPE_products_pipe_305_Update/req) (branch_block_stmt_215/branch_block_stmt_227/do_while_stmt_228/do_while_stmt_228_loop_body/WPIPE_products_pipe_305_Sample/ack branch_block_stmt_215/branch_block_stmt_227/do_while_stmt_228/do_while_stmt_228_loop_body/WPIPE_products_pipe_305_Update/ack)
  // 				mp3_319_delayed_5_0 := mp3 $buffering 5 $cut_through // bits of buffering = 160. 
  //  file .Aa/mvp.opt.aa, line 133
  // mp3
  W_mp3_319_delayed_5_0_312_inst <=> (branch_block_stmt_215/branch_block_stmt_227/do_while_stmt_228/do_while_stmt_228_loop_body/assign_stmt_314_Sample/req branch_block_stmt_215/branch_block_stmt_227/do_while_stmt_228/do_while_stmt_228_loop_body/assign_stmt_314_Update/req) (branch_block_stmt_215/branch_block_stmt_227/do_while_stmt_228/do_while_stmt_228_loop_body/assign_stmt_314_Sample/ack branch_block_stmt_215/branch_block_stmt_227/do_while_stmt_228/do_while_stmt_228_loop_body/assign_stmt_314_Update/ack)
  // 				products_pipe := (mp3_319_delayed_5_0 + (pppp * x)) $buffering 1// bits of buffering = 32. 
  //  file .Aa/mvp.opt.aa, line 134
  // (mp3_319_delayed_5_0 + (pppp * x))
  // mp3_319_delayed_5_0
  // (pppp * x)
  // pppp
  // x
  ADD_u32_u32_320_inst <=> (branch_block_stmt_215/branch_block_stmt_227/do_while_stmt_228/do_while_stmt_228_loop_body/ADD_u32_u32_320_Sample/rr branch_block_stmt_215/branch_block_stmt_227/do_while_stmt_228/do_while_stmt_228_loop_body/ADD_u32_u32_320_Update/cr) (branch_block_stmt_215/branch_block_stmt_227/do_while_stmt_228/do_while_stmt_228_loop_body/ADD_u32_u32_320_Sample/ra branch_block_stmt_215/branch_block_stmt_227/do_while_stmt_228/do_while_stmt_228_loop_body/ADD_u32_u32_320_Update/ca)
  // products_pipe
  WPIPE_products_pipe_315_inst <=> (branch_block_stmt_215/branch_block_stmt_227/do_while_stmt_228/do_while_stmt_228_loop_body/WPIPE_products_pipe_315_Sample/req branch_block_stmt_215/branch_block_stmt_227/do_while_stmt_228/do_while_stmt_228_loop_body/WPIPE_products_pipe_315_Update/req) (branch_block_stmt_215/branch_block_stmt_227/do_while_stmt_228/do_while_stmt_228_loop_body/WPIPE_products_pipe_315_Sample/ack branch_block_stmt_215/branch_block_stmt_227/do_while_stmt_228/do_while_stmt_228_loop_body/WPIPE_products_pipe_315_Update/ack)
  // (NR < 32 )
  // NR
  do_while_stmt_228_branch <=> (branch_block_stmt_215/branch_block_stmt_227/do_while_stmt_228/do_while_stmt_228_loop_body/condition_evaluated) (branch_block_stmt_215/branch_block_stmt_227/do_while_stmt_228/loop_exit/ack branch_block_stmt_215/branch_block_stmt_227/do_while_stmt_228/loop_taken/ack)
  // 		NC := (C + 1 ) $buffering 1// bits of buffering = 8. 
  //  file .Aa/mvp.opt.aa, line 137
  // (C + 1 )
  // C
  ADD_u8_u8_330_inst <=> (branch_block_stmt_215/assign_stmt_331/ADD_u8_u8_330_Sample/rr branch_block_stmt_215/assign_stmt_331/ADD_u8_u8_330_Update/cr) (branch_block_stmt_215/assign_stmt_331/ADD_u8_u8_330_Sample/ra branch_block_stmt_215/assign_stmt_331/ADD_u8_u8_330_Update/ca)
  // CP-DP links for if  
  //  file .Aa/mvp.opt.aa, line 0
  // (NC < 32 )
  if_stmt_332_branch <=> (branch_block_stmt_215/if_stmt_332_eval_test/branch_req) (branch_block_stmt_215/if_stmt_332_else_link/else_choice_transition branch_block_stmt_215/if_stmt_332_if_link/if_choice_transition)
  // CP-DP links for do-while  do_while_stmt_340
  //  file .Aa/mvp.opt.aa, line 144
  phi_stmt_342 <=> (branch_block_stmt_339/do_while_stmt_340/do_while_stmt_340_loop_body/phi_stmt_342_entry_sample_req branch_block_stmt_339/do_while_stmt_340/do_while_stmt_340_loop_body/phi_stmt_342_loopback_sample_req) (branch_block_stmt_339/do_while_stmt_340/do_while_stmt_340_loop_body/phi_stmt_342_phi_mux_ack)
  nK_360_346_buf <=> (branch_block_stmt_339/do_while_stmt_340/do_while_stmt_340_loop_body/R_nK_346_Sample/req branch_block_stmt_339/do_while_stmt_340/do_while_stmt_340_loop_body/R_nK_346_Update/req) (branch_block_stmt_339/do_while_stmt_340/do_while_stmt_340_loop_body/R_nK_346_Sample/ack branch_block_stmt_339/do_while_stmt_340/do_while_stmt_340_loop_body/R_nK_346_Update/ack)
  // 			out_data := products_pipe $buffering 1// bits of buffering = 32. 
  //  file .Aa/mvp.opt.aa, line 151
  // products_pipe
  RPIPE_products_pipe_351_inst <=> (branch_block_stmt_339/do_while_stmt_340/do_while_stmt_340_loop_body/RPIPE_products_pipe_351_Sample/rr branch_block_stmt_339/do_while_stmt_340/do_while_stmt_340_loop_body/RPIPE_products_pipe_351_Update/cr) (branch_block_stmt_339/do_while_stmt_340/do_while_stmt_340_loop_body/RPIPE_products_pipe_351_Sample/ra branch_block_stmt_339/do_while_stmt_340/do_while_stmt_340_loop_body/RPIPE_products_pipe_351_Update/ca)
  // out_data
  WPIPE_out_data_350_inst <=> (branch_block_stmt_339/do_while_stmt_340/do_while_stmt_340_loop_body/WPIPE_out_data_350_Sample/req branch_block_stmt_339/do_while_stmt_340/do_while_stmt_340_loop_body/WPIPE_out_data_350_Update/req) (branch_block_stmt_339/do_while_stmt_340/do_while_stmt_340_loop_body/WPIPE_out_data_350_Sample/ack branch_block_stmt_339/do_while_stmt_340/do_while_stmt_340_loop_body/WPIPE_out_data_350_Update/ack)
  // 			products_pipe := 0  $buffering 1// bits of buffering = 32. 
  //  file .Aa/mvp.opt.aa, line 152
  // products_pipe
  WPIPE_products_pipe_353_inst <=> (branch_block_stmt_339/do_while_stmt_340/do_while_stmt_340_loop_body/WPIPE_products_pipe_353_Sample/req branch_block_stmt_339/do_while_stmt_340/do_while_stmt_340_loop_body/WPIPE_products_pipe_353_Update/req) (branch_block_stmt_339/do_while_stmt_340/do_while_stmt_340_loop_body/WPIPE_products_pipe_353_Sample/ack branch_block_stmt_339/do_while_stmt_340/do_while_stmt_340_loop_body/WPIPE_products_pipe_353_Update/ack)
  // 			$volatile nK := (K + 1 ) $buffering 1
  //  file .Aa/mvp.opt.aa, line 153
  // (K + 1 )
  // K
  // (nK < 32 )
  // nK
  do_while_stmt_340_branch <=> (branch_block_stmt_339/do_while_stmt_340/do_while_stmt_340_loop_body/condition_evaluated) (branch_block_stmt_339/do_while_stmt_340/loop_exit/ack branch_block_stmt_339/do_while_stmt_340/loop_taken/ack)
}
$module [mvp_daemon] 
{
  // pipe-declarations for block %mvp_daemon
  //  file .Aa/mvp.opt.aa, line 157
  // pipe-declarations for block %mvp_daemon%parinitrea
  //  file .Aa/mvp.opt.aa, line 162
  // pipe-declarations for block %mvp_daemon%loop
  //  file .Aa/mvp.opt.aa, line 167
  // pipe-declarations for block %mvp_daemon%loop%
  //  file .Aa/mvp.opt.aa, line 169
  // there are no memory spaces local to this module.
  $CP 
  {
    // begin control-path 
    ||[parallel_block_stmt_368] 
    {
      ::[call_stmt_369] 
      {
        // start: 		$call readMatrix () () 
        //  file .Aa/mvp.opt.aa, line 164
        $T[call_stmt_369_sample_start_] 
        $T[call_stmt_369_sample_completed_] 
        $T[call_stmt_369_update_start_] 
        $T[call_stmt_369_update_completed_] 
        ;;[call_stmt_369_Sample] 
        {
          $T [crr] $T [cra] 
        }
        ;;[call_stmt_369_Update] 
        {
          $T [ccr] $T [cca] 
        }
        call_stmt_369_sample_start_ &-> (call_stmt_369_Sample)
        call_stmt_369_sample_completed_ <-& (call_stmt_369_Sample)
        call_stmt_369_sample_completed_ &-> ($null)
        call_stmt_369_update_start_ &-> (call_stmt_369_Update)
        call_stmt_369_update_completed_ <-& (call_stmt_369_Update)
        // end: 		$call readMatrix () () 
        // load-store dependencies..
        // memory-space  memory_space_1
        //  call_stmt_369 store
        // memory-space  memory_space_2
        //  call_stmt_369 store
        // memory-space  memory_space_3
        //  call_stmt_369 store
        // memory-space  memory_space_0
        //  call_stmt_369 store
        // pipe read/write dependencies for pipe in_data
        // read-dependencies for pipe in_data
        // write-dependencies for pipe in_data
        // signal write dependencies for in_data
      }
      ::[call_stmt_370] 
      {
        // start: 		$call mem_init () () 
        //  file .Aa/mvp.opt.aa, line 165
        $T[call_stmt_370_sample_start_] 
        $T[call_stmt_370_sample_completed_] 
        $T[call_stmt_370_update_start_] 
        $T[call_stmt_370_update_completed_] 
        ;;[call_stmt_370_Sample] 
        {
          $T [crr] $T [cra] 
        }
        ;;[call_stmt_370_Update] 
        {
          $T [ccr] $T [cca] 
        }
        call_stmt_370_sample_start_ &-> (call_stmt_370_Sample)
        call_stmt_370_sample_completed_ <-& (call_stmt_370_Sample)
        call_stmt_370_sample_completed_ &-> ($null)
        call_stmt_370_update_start_ &-> (call_stmt_370_Update)
        call_stmt_370_update_completed_ <-& (call_stmt_370_Update)
        // end: 		$call mem_init () () 
        // load-store dependencies..
        // pipe read/write dependencies for pipe products_pipe
        // read-dependencies for pipe products_pipe
        // write-dependencies for pipe products_pipe
        // signal write dependencies for products_pipe
      }
    }
    <>[branch_block_stmt_372] // Branch Block  file .Aa/mvp.opt.aa, line 167
    {
      $P [branch_block_stmt_372__entry__]
      branch_block_stmt_372__entry__ <-| ($entry)
      $P [branch_block_stmt_372__exit__]
      branch_block_stmt_372__exit__ |-> ($exit)
      $P [merge_stmt_373__entry__] 
      $P [merge_stmt_373__exit__] 
      $P [call_stmt_375__entry__] 
      $P [call_stmt_375__exit__] 
      $P [loopback]
      ::[call_stmt_375] 
      {
        // start: 		$call mvp_unit () () 
        //  file .Aa/mvp.opt.aa, line 172
        $T[call_stmt_375_sample_start_] 
        $T[call_stmt_375_sample_completed_] 
        $T[call_stmt_375_update_start_] 
        $T[call_stmt_375_update_completed_] 
        ;;[call_stmt_375_Sample] 
        {
          $T [crr] $T [cra] 
        }
        ;;[call_stmt_375_Update] 
        {
          $T [ccr] $T [cca] 
        }
        call_stmt_375_sample_start_ &-> (call_stmt_375_Sample)
        call_stmt_375_sample_completed_ <-& (call_stmt_375_Sample)
        call_stmt_375_sample_completed_ &-> ($null)
        call_stmt_375_update_start_ &-> (call_stmt_375_Update)
        call_stmt_375_update_completed_ <-& (call_stmt_375_Update)
        // end: 		$call mvp_unit () () 
        // load-store dependencies..
        // memory-space  memory_space_1
        //  call_stmt_375 load
        // memory-space  memory_space_2
        //  call_stmt_375 load
        // memory-space  memory_space_3
        //  call_stmt_375 load
        // memory-space  memory_space_0
        //  call_stmt_375 load
        // pipe read/write dependencies for pipe in_data
        // read-dependencies for pipe in_data
        // write-dependencies for pipe in_data
        // signal write dependencies for in_data
        // pipe read/write dependencies for pipe out_data
        // read-dependencies for pipe out_data
        // write-dependencies for pipe out_data
        // signal write dependencies for out_data
        // pipe read/write dependencies for pipe products_pipe
        // read-dependencies for pipe products_pipe
        // write-dependencies for pipe products_pipe
        // signal write dependencies for products_pipe
      }
      call_stmt_375__entry__ |-> (call_stmt_375)
      call_stmt_375__exit__ <-| (call_stmt_375)
      // control-path for merge  
      //  file .Aa/mvp.opt.aa, line 169
      ;;[merge_stmt_373_dead_link] 
      {
        $T [dead_transition] $dead 
      }
      merge_stmt_373__entry__ |-> (merge_stmt_373_dead_link)
      merge_stmt_373__exit__ <-| (merge_stmt_373_dead_link)
      //---------------------   merge statement  file .Aa/mvp.opt.aa, line 169  --------------------------
      ||[merge_stmt_373__entry___PhiReq] 
      {
        // no phi statements in merge..
      }
      merge_stmt_373__entry__ |-> (merge_stmt_373__entry___PhiReq)
      ||[loopback_PhiReq] 
      {
        // no phi statements in merge..
      }
      loopback |-> (loopback_PhiReq)
      $P [merge_stmt_373_PhiReqMerge] 
      merge_stmt_373_PhiReqMerge <-| ( merge_stmt_373__entry___PhiReq  loopback_PhiReq )
      ||[merge_stmt_373_PhiAck] 
      {
        $T [dummy] 
      }
      merge_stmt_373_PhiReqMerge |-> (merge_stmt_373_PhiAck)
      merge_stmt_373__exit__  <-| (merge_stmt_373_PhiAck)
      //---------------------  end of merge statement  file .Aa/mvp.opt.aa, line 169  --------------------------
      merge_stmt_373__entry__ <-| (branch_block_stmt_372__entry__)
      call_stmt_375__entry__ <-| (merge_stmt_373__exit__)
      loopback <-| (call_stmt_375__exit__)
    }
  }
  // end control-path
  $DP 
  {
    // begin data-path 
    // constant-object-declarations for block %mvp_daemon%parinitrea
    //  file .Aa/mvp.opt.aa, line 162
    // constant-object-declarations for block %mvp_daemon%loop%
    //  file .Aa/mvp.opt.aa, line 169
    // constant-object-declarations for block %mvp_daemon%loop
    //  file .Aa/mvp.opt.aa, line 167
    // constant-object-declarations for block %mvp_daemon
    //  file .Aa/mvp.opt.aa, line 157
    // constant-declarations for block %mvp_daemon%parinitrea
    //  file .Aa/mvp.opt.aa, line 162
    // 		$call readMatrix () () 
    //  file .Aa/mvp.opt.aa, line 164
    // 		$call mem_init () () 
    //  file .Aa/mvp.opt.aa, line 165
    // constant-declarations for block %mvp_daemon%loop
    //  file .Aa/mvp.opt.aa, line 167
    // constant-declarations for block %mvp_daemon%loop%
    //  file .Aa/mvp.opt.aa, line 169
    // 		$call mvp_unit () () 
    //  file .Aa/mvp.opt.aa, line 172
    // block %mvp_daemon%parinitrea
    //  file .Aa/mvp.opt.aa, line 162
    // 		$call readMatrix () () 
    //  file .Aa/mvp.opt.aa, line 164
    // 		$call mem_init () () 
    //  file .Aa/mvp.opt.aa, line 165
    // block %mvp_daemon%loop
    //  file .Aa/mvp.opt.aa, line 167
    // 		$call mvp_unit () () 
    //  file .Aa/mvp.opt.aa, line 172
    // datapath-instances for block %mvp_daemon%parinitrea
    //  file .Aa/mvp.opt.aa, line 162
    // 		$call readMatrix () () 
    //  file .Aa/mvp.opt.aa, line 164
    $call [call_stmt_369_call] $module readMatrix() ()  
    $delay call_stmt_369_call 4
    // 		$call mem_init () () 
    //  file .Aa/mvp.opt.aa, line 165
    $call [call_stmt_370_call] $module mem_init() ()  
    $delay call_stmt_370_call 4
    // datapath-instances for block %mvp_daemon%loop
    //  file .Aa/mvp.opt.aa, line 167
    // 		$call mvp_unit () () 
    //  file .Aa/mvp.opt.aa, line 172
    $call [call_stmt_375_call] $module mvp_unit() ()  
    $delay call_stmt_375_call 4
  }
  // end data-path
  // 		$call readMatrix () () 
  //  file .Aa/mvp.opt.aa, line 164
  call_stmt_369_call <=> (parallel_block_stmt_368/call_stmt_369/call_stmt_369_Sample/crr parallel_block_stmt_368/call_stmt_369/call_stmt_369_Update/ccr) (parallel_block_stmt_368/call_stmt_369/call_stmt_369_Sample/cra parallel_block_stmt_368/call_stmt_369/call_stmt_369_Update/cca)
  // 		$call mem_init () () 
  //  file .Aa/mvp.opt.aa, line 165
  call_stmt_370_call <=> (parallel_block_stmt_368/call_stmt_370/call_stmt_370_Sample/crr parallel_block_stmt_368/call_stmt_370/call_stmt_370_Update/ccr) (parallel_block_stmt_368/call_stmt_370/call_stmt_370_Sample/cra parallel_block_stmt_368/call_stmt_370/call_stmt_370_Update/cca)
  // CP-DP links for merge  
  //  file .Aa/mvp.opt.aa, line 169
  // 		$call mvp_unit () () 
  //  file .Aa/mvp.opt.aa, line 172
  call_stmt_375_call <=> (branch_block_stmt_372/call_stmt_375/call_stmt_375_Sample/crr branch_block_stmt_372/call_stmt_375/call_stmt_375_Update/ccr) (branch_block_stmt_372/call_stmt_375/call_stmt_375_Sample/cra branch_block_stmt_372/call_stmt_375/call_stmt_375_Update/cca)
}

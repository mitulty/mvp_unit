$storage  A_MEM : $array[8][32] $of $uint<32> // memory space index = 0  base address = 0  word size = 32
// can point into 
$storage  B_MEM : $array[8][32] $of $uint<32> // memory space index = 1  base address = 0  word size = 32
// can point into 
$storage  C_MEM : $array[8][32] $of $uint<32> // memory space index = 2  base address = 0  word size = 32
// can point into 
$storage  D_MEM : $array[8][32] $of $uint<32> // memory space index = 3  base address = 0  word size = 32
// can point into 
$storage  PPSM : $array[32] $of $uint<32> // memory space index = 4  base address = 0  word size = 1
// can point into 
$pipe  in_data : $uint<32>  $depth 2 
// can point into 
$pipe  out_data : $uint<32>  $depth 2 
// can point into 
$pipe  products_pipe : $uint<32>  $depth 32 
// can point into 
$module [global_storage_initializer_]
$in ()
$out ()
$is
{
  $null
}
$module [mem_init]
$in ()
$out ()
$is
{
  $branchblock [initloop]
  {
    $dopipeline $depth 8 $buffering 1
    $fullrate 
    $merge $entry $loopback 
    $phi J := 			  ($bitcast ($uint<8>) 0  ) $on   $entry 			  nJ $on   $loopback 
    // type of target is $uint<8>
    $endmerge
    products_pipe := 0  $buffering 1// bits of buffering = 32. 
    $report (mvp_unit initialising_memory 			 J J )
    nJ := (J + 1 ) $buffering 1// bits of buffering = 8. 
    $while (nJ < 32 )
  }
}
$module [readMatrix]
$in ()
$out ()
$is
{
  $branchblock [mRead]
  {
    $merge $entry outer_loopback 
    $phi I := 			  ($bitcast ($uint<8>) 0  ) $on   $entry 			  nI $on   outer_loopback 
    // type of target is $uint<8>
    $phi active_mem := 			  ($bitcast ($uint<2>) 0  ) $on   $entry 			  next_active_memory $on   outer_loopback 
    // type of target is $uint<2>
    $phi ia := 			  nia $on   outer_loopback 			  ($bitcast ($uint<8>) 0  ) $on   $entry 
    // type of target is $uint<8>
    $phi ib := 			  ($bitcast ($uint<8>) 0  ) $on   $entry 			  nib $on   outer_loopback 
    // type of target is $uint<8>
    $phi ic := 			  ($bitcast ($uint<8>) 0  ) $on   $entry 			  nic $on   outer_loopback 
    // type of target is $uint<8>
    $phi id := 			  ($bitcast ($uint<8>) 0  ) $on   $entry 			  nid $on   outer_loopback 
    // type of target is $uint<8>
    $endmerge
    nI := (I + 1 ) $buffering 1// bits of buffering = 8. 
    $volatile next_active_memory := ( $mux (active_mem == 0 ) 1   ( $mux (active_mem == 1 ) 2   ( $mux (active_mem == 2 ) 3   0  )  )  )  $buffering 1
    $volatile nia := ( $mux (active_mem == 0 ) (ia + 1 )  ia )  $buffering 1
    $volatile nib := ( $mux (active_mem == 1 ) (ib + 1 )  ib )  $buffering 1
    $volatile nic := ( $mux (active_mem == 2 ) (ic + 1 )  ic )  $buffering 1
    $volatile nid := ( $mux (active_mem == 3 ) (id + 1 )  id )  $buffering 1
    $volatile aTrue := (active_mem == 0 ) $buffering 1
    $volatile bTrue := (active_mem == 1 ) $buffering 1
    $volatile cTrue := (active_mem == 2 ) $buffering 1
    $volatile dTrue := (active_mem == 3 ) $buffering 1
    $branchblock [cRead]
    {
      $dopipeline $depth 7 $buffering 1
      $fullrate 
      $merge $entry $loopback 
      $phi J := 				  ($bitcast ($uint<8>) 0  ) $on   $entry 				  nJ $on   $loopback 
      // type of target is $uint<8>
      $endmerge
      nJ := (J + 1 ) $buffering 1// bits of buffering = 8. 
      aval := in_data $buffering 1// bits of buffering = 32. 
      $guard (aTrue) A_MEM[ia][J] := aval $buffering 1// bits of buffering = 32. 
      $guard (bTrue) B_MEM[ib][J] := aval $buffering 1// bits of buffering = 32. 
      $guard (cTrue) C_MEM[ic][J] := aval $buffering 1// bits of buffering = 32. 
      $guard (dTrue) D_MEM[id][J] := aval $buffering 1// bits of buffering = 32. 
      $while (nJ < 32 )
    }
    $if (nI < 32 ) $then 
    $place[outer_loopback]
    $endif
  }
}
$module [mvp_unit]
$in ()
$out ()
$is
{
  $branchblock [fetchloop]
  {
    $merge $entry loopback_outer 
    $phi C := 			  ($bitcast ($uint<8>) 0  ) $on   $entry 			  NC $on   loopback_outer 
    // type of target is $uint<8>
    $phi x := 			  in_data $on   $entry 			  in_data $on   loopback_outer 
    // type of target is $uint<32>
    $endmerge
    $branchblock [productloop]
    {
      $dopipeline $depth 8 $buffering 1
      $fullrate 
      $merge $entry $loopback 
      $phi R := 				  ($bitcast ($uint<8>) 0  ) $on   $entry 				  NR $on   $loopback 
      // type of target is $uint<8>
      $endmerge
      $report (mvp_unit mulitiplication 				 x x 				 C C 				 R R )
      NR := (R + 4 ) $buffering 1// bits of buffering = 8. 
      index := (R >> 2 ) $buffering 1// bits of buffering = 8. 
      p := A_MEM[index][C] $buffering 1// bits of buffering = 32. 
      pp := B_MEM[index][C] $buffering 1// bits of buffering = 32. 
      ppp := C_MEM[index][C] $buffering 1// bits of buffering = 32. 
      pppp := D_MEM[index][C] $buffering 1// bits of buffering = 32. 
      mp := products_pipe $buffering 1// bits of buffering = 32. 
      mp1 := products_pipe $buffering 1// bits of buffering = 32. 
      mp2 := products_pipe $buffering 1// bits of buffering = 32. 
      mp3 := products_pipe $buffering 1// bits of buffering = 32. 
      mp_298_delayed_5_0 := mp $buffering 5 $cut_through // bits of buffering = 160. 
      products_pipe := (mp_298_delayed_5_0 + (p * x)) $buffering 1// bits of buffering = 32. 
      mp1_305_delayed_5_0 := mp1 $buffering 5 $cut_through // bits of buffering = 160. 
      products_pipe := (mp1_305_delayed_5_0 + (pp * x)) $buffering 1// bits of buffering = 32. 
      mp2_312_delayed_5_0 := mp2 $buffering 5 $cut_through // bits of buffering = 160. 
      products_pipe := (mp2_312_delayed_5_0 + (ppp * x)) $buffering 1// bits of buffering = 32. 
      mp3_319_delayed_5_0 := mp3 $buffering 5 $cut_through // bits of buffering = 160. 
      products_pipe := (mp3_319_delayed_5_0 + (pppp * x)) $buffering 1// bits of buffering = 32. 
      $while (NR < 32 )
    }
    NC := (C + 1 ) $buffering 1// bits of buffering = 8. 
    $if (NC < 32 ) $then 
    $place[loopback_outer]
    $endif
  }
  $branchblock [sendloop]
  {
    $dopipeline $depth 15 $buffering 1
    $fullrate 
    $merge $entry $loopback 
    $phi K := 			  ($bitcast ($uint<8>) 0  ) $on   $entry 			  nK $on   $loopback 
    // type of target is $uint<8>
    $endmerge
    $report (mvp_unit sending_doutput 			 K K )
    out_data := products_pipe $buffering 1// bits of buffering = 32. 
    products_pipe := 0  $buffering 1// bits of buffering = 32. 
    $volatile nK := (K + 1 ) $buffering 1
    $while (nK < 32 )
  }
}
$module [mvp_daemon]
$in ()
$out ()
$is
{
  $parallelblock[parinitrea]
  {
    $call readMatrix () () 
    $call mem_init () () 
  }
  $branchblock [loop]
  {
    $merge $entry loopback 
    $endmerge
    $report (mvp_daemon branchblock_execution )
    $call mvp_unit () () 
    $place[loopback]
  }
}
// Memory space 0: A_MEM 
// Memory space 1: B_MEM 
// Memory space 2: C_MEM 
// Memory space 3: D_MEM 
// Memory space 4: PPSM 
